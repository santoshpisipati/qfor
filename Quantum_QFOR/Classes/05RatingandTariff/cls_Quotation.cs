#region "Comments"

//'***************************************************************************************************************
//'*  Company Name            :
//'*  Project Title           :    QFOR
//'***************************************************************************************************************
//'*  Created By              :    Santosh on 31-May-16
//'*  Module/Project Leader   :    Santosh Pisipati
//'*  Description             :
//'*  Module/Form/Class Name  :
//'*  Configuration ID        :
//'***************************************************************************************************************
//'*  Revision History
//'***************************************************************************************************************
//'*  Modified DateTime(DD-MON-YYYY)              Modified By                             Remarks (Bugs Related)
//'*
//'*
//'***************************************************************************************************************

#endregion "Comments"

using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using Quantum_QFOR;
using System;
using System.Collections;
using System.Data;
using System.Text;
using System.Web;

namespace Quantum_QFOR
{
    /// <summary>
    ///
    /// </summary>
    /// <seealso cref="Quantum_QFOR.CommonFeatures" />
    public class Cls_Quotation : CommonFeatures
    {
        /// <summary>
        /// The _ pk value
        /// </summary>
        private long _PkValue;

        /// <summary>
        /// The new record
        /// </summary>
        private bool NewRecord;

        /// <summary>
        /// The base current
        /// </summary>
        private string baseCur;

        /// <summary>
        /// The _ static_ col
        /// </summary>
        private int _Static_Col;

        /// <summary>
        /// The _ col_ incr
        /// </summary>
        private int _Col_Incr;

        /// <summary>
        /// The errors
        /// </summary>
        public Int32 errors = 0;

        #region "common variables"

        /// <summary>
        /// The cargo
        /// </summary>
        public Int32 cargo = 0;

        /// <summary>
        /// The cargotypes
        /// </summary>
        public Int32 cargotypes;

        #endregion "common variables"

        /// <summary>
        /// The basis_cont
        /// </summary>
        public Int32 basis_cont = 0;

        #region "Fetch Quotation Listing"

        /// <summary>
        /// Fetches the quotation listing.
        /// </summary>
        /// <param name="QuotationNo">The quotation no.</param>
        /// <param name="FromDate">From date.</param>
        /// <param name="ToDate">To date.</param>
        /// <param name="POLID">The polid.</param>
        /// <param name="POLName">Name of the pol.</param>
        /// <param name="PODID">The podid.</param>
        /// <param name="PODName">Name of the pod.</param>
        /// <param name="CustomerID">The customer identifier.</param>
        /// <param name="CustomerName">Name of the customer.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="AgentName">Name of the agent.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="ApprovalStatus">The approval status.</param>
        /// <param name="SearchType">Type of the search.</param>
        /// <param name="SortColumn">The sort column.</param>
        /// <param name="CurrentPage">The current page.</param>
        /// <param name="TotalPage">The total page.</param>
        /// <param name="SortType">Type of the sort.</param>
        /// <param name="lngUserLocFk">The LNG user loc fk.</param>
        /// <param name="flag">The flag.</param>
        /// <param name="FromPage">From page.</param>
        /// <param name="CustomerApproved">if set to <c>true</c> [customer approved].</param>
        /// <param name="Priority">The priority.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="ProcessType">Type of the process.</param>
        /// <returns></returns>
        public DataSet FetchQuotationListing(string QuotationNo = "", string FromDate = "", string ToDate = "", string POLID = "", string POLName = "", string PODID = "", string PODName = "", string CustomerID = "", string CustomerName = "", string AgentID = "",
        string AgentName = "", string CargoType = "", Int16 ApprovalStatus = 1, string SearchType = "", string SortColumn = " QUOTATION_REF_NO ", Int32 CurrentPage = 0, Int32 TotalPage = 0, string SortType = " ASC ", long lngUserLocFk = 0, Int32 flag = 0,
        string FromPage = "", bool CustomerApproved = false, int Priority = 0, string BizType = "", string ProcessType = "")
        {
            WorkFlow objWF = new WorkFlow();
            DataSet dsAll = new DataSet();

            try
            {
                var _with1 = objWF.MyCommand.Parameters;
                _with1.Add("QUOTATION_NO_IN", (string.IsNullOrEmpty(QuotationNo) ? "" : QuotationNo)).Direction = ParameterDirection.Input;
                _with1.Add("FROMDATE_IN", (string.IsNullOrEmpty(FromDate) ? "" : FromDate)).Direction = ParameterDirection.Input;
                _with1.Add("TODATE_IN", (string.IsNullOrEmpty(ToDate) ? "" : ToDate)).Direction = ParameterDirection.Input;
                _with1.Add("POL_ID_IN", (string.IsNullOrEmpty(POLID) ? "" : POLID)).Direction = ParameterDirection.Input;
                _with1.Add("POL_NAME_IN", (string.IsNullOrEmpty(POLName) ? "" : POLName)).Direction = ParameterDirection.Input;
                _with1.Add("POD_ID_IN", (string.IsNullOrEmpty(PODID) ? "" : PODID)).Direction = ParameterDirection.Input;
                _with1.Add("POD_NAME_IN", (string.IsNullOrEmpty(PODName) ? "" : PODName)).Direction = ParameterDirection.Input;
                _with1.Add("CUST_ID_IN", (string.IsNullOrEmpty(CustomerID) ? "" : CustomerID)).Direction = ParameterDirection.Input;
                _with1.Add("CUST_NAME_IN", (string.IsNullOrEmpty(CustomerName) ? "" : CustomerName)).Direction = ParameterDirection.Input;
                _with1.Add("AGENT_ID_IN", (string.IsNullOrEmpty(AgentID) ? "" : AgentID)).Direction = ParameterDirection.Input;
                _with1.Add("AGENT_NAME_IN", (string.IsNullOrEmpty(AgentName) ? "" : AgentName)).Direction = ParameterDirection.Input;
                _with1.Add("CARGO_TYPE_IN", (string.IsNullOrEmpty(CargoType) ? "" : CargoType)).Direction = ParameterDirection.Input;
                _with1.Add("BIZ_TYPE_IN", (string.IsNullOrEmpty(BizType) ? "" : BizType)).Direction = ParameterDirection.Input;
                _with1.Add("PEOCESS_TYPE_IN", (string.IsNullOrEmpty(ProcessType) ? "" : ProcessType)).Direction = ParameterDirection.Input;
                _with1.Add("APPR_STATUS_IN", ApprovalStatus).Direction = ParameterDirection.Input;
                _with1.Add("SEARCH_TYPE_IN", (SearchType == "C" ? "%" : "")).Direction = ParameterDirection.Input;
                _with1.Add("SORT_COL_IN", SortColumn).Direction = ParameterDirection.Input;
                _with1.Add("SORT_TYPE_IN", (string.IsNullOrEmpty(SortType) ? "" : SortType)).Direction = ParameterDirection.Input;
                _with1.Add("FLAG_IN", (flag == 0 ? 0 : flag)).Direction = ParameterDirection.Input;
                _with1.Add("FROM_PAGE_IN", (string.IsNullOrEmpty(FromPage) ? "" : FromPage)).Direction = ParameterDirection.Input;
                _with1.Add("CUST_APPR_IN", (CustomerApproved == true ? 1 : 0)).Direction = ParameterDirection.Input;
                _with1.Add("PRIORITY_IN", Priority).Direction = ParameterDirection.Input;
                _with1.Add("USER_LOC_FK_IN", lngUserLocFk).Direction = ParameterDirection.Input;
                _with1.Add("PAGE_SIZE_IN", RecordsPerPage).Direction = ParameterDirection.Input;
                _with1.Add("CURRENTPAGE_IN", CurrentPage).Direction = ParameterDirection.InputOutput;
                _with1.Add("TOTALPAGE_IN", TotalPage).Direction = ParameterDirection.InputOutput;
                _with1.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with1.Add("GET_DTL", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dsAll = objWF.GetDataSet("QUOTATION_MST_TBL_PKG", "FETCH_QUOTATION_LISTING");
                TotalPage = Convert.ToInt32(objWF.MyCommand.Parameters["TOTALPAGE_IN"].Value);
                CurrentPage = Convert.ToInt32(objWF.MyCommand.Parameters["CURRENTPAGE_IN"].Value);
                DataRelation rfqRel = new DataRelation("QuotRelation", dsAll.Tables[0].Columns["QUOTATION_MST_PK"], dsAll.Tables[1].Columns["QUOTATION_MST_PK"], true);
                dsAll.Relations.Add(rfqRel);
                return dsAll;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        #endregion "Fetch Quotation Listing"

        /// <summary>
        /// Fetches the one sea.
        /// </summary>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="EnqDS">The enq ds.</param>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="CustID">The customer identifier.</param>
        /// <param name="CustCategory">The customer category.</param>
        /// <param name="AgentNo">The agent no.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="Options">The options.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="remarks">The remarks.</param>
        /// <param name="CargoMoveCode">The cargo move code.</param>
        /// <param name="fcllcl">The FCLLCL.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="Group">The group.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="BBFlag">The bb flag.</param>
        /// <param name="CommodityPks">The commodity PKS.</param>
        /// <param name="PostBackFlag">The post back flag.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <param name="ShippingLinePKs">The shipping line p ks.</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        public void FetchOneSea(DataSet GridDS = null, DataSet EnqDS = null, string EnqNo = "", string QuoteNo = "", string CustNo = "", string CustID = "", string CustCategory = "", string AgentNo = "", string AgentID = "", string CargoType = "2",
        string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string QuoteDate = "", string Options = null, int Version = 0, string QuotationStatus = null, DataTable OthDt = null, object ValidFor = null, Int16 CustomerType = 0,
        int CreditDays = 0, int CreditLimit = 0, string remarks = "", string CargoMoveCode = "", int fcllcl = 0, string BaseCurrencyId = null, int INCOTerms = 0, Int16 Group = 0, bool AmendFlg = false, int PYMTType = 0,
        int BBFlag = 0, string CommodityPks = "", int PostBackFlag = 0, int PROCESS_TYPE = 0, string ShippingLinePKs = "", int TariffAgentPk = 0)
        {
            try
            {
                DataRow DR = null;
                DataTable ExChTable = null;
                decimal Amount = default(decimal);
                string[] cargo1 = null;
                StringBuilder MasterQuery = new StringBuilder();
                StringBuilder FreightQuery = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                DataRelation REL = null;
                bool forFCL = false;
                if (BBFlag != 1)
                {
                    if (string.IsNullOrEmpty(EnqNo) & string.IsNullOrEmpty(QuoteNo))
                    {
                        if (fcllcl == 0)
                        {
                            MakeConditionString(SectorContainers, ShippingLinePKs);
                        }
                        else
                        {
                            MakeConditionStrings(SectorContainers);
                            cargo1 = SectorContainers.Split('~');
                            if (fcllcl == 1)
                            {
                                SectorContainers = cargo1[0];
                                CargoType = "1";
                                cargotypes = 1;
                            }
                            if (fcllcl == 2)
                            {
                                SectorContainers = cargo1[1];
                                CargoType = "2";
                                cargotypes = 2;
                            }
                        }
                    }
                    else if (!string.IsNullOrEmpty(SectorContainers))
                    {
                        if (fcllcl == 0)
                        {
                            MakeConditionString(SectorContainers, ShippingLinePKs);
                        }
                        else
                        {
                            MakeConditionStrings(SectorContainers);
                            cargo1 = SectorContainers.Split('~');
                            if (fcllcl == 1)
                            {
                                SectorContainers = cargo1[0];
                                CargoType = "1";
                                cargotypes = 1;
                            }
                            if (fcllcl == 2)
                            {
                                SectorContainers = cargo1[1];
                                CargoType = "2";
                                cargotypes = 2;
                            }
                        }
                    }
                    //end
                    GetEnqDetail(EnqNo, CargoType, CustNo, CustID, CustCategory, AgentNo, AgentID, CommodityGroup, SectorContainers, EnqDS,
                    QuoteNo, Version, QuotationStatus, OthDt, ValidFor.ToString(), QuoteDate, CustomerType, ShipDate, CreditDays, CreditLimit,
                    remarks, CargoMoveCode, BaseCurrencyId, INCOTerms, PYMTType, Group, AmendFlg, PROCESS_TYPE, ShippingLinePKs);

                    if (!string.IsNullOrEmpty(Convert.ToString(QuoteNo).Trim()))
                    {
                        foreach (DataRow DR_loopVariable in EnqDS.Tables[0].Rows)
                        {
                            DR = DR_loopVariable;
                            DR["OTH_DTL"] = Cls_FlatRateFreights.GetOTHstring(OthDt,
                                0,
                                1,
                                2, 0, 0,
                                (string.IsNullOrEmpty(DR["FK"].ToString()) ? "" : DR["FK"].ToString()), 0, 0, null, 0,
                                4);
                        }
                        return;
                    }

                    if (Convert.ToInt32(CargoType) == 1)
                    {
                        forFCL = true;
                    }
                    else
                    {
                        forFCL = false;
                    }

                    if (Convert.ToInt32(CargoType) == 3 & (fcllcl == 1 | cargo == 1))
                    {
                        forFCL = true;
                        cargotypes = 1;
                    }
                    else if (Convert.ToInt32(CargoType) == 3 & (fcllcl == 2 | cargo == 2))
                    {
                        forFCL = false;
                        cargotypes = 2;
                    }
                }
                if (BBFlag == 1)
                {
                    //added by vimlesh kumar for manual quote
                    //if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.GeneralTariff).Selected | ((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Manual).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(ManualQuoteQuery(forFCL, CustNo, SectorContainers, CommodityPks, ShipDate, PostBackFlag, Conversion.Val(QuoteNo)));
                    //    FreightQuery.Append(ManualQuoteFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, CommodityPks, PostBackFlag, Conversion.Val(QuoteNo), QuotationStatus, PROCESS_TYPE));
                    //}

                    //GridDS = objWF.GetDataSet(MasterQuery.ToString());
                    //GridDS.Tables.Add(objWF.GetDataTable(FreightQuery.ToString()));

                    //REL = new DataRelation("RFQRelation", new DataColumn[] { GridDS.Tables[0].Columns["COMM_PK"] }, new DataColumn[] { GridDS.Tables[1].Columns["COMM_PK"] });
                    //REL.Nested = true;
                }
                else
                {
                    //System.Web.UI.WebControls.RadioButtonList rbOptions = (System.Web.UI.WebControls.RadioButtonList)Options;
                    ////CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(0).Selected Then
                    //if (rbOptions.Items.FindByValue(SourceType.SpotRate).Selected)
                    //{
                    //    MasterQuery.Append(SpotRateQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Session["CURRENCY_MST_PK"], ShippingLinePKs));
                    //    FreightQuery.Append(SpotRateFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs));
                    //}

                    ////CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(1).Selected Then
                    //if (rbOptions.Items.FindByValue(SourceType.CustomerContract).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(CustContQuerySea(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs, Group));
                    //    FreightQuery.Append(CustContFreightQuerySea(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs, Group));
                    //}

                    ////CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(2).Selected Then
                    //if (rbOptions.Items.FindByValue(SourceType.Quotation).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(QuoteQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Group, ShippingLinePKs));
                    //    FreightQuery.Append(QuoteFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Group, ShippingLinePKs));
                    //}

                    //if (rbOptions.Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                    //{
                    //    bool isAgentType = (rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected ? true : false);
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(OprTariffQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Session["CURRENCY_MST_PK"], ShippingLinePKs, , isAgentType, TariffAgentPk));
                    //    FreightQuery.Append(OprTariffFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs, Group, isAgentType, TariffAgentPk));
                    //}

                    //if (rbOptions.Items.FindByValue(SourceType.SRR).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(SRRQuerySea(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs, Group));
                    //    FreightQuery.Append(SRRFreightQuerySea(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, ShippingLinePKs, Group));
                    //}

                    ////CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(4).Selected Then
                    //if (rbOptions.Items.FindByValue(SourceType.GeneralTariff).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(funGenTariffQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Session["CURRENCY_MST_PK"], Group));
                    //    FreightQuery.Append(funGenTariffFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Group));
                    //}
                    //// CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(5).Selected Then 'added by vimlesh kumar for manual quote
                    //if (rbOptions.Items.FindByValue(SourceType.Manual).Selected)
                    //{
                    //    if (MasterQuery.Length > 0)
                    //    {
                    //        MasterQuery.Append(" UNION " );
                    //        FreightQuery.Append(" UNION " );
                    //    }
                    //    MasterQuery.Append(QuoteQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Group, ShippingLinePKs));
                    //    FreightQuery.Append(QuoteFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, Group, ShippingLinePKs));
                    //}
                    ////If CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(0).Selected Then 'added by vimlesh kumar for manual quote
                    ////    If MasterQuery.Length > 0 Then
                    ////        MasterQuery.Append(vbCrLf + " UNION " + vbCrLf)
                    ////        FreightQuery.Append(vbCrLf + " UNION " + vbCrLf)
                    ////    End If
                    ////    MasterQuery.Append(ManualQuoteQuery(forFCL, CustNo, SectorContainers, CommodityPks, ShipDate, PostBackFlag, Val(QuoteNo)))
                    ////    FreightQuery.Append(ManualQuoteFreightQuery(forFCL, CustNo, SectorContainers, CommodityGroup, ShipDate, CommodityPks, PostBackFlag, Val(QuoteNo), QuotationStatus, PROCESS_TYPE))
                    ////End If

                    GridDS = objWF.GetDataSet(MasterQuery.ToString());
                    GridDS.Tables.Add(objWF.GetDataTable(FreightQuery.ToString()));

                    if (Convert.ToInt32(CargoType) == 1)
                    {
                        REL = new DataRelation("RFQRelation", new DataColumn[] {
                            GridDS.Tables[0].Columns["REF_NO"],
                            GridDS.Tables[0].Columns["POL_PK"],
                            GridDS.Tables[0].Columns["POD_PK"],
                            GridDS.Tables[0].Columns["CNTR_PK"],
                            GridDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            GridDS.Tables[1].Columns["REF_NO"],
                            GridDS.Tables[1].Columns["POL_PK"],
                            GridDS.Tables[1].Columns["POD_PK"],
                            GridDS.Tables[1].Columns["CNTR_PK"],
                            GridDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                    else
                    {
                        REL = new DataRelation("RFQRelation", new DataColumn[] {
                            GridDS.Tables[0].Columns["REF_NO"],
                            GridDS.Tables[0].Columns["POL_PK"],
                            GridDS.Tables[0].Columns["POD_PK"],
                            GridDS.Tables[0].Columns["LCL_BASIS"],
                            GridDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            GridDS.Tables[1].Columns["REF_NO"],
                            GridDS.Tables[1].Columns["POL_PK"],
                            GridDS.Tables[1].Columns["POD_PK"],
                            GridDS.Tables[1].Columns["LCLBASIS"],
                            GridDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                }
                GridDS.Relations.Add(REL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region " Enum and SRC function "

        /// <summary>
        ///
        /// </summary>
        public enum SourceType
        {
            /// <summary>
            /// The default value
            /// </summary>
            DefaultValue = 0,

            /// <summary>
            /// The spot rate
            /// </summary>
            SpotRate = 1,

            /// <summary>
            /// The customer contract
            /// </summary>
            CustomerContract = 2,

            /// <summary>
            /// The quotation
            /// </summary>
            Quotation = 3,

            /// <summary>
            /// The enquiry
            /// </summary>
            Enquiry = 4,

            /// <summary>
            /// The operator airline tariff
            /// </summary>
            OperatorAirlineTariff = 5,

            /// <summary>
            /// The general tariff
            /// </summary>
            GeneralTariff = 6,

            /// <summary>
            /// The manual
            /// </summary>
            Manual = 7,

            /// <summary>
            /// The agent tariff
            /// </summary>
            AgentTariff = 8,

            /// <summary>
            /// </summary>
            SRR = 9
        }

        /// <summary>
        /// </summary>
        /// <param name="SType">Type of the s.</param>
        /// <returns></returns>
        public string SRC(SourceType SType)
        {
            switch (SType)
            {
                case SourceType.DefaultValue:
                    return "'GenTar'";

                case SourceType.SpotRate:
                    return "'SpRate'";

                case SourceType.CustomerContract:
                    return "'Cont'";

                case SourceType.Quotation:
                    return "'Quote'";

                case SourceType.Enquiry:
                    return "'ENQ'";

                case SourceType.OperatorAirlineTariff:
                    return "'SLTar/AirTar'";

                case SourceType.GeneralTariff:
                    return "'GenTar'";

                case SourceType.Manual:
                    return "'Manual'";

                case SourceType.AgentTariff:
                    return "'Agent Tariff'";

                case SourceType.SRR:
                    return "'SRR'";

                default:
                    return "";
            }
        }

        #endregion " Enum and SRC function "

        #region " Fetch UWG2 Entry grid. "

        #region " Enquiry Detail "

        // 4 DataBase Call
        /// <summary>
        /// Gets the enq detail.
        /// </summary>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="CustomerPK">The customer pk.</param>
        /// <param name="CustomerID">The customer identifier.</param>
        /// <param name="CustomerCategory">The customer category.</param>
        /// <param name="AgentPK">The agent pk.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="EnqDS">The enq ds.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="remarks">The remarks.</param>
        /// <param name="CargoMoveCode">The cargo move code.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="Group">The group.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <param name="OperatorPKs">The operator p ks.</param>
        private void GetEnqDetail(string EnqNo = "", string CargoType = "2", string CustomerPK = "", string CustomerID = "", string CustomerCategory = "", string AgentPK = "", string AgentID = "", string CommodityGroup = "", string SectorContainers = "", DataSet EnqDS = null,
        string QuoteNo = "", int Version = 0, string QuotationStatus = null, DataTable OthDt = null, string ValidFor = null, string QuoteDate = null, Int16 CustomerType = 0, string ShipDate = null, int CreditDays = 0, int CreditLimit = 0,
        string remarks = "", string CargoMoveCode = "", object BaseCurrencyId = null, int INCOTerms = 0, int PYMTType = 0, Int16 Group = 0, bool AmendFlg = false, int PROCESS_TYPE = 0, string OperatorPKs = "")
        {
            string strSQL = null;
            string strSQLFreight = null;
            DataSet EnqDSNew = new DataSet();
            int i = 0;
            WorkFlow objWF = new WorkFlow();
            if (!string.IsNullOrEmpty(QuoteNo))
            {
                strSQL = GetQuoteQuery(QuoteNo, CargoType, Version, QuotationStatus, OthDt, ValidFor, QuoteDate, ShipDate, CreditDays, CreditLimit,
                remarks, CargoMoveCode, BaseCurrencyId, INCOTerms, PYMTType, Group);
                if (AmendFlg == true)
                {
                    EnqDS = objWF.GetDataSet(strSQL);
                    SectorContainers = "";
                    for (i = 0; i <= EnqDS.Tables[0].Rows.Count - 1; i++)
                    {
                        var _with2 = EnqDS.Tables[0].Rows[i];
                        if (Convert.ToInt32(CargoType) == 1 | cargo == 1)
                        {
                            SectorContainers += "(" + _with2["POL_PK"] + ',' + _with2["POD_PK"] + ',' + _with2["CNTR_PK"] + ',' + _with2["OPER_PK"] + "),";
                        }
                        else
                        {
                            SectorContainers += "(" + _with2["POL_PK"] + ',' + _with2["POD_PK"] + ',' + _with2["LCL_BASIS"] + ',' + _with2["OPER_PK"] + "),";
                        }
                    }
                    SectorContainers = Convert.ToString(SectorContainers).TrimEnd(',');
                }
                strSQLFreight = GetQuoteQueryFreights(QuoteNo, (Convert.ToInt32(cargo) > 0 ? Convert.ToString(cargo) : Convert.ToString(CargoType)), Group, AmendFlg, SectorContainers);
            }
            else
            {
                strSQL = GetEnquiryQuery(EnqNo, CargoType);
                strSQLFreight = GetEnquiryQueryFreights(EnqNo, CargoType);
            }
            DataSet ds = null;
            DataTable DT = null;
            DataTable DT1 = null;
            DataRow DR = null;
            DataRow DR1 = null;
            try
            {
                if (AmendFlg == false)
                {
                    EnqDS = objWF.GetDataSet(strSQL);
                }
                EnqDS.Tables.Add(objWF.GetDataTable(strSQLFreight));
                DataRelation REL = null;
                if (Convert.ToInt32(CargoType) == 1 | cargo == 1)
                {
                    if (AmendFlg == false)
                    {
                        REL = new DataRelation("EnqRelation", new DataColumn[] {
                            EnqDS.Tables[0].Columns["REF_NO"],
                            EnqDS.Tables[0].Columns["POL_PK"],
                            EnqDS.Tables[0].Columns["POD_PK"],
                            EnqDS.Tables[0].Columns["CNTR_PK"],
                            EnqDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            EnqDS.Tables[1].Columns["REF_NO"],
                            EnqDS.Tables[1].Columns["POL_PK"],
                            EnqDS.Tables[1].Columns["POD_PK"],
                            EnqDS.Tables[1].Columns["CNTR_PK"],
                            EnqDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                    else
                    {
                        SectorContainers = "";
                        REL = new DataRelation("EnqRelation", new DataColumn[] {
                            EnqDS.Tables[0].Columns["POL_PK"],
                            EnqDS.Tables[0].Columns["POD_PK"],
                            EnqDS.Tables[0].Columns["CNTR_PK"],
                            EnqDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            EnqDS.Tables[1].Columns["POL_PK"],
                            EnqDS.Tables[1].Columns["POD_PK"],
                            EnqDS.Tables[1].Columns["CNTR_PK"],
                            EnqDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                }
                else
                {
                    if (AmendFlg == false)
                    {
                        REL = new DataRelation("EnqRelation", new DataColumn[] {
                            EnqDS.Tables[0].Columns["REF_NO"],
                            EnqDS.Tables[0].Columns["POL_PK"],
                            EnqDS.Tables[0].Columns["POD_PK"],
                            EnqDS.Tables[0].Columns["LCL_BASIS"],
                            EnqDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            EnqDS.Tables[1].Columns["REF_NO"],
                            EnqDS.Tables[1].Columns["POL_PK"],
                            EnqDS.Tables[1].Columns["POD_PK"],
                            EnqDS.Tables[1].Columns["LCLBASIS"],
                            EnqDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                    else
                    {
                        SectorContainers = "";
                        REL = new DataRelation("EnqRelation", new DataColumn[] {
                            EnqDS.Tables[0].Columns["POL_PK"],
                            EnqDS.Tables[0].Columns["POD_PK"],
                            EnqDS.Tables[0].Columns["LCL_BASIS"],
                            EnqDS.Tables[0].Columns["OPER_PK"]
                        }, new DataColumn[] {
                            EnqDS.Tables[1].Columns["POL_PK"],
                            EnqDS.Tables[1].Columns["POD_PK"],
                            EnqDS.Tables[1].Columns["LCLBASIS"],
                            EnqDS.Tables[1].Columns["OPER_PK"]
                        });
                    }
                }
                EnqDS.Relations.Add(REL);

                Int16 RowCnt = default(Int16);
                Int16 ColCnt = default(Int16);

                if (string.IsNullOrEmpty(Convert.ToString(EnqNo).Trim()) & string.IsNullOrEmpty(Convert.ToString(QuoteNo).Trim()))
                {
                    if (!string.IsNullOrEmpty(OperatorPKs))
                    {
                        if (Group == 1 | Group == 2)
                        {
                            if (Convert.ToInt32(CargoType) == 1)
                            {
                                strSQL = " SELECT POLPK, POLID, PODPK, PODID, CNTPK, CNTID,OPER_PK,OPER_ID,OPER_NAME FROM (SELECT  DISTINCT PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID, PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,CNTR.PREFERENCES,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, CONTAINER_TYPE_MST_TBL CNTR,OPERATOR_MST_TBL OMT   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, CNTR.CONTAINER_TYPE_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") ) Order By OPER_ID,POLID,PODID,PREFERENCES ";
                            }
                            else
                            {
                                strSQL = " SELECT DISTINCT PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID,  PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, DIMENTION_UNIT_MST_TBL DIM,OPERATOR_MST_TBL OMT   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, DIM.DIMENTION_UNIT_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(CargoType) == 1)
                            {
                                strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, CONTAINER_TYPE_MST_TBL CNTR,OPERATOR_MST_TBL OMT  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, CNTR.CONTAINER_TYPE_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                            }
                            else
                            {
                                strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM,OPERATOR_MST_TBL OMT  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK,OMT.OPERATOR_MST_PK )  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                            }
                        }
                    }
                    else
                    {
                        if (Group == 1 | Group == 2)
                        {
                            if (Convert.ToInt32(CargoType) == 1)
                            {
                                strSQL = " SELECT POLPK, POLID, PODPK, PODID, CNTPK, CNTID,OPER_PK,OPER_ID,OPER_NAME FROM (SELECT  DISTINCT PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID,  PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,CNTR.PREFERENCES,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, CONTAINER_TYPE_MST_TBL CNTR   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, CNTR.CONTAINER_TYPE_MST_PK)  IN (" + SectorContainers + ") ) Order By OPER_ID,POLID,PODID,PREFERENCES ";
                            }
                            else
                            {
                                strSQL = " SELECT DISTINCT PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID,  PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, DIMENTION_UNIT_MST_TBL DIM   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, DIM.DIMENTION_UNIT_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(CargoType) == 1)
                            {
                                strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, CONTAINER_TYPE_MST_TBL CNTR  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, CNTR.CONTAINER_TYPE_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                            }
                            else
                            {
                                strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                            }
                        }
                    }

                    DT = objWF.GetDataTable(strSQL);
                    for (RowCnt = 0; RowCnt <= DT.Rows.Count - 1; RowCnt++)
                    {
                        var _with3 = DT.Rows[RowCnt];
                        DR = EnqDS.Tables[0].NewRow();
                        if (Convert.ToInt32(CargoType) == 1)
                        {
                            for (ColCnt = 0; ColCnt <= EnqDS.Tables[0].Columns.Count - 1; ColCnt++)
                            {
                                if (EnqDS.Tables[0].Columns.Contains("Quantity"))
                                {
                                    if (ColCnt == EnqDS.Tables[0].Columns.IndexOf("Quantity"))
                                    {
                                        DR[ColCnt] = 1;
                                    }
                                }
                                else
                                {
                                    DR[ColCnt] = "";
                                }
                            }
                        }
                        else
                        {
                            for (ColCnt = 0; ColCnt <= EnqDS.Tables[0].Columns.Count - 1; ColCnt++)
                            {
                                DR[ColCnt] = "";
                            }
                        }

                        if (Convert.ToInt32(CargoType) == 1)
                        {
                            DR["POL_PK"] = _with3["POLPK"];
                            DR["POL_ID"] = _with3["POLID"];
                            DR["POD_PK"] = _with3["PODPK"];
                            DR["POD_ID"] = _with3["PODID"];
                            DR["CNTR_PK"] = _with3["CNTPK"];
                            DR["CNTR_ID"] = _with3["CNTID"];
                            DR["OPER_PK"] = _with3["OPER_PK"];
                            DR["OPER_ID"] = _with3["OPER_ID"];
                            DR["CUSTOMER_PK"] = CustomerPK;
                            DR["CUSTOMER_CATPK"] = CustomerCategory;
                            DR["COMM_GRPPK"] = CommodityGroup;
                        }
                        else
                        {
                            DR["POL_PK"] = _with3["POLPK"];
                            DR["POL_ID"] = _with3["POLID"];
                            DR["POD_PK"] = _with3["PODPK"];
                            DR["POD_ID"] = _with3["PODID"];
                            DR["LCL_BASIS"] = _with3["DIMPK"];
                            DR["DIMENTION_ID"] = _with3["DIMID"];
                            DR["OPER_PK"] = _with3["OPER_PK"];
                            DR["OPER_ID"] = _with3["OPER_ID"];
                            DR["CUSTOMER_PK"] = CustomerPK;
                            DR["CUSTOMER_CATPK"] = CustomerCategory;
                            DR["COMM_GRPPK"] = CommodityGroup;
                        }

                        EnqDS.Tables[0].Rows.Add(DR);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(QuoteNo) & !string.IsNullOrEmpty(SectorContainers))
                    {
                        EnqDSNew = EnqDS.Clone();
                        if (!string.IsNullOrEmpty(OperatorPKs))
                        {
                            if (Group == 1 | Group == 2)
                            {
                                if (Convert.ToInt32(CargoType) == 1)
                                {
                                    strSQL = " SELECT  PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID,  PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, CONTAINER_TYPE_MST_TBL CNTR,OPERATOR_MST_TBL OMT   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, CNTR.CONTAINER_TYPE_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                                }
                                else
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM,OPERATOR_MST_TBL OMT  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(CargoType) == 1)
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, CONTAINER_TYPE_MST_TBL CNTR,OPERATOR_MST_TBL OMT  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, CNTR.CONTAINER_TYPE_MST_PK,OMT.OPERATOR_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                                }
                                else
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,OMT.OPERATOR_MST_PK OPER_PK,OMT.OPERATOR_ID OPER_ID,OMT.OPERATOR_NAME OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM,OPERATOR_MST_TBL OMT  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK,OMT.OPERATOR_MST_PK )  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                                }
                            }
                        }
                        else
                        {
                            if (Group == 1 | Group == 2)
                            {
                                if (Convert.ToInt32(CargoType) == 1)
                                {
                                    strSQL = " SELECT  PGL.PORT_GRP_MST_PK POLPK,PGL.PORT_GRP_ID POLID,  PGD.PORT_GRP_MST_PK PODPK, PGD.PORT_GRP_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,null OPER_PK,null OPER_ID,null OPER_NAME FROM PORT_MST_TBL POL, PORT_MST_TBL POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,PORT_GRP_TRN_TBL PGTL, PORT_GRP_TRN_TBL PGTD, CONTAINER_TYPE_MST_TBL CNTR   WHERE PGL.PORT_GRP_MST_PK = PGTL.PORT_GRP_MST_FK   AND PGTL.PORT_MST_FK = POL.PORT_MST_PK   AND PGD.PORT_GRP_MST_PK = PGTD.PORT_GRP_MST_FK   AND PGTD.PORT_MST_FK = POD.PORT_MST_PK   AND (PGL.PORT_GRP_MST_PK, PGD.PORT_GRP_MST_PK, CNTR.CONTAINER_TYPE_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                                }
                                else
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(CargoType) == 1)
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  CNTR.CONTAINER_TYPE_MST_PK CNTPK, CNTR.CONTAINER_TYPE_MST_ID CNTID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, CONTAINER_TYPE_MST_TBL CNTR  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, CNTR.CONTAINER_TYPE_MST_PK)  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,CNTR.PREFERENCES ";
                                }
                                else
                                {
                                    strSQL = " SELECT POL.PORT_MST_PK POLPK, POL.PORT_ID POLID,  POD.PORT_MST_PK PODPK, POD.PORT_ID PODID,  DIM.DIMENTION_UNIT_MST_PK DIMPK, DIM.DIMENTION_ID DIMID,null OPER_PK,null OPER_ID,null OPER_NAME  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, DIMENTION_UNIT_MST_TBL DIM  WHERE (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK )  IN (" + SectorContainers + ") Order By OPER_ID,POLID,PODID,DIMID ";
                                }
                            }
                        }
                        DT1 = objWF.GetDataTable(strSQL);
                        for (RowCnt = 0; RowCnt <= DT1.Rows.Count - 1; RowCnt++)
                        {
                            var _with4 = DT1.Rows[RowCnt];
                            DR1 = EnqDSNew.Tables[0].NewRow();
                            for (ColCnt = 0; ColCnt <= EnqDSNew.Tables[0].Columns.Count - 1; ColCnt++)
                            {
                                DR1[ColCnt] = "";
                            }

                            if (Convert.ToInt32(CargoType) == 1)
                            {
                                DR1["POL_PK"] = _with4["POLPK"];
                                DR1["POL_ID"] = _with4["POLID"];
                                DR1["POD_PK"] = _with4["PODPK"];
                                DR1["POD_ID"] = _with4["PODID"];
                                DR1["CNTR_PK"] = _with4["CNTPK"];
                                DR1["CNTR_ID"] = _with4["CNTID"];
                                DR1["OPER_PK"] = _with4["OPER_PK"];
                                DR["OPER_ID"] = _with4["OPER_ID"];
                                DR1["CUSTOMER_PK"] = CustomerPK;
                                DR1["CUSTOMER_CATPK"] = CustomerCategory;
                                DR1["COMM_GRPPK"] = CommodityGroup;
                            }
                            else
                            {
                                DR1["POL_PK"] = _with4["POLPK"];
                                DR1["POL_ID"] = _with4["POLID"];
                                DR1["POD_PK"] = _with4["PODPK"];
                                DR1["POD_ID"] = _with4["PODID"];
                                DR1["LCL_BASIS"] = _with4["DIMPK"];
                                DR1["DIMENTION_ID"] = _with4["DIMID"];
                                DR1["OPER_PK"] = _with4["OPER_PK"];
                                DR["OPER_ID"] = _with4["OPER_ID"];
                                DR1["CUSTOMER_PK"] = CustomerPK;
                                DR1["CUSTOMER_CATPK"] = CustomerCategory;
                                DR1["COMM_GRPPK"] = CommodityGroup;
                            }

                            EnqDSNew.Tables[0].Rows.Add(DR1);
                        }
                        AddFreights(EnqDSNew, CargoType);
                        EnqDS.Merge(EnqDSNew);
                    }
                    SectorContainers = "";
                    for (RowCnt = 0; RowCnt <= EnqDS.Tables[0].Rows.Count - 1; RowCnt++)
                    {
                        var _with5 = EnqDS.Tables[0].Rows[RowCnt];
                        if (!string.IsNullOrEmpty(OperatorPKs))
                        {
                            IDictionary Items = null;
                            if (Convert.ToInt32(CargoType) == 1 | cargo == 1)
                            {
                                SectorContainers += "(" + _with5["POL_PK"] + ',' + _with5["POD_PK"] + ',' + _with5["CNTR_PK"] + ',' + Items["OPER_PK"] + "),";
                            }
                            else
                            {
                                SectorContainers += "(" + _with5["POL_PK"] + ',' + _with5["POD_PK"] + ',' + _with5["LCL_BASIS"] + ',' + Items["OPER_PK"] + "),";
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(CargoType) == 1 | cargo == 1)
                            {
                                SectorContainers += "(" + _with5["POL_PK"] + ',' + _with5["POD_PK"] + ',' + _with5["CNTR_PK"] + "),";
                            }
                            else
                            {
                                SectorContainers += "(" + _with5["POL_PK"] + ',' + _with5["POD_PK"] + ',' + _with5["LCL_BASIS"] + "),";
                            }
                        }
                    }
                    if (EnqDS.Tables[0].Rows.Count > 0)
                    {
                        SectorContainers = Convert.ToString(SectorContainers).TrimEnd(',');
                        CustomerPK = EnqDS.Tables[0].Rows[0]["CUSTOMER_PK"].ToString();
                        CustomerCategory = EnqDS.Tables[0].Rows[0]["CUSTOMER_CATPK"].ToString();
                        CommodityGroup = EnqDS.Tables[0].Rows[0]["COMM_GRPPK"].ToString();
                        ShipDate = EnqDS.Tables[0].Rows[0]["SHIP_DATE"].ToString();
                        // Getting Customer ID
                        CustomerType = Convert.ToInt16(getDefault(EnqDS.Tables[0].Rows[0]["CUST_TYPE"], 0));
                        if (CustomerType == 0)
                        {
                            CustomerID = objWF.ExecuteScaler(" Select CUSTOMER_NAME from CUSTOMER_MST_TBL where CUSTOMER_MST_PK = " + CustomerPK);
                        }
                        else
                        {
                            CustomerID = objWF.ExecuteScaler(" Select CUSTOMER_NAME from TEMP_CUSTOMER_TBL where CUSTOMER_MST_PK = " + CustomerPK);
                        }
                    }
                }
                if (string.IsNullOrEmpty(Convert.ToString(QuoteNo).Trim()))
                {
                    if (string.IsNullOrEmpty(Convert.ToString(EnqNo).Trim()))
                    {
                        AddFreights(EnqDS, CargoType, PROCESS_TYPE);
                    }
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception eX)
            {
                throw eX;
            }
        }

        #endregion " Enquiry Detail "

        #region " Add Freights "

        // 1 DataBase Call
        /// <summary>
        /// Adds the freights.
        /// </summary>
        /// <param name="DS">The ds.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <exception cref="System.Exception"> Duplicate Freights </exception>
        private void AddFreights(DataSet DS, object CargoType, int PROCESS_TYPE = 0)
        {
            DataTable frtDt = null;
            //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
            //modified by thiyagarajan on 20/11/08 for location based currency task
            //Snigdharani - 30/12/2008 - & " AND FRM.BY_DEFAULT = 1 " & vbCrLf _ ,& " AND FRM.CHARGE_BASIS <> 2 " & vbCrLf _Commented
            string strSQL = " Select  FRM.FREIGHT_ELEMENT_MST_PK, FRM.FREIGHT_ELEMENT_ID, FRM.FREIGHT_ELEMENT_NAME,  DECODE(FRM.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS ,  CURR.CURRENCY_MST_PK, CURR.CURRENCY_ID,FRM.Credit  from FREIGHT_ELEMENT_MST_TBL FRM, CURRENCY_TYPE_MST_TBL CURR where FRM.ACTIVE_FLAG = 1  AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + " AND FRM.BUSINESS_TYPE in (2,3)  AND FRM.CHARGE_TYPE <> 3  ORDER BY FRM.PREFERENCE";
            //Change made by purnanand for freight element should come in preference order(09/01/08)

            frtDt = (new WorkFlow()).GetDataTable(strSQL);
            Int16 RowCnt = default(Int16);
            // REF_NO, POL_PK, POD_PK, CNTR_PK, FRT_PK, FRT_ID, FRT_NAME
            // SELECTED, CURR_PK, CURR_ID, Rate, QUOTERATE, PYTYPE
            // Setting Unique Constraints for adding Remaining Freights
            UniqueConstraint UC = null;

            if (Convert.ToInt32(CargoType) == 1)
            {
                UC = new UniqueConstraint("UkFreights", new DataColumn[] {
                    DS.Tables[1].Columns["REF_NO"],
                    DS.Tables[1].Columns["POL_PK"],
                    DS.Tables[1].Columns["POD_PK"],
                    DS.Tables[1].Columns["CNTR_PK"],
                    DS.Tables[1].Columns["FRT_PK"],
                    DS.Tables[1].Columns["OPER_PK"]
                });
            }
            else
            {
                UC = new UniqueConstraint("UkFreights", new DataColumn[] {
                    DS.Tables[1].Columns["REF_NO"],
                    DS.Tables[1].Columns["POL_PK"],
                    DS.Tables[1].Columns["POD_PK"],
                    DS.Tables[1].Columns["LCLBASIS"],
                    DS.Tables[1].Columns["FRT_PK"],
                    DS.Tables[1].Columns["OPER_PK"]
                });
            }
            try
            {
                DS.Tables[1].Constraints.Add(UC);
            }
            catch (System.Exception eX)
            {
                throw new Exception(" Duplicate Freights ", eX);
            }
            DataRow R = null;
            DataRow FR = null;
            foreach (DataRow R_loopVariable in DS.Tables[0].Rows)
            {
                R = R_loopVariable;
                for (RowCnt = 0; RowCnt <= frtDt.Rows.Count - 1; RowCnt++)
                {
                    try
                    {
                        FR = DS.Tables[1].NewRow();
                        if (Convert.ToInt32(CargoType) == 1)
                        {
                            FR["REF_NO"] = R["REF_NO"];
                            FR["POL_PK"] = R["POL_PK"];
                            FR["POD_PK"] = R["POD_PK"];
                            FR["CNTR_PK"] = R["CNTR_PK"];
                            FR["OPER_PK"] = R["OPER_PK"];
                            FR["FRT_PK"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_MST_PK"];
                            FR["FRT_ID"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_ID"];
                            FR["FRT_NAME"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_NAME"];
                            FR["CHARGE_BASIS"] = frtDt.Rows[RowCnt]["CHARGE_BASIS"];
                            FR["SELECTED"] = 0;
                            FR["CURR_PK"] = frtDt.Rows[RowCnt]["CURRENCY_MST_PK"];
                            FR["CURR_ID"] = frtDt.Rows[RowCnt]["CURRENCY_ID"];
                            FR["QUOTERATE"] = 0;
                            FR["FINAL_RATE"] = 0;

                            if (FR["FRT_NAME"] == "Terminal Handling Charges In Destination Port" | FR["FRT_ID"] == "THD")
                            {
                                FR["PYTPE"] = 2;
                                FR["PYTYPE"] = "Collect";
                            }
                            else
                            {
                                //'Export
                                if (PROCESS_TYPE == 1)
                                {
                                    FR["PYTPE"] = 1;
                                    FR["PYTYPE"] = "PrePaid";
                                    //'Import
                                }
                                else if (PROCESS_TYPE == 2)
                                {
                                    FR["PYTPE"] = 2;
                                    FR["PYTYPE"] = "Collect";
                                }
                                else
                                {
                                    FR["PYTPE"] = 3;
                                    FR["PYTYPE"] = "Foreign";
                                }
                            }

                            FR["CREDIT"] = frtDt.Rows[RowCnt]["CREDIT"];
                        }
                        else
                        {
                            FR["REF_NO"] = R["REF_NO"];
                            FR["POL_PK"] = R["POL_PK"];
                            FR["POD_PK"] = R["POD_PK"];
                            FR["LCLBASIS"] = R["LCL_BASIS"];
                            FR["OPER_PK"] = R["OPER_PK"];
                            FR["FRT_PK"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_MST_PK"];
                            FR["FRT_ID"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_ID"];
                            FR["FRT_NAME"] = frtDt.Rows[RowCnt]["FREIGHT_ELEMENT_NAME"];
                            FR["CHARGE_BASIS"] = frtDt.Rows[RowCnt]["CHARGE_BASIS"];
                            FR["SELECTED"] = 0;
                            FR["CURR_PK"] = frtDt.Rows[RowCnt]["CURRENCY_MST_PK"];
                            FR["CURR_ID"] = frtDt.Rows[RowCnt]["CURRENCY_ID"];
                            FR["QUOTE_MIN_RATE"] = 0;
                            FR["QUOTERATE"] = 0;
                            FR["FINAL_RATE"] = 0;

                            if (FR["FRT_NAME"] == "Terminal Handling Charges In Destination Port" | FR["FRT_ID"] == "THD")
                            {
                                FR["PYTPE"] = 2;
                                FR["PYTYPE"] = "Collect";
                            }
                            else
                            {
                                //'Export
                                if (PROCESS_TYPE == 1)
                                {
                                    FR["PYTPE"] = 1;
                                    FR["PYTYPE"] = "PrePaid";
                                    //'Import
                                }
                                else if (PROCESS_TYPE == 2)
                                {
                                    FR["PYTPE"] = 2;
                                    FR["PYTYPE"] = "Collect";
                                }
                                else
                                {
                                    FR["PYTPE"] = 3;
                                    FR["PYTYPE"] = "Foreign";
                                }
                            }

                            FR["CREDIT"] = frtDt.Rows[RowCnt]["CREDIT"];
                        }
                        DS.Tables[1].Rows.Add(FR);
                    }
                    catch (OracleException Oraexp)
                    {
                        throw Oraexp;
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
            }
        }

        #endregion " Add Freights "

        #region " Enquiry Query For (EnqNo.) "

        // 1 DataBase Call
        /// <summary>
        /// Gets the enquiry query.
        /// </summary>
        /// <param name="EnquiryNo">The enquiry no.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <returns></returns>
        private string GetEnquiryQuery(string EnquiryNo, string CargoType = "1")
        {
            try
            {
                string strSQL = null;
                if (!string.IsNullOrEmpty(Convert.ToString(EnquiryNo).Trim()))
                {
                    strSQL = " Select CARGO_TYPE from ENQUIRY_BKG_SEA_TBL where ENQUIRY_REF_NO = '" + EnquiryNo + "'";
                    CargoType = (new WorkFlow()).ExecuteScaler(strSQL);
                }
                else
                {
                    EnquiryNo = "0";
                }
                // PK,TYPE,REF_NO,REF_NO,SHIP_DATE,POL_PK,POL_ID,POD_PK,POD_ID,OPER_PK,OPER_ID,OPER_NAME,
                // CNTR_PK,CNTR_ID,QUANTITY,COMM_PK,COMM_ID,ALL_IN_TARIFF,ALL_IN_QUOTE,TARIFF,NET,SELECTED,
                // CUSTOMER_PK,CUSTOMER_CATPK,COMM_GRPPK,TRAN_REF_NO2
                // Getting Query for Enquiry Detail
                if (CargoType == "1")
                {
                    strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.ALL_IN_QUOTE,      Q.OPERATOR_RATE,      Q.NET,      Q.CUSTOMER_PK,      Q.CUSTOMER_CATPK,       Q.COMM_GRPPK,Q.REF_NO2,Q.TYPE2,Q.OTH_BTN,Q.OTH_DTL,       Q.FK,Q.CUST_TYPE,     Q.COPY,Q.COMMODITY_MST_FKS,Q.POL_GRP_FK, Q.POD_GRP_FK, Q.TARIFF_GRP_FK,Q.AIF    FROM (Select   DISTINCT                main4.ENQUIRY_BKG_SEA_PK                   PK,                    " + SRC(SourceType.Enquiry) + "               TYPE,                     main4.ENQUIRY_REF_NO                       REF_NO,                   main4.ENQUIRY_REF_NO                       REFNO,                    TO_CHAR(tran4.EXPECTED_SHIPMENT,'" + dateFormat + "') SHIP_DATE,        tran4.PORT_MST_POL_FK                      POL_PK,                   portpol4.PORT_ID                           POL_ID,                   tran4.PORT_MST_POD_FK                      POD_PK,                   portpod4.PORT_ID                           POD_ID,                   NVL(tran4.OPERATOR_MST_FK,0)               OPER_PK,                  opr4.OPERATOR_ID                           OPER_ID,                  opr4.OPERATOR_NAME                         OPER_NAME,                tran4.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr4.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran4.EXPECTED_BOXES                       QUANTITY,                 tran4.COMMODITY_MST_FK                     COMM_PK,                  cmdt4.COMMODITY_NAME                       COMM_ID,                  tran4.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran4.ALL_IN_TARIFF                        ALL_IN_QUOTE,             0                                          OPERATOR_RATE,            NULL                                       NET,                      main4.CUSTOMER_MST_FK                      CUSTOMER_PK,              main4.CUSTOMER_CATEGORY_FK                 CUSTOMER_CATPK,           tran4.COMMODITY_GROUP_FK                   COMM_GRPPK,               NULL                                       REF_NO2,                  NULL                                       TYPE2,                    ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  tran4.ENQUIRY_TRN_SEA_PK                   FK,                        nvl( CUST_TYPE,1)                          CUST_TYPE , '' COPY, '' COMMODITY_MST_FKS,         '' POL_GRP_FK, '' POD_GRP_FK, '' TARIFF_GRP_FK,cntr4.PREFERENCES,0 AIF             from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                PORT_MST_TBL                   portpol4,                             PORT_MST_TBL                   portpod4,                             OPERATOR_MST_TBL               opr4,                                 COMMODITY_MST_TBL              cmdt4,                                CONTAINER_TYPE_MST_TBL         cntr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                 AND    main4.CARGO_TYPE            = 1                                         AND    tran4.PORT_MST_POL_FK       = portpol4.PORT_MST_PK(+)                   AND    tran4.PORT_MST_POD_FK       = portpod4.PORT_MST_PK(+)                   AND    tran4.OPERATOR_MST_FK       = opr4.OPERATOR_MST_PK(+)                   AND    tran4.COMMODITY_MST_FK      = cmdt4.COMMODITY_MST_PK(+)                  AND    tran4.CONTAINER_TYPE_MST_FK = cntr4.CONTAINER_TYPE_MST_PK(+)            AND    main4.ENQUIRY_REF_NO        = '" + EnquiryNo + "'      )Q   ORDER BY Q.PREFERENCES";
                }
                else
                {
                    // PK, TYPE, REF_NO, SHIP_DATE, POL_PK, POL_ID, POD_PK, POD_ID, OPER_PK, OPER_ID, OPER_NAME
                    // COMM_PK, COMM_ID, LCL_BASIS, DIMENTION_ID, WEIGHT, VOLUME, ALL_IN_TARIFF, ALL_IN_QUOTE
                    // TARIFF, NET, REF_NO2, TYPE2, OTH_BTN(26), OTH_DTL(27), FK(28), CUST_TYPE(29)

                    strSQL = "    Select        DISTINCT                                       main4.ENQUIRY_BKG_SEA_PK                   PK,                    " + SRC(SourceType.Enquiry) + "               TYPE,                     main4.ENQUIRY_REF_NO                       REF_NO,                   TO_CHAR(tran4.EXPECTED_SHIPMENT,'" + dateFormat + "') SHIP_DATE,             tran4.PORT_MST_POL_FK                      POL_PK,                   portpol4.PORT_ID                           POL_ID,                   tran4.PORT_MST_POD_FK                      POD_PK,                   portpod4.PORT_ID                           POD_ID,                   NVL(tran4.OPERATOR_MST_FK,0)               OPER_PK,                  opr4.OPERATOR_ID                           OPER_ID,                  opr4.OPERATOR_NAME                         OPER_NAME,                tran4.COMMODITY_MST_FK                     COMM_PK,                  cmdt4.COMMODITY_ID                         COMM_ID,                  tran4.BASIS                                LCL_BASIS,                NVL(dim4.DIMENTION_ID,'')                  DIMENTION_ID,             tran4.EXPECTED_WEIGHT                      WEIGHT,                   tran4.EXPECTED_VOLUME                      VOLUME,                   tran4.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran4.ALL_IN_TARIFF                        ALL_IN_QUOTE,             0                                          OPERATOR_RATE,            NULL                                       NET,                      NULL                                       REF_NO2,                  NULL                                       TYPE2,                    main4.CUSTOMER_MST_FK                      CUSTOMER_PK,              main4.CUSTOMER_CATEGORY_FK                 CUSTOMER_CATPK,           tran4.COMMODITY_GROUP_FK                   COMM_GRPPK,               ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  tran4.ENQUIRY_TRN_SEA_PK                   FK,                       nvl( CUST_TYPE,1)     CUST_TYPE,'' COPY,'' COMMODITY_MST_FKS,        '' POL_GRP_FK, '' POD_GRP_FK, '' TARIFF_GRP_FK,0 AIF             from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                PORT_MST_TBL                   portpol4,                             PORT_MST_TBL                   portpod4,                             OPERATOR_MST_TBL               opr4,                                 COMMODITY_MST_TBL              cmdt4,                                DIMENTION_UNIT_MST_TBL         dim4                                 where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                 AND    main4.CARGO_TYPE            = 2                                         AND    tran4.PORT_MST_POL_FK       = portpol4.PORT_MST_PK(+)                   AND    tran4.PORT_MST_POD_FK       = portpod4.PORT_MST_PK(+)                   AND    tran4.OPERATOR_MST_FK       = opr4.OPERATOR_MST_PK(+)                   AND    tran4.COMMODITY_MST_FK      = cmdt4.COMMODITY_MST_PK(+)                 AND    tran4.BASIS                 = dim4.DIMENTION_UNIT_MST_PK(+)             AND    main4.ENQUIRY_REF_NO        = '" + EnquiryNo + "'";
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Enquiry Query For (EnqNo.) "

        /// <summary>
        /// Gets the customer priority.
        /// </summary>
        /// <param name="CustomerPK">The customer pk.</param>
        /// <returns></returns>
        public DataTable GetCustPriority(long CustomerPK)
        {
            string strSQL = null;
            strSQL = " Select  DECODE(CMT.PRIORITY, 1, 'Priority 1', 2, 'Priority 2', 3, 'Priority 3',4, 'Priority 4',5, 'Priority 5')PRIORITY, " + "  DECODE(CMT.CRITERIA, 1, 'Global', 2, 'Region')CRITERIA ," + "  DECODE(CMT.CATEGORY, 1, 'VVIP', 2, 'VIP') CATEGORY" + " from CUSTOMER_MST_TBL CMT " + " where CMT.CUSTOMER_MST_PK = " + CustomerPK;

            try
            {
                return (new WorkFlow()).GetDataTable(strSQL);
            }
            catch
            {
            }
            return new DataTable();
        }

        #region " Enquiry Query For Freights (EnqNo.) "

        /// <summary>
        /// Gets the enquiry query freights.
        /// </summary>
        /// <param name="EnquiryNo">The enquiry no.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <returns></returns>
        private string GetEnquiryQueryFreights(string EnquiryNo, string CargoType = "1")
        {
            try
            {
                if (string.IsNullOrEmpty(Convert.ToString(EnquiryNo).Trim()))
                    EnquiryNo = "0";
                string strSQL = null;
                // REF_NO,POL_PK,POD_PK,CNTR_PK,FRT_PK,FRT_ID,FRT_NAME,SELECTED,CURR_PK,CURR_ID,RATE,QUOTERATE,PYTYPE
                if (CargoType == "1")
                {
                    strSQL = "    Select                 main4.ENQUIRY_REF_NO                       REF_NO,                   tran4.PORT_MST_POL_FK                      POL_PK,                   tran4.PORT_MST_POD_FK                      POD_PK,                   tran4.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd4.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt4.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt4.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt4.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,       DECODE(frtd4.CHECK_FOR_ALL_IN_RT, 1,'true','false') SELECTED,        DECODE(frtd4.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd4.CURRENCY_MST_FK                      CURR_PK,                  curr4.CURRENCY_ID                          CURR_ID,                  frtd4.TARIFF_RATE                          QUOTERATE,                frtd4.TARIFF_RATE                          FINAL_RATE,                     1                                       PYTPE,                    'PrePaid'                                       PYTYPE,frt4.CREDIT,'' AIFType,NVL(tran4.OPERATOR_MST_FK,0) OPER_PK                   from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                ENQUIRY_TRN_SEA_FRT_DTLS       frtd4,                                FREIGHT_ELEMENT_MST_TBL        frt4,                                 CURRENCY_TYPE_MST_TBL          curr4                                where                                                                           main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK             AND    tran4.ENQUIRY_TRN_SEA_PK    = frtd4.ENQUIRY_TRN_SEA_FK              AND    frtd4.FREIGHT_ELEMENT_MST_FK = frt4.FREIGHT_ELEMENT_MST_PK(+)       AND    frtd4.CURRENCY_MST_FK       = curr4.CURRENCY_MST_PK(+)              AND    main4.CARGO_TYPE            = 1                                     AND    main4.ENQUIRY_REF_NO        = '" + EnquiryNo + "'                        order by frt4.preference";
                    //Added "preference order " By Prakash Chandra on 29/4/08

                    //Added by rabbani reason USS Gap,introduced new column as "QUOTE_MIN_RATE"
                }
                else
                {
                    strSQL = "    Select                 main4.ENQUIRY_REF_NO                       REF_NO,                   tran4.PORT_MST_POL_FK                      POL_PK,                   tran4.PORT_MST_POD_FK                      POD_PK,                   tran4.BASIS                                LCLBASIS,                 frtd4.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt4.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt4.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt4.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,       DECODE(frtd4.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd4.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd4.CURRENCY_MST_FK                      CURR_PK,                  curr4.CURRENCY_ID                          CURR_ID,                  frtd4.TARIFF_MIN_RATE                      QUOTE_MIN_RATE,           frtd4.TARIFF_RATE                          QUOTERATE,                     CASE WHEN frtd4.TARIFF_MIN_RATE > frtd4.TARIFF_RATE THEN frtd4.TARIFF_MIN_RATE ELSE frtd4.TARIFF_RATE END                          FINAL_RATE,                1                                       PYTPE,                    'PrePaid'                               PYTYPE ,frt4.CREDIT,'' AIFType,NVL(tran4.OPERATOR_MST_FK,0) OPER_PK     from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                ENQUIRY_TRN_SEA_FRT_DTLS       frtd4,                                FREIGHT_ELEMENT_MST_TBL        frt4,                                 CURRENCY_TYPE_MST_TBL          curr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                AND    tran4.ENQUIRY_TRN_SEA_PK    = frtd4.ENQUIRY_TRN_SEA_FK                 AND    frtd4.FREIGHT_ELEMENT_MST_FK = frt4.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt4.CHARGE_BASIS           <> 2                                       AND    frtd4.CURRENCY_MST_FK       = curr4.CURRENCY_MST_PK(+)                 AND    main4.CARGO_TYPE            = 2                                        AND    main4.ENQUIRY_REF_NO        = '" + EnquiryNo + "'                           order by frt4.preference";
                    //Added "preference order " By Prakash Chandra on 29/4/08
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Enquiry Query For Freights (EnqNo.) "

        #region " Quotation Query For (QuotePk.) "

        /// <summary>
        /// Gets the quote query.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CREDIT_DAYS">The credi t_ days.</param>
        /// <param name="CREDIT_Limit">The credi t_ limit.</param>
        /// <param name="remarks">The remarks.</param>
        /// <param name="CargoMoveCode">The cargo move code.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string GetQuoteQuery(string QuotationPK, string CargoType = "1", long Version = 0, object QuotationStatus = null, DataTable OthDt = null, object ValidFor = null, object QuoteDate = null, object ShipDate = null, int CREDIT_DAYS = 0, int CREDIT_Limit = 0,
        string remarks = "", string CargoMoveCode = "", object BaseCurrencyId = null, int INCOTerms = 0, int PYMTType = 0, int Group = 0)
        {
            try
            {
                string strSQL = null;
                string cargos = null;
                DataTable scalerDT = null;
                if (!string.IsNullOrEmpty(Convert.ToString(QuotationPK).Trim()))
                {
                    strSQL = " Select nvl(CARGO_TYPE,1), nvl(QUOTATION_MST_TBL.VERSION_NO, 0) VERSION_NO, nvl(STATUS,1), nvl(VALID_FOR,1), " + "        to_char(QUOTATION_DATE,'" + dateFormat + "'), " + "        to_char(EXPECTED_SHIPMENT_DT,'" + dateFormat + "'), " + "        CREDIT_DAYS, " + "        CREDIT_LIMIT," + "        remarks," + "        cargo_move_fk," + "        CURR.CURRENCY_MST_PK BASE_CURRENCY_FK," + "        CURR.CURRENCY_ID, shipping_terms_mst_pk, pymt_type " + "  from  QUOTATION_MST_TBL,  CURRENCY_TYPE_MST_TBL CURR " + " where CURR.CURRENCY_MST_PK(+) = QUOTATION_MST_TBL.BASE_CURRENCY_FK" + " AND QUOTATION_MST_PK = " + QuotationPK;
                    scalerDT = (new WorkFlow()).GetDataTable(strSQL);
                    if (scalerDT.Rows.Count > 0)
                    {
                        CargoType = removeDBNull(scalerDT.Rows[0][0]).ToString();
                        Version = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][1]));
                        QuotationStatus = removeDBNull(scalerDT.Rows[0][2]);
                        ValidFor = removeDBNull(scalerDT.Rows[0][3]);
                        QuoteDate = removeDBNull(scalerDT.Rows[0][4]);
                        ShipDate = removeDBNull(scalerDT.Rows[0][5]);
                        CREDIT_DAYS = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][6]));
                        CREDIT_Limit = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][7]));
                        remarks = Convert.ToString(removeDBNull(scalerDT.Rows[0][8]));
                        CargoMoveCode = Convert.ToString(removeDBNull(scalerDT.Rows[0][9]));
                        BaseCurrencyId = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["CURRENCY_ID"]));
                        INCOTerms = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["shipping_terms_mst_pk"]));
                        PYMTType = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["pymt_type"]));
                    }
                    strSQL = " Select FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, AMOUNT, QUOTATION_DTL_FK ,FREIGHT_TYPE PYMT_TYPE " + " from QUOTATION_OTHER_FREIGHT_TRN where QUOTATION_DTL_FK IN " + "      ( Select QUOTE_DTL_PK from QUOTATION_DTL_TBL where " + "               QUOTATION_MST_FK = " + QuotationPK + " ) ";
                    OthDt = (new WorkFlow()).GetDataTable(strSQL);
                }
                else
                {
                    QuotationPK = "0";
                }

                if (Convert.ToInt32(CargoType) == 3)
                {
                    if (cargo == 0)
                    {
                        cargo = 1;
                        basis_cont = 1;
                    }
                }
                if (basis_cont > 0)
                {
                    if (cargo == 2)
                    {
                        cargos = " and tran3.container_type_mst_fk is null ";
                    }
                    else if (cargo == 1)
                    {
                        cargos = " and tran3.basis is null ";
                    }
                }
                else
                {
                    cargos = "";
                }
                if (Group == 1 | Group == 2)
                {
                    if (CargoType == "1" | cargo == 1)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.ALL_IN_QUOTE,      Q.OPERATOR_RATE,      Q.NET,      Q.CUSTOMER_PK,      Q.CUSTOMER_CATPK,       Q.COMM_GRPPK,Q.REF_NO2,Q.TYPE2,Q.OTH_BTN,Q.OTH_DTL,       Q.FK,Q.CUST_TYPE,     Q.COPY,Q.COMMODITY_MST_FKS,Q.POL_GRP_FK, Q.POD_GRP_FK, Q.TARIFF_GRP_FK,Q.AIF   FROM(Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                       Decode(tran3.TRANS_REFERED_FROM," + SourceType.SpotRate + ',' + SRC(SourceType.SpotRate) + ',' + " " + SourceType.Quotation + ',' + SRC(SourceType.Quotation) + ',' + " " + SourceType.Enquiry + ',' + SRC(SourceType.Enquiry) + ',' + " " + SourceType.OperatorAirlineTariff + ',' + SRC(SourceType.OperatorAirlineTariff) + ',' + " " + SourceType.CustomerContract + ',' + SRC(SourceType.CustomerContract) + ',' + " " + SourceType.GeneralTariff + ',' + SRC(SourceType.GeneralTariff) + ',' + " " + SourceType.AgentTariff + ',' + SRC(SourceType.AgentTariff) + ',' + " " + SourceType.Manual + ',' + SRC(SourceType.Manual) + ',' + SourceType.SRR + ',' + SRC(SourceType.SRR) + ")          TYPE,                     tran3.TRANS_REF_NO                         REF_NO,                   tran3.TRANS_REF_NO                         REFNO,                    TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,         PGL.PORT_GRP_MST_PK POL_PK,                                          PGL.PORT_GRP_ID POL_ID,                                            PGD.PORT_GRP_MST_PK POD_PK,                                          PGD.PORT_GRP_ID POD_ID,                                            nvl(tran3.CARRIER_MST_FK,0)                OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr3.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran3.EXPECTED_BOXES                       QUANTITY,                 tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_NAME                       COMM_ID,                  tran3.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_QUOTE,             nvl(tran3.BUYING_RATE,0)                   OPERATOR_RATE,            case                                                                 when (nvl(tran3.BUYING_RATE, 0) > 0) then                            nvl(tran3.ALL_IN_QUOTED_TARIFF -                                     nvl(tran3.BUYING_RATE, 0),                                           0)                                                                   Else                                                                 NULL                                                                 end NET,                                                             main3.CUSTOMER_MST_FK                      CUSTOMER_PK,              main3.CUSTOMER_CATEGORY_MST_FK             CUSTOMER_CATPK,           tran3.COMMODITY_GROUP_FK                   COMM_GRPPK,               tran3.TRAN_REF_NO2                         REF_NO2,                  tran3.REF_TYPE2                            TYPE2,                    ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  0                     FK,                       nvl(main3.CUST_TYPE,1) CUST_TYPE , '' COPY, tran3.COMMODITY_MST_FKS,      TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK, TRAN3.TARIFF_GRP_FK,cntr3.PREFERENCES,0 AIF             from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL                   portpol3,                             PORT_MST_TBL                   portpod3,                             PORT_GRP_MST_TBL        PGL,                                       PORT_GRP_MST_TBL        PGD,                                       OPERATOR_MST_TBL               opr3,                                 COMMODITY_MST_TBL              cmdt3,                                CONTAINER_TYPE_MST_TBL         cntr3                               where    main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                 AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                 AND    PGL.PORT_GRP_MST_PK(+)      = TRAN3.POL_GRP_FK                        AND    PGD.PORT_GRP_MST_PK(+)      = TRAN3.POD_GRP_FK                        AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)    and MAIN3.BIZ_TYPE = 2             AND    tran3.CONTAINER_TYPE_MST_FK = cntr3.CONTAINER_TYPE_MST_PK(+)          AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.QUOTATION_MST_PK =  " + QuotationPK + " " + cargos + " )Q ORDER BY Q.OPER_PK,Q.POL_PK,Q.POD_PK,Q.PREFERENCES";
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                       Decode(tran3.TRANS_REFERED_FROM," + SourceType.SpotRate + ',' + SRC(SourceType.SpotRate) + ',' + " " + SourceType.Quotation + ',' + SRC(SourceType.Quotation) + ',' + " " + SourceType.Enquiry + ',' + SRC(SourceType.Enquiry) + ',' + " " + SourceType.OperatorAirlineTariff + ',' + SRC(SourceType.OperatorAirlineTariff) + ',' + " " + SourceType.CustomerContract + ',' + SRC(SourceType.CustomerContract) + ',' + " " + SourceType.GeneralTariff + ',' + SRC(SourceType.GeneralTariff) + ',' + " " + SourceType.Manual + ',' + SRC(SourceType.Manual) + ',' + SourceType.SRR + ',' + SRC(SourceType.SRR) + ")          TYPE,                     tran3.TRANS_REF_NO                         REF_NO,                   TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,      PGL.PORT_GRP_MST_PK POL_PK,                                          PGL.PORT_GRP_ID POL_ID,                                              PGD.PORT_GRP_MST_PK POD_PK,                                          PGD.PORT_GRP_ID POD_ID,                                              nvl(tran3.CARRIER_MST_FK,0)                OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_NAME                       COMM_ID,                  tran3.BASIS                                LCL_BASIS,                NVL(dim3.DIMENTION_ID,'')                  DIMENTION_ID,             tran3.EXPECTED_WEIGHT                      WEIGHT,                   tran3.EXPECTED_VOLUME                      VOLUME,                   tran3.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_QUOTE,             nvl(tran3.BUYING_RATE,0)                   OPERATOR_RATE,            case                                                                 when (nvl(tran3.BUYING_RATE, 0) > 0) then                            nvl(tran3.ALL_IN_QUOTED_TARIFF -                                     nvl(tran3.BUYING_RATE, 0),                                           0)                                                                   Else                                                                 NULL                                                                 end NET,                                                             tran3.TRAN_REF_NO2                         REF_NO2,                  tran3.REF_TYPE2                            TYPE2,                    main3.CUSTOMER_MST_FK                      CUSTOMER_PK,              main3.CUSTOMER_CATEGORY_MST_FK             CUSTOMER_CATPK,           tran3.COMMODITY_GROUP_FK                   COMM_GRPPK,               ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  0                     FK,                       nvl(main3.CUST_TYPE,1)                     CUST_TYPE , '' COPY, tran3.COMMODITY_MST_FKS,      TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK, TRAN3.TARIFF_GRP_FK,0 AIF             FROM                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL                   portpol3,                             PORT_MST_TBL                   portpod3,                             PORT_GRP_MST_TBL               PGL,                                  PORT_GRP_MST_TBL               PGD,                                  OPERATOR_MST_TBL               opr3,                                 COMMODITY_MST_TBL              cmdt3,                                DIMENTION_UNIT_MST_TBL         dim3                                 where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                 AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                 AND    PGL.PORT_GRP_MST_PK(+)      = TRAN3.POL_GRP_FK                        AND    PGD.PORT_GRP_MST_PK(+)      = TRAN3.POD_GRP_FK                        AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+) AND main3.BIZ_TYPE = 2                AND    tran3.BASIS                 = dim3.DIMENTION_UNIT_MST_PK(+)           AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.QUOTATION_MST_PK =  " + QuotationPK + cargos;
                    }
                }
                else
                {
                    if (CargoType == "1" | cargo == 1)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.ALL_IN_QUOTE,      Q.OPERATOR_RATE,      Q.NET,      Q.CUSTOMER_PK,      Q.CUSTOMER_CATPK,       Q.COMM_GRPPK,Q.REF_NO2,Q.TYPE2,Q.OTH_BTN,Q.OTH_DTL,       Q.FK,Q.CUST_TYPE,     Q.COPY,Q.COMMODITY_MST_FKS,Q.POL_GRP_FK, Q.POD_GRP_FK, Q.TARIFF_GRP_FK,Q.AIF     FROM(Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                       Decode(tran3.TRANS_REFERED_FROM," + SourceType.SpotRate + ',' + SRC(SourceType.SpotRate) + ',' + " " + SourceType.Quotation + ',' + SRC(SourceType.Quotation) + ',' + " " + SourceType.Enquiry + ',' + SRC(SourceType.Enquiry) + ',' + " " + SourceType.OperatorAirlineTariff + ',' + SRC(SourceType.OperatorAirlineTariff) + ',' + " " + SourceType.CustomerContract + ',' + SRC(SourceType.CustomerContract) + ',' + " " + SourceType.GeneralTariff + ',' + SRC(SourceType.GeneralTariff) + ',' + " " + SourceType.AgentTariff + ',' + SRC(SourceType.AgentTariff) + ',' + " " + SourceType.Manual + ',' + SRC(SourceType.Manual) + ',' + SourceType.SRR + ',' + SRC(SourceType.SRR) + ")          TYPE,                     tran3.TRANS_REF_NO                         REF_NO,                   tran3.TRANS_REF_NO                         REFNO,                    TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,         tran3.PORT_MST_POL_FK                      POL_PK,                   portpol3.PORT_ID                           POL_ID,                   tran3.PORT_MST_POD_FK                      POD_PK,                   portpod3.PORT_ID                           POD_ID,                   nvl(tran3.CARRIER_MST_FK,0)                OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr3.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran3.EXPECTED_BOXES                       QUANTITY,                 tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_NAME                       COMM_ID,                  tran3.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_QUOTE,             nvl(tran3.BUYING_RATE,0)                   OPERATOR_RATE,            case                                                                 when (nvl(tran3.BUYING_RATE, 0) > 0) then                            nvl(tran3.ALL_IN_QUOTED_TARIFF -                                     nvl(tran3.BUYING_RATE, 0),                                           0)                                                                   Else                                                                 NULL                                                                 end NET,                                                             main3.CUSTOMER_MST_FK                      CUSTOMER_PK,              main3.CUSTOMER_CATEGORY_MST_FK             CUSTOMER_CATPK,           tran3.COMMODITY_GROUP_FK                   COMM_GRPPK,               tran3.TRAN_REF_NO2                         REF_NO2,                  tran3.REF_TYPE2                            TYPE2,                    ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  tran3.QUOTE_DTL_PK                     FK,                       nvl(main3.CUST_TYPE,1)                      CUST_TYPE , '' COPY, tran3.COMMODITY_MST_FKS,      TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK, TRAN3.TARIFF_GRP_FK,cntr3.PREFERENCES,0 AIF              from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL                   portpol3,                             PORT_MST_TBL                   portpod3,                             OPERATOR_MST_TBL               opr3,                                 COMMODITY_MST_TBL              cmdt3,                                CONTAINER_TYPE_MST_TBL         cntr3                               where    main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                 AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                 AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)   AND main3.BIZ_TYPE = 2              AND    tran3.CONTAINER_TYPE_MST_FK = cntr3.CONTAINER_TYPE_MST_PK(+)          AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.QUOTATION_MST_PK =  " + QuotationPK + " " + cargos + ")Q ORDER BY Q.OPER_PK,Q.POL_PK,Q.POD_PK,Q.PREFERENCES";
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                       Decode(tran3.TRANS_REFERED_FROM," + SourceType.SpotRate + ',' + SRC(SourceType.SpotRate) + ',' + " " + SourceType.Quotation + ',' + SRC(SourceType.Quotation) + ',' + " " + SourceType.Enquiry + ',' + SRC(SourceType.Enquiry) + ',' + " " + SourceType.OperatorAirlineTariff + ',' + SRC(SourceType.OperatorAirlineTariff) + ',' + " " + SourceType.CustomerContract + ',' + SRC(SourceType.CustomerContract) + ',' + " " + SourceType.GeneralTariff + ',' + SRC(SourceType.GeneralTariff) + ',' + " " + SourceType.AgentTariff + ',' + SRC(SourceType.AgentTariff) + ',' + " " + SourceType.Manual + ',' + SRC(SourceType.Manual) + ',' + SourceType.SRR + ',' + SRC(SourceType.SRR) + ")          TYPE,                     tran3.TRANS_REF_NO                         REF_NO,                   TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,      tran3.PORT_MST_POL_FK                      POL_PK,                   portpol3.PORT_ID                           POL_ID,                   tran3.PORT_MST_POD_FK                      POD_PK,                   portpod3.PORT_ID                           POD_ID,                   nvl(tran3.CARRIER_MST_FK,0)                OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_NAME                       COMM_ID,                  tran3.BASIS                                LCL_BASIS,                NVL(dim3.DIMENTION_ID,'')                  DIMENTION_ID,             tran3.EXPECTED_WEIGHT                      WEIGHT,                   tran3.EXPECTED_VOLUME                      VOLUME,                   tran3.ALL_IN_TARIFF                        ALL_IN_TARIFF,            tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_QUOTE,             nvl(tran3.BUYING_RATE,0)                   OPERATOR_RATE,            case                                                                 when (nvl(tran3.BUYING_RATE, 0) > 0) then                            nvl(tran3.ALL_IN_QUOTED_TARIFF -                                     nvl(tran3.BUYING_RATE, 0),                                           0)                                                                   Else                                                                 NULL                                                                 end NET,                                                             tran3.TRAN_REF_NO2                         REF_NO2,                  tran3.REF_TYPE2                            TYPE2,                    main3.CUSTOMER_MST_FK                      CUSTOMER_PK,              main3.CUSTOMER_CATEGORY_MST_FK             CUSTOMER_CATPK,           tran3.COMMODITY_GROUP_FK                   COMM_GRPPK,               ''                                         OTH_BTN,                  ''                                         OTH_DTL,                  tran3.QUOTE_DTL_PK                     FK,                       nvl(main3.CUST_TYPE,1)                     CUST_TYPE , '' COPY, tran3.COMMODITY_MST_FKS,     TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK, TRAN3.TARIFF_GRP_FK,0 AIF       FROM                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL                   portpol3,                             PORT_MST_TBL                   portpod3,                             OPERATOR_MST_TBL               opr3,                                 COMMODITY_MST_TBL              cmdt3,                                DIMENTION_UNIT_MST_TBL         dim3                                 where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                 AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                 AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+) AND  main3.BIZ_TYPE = 2               AND    tran3.BASIS                 = dim3.DIMENTION_UNIT_MST_PK(+)           AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.QUOTATION_MST_PK =  " + QuotationPK + cargos;
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Quotation Query For (QuotePk.) "

        #region " Quotation Query For Freights (QuotePk.) "

        /// <summary>
        /// Gets the quote query freights.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="Group">The group.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <returns></returns>
        private string GetQuoteQueryFreights(string QuotationPK, string CargoType = "1", int Group = 0, bool AmendFlg = false, string SectorContainers = "")
        {
            try
            {
                if (string.IsNullOrEmpty(Convert.ToString(QuotationPK).Trim()))
                    QuotationPK = Convert.ToString(0);
                string strSQL = null;
                string strSQL1 = null;
                string cargos = null;

                if (basis_cont > 0)
                {
                    if (cargo == 2)
                    {
                        cargos = " and tran3.container_type_mst_fk is null ";
                    }
                    else if (cargo == 1)
                    {
                        cargos = " and tran3.basis is null ";
                    }
                }
                else
                {
                    cargos = "";
                }
                //end
                if (Group == 1 | Group == 2)
                {
                    if (CargoType == "1")
                    {
                        strSQL = "    (Select    DISTINCT             tran3.TRANS_REF_NO                         REF_NO,                   PGL.PORT_GRP_MST_PK                        POL_PK,                   PGD.PORT_GRP_MST_PK                        POD_PK,                   tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,              frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_RATE                          QUOTERATE,                     frtd3.TARIFF_RATE                          FINAL_RATE,                frtd3.PYMT_TYPE                            PYTPE,                    decode(frtd3.PYMT_TYPE,1,'PrePaid', 2,'Collect', 3,'Foreign') PYTYPE,                frt3.preference preference,                                          frt3.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0)  OPER_PK                 from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL              POL,     PORT_MST_TBL              POD,     PORT_GRP_MST_TBL          PGL,     PORT_GRP_MST_TBL          PGD,     QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3,                                 OPERATOR_MST_TBL          OMT                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                AND     tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                And     TRAN3.PORT_MST_POL_FK       = POL.PORT_MST_PK     AND     TRAN3.PORT_MST_POD_FK       = POD.PORT_MST_PK     AND     TRAN3.POL_GRP_FK = PGL.PORT_GRP_MST_PK(+)     AND     TRAN3.POD_GRP_FK = PGD.PORT_GRP_MST_PK(+)     AND     frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)       --AND    frt3.CHARGE_BASIS           <> 2                                    AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)              AND    main3.QUOTATION_MST_PK =  " + QuotationPK + "     AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)" + cargos + " ) ";
                    }
                    else
                    {
                        strSQL = "    Select    DISTINCT             tran3.TRANS_REF_NO                         REF_NO,                   PGL.PORT_GRP_MST_PK                        POL_PK,                   PGD.PORT_GRP_MST_PK                        POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTE_MIN_RATE,           frtd3.QUOTED_RATE                          QUOTERATE,                frtd3.TARIFF_RATE                          FINAL_RATE,                     frtd3.PYMT_TYPE                            PYTPE,                    decode(frtd3.PYMT_TYPE,1,'PrePaid', 2,'Collect', 3,'Foreign') PYTYPE,frt3.preference preference,frt3.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0)  OPER_PK      from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL              POL,     PORT_MST_TBL              POD,     PORT_GRP_MST_TBL          PGL,     PORT_GRP_MST_TBL          PGD,     QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3,OPERATOR_MST_TBL OMT      where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                And     TRAN3.PORT_MST_POL_FK      = POL.PORT_MST_PK     AND     TRAN3.PORT_MST_POD_FK      = POD.PORT_MST_PK     AND     TRAN3.POL_GRP_FK           = PGL.PORT_GRP_MST_PK(+)     AND     TRAN3.POD_GRP_FK           = PGD.PORT_GRP_MST_PK(+)     AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)       --AND    frt3.CHARGE_BASIS           <> 2                                    AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)              AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)     AND    main3.QUOTATION_MST_PK =  " + QuotationPK + "                     " + cargos;
                        //& "            order by frt3.preference"  'Added " Preference Order" By Prakash Chandra on 29/4/08
                    }
                    //Manoharan 10July2007: to show all the freight elements when Quotation is active
                    strSQL1 = "  union  (Select DISTINCT tran3.TRANS_REF_NO REF_NO, PGL.PORT_GRP_MST_PK POL_PK, PGD.PORT_GRP_MST_PK POD_PK,  ";
                    if (CargoType == "1")
                    {
                        strSQL1 += " tran3.CONTAINER_TYPE_MST_FK CNTR_PK, ";
                    }
                    else
                    {
                        strSQL1 += " tran3.BASIS LCLBASIS, ";
                    }

                    strSQL1 += "  FRM.FREIGHT_ELEMENT_MST_PK  FRT_PK, FRM.FREIGHT_ELEMENT_ID      FRT_ID,    FRM.FREIGHT_ELEMENT_NAME    FRT_NAME, DECODE(FRM.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS, 'false'   SELECTED,'false' ADVATOS , CURR.CURRENCY_MST_PK  CURR_PK,   CURR.CURRENCY_ID  CURR_ID,  null   RATE, ";

                    if (CargoType == "2")
                    {
                        strSQL1 += " null    QUOTE_MIN_RATE, ";
                    }
                    //modified by thiyagarajan on 2/12/08 for location based curr. task
                    //Snigdharani - 30/12/2008 -  AND FRM.BY_DEFAULT = 1 - Removed
                    strSQL1 += " null    QUOTERATE, 1    PYTPE,   'PrePaid'  PYTYPE,FRM.Preference preference,FRM.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK from FREIGHT_ELEMENT_MST_TBL FRM, CURRENCY_TYPE_MST_TBL CURR,   QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, PORT_MST_TBL  POL, PORT_MST_TBL  POD, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD, QUOTATION_FREIGHT_TRN  frtd3,OPERATOR_MST_TBL OMT    where FRM.ACTIVE_FLAG = 1 AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "  AND FRM.BUSINESS_TYPE in (2,3)   And TRAN3.PORT_MST_POL_FK = POL.PORT_MST_PK  AND TRAN3.PORT_MST_POD_FK = POD.PORT_MST_PK  AND TRAN3.POL_GRP_FK           = PGL.PORT_GRP_MST_PK(+)  AND TRAN3.POD_GRP_FK           = PGD.PORT_GRP_MST_PK(+)  --AND FRM.CHARGE_BASIS <> 2   AND FRM.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)   and frm.freight_element_mst_pk not in (select  frtd3.FREIGHT_ELEMENT_MST_FK  from   QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, QUOTATION_FREIGHT_TRN  frtd3   where  main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK  AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK   AND main3.QUOTATION_MST_PK = " + QuotationPK + cargos;
                    strSQL1 += " ) and   main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK     and main3.Status=1 AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK AND main3.QUOTATION_MST_PK = " + QuotationPK + "     AND    tran3.CARRIER_MST_FK(+)=OMT.OPERATOR_MST_PK" + cargos + ") order by preference";
                    strSQL = strSQL + strSQL1;
                }
                else
                {
                    if (CargoType == "1")
                    {
                        if (AmendFlg == false)
                        {
                            strSQL = "    (Select                 tran3.TRANS_REF_NO                         REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,              frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_RATE                          QUOTERATE,                     frtd3.TARIFF_RATE                          FINAL_RATE,                frtd3.PYMT_TYPE                            PYTPE,                    decode(frtd3.PYMT_TYPE,1,'PrePaid',2, 'Collect', 3,'Foreign') PYTYPE,                frt3.preference preference,                                          frt3.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK                  from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3,OPERATOR_MST_TBL OMT          where                                                                           main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)       --AND    frt3.CHARGE_BASIS           <> 2                                    AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)              AND    main3.QUOTATION_MST_PK =  " + QuotationPK + "     AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)" + cargos + " ) ";
                            //& " order by frt3.preference"  'Added " Preference Order" By Prakash Chandra on 29/4/08
                        }
                        else
                        {
                            strSQL = " SELECT TRAN3.TRANS_REF_NO REF_NO,   TRAN3.PORT_MST_POL_FK POL_PK,       TRAN3.PORT_MST_POD_FK POD_PK,        TRAN3.CONTAINER_TYPE_MST_FK CNTR_PK,        FRTD3.FREIGHT_ELEMENT_MST_FK FRT_PK,        FRT3.FREIGHT_ELEMENT_ID FRT_ID,        FRT3.FREIGHT_ELEMENT_NAME FRT_NAME,       DECODE(FRT3.CHARGE_BASIS,               '0',               '',              '1',               '%',               '2',               'Flat Rate',               '3',               'Kgs',              '4',               'Unit') CHARGE_BASIS,      DECODE(FRTD3.CHECK_FOR_ALL_IN_RT, 1, 'true', 'false') SELECTED,       DECODE(FRTD3.CHECK_ADVATOS, 1, 'true', 'false') ADVATOS,        FRTD3.CURRENCY_MST_FK CURR_PK,        CURR3.CURRENCY_ID CURR_ID,        FRTD3.QUOTED_RATE QUOTERATE,       FRTD3.TARIFF_RATE FINAL_RATE,       FRTD3.PYMT_TYPE PYTPE,        DECODE(FRTD3.PYMT_TYPE, 1, 'PrePaid', 2, 'Collect', 3,'Foreign') PYTYPE,        FRT3.PREFERENCE PREFERENCE,        FRT3.CREDIT,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK    FROM QUOTATION_MST_TBL          MAIN3,        QUOTATION_DTL_TBL  TRAN3,        QUOTATION_FREIGHT_TRN FRTD3,        FREIGHT_ELEMENT_MST_TBL    FRT3,        CURRENCY_TYPE_MST_TBL      CURR3,OPERATOR_MST_TBL OMT  WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)    AND MAIN3.QUOTATION_MST_PK =  " + QuotationPK + "     AND    tran3.CARRIER_MST_FK(+)=OMT.OPERATOR_MST_PK" + cargos + "     UNION (SELECT '' REF_NO,               POL.PORT_MST_PK POL_PK,               POD.PORT_MST_PK POD_PK,               CNTR.CONTAINER_TYPE_MST_PK CNTR_PK,               FRM.FREIGHT_ELEMENT_MST_PK,              FRM.FREIGHT_ELEMENT_ID,              FRM.FREIGHT_ELEMENT_NAME,               DECODE(FRM.CHARGE_BASIS,                      '0',                      '',                     '1',                     '%',                      '2',                      'Flat Rate',                     '3',                    'Kgs',                     '4',                     'Unit') CHARGE_BASIS,               'false' SELECTED,             'false' ADVATOS,              CURR.CURRENCY_MST_PK,              CURR.CURRENCY_ID,               NULL RATE,              NULL QUOTERATE,              1 PYTPE,             'PrePaid' PYTYPE,              FRM.PREFERENCE PREFERENCE,              FRM.CREDIT,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK           FROM FREIGHT_ELEMENT_MST_TBL FRM,             CURRENCY_TYPE_MST_TBL   CURR,              PORT_MST_TBL            POL,             PORT_MST_TBL            POD,               CONTAINER_TYPE_MST_TBL  CNTR,OPERATOR_MST_TBL OMT        WHERE FRM.ACTIVE_FLAG = 1           AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "         AND FRM.BUSINESS_TYPE IN (2, 3)         AND FRM.CHARGE_TYPE <> 3           AND (POL.PORT_MST_PK, POD.PORT_MST_PK, CNTR.CONTAINER_TYPE_MST_PK,OMT.OPERATOR_MST_PK) IN                (" + Convert.ToString(SectorContainers) + ")           AND FRM.FREIGHT_ELEMENT_MST_PK NOT IN               (SELECT FRTD3.FREIGHT_ELEMENT_MST_FK                  FROM QUOTATION_MST_TBL          MAIN3,                       QUOTATION_DTL_TBL  TRAN3,                      QUOTATION_FREIGHT_TRN FRTD3,                       FREIGHT_ELEMENT_MST_TBL    FRT3,                       CURRENCY_TYPE_MST_TBL      CURR3                 WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK                   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK                   AND FRTD3.FREIGHT_ELEMENT_MST_FK =                       FRT3.FREIGHT_ELEMENT_MST_PK(+)                   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)                   AND MAIN3.QUOTATION_MST_PK =  " + QuotationPK + "))" + cargos + " ";
                            // & "  ORDER BY PREFERENCE "
                        }

                        //Added by rabbani reason USS Gap,introduced new field as "QUOTE_MIN_RATE"
                    }
                    else
                    {
                        if (AmendFlg == false)
                        {
                            strSQL = "    Select                 tran3.TRANS_REF_NO                         REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTE_MIN_RATE,           frtd3.QUOTED_RATE                          QUOTERATE,                frtd3.TARIFF_RATE                          FINAL_RATE,                     frtd3.PYMT_TYPE                            PYTPE,                    decode(frtd3.PYMT_TYPE,1,'PrePaid', 2, 'Collect', 3,'Foreign') PYTYPE,frt3.preference preference,frt3.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK     from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3,OPERATOR_MST_TBL OMT           where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)       --AND    frt3.CHARGE_BASIS           <> 2                                    AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)              AND    main3.QUOTATION_MST_PK =  " + QuotationPK + "                          AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)" + cargos;
                            //& "            order by frt3.preference"  'Added " Preference Order" By Prakash Chandra on 29/4/08
                        }
                        else
                        {
                            strSQL = "    Select                 tran3.TRANS_REF_NO                         REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTE_MIN_RATE,           frtd3.QUOTED_RATE                          QUOTERATE,                frtd3.TARIFF_RATE                          FINAL_RATE,                     frtd3.PYMT_TYPE                            PYTPE,                    decode(frtd3.PYMT_TYPE,1,'PrePaid', 2, 'Collect', 3,'Foreign') PYTYPE,frt3.preference preference,frt3.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK     from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3,OPERATOR_MST_TBL OMT                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)       AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)              AND    main3.QUOTATION_MST_PK =  " + QuotationPK + "                          AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)" + cargos + "   UNION (SELECT '' REF_NO,               POL.PORT_MST_PK POL_PK,               POD.PORT_MST_PK POD_PK,              DIM.DIMENTION_UNIT_MST_PK LCLBASIS,               FRM.FREIGHT_ELEMENT_MST_PK FRT_PK,              FRM.FREIGHT_ELEMENT_ID FRT_ID,              FRM.FREIGHT_ELEMENT_NAME FRT_NAME,               DECODE(FRM.CHARGE_BASIS,                        '0',                         '',                         '1',                        '%',                        '2',                        'Flat Rate',                        '3',                        'Kgs',                         '4',                       'Unit') CHARGE_BASIS,                 'false' SELECTED,                  'false' ADVATOS,                  CURR.CURRENCY_MST_PK CURR_PK,                  CURR.CURRENCY_ID CURR_ID,                  NULL QUOTE_MIN_RATE,                 NULL QUOTERATE,                  NULL FINAL_RATE,                 1 PYTPE,                  'PrePaid' PYTYPE,                 FRM.PREFERENCE PREFERENCE,                  FRM.CREDIT,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPER_PK             FROM FREIGHT_ELEMENT_MST_TBL FRM,                  CURRENCY_TYPE_MST_TBL   CURR,                 PORT_MST_TBL            POL,                 PORT_MST_TBL            POD,                  DIMENTION_UNIT_MST_TBL  DIM,OPERATOR_MST_TBL OMT           WHERE FRM.ACTIVE_FLAG = 1              AND CURR.CURRENCY_MST_PK = 1388             AND FRM.BUSINESS_TYPE IN (2, 3)              AND FRM.CHARGE_TYPE <> 3            AND (POL.PORT_MST_PK, POD.PORT_MST_PK, DIM.DIMENTION_UNIT_MST_PK,OMT.OPERATOR_MST_PK) IN                 (" + Convert.ToString(SectorContainers) + ")             AND FRM.FREIGHT_ELEMENT_MST_PK NOT IN                 (SELECT FRTD3.FREIGHT_ELEMENT_MST_FK                     FROM QUOTATION_MST_TBL          MAIN3,                         QUOTATION_DTL_TBL  TRAN3,                         QUOTATION_FREIGHT_TRN FRTD3,                        FREIGHT_ELEMENT_MST_TBL    FRT3,                      CURRENCY_TYPE_MST_TBL      CURR3                 WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK                     AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK                      AND FRTD3.FREIGHT_ELEMENT_MST_FK =                         FRT3.FREIGHT_ELEMENT_MST_PK(+)                    AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)                     AND MAIN3.QUOTATION_MST_PK =" + QuotationPK + ") " + cargos + ") ";
                        }
                    }
                    //Manoharan 10July2007: to show all the freight elements when Quotation is active
                    strSQL1 = "  union  (Select tran3.TRANS_REF_NO REF_NO, tran3.PORT_MST_POL_FK POL_PK, tran3.PORT_MST_POD_FK POD_PK,  ";
                    if (CargoType == "1")
                    {
                        strSQL1 += " tran3.CONTAINER_TYPE_MST_FK CNTR_PK, ";
                    }
                    else
                    {
                        strSQL1 += " tran3.BASIS LCLBASIS, ";
                    }

                    strSQL1 += "  FRM.FREIGHT_ELEMENT_MST_PK  FRT_PK, FRM.FREIGHT_ELEMENT_ID      FRT_ID,    FRM.FREIGHT_ELEMENT_NAME    FRT_NAME, DECODE(FRM.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS, 'false'   SELECTED,'false' ADVATOS , CURR.CURRENCY_MST_PK  CURR_PK,   CURR.CURRENCY_ID  CURR_ID,  null   RATE, ";

                    if (CargoType == "2")
                    {
                        strSQL1 += " null    QUOTE_MIN_RATE, ";
                    }
                    //modified by thiyagarajan on 2/12/08 for location based curr. task
                    //Snigdharani - 30/12/2008 -  AND FRM.BY_DEFAULT = 1 - Removed
                    strSQL1 += " null    QUOTERATE, 1    PYTPE,   'PrePaid'  PYTYPE,FRM.Preference preference,FRM.credit,'' AIFType,nvl(OMT.OPERATOR_MST_PK,0) OPERATOR_MST_PK from FREIGHT_ELEMENT_MST_TBL FRM, CURRENCY_TYPE_MST_TBL CURR,   QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, QUOTATION_FREIGHT_TRN  frtd3,OPERATOR_MST_TBL OMT    where FRM.ACTIVE_FLAG = 1 AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "  AND FRM.BUSINESS_TYPE in (2,3)   --AND FRM.CHARGE_BASIS <> 2   AND FRM.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)   and frm.freight_element_mst_pk not in (select  frtd3.FREIGHT_ELEMENT_MST_FK  from   QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, QUOTATION_FREIGHT_TRN  frtd3   where  main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK  AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK   AND main3.QUOTATION_MST_PK = " + QuotationPK + cargos;
                    strSQL1 += " ) and   main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK     and main3.Status=1 AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK AND main3.QUOTATION_MST_PK = " + QuotationPK + "     AND    tran3.CARRIER_MST_FK=OMT.OPERATOR_MST_PK(+)" + cargos + ") order by preference";
                    strSQL = strSQL + strSQL1;
                }
                //If CargoType = "1" Then
                //    strSQL = "    (Select            " & vbCrLf _
                //            & "     tran3.TRANS_REF_NO                         REF_NO,              " & vbCrLf _
                //            & "     tran3.PORT_MST_POL_FK                      POL_PK,              " & vbCrLf _
                //            & "     tran3.PORT_MST_POD_FK                      POD_PK,              " & vbCrLf _
                //            & "     tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,             " & vbCrLf _
                //            & "     frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,              " & vbCrLf _
                //            & "     frt3.FREIGHT_ELEMENT_ID                    FRT_ID,              " & vbCrLf _
                //            & "     frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,            " & vbCrLf _
                //            & "     DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS, " & vbCrLf _
                //            & "     DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,  " & vbCrLf _
                //            & "     DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,         " & vbCrLf _
                //            & "     frtd3.CURRENCY_MST_FK                      CURR_PK,             " & vbCrLf _
                //            & "     curr3.CURRENCY_ID                          CURR_ID,             " & vbCrLf _
                //            & "     frtd3.QUOTED_RATE                          QUOTERATE,                " & vbCrLf _
                //            & "     frtd3.TARIFF_RATE                          FINAL_RATE,           " & vbCrLf _
                //            & "     frtd3.PYMT_TYPE                            PYTPE,               " & vbCrLf _
                //            & "     decode(frtd3.PYMT_TYPE,1,'PrePaid','Collect') PYTYPE,           " & vbCrLf _
                //            & "     frt3.preference preference,                                     " & vbCrLf _
                //            & "     frt3.credit                                                     " & vbCrLf _
                //            & "    from                                                             " & vbCrLf _
                //            & "     QUOTATION_MST_TBL              main3,                           " & vbCrLf _
                //            & "     QUOTATION_DTL_TBL      tran3,                           " & vbCrLf _
                //            & "     QUOTATION_FREIGHT_TRN     frtd3,                           " & vbCrLf _
                //            & "     FREIGHT_ELEMENT_MST_TBL        frt3,                            " & vbCrLf _
                //            & "     CURRENCY_TYPE_MST_TBL          curr3                            " & vbCrLf _
                //            & "    where                                                               " & vbCrLf _
                //            & "            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK           " & vbCrLf _
                //            & "     AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK           " & vbCrLf _
                //            & "     AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)  " & vbCrLf _
                //            & "     --AND    frt3.CHARGE_BASIS           <> 2                               " & vbCrLf _
                //            & "     AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)         " & vbCrLf _
                //            & "     AND    main3.QUOTATION_MST_PK =  " & QuotationPK & vbCrLf _
                //            & cargos & " ) "
                //    '& " order by frt3.preference"  'Added " Preference Order" By Prakash Chandra on 29/4/08

                //Else 'Added by rabbani reason USS Gap,introduced new field as "QUOTE_MIN_RATE"
                //    strSQL = "    Select            " & vbCrLf _
                //            & "     tran3.TRANS_REF_NO                         REF_NO,              " & vbCrLf _
                //            & "     tran3.PORT_MST_POL_FK                      POL_PK,              " & vbCrLf _
                //            & "     tran3.PORT_MST_POD_FK                      POD_PK,              " & vbCrLf _
                //            & "     tran3.BASIS                                LCLBASIS,            " & vbCrLf _
                //            & "     frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,              " & vbCrLf _
                //            & "     frt3.FREIGHT_ELEMENT_ID                    FRT_ID,              " & vbCrLf _
                //            & "     frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,            " & vbCrLf _
                //            & "     DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS, " & vbCrLf _
                //            & "     DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,  " & vbCrLf _
                //            & "     DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,          " & vbCrLf _
                //            & "     frtd3.CURRENCY_MST_FK                      CURR_PK,             " & vbCrLf _
                //            & "     curr3.CURRENCY_ID                          CURR_ID,             " & vbCrLf _
                //            & "     frtd3.QUOTED_MIN_RATE                      QUOTE_MIN_RATE,      " & vbCrLf _
                //            & "     frtd3.QUOTED_RATE                          QUOTERATE,           " & vbCrLf _
                //            & "     frtd3.TARIFF_RATE                          FINAL_RATE,                " & vbCrLf _
                //            & "     frtd3.PYMT_TYPE                            PYTPE,               " & vbCrLf _
                //            & "     decode(frtd3.PYMT_TYPE,1,'PrePaid','Collect') PYTYPE,frt3.preference preference,frt3.credit " & vbCrLf _
                //            & "    from                                                             " & vbCrLf _
                //            & "     QUOTATION_MST_TBL              main3,                           " & vbCrLf _
                //            & "     QUOTATION_DTL_TBL      tran3,                           " & vbCrLf _
                //            & "     QUOTATION_FREIGHT_TRN     frtd3,                           " & vbCrLf _
                //            & "     FREIGHT_ELEMENT_MST_TBL        frt3,                            " & vbCrLf _
                //            & "     CURRENCY_TYPE_MST_TBL          curr3                            " & vbCrLf _
                //            & "    where                                                                " & vbCrLf _
                //            & "            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK           " & vbCrLf _
                //            & "     AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK           " & vbCrLf _
                //            & "     AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)  " & vbCrLf _
                //            & "     --AND    frt3.CHARGE_BASIS           <> 2                               " & vbCrLf _
                //            & "     AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)         " & vbCrLf _
                //            & "     AND    main3.QUOTATION_MST_PK =  " & QuotationPK & "                     " & vbCrLf _
                //            & cargos
                //    '& "            order by frt3.preference"  'Added " Preference Order" By Prakash Chandra on 29/4/08

                //End If
                //'Manoharan 10July2007: to show all the freight elements when Quotation is active
                //strSQL1 = "  union  (Select tran3.TRANS_REF_NO REF_NO, tran3.PORT_MST_POL_FK POL_PK, tran3.PORT_MST_POD_FK POD_PK,  "
                //If CargoType = "1" Then
                //    strSQL1 &= " tran3.CONTAINER_TYPE_MST_FK CNTR_PK, "
                //Else
                //    strSQL1 &= " tran3.BASIS LCLBASIS, "
                //End If

                //strSQL1 &= "  FRM.FREIGHT_ELEMENT_MST_PK  FRT_PK, FRM.FREIGHT_ELEMENT_ID      FRT_ID,  " & vbCrLf _
                //        & "  FRM.FREIGHT_ELEMENT_NAME    FRT_NAME, DECODE(FRM.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS, 'false'   SELECTED,'false' ADVATOS , CURR.CURRENCY_MST_PK  CURR_PK, " & vbCrLf _
                //        & "  CURR.CURRENCY_ID  CURR_ID,  null   RATE, "

                //If CargoType = "2" Then
                //    strSQL1 &= " null    QUOTE_MIN_RATE, "
                //End If
                //'modified by thiyagarajan on 2/12/08 for location based curr. task
                //'Snigdharani - 30/12/2008 -  AND FRM.BY_DEFAULT = 1 - Removed
                //strSQL1 &= " null    QUOTERATE, 1    PYTPE, " & vbCrLf _
                //        & "  'PrePaid'  PYTYPE,FRM.Preference preference,FRM.credit from FREIGHT_ELEMENT_MST_TBL FRM, CURRENCY_TYPE_MST_TBL CURR, " & vbCrLf _
                //        & "  QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, QUOTATION_FREIGHT_TRN  frtd3  " & vbCrLf _
                //        & "  where FRM.ACTIVE_FLAG = 1 AND CURR.CURRENCY_MST_PK = " & Session("CURRENCY_MST_PK") & vbCrLf _
                //        & "  AND FRM.BUSINESS_TYPE in (2,3) " & vbCrLf _
                //        & "  --AND FRM.CHARGE_BASIS <> 2 " & vbCrLf _
                //        & "  AND FRM.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM) " & vbCrLf _
                //        & "  and frm.freight_element_mst_pk not in (select  frtd3.FREIGHT_ELEMENT_MST_FK  from " & vbCrLf _
                //        & "  QUOTATION_MST_TBL   main3,  QUOTATION_DTL_TBL tran3, QUOTATION_FREIGHT_TRN  frtd3 " & vbCrLf _
                //        & "  where  main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK  AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK " & vbCrLf _
                //        & "  AND main3.QUOTATION_MST_PK = " & QuotationPK & vbCrLf _
                //        & cargos
                //strSQL1 &= " ) and   main3.QUOTATION_MST_PK = tran3.QUOTATION_MST_FK   " & vbCrLf _
                //        & "  and main3.Status=1 AND tran3.QUOTE_DTL_PK = frtd3.QUOTATION_DTL_FK AND main3.QUOTATION_MST_PK = " & QuotationPK & vbCrLf _
                //        & cargos & vbCrLf _
                //        & ") order by preference"
                //strSQL = strSQL & strSQL1
                //End    Manoharan 10July2007:
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Quotation Query For Freights (QuotePk.) "

        /// <summary>
        /// Updates the temporary cus.
        /// </summary>
        /// <param name="CustomerPK">The customer pk.</param>
        public void UpdateTempCus(int CustomerPK)
        {
            try
            {
                WorkFlow objWF = new WorkFlow();
                bool Result = false;
                Result = objWF.ExecuteCommands("update temp_customer_tbl set transaction_type=1 where customer_mst_pk=' " + CustomerPK + "'");
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Fetch UWG2 Entry grid. "

        #region "Fetch Barcode Manager Pk"

        /// <summary>
        /// Fetches the bar code manager pk.
        /// </summary>
        /// <param name="Configid">The configid.</param>
        /// <returns></returns>
        public int FetchBarCodeManagerPk(string Configid)
        {
            try
            {
                string StrSql = null;
                DataSet DsBarManager = null;
                int strReturn = 0;

                WorkFlow objWF = new WorkFlow();
                //StrSql = "select bdmt.bcd_mst_pk,bdmt.field_name from  barcode_data_mst_tbl bdmt where bdmt.config_id_fk='" & Configid & " '"

                StrSql = "select bdmt.bcd_mst_pk,bdmt.field_name from  barcode_data_mst_tbl bdmtwhere bdmt.config_id_fk= '" + Configid + "'";
                DsBarManager = objWF.GetDataSet(StrSql);
                if (DsBarManager.Tables[0].Rows.Count > 0)
                {
                    var _with6 = DsBarManager.Tables[0].Rows[0];
                    strReturn = Convert.ToInt32(removeDBNull(_with6["bcd_mst_pk"]));
                }
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Barcode Manager Pk"

        #region "Fetch Barcode Type"

        /// <summary>
        /// Fetches the bar code field.
        /// </summary>
        /// <param name="BarCodeManagerPk">The bar code manager pk.</param>
        /// <returns></returns>
        public DataSet FetchBarCodeField(int BarCodeManagerPk)
        {
            try
            {
                string StrSql = null;
                DataSet DsBarManager = null;
                int strReturn = 0;
                WorkFlow objWF = new WorkFlow();
                StringBuilder strQuery = new StringBuilder();

                strQuery.Append("select bdmt.bcd_mst_pk, bdmt.field_name, bdmt.default_value");
                strQuery.Append("  from barcode_data_mst_tbl bdmt, barcode_doc_data_tbl bddt");
                strQuery.Append(" where bdmt.bcd_mst_pk = bddt.bcd_mst_fk");
                strQuery.Append("   and bdmt.BCD_MST_FK= " + BarCodeManagerPk);
                strQuery.Append(" ORDER BY default_value desc");

                // StrSql = "select bdmt.bcd_mst_pk, bdmt.field_name ,bdmt.default_value from barcode_data_mst_tbl bdmt, barcode_doc_data_tbl bddt where bdmt.bcd_mst_pk=bddt.bcd_mst_fk and bdmt.BCD_MST_FK=" & BarCodeManagerPk
                DsBarManager = objWF.GetDataSet(strQuery.ToString());
                return DsBarManager;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Barcode Type"

        #region " Main Fetch Query "

        // this is modified by Thiyagarajan 28/5/08 for fcl and lcl
        /// <summary>
        /// Fetches the one LCL.
        /// </summary>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <returns></returns>
        private DataSet FetchOneLCL(DataSet GridDS, string EnqNo = "", string CustNo = "", string CargoType = "2", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "")
        {
            try
            {
                string strSQL = null;
                string strCondition = null;
                WorkFlow objWF = new WorkFlow();
                StringBuilder buildQuery = new StringBuilder();
                StringBuilder buildCondition = new StringBuilder();
                DataSet ds = null;
                GridDS.Tables.Clear();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the type of the pay.
        /// </summary>
        /// <param name="ShipPK">The ship pk.</param>
        /// <returns></returns>
        public int FetchPayType(int ShipPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();

                strSQL = "SELECT SH.FREIGHT_TYPE FROM SHIPPING_TERMS_MST_TBL SH WHERE SH.SHIPPING_TERMS_MST_PK = " + ShipPK;
                return Convert.ToInt32(objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Determines whether [is customer approved] [the specified quotation sea pk].
        /// </summary>
        /// <param name="QuotationSeaPk">The quotation sea pk.</param>
        /// <returns></returns>
        public bool IsCustomerApproved(int QuotationSeaPk)
        {
            WorkFlow objWF = new WorkFlow();
            try
            {
                int status = Convert.ToInt32(objWF.ExecuteScaler("SELECT NVL(Q.CUSTOMER_APPROVED,0) FROM QUOTATION_MST_TBL Q WHERE Q.QUOTATION_MST_PK=" + QuotationSeaPk));
                if (status == 1)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
            }
            return false;
        }

        #endregion " Main Fetch Query "

        #region "Get Quotation Status"

        /// <summary>
        /// Gets the quot status.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <returns></returns>
        public int GetQuotStatus(string QuotationPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT COUNT(Q.QUOTATION_MST_PK)");
            sb.Append("   FROM QUOTATION_MST_TBL Q");
            sb.Append("   WHERE Q.STATUS <> 2");
            sb.Append("   AND Q.STATUS <> 4");
            sb.Append("   AND Q.QUOTATION_MST_PK = " + QuotationPK);
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        #endregion "Get Quotation Status"

        #region " Fetch UWG1 Option Grid "

        #region " Header Query "

        #region " Quote Query."

        /// <summary>
        /// Quotes the query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <returns></returns>
        private string QuoteQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPKs = "")
        {
            try
            {
                string strSQL = null;
                string cargos = "";
                StringBuilder sbSQL = new StringBuilder();
                //modifided by Thiygarajan on 28/5/08 for fcl and lcl combination
                if (cargotypes == 2)
                {
                    cargos = " and tran3.CONTAINER_TYPE_MST_FK is null";
                }
                else if (cargotypes == 1)
                {
                    cargos = " and tran3.basis is null ";
                }
                //end
                //' for Air
                if (cargotypes == -1)
                {
                    strSQL += "    Select                                                         ";
                    strSQL += "       tran.QUOTE_DTL_PK                        PK,            ";
                    //0
                    strSQL += "       tran.QUOTATION_MST_FK                        FK,            ";
                    //1
                    strSQL += "    " + SourceType.Quotation + "                    REF_TYPE,      ";
                    //2
                    strSQL += "    " + SRC(SourceType.Quotation) + "               TYPE_ID,       ";
                    //3
                    strSQL += "       main.QUOTATION_REF_NO                        REF_NO,        ";
                    //4
                    strSQL += "    TO_CHAR(main.EXPECTED_SHIPMENT_DT,'" + dateFormat + "') SHIP_DATE, ";
                    //5
                    strSQL += "       tran.PORT_MST_POL_FK                         POLFK,         ";
                    //6
                    strSQL += "       PORTPOL.PORT_ID                              POL_ID,        ";
                    //7
                    strSQL += "       tran.PORT_MST_POD_FK                         PODFK,         ";
                    //8
                    strSQL += "       PORTPOD.PORT_ID                              POD_ID,        ";
                    //9
                    strSQL += "       tran.CARRIER_MST_FK                          AIR_PK,        ";
                    //10
                    strSQL += "       air.AIRLINE_ID                               AIR_ID,        ";
                    //11
                    strSQL += "       tran.COMMODITY_MST_FK                        COMM_PK,       ";
                    //12
                    strSQL += "       cmdt.COMMODITY_ID                            COMM_ID,       ";
                    //13
                    strSQL += "       slb.BREAKPOINT_TYPE                          SLAB_TYPE_PK,  ";
                    //14
                    strSQL += "       decode(slb.BREAKPOINT_TYPE,";
                    strSQL += "   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString());
                    strSQL += "       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ";
                    //15
                    strSQL += "       decode(slb.BREAKPOINT_TYPE," + BreakPoint.ULD;
                    strSQL += "      ,tran.QUANTITY,NULL)                          BOXES,         ";
                    //16
                    strSQL += "       tran.SLAB_FK                                 SLAB,          ";
                    //17
                    strSQL += "       slb.BREAKPOINT_ID                            SLAB_ID,       ";
                    //18
                    strSQL += "       tran.CHARGEABLE_WEIGHT                       CH_WT,         ";
                    //19
                    strSQL += "       0                                            AI_QT,         ";
                    //20
                    strSQL += "       0                                            NET,           ";
                    //21
                    strSQL += "       ''                                           OTH_DTL,       ";
                    //22
                    strSQL += "       ''                                           OTH_BTN,       ";
                    //23
                    strSQL += "       ''                                           CRG_BTN,       ";
                    //24>
                    strSQL += "       'false'                                      SELECTED       ";
                    //25>
                    strSQL += "   From QUOTATION_MST_TBL              main,                    ";
                    strSQL += "        QUOTATION_DTL_TBL              tran,                    ";
                    strSQL += "        AIRFREIGHT_SLABS_TBL           slb,                     ";
                    strSQL += "        PORT_MST_TBL                   PORTPOL,                 ";
                    strSQL += "        PORT_MST_TBL                   PORTPOD,                 ";
                    strSQL += "        AIRLINE_MST_TBL                air,                     ";
                    strSQL += "        COMMODITY_MST_TBL              cmdt                     ";
                    strSQL += "   Where                                                        ";
                    strSQL += "   main.QUOTATION_MST_PK           =   tran.QUOTATION_MST_FK    ";
                    strSQL += "   AND tran.SLAB_FK              =   slb.AIRFREIGHT_SLABS_TBL_PK(+) ";
                    strSQL += "   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ";
                    strSQL += "   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ";
                    strSQL += "   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ";
                    strSQL += "   AND tran.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ";
                    strSQL += "   AND main.BIZ_TYPE = 1             ";
                    strSQL += "   AND tran.STATUS                    in   (1, 2, 3, 4)             ";
                    strSQL += "   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + SectorContainers + ")";
                    strSQL += "   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ";
                    strSQL += " between main.QUOTATION_DATE AND (main.QUOTATION_DATE + main.VALID_FOR) ";

                    if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                    {
                        strSQL += "  AND tran.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup);
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(CustNo)))
                    {
                        strSQL += "  AND ( main.CUSTOMER_MST_FK    = " + Convert.ToString(CustNo);
                        strSQL += "        or main.CUSTOMER_MST_FK  is null ) ";
                    }
                }
                else
                {
                    if (Group == 1 | Group == 2)
                    {
                        if (forFCL)
                        {
                            strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,Q.REF_NO REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER     FROM (Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                    " + SRC(SourceType.Quotation) + "             TYPE,                     main3.QUOTATION_REF_NO                     REF_NO,                   TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,         TRAN3.POL_GRP_FK                           POL_PK,                   PGL.PORT_GRP_ID                            POL_ID,                   TRAN3.POD_GRP_FK                           POD_PK,                   PGD.PORT_GRP_ID                            POD_ID,                   tran3.CARRIER_MST_FK                       OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr3.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran3.EXPECTED_BOXES                       QUANTITY,                 tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_ID                         COMM_ID,                  tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_TARIFF,            0                                          OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + SourceType.Quotation + "                 PRIORITYORDER,cntr3.PREFERENCES             from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_GRP_MST_TBL               PGL,                                  PORT_GRP_MST_TBL               PGD,                                  COMMODITY_MST_TBL              cmdt3,                                OPERATOR_MST_TBL               opr3,                                 CONTAINER_TYPE_MST_TBL         cntr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    main3.CARGO_TYPE            in ( 1,3)    AND main3.BIZ_TYPE=2                              AND    TRAN3.POL_GRP_FK = PGL.PORT_GRP_MST_PK(+)                     AND    TRAN3.POD_GRP_FK = PGD.PORT_GRP_MST_PK(+)                     AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)                 AND    tran3.CONTAINER_TYPE_MST_FK = cntr3.CONTAINER_TYPE_MST_PK(+)          AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "               ";
                            if (string.IsNullOrEmpty(OperPKs))
                            {
                                strSQL += "     AND   (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK,                                                                 TRAN3.CONTAINER_TYPE_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            else
                            {
                                strSQL += "     AND   (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK,                                                                 TRAN3.CONTAINER_TYPE_MST_FK,tran3.CARRIER_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR))Q    ORDER BY Q.PK DESC,Q.PREFERENCES  ";
                        }
                        else
                        {
                            //  0   1      2         3        4       5       6       7        8        9        10
                            // PK, TYPE, REF_NO, SHIP_DATE, POL_PK, POL_ID, POD_PK, POD_ID, OPER_PK, OPER_ID, OPER_NAME
                            //  11         12       13          14          15      16         17           18
                            // COMM_PK, COMM_ID, LCL_BASIS, DIMENTION_ID, WEIGHT, VOLUME, ALL_IN_TARIFF, SELECTED
                            strSQL = "    Select         DISTINCT                                      main3.QUOTATION_MST_PK                     PK,                   " + SRC(SourceType.Quotation) + "             TYPE,                     main3.QUOTATION_REF_NO                     REF_NO,                  TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,        TRAN3.POL_GRP_FK                           POL_PK,                   PGL.PORT_GRP_ID                            POL_ID,                   TRAN3.POD_GRP_FK                           POD_PK,                   PGD.PORT_GRP_ID                            POD_ID,                   tran3.CARRIER_MST_FK                       OPER_PK,                 opr3.OPERATOR_ID                           OPER_ID,                 ''                                         OPER_NAME,               tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_ID                         COMM_ID,                  tran3.BASIS                                LCL_BASIS,               NVL(dim3.DIMENTION_ID,'')                  DIMENTION_ID,            tran3.EXPECTED_WEIGHT                      WEIGHT,                  tran3.EXPECTED_VOLUME                      VOLUME,                  tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_TARIFF,           'false'                                    SELECTED,                0                                          OPERATOR_RATE,           " + SourceType.Quotation + "               PRIORITYORDER           from                                                                 QUOTATION_MST_TBL              main3,                               QUOTATION_DTL_TBL              tran3,                               PORT_GRP_MST_TBL               PGL,                                  PORT_GRP_MST_TBL               PGD,                                  COMMODITY_MST_TBL              cmdt3,                                OPERATOR_MST_TBL               opr3,                                DIMENTION_UNIT_MST_TBL         dim3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                   AND    main3.CARGO_TYPE    in ( 2 ,3)  AND main3.BIZ_TYPE=2                                       AND    TRAN3.POL_GRP_FK = PGL.PORT_GRP_MST_PK(+)                     AND    TRAN3.POD_GRP_FK = PGD.PORT_GRP_MST_PK(+)                     AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)                  AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)                AND    tran3.BASIS                 = dim3.DIMENTION_UNIT_MST_PK(+)       ";
                            if (string.IsNullOrEmpty(OperPKs))
                            {
                                strSQL += "     AND   (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK,                                                                 TRAN3.BASIS)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            else
                            {
                                strSQL += "     AND   (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK,                                                                 TRAN3.BASIS,tran3.CARRIER_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }

                            strSQL += "  AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                " + cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                    main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)    ORDER BY PK DESC  ";
                        }
                    }
                    else
                    {
                        if (forFCL)
                        {
                            strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,Q.REF_NO as REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,     Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER,Q.OPER_PK       FROM(Select     DISTINCT                                         main3.QUOTATION_MST_PK                     PK,                    " + SRC(SourceType.Quotation) + "             TYPE,                     main3.QUOTATION_REF_NO                     REF_NO,                   TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,         tran3.PORT_MST_POL_FK                      POL_PK,                   portpol3.PORT_ID                           POL_ID,                   tran3.PORT_MST_POD_FK                      POD_PK,                   portpod3.PORT_ID                           POD_ID,                   tran3.CARRIER_MST_FK                     OPER_PK,                  opr3.OPERATOR_ID                           OPER_ID,                  opr3.OPERATOR_NAME                         OPER_NAME,                tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr3.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran3.EXPECTED_BOXES                       QUANTITY,                 tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_ID                         COMM_ID,                  tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_TARIFF,            0                                          OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + SourceType.Quotation + "                 PRIORITYORDER,cntr3.PREFERENCES    from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                PORT_MST_TBL                   portpol3,                             PORT_MST_TBL                   portpod3,                             COMMODITY_MST_TBL              cmdt3,                                OPERATOR_MST_TBL               opr3,                                 CONTAINER_TYPE_MST_TBL         cntr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                  AND    main3.CARGO_TYPE            in ( 1,3)  and main3.BIZ_TYPE = 2                                AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                 AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                 AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)                 AND    tran3.CONTAINER_TYPE_MST_FK = cntr3.CONTAINER_TYPE_MST_PK(+)          AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)               AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "               ";
                            if (string.IsNullOrEmpty(OperPKs))
                            {
                                strSQL += "     AND   (TRAN3.PORT_MST_POL_FK, TRAN3.PORT_MST_POD_FK,                                                                 TRAN3.CONTAINER_TYPE_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            else
                            {
                                strSQL += "     AND   (TRAN3.PORT_MST_POL_FK, TRAN3.PORT_MST_POD_FK,                                                                 TRAN3.CONTAINER_TYPE_MST_FK,tran3.CARRIER_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR))Q    ORDER BY Q.PK DESC,Q.PREFERENCES  ";
                        }
                        else
                        {
                            //  0   1      2         3        4       5       6       7        8        9        10
                            // PK, TYPE, REF_NO, SHIP_DATE, POL_PK, POL_ID, POD_PK, POD_ID, OPER_PK, OPER_ID, OPER_NAME
                            //  11         12       13          14          15      16         17           18
                            // COMM_PK, COMM_ID, LCL_BASIS, DIMENTION_ID, WEIGHT, VOLUME, ALL_IN_TARIFF, SELECTED
                            strSQL = "    Select         DISTINCT                                      main3.QUOTATION_MST_PK                     PK,                   " + SRC(SourceType.Quotation) + "             TYPE,                     main3.QUOTATION_REF_NO                     REF_NO,                  TO_CHAR(main3.EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  SHIP_DATE,        tran3.PORT_MST_POL_FK                      POL_PK,                  portpol3.PORT_ID                           POL_ID,                  tran3.PORT_MST_POD_FK                      POD_PK,                  portpod3.PORT_ID                           POD_ID,                  tran3.CARRIER_MST_FK                     OPER_PK,                 opr3.OPERATOR_ID                           OPER_ID,                 ''                                         OPER_NAME,               tran3.COMMODITY_MST_FK                     COMM_PK,                  cmdt3.COMMODITY_ID                         COMM_ID,                  tran3.BASIS                                LCL_BASIS,               NVL(dim3.DIMENTION_ID,'')                  DIMENTION_ID,            tran3.EXPECTED_WEIGHT                      WEIGHT,                  tran3.EXPECTED_VOLUME                      VOLUME,                  tran3.ALL_IN_QUOTED_TARIFF                 ALL_IN_TARIFF,           'false'                                    SELECTED,                0                                          OPERATOR_RATE,           " + SourceType.Quotation + "               PRIORITYORDER           from                                                                 QUOTATION_MST_TBL              main3,                               QUOTATION_DTL_TBL      tran3,                               PORT_MST_TBL                   portpol3,                            PORT_MST_TBL                   portpod3,                            COMMODITY_MST_TBL              cmdt3,                                OPERATOR_MST_TBL               opr3,                                DIMENTION_UNIT_MST_TBL         dim3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                   AND    main3.CARGO_TYPE    in ( 2 ,3)     and main3.BIZ_TYPE=2                                   AND    tran3.PORT_MST_POL_FK       = portpol3.PORT_MST_PK(+)                  AND    tran3.PORT_MST_POD_FK       = portpod3.PORT_MST_PK(+)                  AND    tran3.CARRIER_MST_FK       = opr3.OPERATOR_MST_PK(+)                  AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    tran3.COMMODITY_MST_FK      = cmdt3.COMMODITY_MST_PK(+)                AND    tran3.BASIS                 = dim3.DIMENTION_UNIT_MST_PK(+)       ";
                            if (string.IsNullOrEmpty(OperPKs))
                            {
                                strSQL += "     AND   (TRAN3.PORT_MST_POL_FK, TRAN3.PORT_MST_POD_FK,                                                                 TRAN3.BASIS)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            else
                            {
                                strSQL += "     AND   (TRAN3.PORT_MST_POL_FK, TRAN3.PORT_MST_POD_FK,                                                                 TRAN3.BASIS,tran3.CARRIER_MST_FK)                            IN ( " + Convert.ToString(SectorContainers) + " )                          ";
                            }
                            strSQL += "      AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                " + cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                    main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)    ORDER BY PK DESC  ";
                        }
                    }

                    strSQL = strSQL.Replace("   ", " ");
                    strSQL = strSQL.Replace("  ", " ");
                }
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Quote Query."

        #region " Enquiry Query."

        /// <summary>
        /// Enquiries the query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <returns></returns>
        private string EnquiryQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string QuoteDate = "")
        {
            try
            {
                string strSQL = null;
                if (forFCL)
                {
                    strSQL = "    Select       DISTINCT                                        main4.ENQUIRY_BKG_SEA_PK                   PK,                    " + SRC(SourceType.Enquiry) + "               TYPE,                     main4.ENQUIRY_REF_NO                       REF_NO,                   main4.ENQUIRY_REF_NO                       REFNO,                    TO_CHAR(tran4.EXPECTED_SHIPMENT,'" + dateFormat + "') SHIP_DATE,             tran4.PORT_MST_POL_FK                      POL_PK,                   portpol4.PORT_ID                           POL_ID,                   tran4.PORT_MST_POD_FK                      POD_PK,                   portpod4.PORT_ID                           POD_ID,                   tran4.OPERATOR_MST_FK                      OPER_PK,                  opr4.OPERATOR_ID                           OPER_ID,                  opr4.OPERATOR_NAME                         OPER_NAME,                tran4.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr4.CONTAINER_TYPE_MST_ID                CNTR_ID,                  tran4.EXPECTED_BOXES                       QUANTITY,                 tran4.COMMODITY_MST_FK                     COMM_PK,                  cmdt4.COMMODITY_ID                         COMM_ID,                  tran4.ALL_IN_TARIFF                        ALL_IN_TARIFF,            0                                          OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                     'false'                                     SELECTED,               " + SourceType.Enquiry + "                   PRIORITYORDER            from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                PORT_MST_TBL                   portpol4,                             PORT_MST_TBL                   portpod4,                             COMMODITY_MST_TBL              cmdt4,                                OPERATOR_MST_TBL               opr4,                                 CONTAINER_TYPE_MST_TBL         cntr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                AND    main4.CARGO_TYPE            = 1                                        AND    tran4.PORT_MST_POL_FK       = portpol4.PORT_MST_PK(+)                  AND    tran4.PORT_MST_POD_FK       = portpod4.PORT_MST_PK(+)                  AND    tran4.OPERATOR_MST_FK       = opr4.OPERATOR_MST_PK(+)                  AND    tran4.CONTAINER_TYPE_MST_FK = cntr4.CONTAINER_TYPE_MST_PK(+)           AND    tran4.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    tran4.COMMODITY_MST_FK      = cmdt4.COMMODITY_MST_PK(+)                AND    main4.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                     AND    (tran4.PORT_MST_POL_FK, tran4.PORT_MST_POD_FK,                                                       tran4.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + QuoteDate + "','" + dateFormat + "')-0.5)  <=                      tran4.EXPECTED_SHIPMENT                                           ";
                }
                else
                {
                    strSQL = "    Select        DISTINCT                                       main4.ENQUIRY_SEA_PK                       PK,                    " + SRC(SourceType.Enquiry) + "               TYPE,                     main4.ENQUIRY_REF_NO                       REF_NO,                   TO_CHAR(main4.EXPECTED_SHIPMENT,'" + dateFormat + "')  SHIP_DATE,            tran4.PORT_MST_POL_FK                      POL_PK,                   portpol4.PORT_ID                           POL_ID,                   tran4.PORT_MST_POD_FK                      POD_PK,                   portpod4.PORT_ID                           POD_ID,                   tran4.OPERATOR_MST_FK                      OPER_PK,                  opr4.OPERATOR_ID                           OPER_ID,                  opr4.OPERATOR_NAME                         OPER_NAME,                tran4.COMMODITY_MST_FK                     COMM_PK,                  cmdt4.COMMODITY_ID                         COMM_ID,                  tran4.BASIS                                LCL_BASIS,                NVL(dim4.DIMENTION_ID,'')                  DIMENTION_ID,             tran4.EXPECTED_WEIGHT                      WEIGHT,                   tran4.EXPECTED_VOLUME                      VOLUME,                   tran4.ALL_IN_TARIFF                        ALL_IN_TARIFF,            'false'                                    SELECTED,                 0                                          OPERATOR_RATE,            " + SourceType.Enquiry + "                 PRIORITYORDER            from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                PORT_MST_TBL                   portpol4,                             PORT_MST_TBL                   portpod4,                             COMMODITY_MST_TBL              cmdt4,                                OPERATOR_MST_TBL               opr4,                                 DIMENTION_UNIT_MST_TBL         dim4                                 where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                AND    main4.CARGO_TYPE            = 2                                        AND    tran4.PORT_MST_POL_FK       = portpol4.PORT_MST_PK(+)                  AND    tran4.PORT_MST_POD_FK       = portpod4.PORT_MST_PK(+)                  AND    tran4.OPERATOR_MST_FK       = opr4.OPERATOR_MST_PK(+)                  AND    tran4.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    tran4.COMMODITY_MST_FK      = cmdt4.COMMODITY_MST_PK(+)                AND    tran4.BASIS                 = dim4.DIMENTION_UNIT_MST_PK(+)            AND    (tran4.PORT_MST_POL_FK, tran4.PORT_MST_POD_FK,                                                       tran4.LCL_BASIS )                                        in ( " + Convert.ToString(SectorContainers) + " )                                AND    main4.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                     AND    ROUND(TO_DATE('" + QuoteDate + "','" + dateFormat + "')-0.5) <=                         tran4.EXPECTED_SHIPMENT                                           ";
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Enquiry Query."

        #region " Spot Rate Query."

        /// <summary>
        /// Spots the rate query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CurrPK">The curr pk.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <returns></returns>
        private string SpotRateQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string CurrPK = "", string OperPKs = "")
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;

                if (forFCL)
                {
                    exchQueryFCL = " ( Select nvl(Sum(NVL(FCL_APP_RATE * EXCHANGE_RATE,0)),0)             from  RFQ_SPOT_TRN_SEA_FCL_LCL t1, V_EXCHANGE_RATE v1,            ";
                    // & vbCrLf & _
                    //Snigdharani - Removing v-array - 04/11/2008
                    //"TABLE(t1.CONTAINER_DTL_FCL) (+) c1,                         " & vbCrLf & _
                    exchQueryFCL = exchQueryFCL + "RFQ_SPOT_TRN_SEA_CONT_DET c1,                                  FREIGHT_ELEMENT_MST_TBL f1                                     where t1.RFQ_SPOT_SEA_FK = main1.RFQ_SPOT_SEA_PK and v1.exch_rate_type_fk = 1 and                       c1.CONTAINER_TYPE_MST_FK = cont1.CONTAINER_TYPE_MST_FK  AND          C1.RFQ_SPOT_SEA_TRN_FK = t1.RFQ_SPOT_SEA_TRN_PK         AND          t1.CHECK_FOR_ALL_IN_RT   = 1                            AND          t1.CURRENCY_MST_FK =  v1.CURRENCY_MST_FK                AND          V1.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f1.FREIGHT_ELEMENT_MST_PK =  t1.FREIGHT_ELEMENT_MST_FK  AND          --f1.CHARGE_BASIS <> 2                                    AND          ROUND(sysdate-0.5) between v1.FROM_DATE and v1.TO_DATE )      ";
                }

                if (!forFCL)
                {
                    exchQueryLCL = "( Select nvl(Sum(NVL(LCL_APPROVED_RATE * EXCHANGE_RATE,0)),0)         from  RFQ_SPOT_TRN_SEA_FCL_LCL t1, V_EXCHANGE_RATE v1,                     FREIGHT_ELEMENT_MST_TBL f1                                     where t1.RFQ_SPOT_SEA_FK = main1.RFQ_SPOT_SEA_PK and v1.exch_rate_type_fk = 1 and                       t1.CHECK_FOR_ALL_IN_RT = 1 AND                                       t1.CURRENCY_MST_FK =  v1.CURRENCY_MST_FK AND                         V1.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f1.FREIGHT_ELEMENT_MST_PK =  t1.FREIGHT_ELEMENT_MST_FK  AND          --f1.CHARGE_BASIS <> 2                                    AND          ROUND(sysdate-0.5) between v1.FROM_DATE and v1.TO_DATE )    ";
                }
                //Snigdharani - 28/11/2008 - The query is modified by Snigdharani for comparing with commodity _group
                //table and commodity table differently, as commodity group is mandatory but commodity is not mandatory.
                if (forFCL)
                {
                    strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER      FROM(Select       DISTINCT                                        main1.RFQ_SPOT_SEA_PK                      PK,                    " + SRC(SourceType.SpotRate) + "             TYPE,                     main1.RFQ_REF_NO                           REF_NO,                   main1.RFQ_REF_NO                           REFNO,                    TO_CHAR(main1.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran1.PORT_MST_POL_FK                      POL_PK,                   portpol1.PORT_ID                           POL_ID,                   tran1.PORT_MST_POD_FK                      POD_PK,                   portpod1.PORT_ID                           POD_ID,                   main1.OPERATOR_MST_FK                      OPER_PK,                  opr1.OPERATOR_ID                           OPER_ID,                  opr1.OPERATOR_NAME                         OPER_NAME,                cont1.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr1.CONTAINER_TYPE_MST_ID                CNTR_ID,                  main1.TEUS_VOL                             QUANTITY,                 cmdt2.COMMODITY_MST_pK                     COMM_PK,                  cmdt2.COMMODITY_ID                         COMM_ID,                  ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,            ROUND(NVL(" + exchQueryFCL + ",0),2)                OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + SourceType.SpotRate + "                  PRIORITYORDER,cntr1.PREFERENCES      from                                                                  RFQ_SPOT_RATE_SEA_TBL          main1,                                RFQ_SPOT_TRN_SEA_FCL_LCL       tran1,                                PORT_MST_TBL                   portpol1,                             PORT_MST_TBL                   portpod1,                             OPERATOR_MST_TBL               opr1,                            ";
                    // & vbCrLf _
                    //Snigdharani - 04/11/2008 - Removing v-array
                    //& "     TABLE(tran1.CONTAINER_DTL_FCL) (+) cont1,                        " & vbCrLf _
                    strSQL = strSQL + "     RFQ_SPOT_TRN_SEA_CONT_DET cont1,                             CONTAINER_TYPE_MST_TBL         cntr1,                                commodity_group_mst_tbl              cmdt1, COMMODITY_MST_TBL         cmdt2    where                                                                            main1.RFQ_SPOT_SEA_PK       = tran1.RFQ_SPOT_SEA_FK                    AND    main1.CARGO_TYPE            = 1                                        AND    main1.ACTIVE                = 1                                        AND    main1.APPROVED              = 1                                        AND    CONT1.RFQ_SPOT_SEA_TRN_FK   = tran1.RFQ_SPOT_SEA_TRN_PK                AND    tran1.PORT_MST_POL_FK       = portpol1.PORT_MST_PK(+)                  AND    tran1.PORT_MST_POD_FK       = portpod1.PORT_MST_PK(+)                  AND    main1.OPERATOR_MST_FK       = opr1.OPERATOR_MST_PK(+)                  AND    cont1.CONTAINER_TYPE_MST_FK = cntr1.CONTAINER_TYPE_MST_PK(+)           AND    main1.commodity_group_fk      = cmdt1.commodity_group_pk                AND    cmdt1.COMMODITY_GROUP_PK    = " + Convert.ToString(CommodityGroup) + "             and main1.commodity_mst_fk = cmdt2.commodity_mst_pk(+)            AND    (main1.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + " OR main1.CUSTOMER_MST_FK IS NULL      OR   main1.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    if (string.IsNullOrEmpty(OperPKs))
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       cont1.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    else
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       cont1.CONTAINER_TYPE_MST_FK, opr1.OPERATOR_MST_PK)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    strSQL = strSQL + "        AND    TO_DATE('" + ShipDate + "','" + dateFormat + "') BETWEEN                              main1.VALID_FROM   AND   main1.VALID_TO  )Q                            ORDER BY Q.PK DESC,Q.PREFERENCES ";
                }
                else
                {
                    strSQL = "    Select         DISTINCT                                      main1.RFQ_SPOT_SEA_PK                      PK,                    " + SRC(SourceType.SpotRate) + "              TYPE,                     main1.RFQ_REF_NO                           REF_NO,                   TO_CHAR(main1.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran1.PORT_MST_POL_FK                      POL_PK,                   portpol1.PORT_ID                           POL_ID,                   tran1.PORT_MST_POD_FK                      POD_PK,                   portpod1.PORT_ID                           POD_ID,                   main1.OPERATOR_MST_FK                      OPER_PK,                  opr1.OPERATOR_ID                           OPER_ID,                  opr1.OPERATOR_NAME                         OPER_NAME,                main1.COMMODITY_MST_FK                     COMM_PK,                  cmdt2.COMMODITY_ID                         COMM_ID,                  tran1.LCL_BASIS                            LCL_BASIS,                NVL(dim1.DIMENTION_ID,'')                  DIMENTION_ID,             0                                          WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + exchQueryLCL + ",0),2)                OPERATOR_RATE,            " + SourceType.SpotRate + "                PRIORITYORDER            from                                                                  RFQ_SPOT_RATE_SEA_TBL          main1,                                RFQ_SPOT_TRN_SEA_FCL_LCL       tran1,                                PORT_MST_TBL                   portpol1,                             PORT_MST_TBL                   portpod1,                             OPERATOR_MST_TBL               opr1,                                 commodity_group_mst_tbl        cmdt1, COMMODITY_MST_TBL         cmdt2,     DIMENTION_UNIT_MST_TBL         dim1                                 where                                                                            main1.RFQ_SPOT_SEA_PK       = tran1.RFQ_SPOT_SEA_FK                   AND    main1.CARGO_TYPE            = 2                                       AND    main1.ACTIVE                = 1                                       AND    main1.APPROVED              = 1                                       AND    tran1.PORT_MST_POL_FK       = portpol1.PORT_MST_PK(+)                 AND    tran1.PORT_MST_POD_FK       = portpod1.PORT_MST_PK(+)                 AND    main1.OPERATOR_MST_FK       = opr1.OPERATOR_MST_PK(+)                 AND    main1.commodity_group_fk      = cmdt1.commodity_group_pk                and    main1.commodity_mst_fk = cmdt2.commodity_mst_pk(+)            AND    cmdt1.COMMODITY_GROUP_PK    = " + Convert.ToString(CommodityGroup) + "            AND    (main1.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + " OR main1.CUSTOMER_MST_FK IS NULL      OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran1.LCL_BASIS             = dim1.DIMENTION_UNIT_MST_PK(+)      ";
                    if (string.IsNullOrEmpty(OperPKs))
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    else
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS, opr1.OPERATOR_MST_PK)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  main1.VALID_FROM   AND   main1.VALID_TO                            ORDER BY PK DESC ";
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Spot Rate Query."

        #region " Customer Contract Query."

        /// <summary>
        /// Customers the cont query sea.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string CustContQuerySea(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPKs = "", int Group = 0)
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                string OperatorRate = null;
                //The following queries are changed by Snigdharani on 28/11/2008 avoid error due to exchange rate
                //and v2.exch_rate_type_fk = 1

                if (Group == 0)
                {
                    if (forFCL)
                    {
                        exchQueryFCL = " NVL(( Case WHEN MAIN2.STATUS <> 2 Then     " + "            tran2.CURRENT_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "         )* get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate) ,0 ) + " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)       from  CONT_CUST_TRN_SEA_TBL t2,                                    CONT_SUR_CHRG_SEA_TBL f2                                               where t2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK  and                        t2.CONT_CUST_TRN_SEA_PK  = f2.CONT_CUST_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                 ";
                        //"               f2.CURRENCY_MST_FK =  v2.CURRENCY_MST_FK AND                    " & vbCrLf & _
                        //"               ROUND(sysdate-0.5) between v2.FROM_DATE and v2.TO_DATE          " & vbCrLf & _
                        // vv5.exch_rate_type_fk = 1 AND
                        exchQueryFCL = exchQueryFCL + "    )    +                                                                      ( Select NVL(Sum(NVL(FCL_REQ_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                        TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5,";
                        // V_EXCHANGE_RATE vv5,TABLE(tt5.CONTAINER_DTL_FCL) (+) cc5
                        //Snigdharani - 29/10/2008 - Removing V-Array
                        //Deleted following line - Snigdharani
                        //tt5.CURRENCY_MST_FK       = vv5.CURRENCY_MST_FK          AND
                        //ROUND(sysdate-0.5) between vv5.FROM_DATE and vv5.TO_DATE AND
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL cc5            where cc5.CONTAINER_TYPE_MST_FK = tran2.CONTAINER_TYPE_MST_FK and                   mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK       AND                   cc5.TARIFF_TRN_SEA_FK     = tt5.TARIFF_TRN_SEA_PK        AND                   tt5.PORT_MST_POL_FK       = tran2.PORT_MST_POL_FK        AND                   tt5.PORT_MST_POD_FK       = tran2.PORT_MST_POD_FK        AND                                      tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                                      tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 1                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from CONT_CUST_TRN_SEA_TBL tt2, CONT_SUR_CHRG_SEA_TBL ff2 where                     tt2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                     tt2.CONT_CUST_TRN_SEA_PK  = ff2.CONT_CUST_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";

                        OperatorRate = " ( Select nvl(Sum(NVL(FCL_APP_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                  from  CONT_MAIN_SEA_TBL mx, CONT_TRN_SEA_FCL_LCL tx,";
                        // & vbCrLf & _ V_EXCHANGE_RATE vx,vx.exch_rate_type_fk = 1  AND
                        //Snigdharani - 05/11/2008 - Removing v-array
                        //"         TABLE(tx.CONTAINER_DTL_FCL) (+) cx                                " & vbCrLf & _
                        OperatorRate = OperatorRate + "         CONT_TRN_SEA_FCL_RATES cx                          where mx.ACTIVE                     = 1   and                                  mx.CONT_APPROVED              = 1     AND                                  mx.CARGO_TYPE                 = 1     AND                                  tx.CONT_TRN_SEA_PK = cx.CONT_TRN_SEA_FK AND                                mx.OPERATOR_MST_FK            = main2.OPERATOR_MST_FK AND                  mx.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                tx.VALID_FROM   AND   NVL(tx.VALID_TO,NULL_DATE_FORMAT)          AND          tx.CONT_MAIN_SEA_FK           = mx.CONT_MAIN_SEA_PK           AND          cx.CONTAINER_TYPE_MST_FK      = tran2.CONTAINER_TYPE_MST_FK   AND          tx.PORT_MST_POL_FK            = tran2.PORT_MST_POL_FK         AND          tx.PORT_MST_POD_FK            = tran2.PORT_MST_POD_FK         AND          tx.CHECK_FOR_ALL_IN_RT        = 1 )                             ";
                        //& vbCrLf & _
                        //                            "        AND tx.CURRENCY_MST_FK            = vx.CURRENCY_MST_FK AND            " & vbCrLf & _
                        //                            "         ROUND(sysdate-0.5) between vx.FROM_DATE and vx.TO_DATE )            "
                        //Following lines are deleted - Snigdharani - 28/11/2008
                        //V_EXCHANGE_RATE v2,
                        //"               f2.CURRENCY_MST_FK =  v2.CURRENCY_MST_FK AND                    " & vbCrLf & _
                        //            "               ROUND(sysdate-0.5) between v2.FROM_DATE and v2.TO_DATE          " & vbCrLf & _
                        //, V_EXCHANGE_RATE vv5
                        //  and vv5.exch_rate_type_fk = 1
                        //"         tt5.CURRENCY_MST_FK       = vv5.CURRENCY_MST_FK          AND  and v2.exch_rate_type_fk = 1         " & vbCrLf & _
                        //            "         ROUND(sysdate-0.5) between vv5.FROM_DATE and vv5.TO_DATE AND          " & vbCrLf & _
                        //, V_EXCHANGE_RATE vx
                        //and vx.exch_rate_type_fk = 1
                        //"         ROUND(TO_DATE('" & ShipDate & "','" & dateFormat & "')-0.5) BETWEEN       " & vbCrLf & _
                        //            "           tx.VALID_FROM   AND   NVL(tx.VALID_TO,NULL_DATE_FORMAT)        AND " & vbCrLf & _
                        //"         tx.CURRENCY_MST_FK            = vx.CURRENCY_MST_FK AND            " & vbCrLf & _
                        //          "         ROUND(sysdate-0.5) between vx.FROM_DATE and vx.TO_DATE )            "
                    }
                    else
                    {
                        exchQueryLCL = "   ( Case  WHEN MAIN2.STATUS <> 2 Then       " + "            tran2.CURRENT_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "      ) +                                                          " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                     from  CONT_CUST_TRN_SEA_TBL t2,                                    CONT_SUR_CHRG_SEA_TBL f2                                               where t2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                        t2.CONT_CUST_TRN_SEA_PK  = f2.CONT_CUST_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                     )    +                                                                      ( Select NVL(Sum(NVL(LCL_TARIFF_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                     TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5                                                  where                                                                                mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK     AND                   tt5.PORT_MST_POL_FK       = tran2.PORT_MST_POL_FK        AND                   tt5.PORT_MST_POD_FK       = tran2.PORT_MST_POD_FK        AND                   tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                   tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 2                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from CONT_CUST_TRN_SEA_TBL tt2, CONT_SUR_CHRG_SEA_TBL ff2 where                     tt2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                     tt2.CONT_CUST_TRN_SEA_PK  = ff2.CONT_CUST_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";

                        OperatorRate = " ( Select nvl(Sum(NVL(LCL_APPROVED_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)             from  CONT_MAIN_SEA_TBL mx, CONT_TRN_SEA_FCL_LCL tx    where mx.ACTIVE                     = 1   AND                                  mx.CONT_APPROVED              = 1     AND                                  mx.CARGO_TYPE                 = 2     AND                                  mx.OPERATOR_MST_FK            = main2.OPERATOR_MST_FK AND                  mx.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          tx.CONT_MAIN_SEA_FK           = mx.CONT_MAIN_SEA_PK           AND          tx.LCL_BASIS                  = tran2.LCL_BASIS               AND          tx.PORT_MST_POL_FK            = tran2.PORT_MST_POL_FK         AND          tx.PORT_MST_POD_FK            = tran2.PORT_MST_POD_FK         AND          tx.CHECK_FOR_ALL_IN_RT        = 1 ) ";
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER       FROM(Select      DISTINCT                                                  main2.CONT_CUST_SEA_PK                     PK,                   " + SRC(SourceType.CustomerContract) + "      TYPE,                    main2.CONT_REF_NO                          REF_NO,                  main2.CONT_REF_NO                          REFNO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,               tran2.PORT_MST_POL_FK                      POL_PK,                  portpol2.PORT_ID                           POL_ID,                  tran2.PORT_MST_POD_FK                      POD_PK,                  portpod2.PORT_ID                           POD_ID,                  main2.OPERATOR_MST_FK                      OPER_PK,                 opr2.OPERATOR_ID                           OPER_ID,                 opr2.OPERATOR_NAME                         OPER_NAME,               tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                 cntr2.CONTAINER_TYPE_MST_ID                CNTR_ID,                 tran2.EXPECTED_VOLUME                      QUANTITY,                main2.COMMODITY_MST_FK                     COMM_PK,                 NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                 ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,           ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,           NULL                                       TARIFF,                  NULL                                       NET,                     'false'                                    SELECTED,              " + SourceType.CustomerContract + "          PRIORITYORDER,cntr2.PREFERENCES          from                                                                 CONT_CUST_SEA_TBL              main2,                               CONT_CUST_TRN_SEA_TBL          tran2,                               PORT_MST_TBL                   portpol2,                            PORT_MST_TBL                   portpod2,                            OPERATOR_MST_TBL               opr2,                                CONTAINER_TYPE_MST_TBL         cntr2,                               COMMODITY_MST_TBL              cmdt2                              where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                   AND    main2.CARGO_TYPE            = 1  and  main2.active=1                  AND    tran2.PORT_MST_POL_FK       = portpol2.PORT_MST_PK(+)                  AND    tran2.PORT_MST_POD_FK       = portpod2.PORT_MST_PK(+)                  AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                  AND    tran2.CONTAINER_TYPE_MST_FK = cntr2.CONTAINER_TYPE_MST_PK(+)           AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        strSQL = strSQL + "   ORDER BY Q.PK DESC,Q.PREFERENCES ";
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                      main2.CONT_CUST_SEA_PK                     PK,                    " + SRC(SourceType.CustomerContract) + "      TYPE,                     main2.CONT_REF_NO                          REF_NO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran2.PORT_MST_POL_FK                      POL_PK,                   portpol2.PORT_ID                           POL_ID,                   tran2.PORT_MST_POD_FK                      POD_PK,                   portpod2.PORT_ID                           POD_ID,                   main2.OPERATOR_MST_FK                      OPER_PK,                  opr2.OPERATOR_ID                           OPER_ID,                  opr2.OPERATOR_NAME                         OPER_NAME,                main2.COMMODITY_MST_FK                     COMM_PK,                  NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                  tran2.LCL_BASIS                            LCL_BASIS,                NVL(dim2.DIMENTION_ID,'')                  DIMENTION_ID,             0                                          WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,            " + SourceType.CustomerContract + "        PRIORITYORDER            from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                PORT_MST_TBL                   portpol2,                             PORT_MST_TBL                   portpod2,                             OPERATOR_MST_TBL               opr2,                                 COMMODITY_MST_TBL              cmdt2,                                DIMENTION_UNIT_MST_TBL         dim2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                  AND    main2.CARGO_TYPE            = 2                                         AND    tran2.PORT_MST_POL_FK       = portpol2.PORT_MST_PK(+)                   AND    tran2.PORT_MST_POD_FK       = portpod2.PORT_MST_PK(+)                   AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                   AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                 AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    tran2.LCL_BASIS             = dim2.DIMENTION_UNIT_MST_PK(+)        ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                       ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS ,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                      ";
                        }
                        strSQL = strSQL + "    AND    (main2.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                      OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        strSQL = strSQL + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            ORDER BY PK DESC ";
                    }
                }
                else
                {
                    //port group option
                    if (forFCL)
                    {
                        exchQueryFCL = " NVL(( Case WHEN MAIN2.STATUS <> 2 Then     " + "            tran2.CURRENT_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "         )* get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate) ,0 ) + " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)       from  CONT_CUST_TRN_SEA_TBL t2,                                    CONT_SUR_CHRG_SEA_TBL f2                                               where t2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK  and                        t2.CONT_CUST_TRN_SEA_PK  = f2.CONT_CUST_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                 ";
                        //"               f2.CURRENCY_MST_FK =  v2.CURRENCY_MST_FK AND                    " & vbCrLf & _
                        //"               ROUND(sysdate-0.5) between v2.FROM_DATE and v2.TO_DATE          " & vbCrLf & _
                        // vv5.exch_rate_type_fk = 1 AND
                        exchQueryFCL = exchQueryFCL + "    )    +                                                                      ( Select NVL(Sum(NVL(FCL_REQ_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                        TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5,";
                        // V_EXCHANGE_RATE vv5,TABLE(tt5.CONTAINER_DTL_FCL) (+) cc5
                        //Snigdharani - 29/10/2008 - Removing V-Array
                        //Deleted following line - Snigdharani
                        //tt5.CURRENCY_MST_FK       = vv5.CURRENCY_MST_FK          AND
                        //ROUND(sysdate-0.5) between vv5.FROM_DATE and vv5.TO_DATE AND
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL cc5            where cc5.CONTAINER_TYPE_MST_FK = tran2.CONTAINER_TYPE_MST_FK and                   mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK       AND                   cc5.TARIFF_TRN_SEA_FK     = tt5.TARIFF_TRN_SEA_PK        AND                   tt5.pol_grp_fk       = tran2.pol_grp_fk        AND                   tt5.pod_grp_fk       = tran2.pod_grp_fk        AND                                      tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                                      tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 1                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from CONT_CUST_TRN_SEA_TBL tt2, CONT_SUR_CHRG_SEA_TBL ff2 where                     tt2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                     tt2.CONT_CUST_TRN_SEA_PK  = ff2.CONT_CUST_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";

                        OperatorRate = " ( Select nvl(Sum(NVL(FCL_APP_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                  from  CONT_MAIN_SEA_TBL mx, CONT_TRN_SEA_FCL_LCL tx,";
                        // & vbCrLf & _ V_EXCHANGE_RATE vx,vx.exch_rate_type_fk = 1  AND
                        //Snigdharani - 05/11/2008 - Removing v-array
                        //"         TABLE(tx.CONTAINER_DTL_FCL) (+) cx                                " & vbCrLf & _
                        OperatorRate = OperatorRate + "         CONT_TRN_SEA_FCL_RATES cx                          where mx.ACTIVE                     = 1   and                                  mx.CONT_APPROVED              = 1     AND                                  mx.CARGO_TYPE                 = 1     AND                                  tx.CONT_TRN_SEA_PK = cx.CONT_TRN_SEA_FK AND                                mx.OPERATOR_MST_FK            = main2.OPERATOR_MST_FK AND                  mx.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                tx.VALID_FROM   AND   NVL(tx.VALID_TO,NULL_DATE_FORMAT)          AND          tx.CONT_MAIN_SEA_FK           = mx.CONT_MAIN_SEA_PK           AND          cx.CONTAINER_TYPE_MST_FK      = tran2.CONTAINER_TYPE_MST_FK   AND          tx.pol_grp_fk            = tran2.pol_grp_fk         AND          tx.pod_grp_fk            = tran2.pod_grp_fk         AND          tx.CHECK_FOR_ALL_IN_RT        = 1 )                             ";
                        //& vbCrLf & _
                        //                            "        AND tx.CURRENCY_MST_FK            = vx.CURRENCY_MST_FK AND            " & vbCrLf & _
                        //                            "         ROUND(sysdate-0.5) between vx.FROM_DATE and vx.TO_DATE )            "
                        //Following lines are deleted - Snigdharani - 28/11/2008
                        //V_EXCHANGE_RATE v2,
                        //"               f2.CURRENCY_MST_FK =  v2.CURRENCY_MST_FK AND                    " & vbCrLf & _
                        //            "               ROUND(sysdate-0.5) between v2.FROM_DATE and v2.TO_DATE          " & vbCrLf & _
                        //, V_EXCHANGE_RATE vv5
                        //  and vv5.exch_rate_type_fk = 1
                        //"         tt5.CURRENCY_MST_FK       = vv5.CURRENCY_MST_FK          AND  and v2.exch_rate_type_fk = 1         " & vbCrLf & _
                        //            "         ROUND(sysdate-0.5) between vv5.FROM_DATE and vv5.TO_DATE AND          " & vbCrLf & _
                        //, V_EXCHANGE_RATE vx
                        //and vx.exch_rate_type_fk = 1
                        //"         ROUND(TO_DATE('" & ShipDate & "','" & dateFormat & "')-0.5) BETWEEN       " & vbCrLf & _
                        //            "           tx.VALID_FROM   AND   NVL(tx.VALID_TO,NULL_DATE_FORMAT)        AND " & vbCrLf & _
                        //"         tx.CURRENCY_MST_FK            = vx.CURRENCY_MST_FK AND            " & vbCrLf & _
                        //          "         ROUND(sysdate-0.5) between vx.FROM_DATE and vx.TO_DATE )            "
                    }
                    else
                    {
                        exchQueryLCL = "   ( Case  WHEN MAIN2.STATUS <> 2 Then       " + "            tran2.CURRENT_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "      ) +                                                          " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                     from  CONT_CUST_TRN_SEA_TBL t2,                                    CONT_SUR_CHRG_SEA_TBL f2                                               where t2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                        t2.CONT_CUST_TRN_SEA_PK  = f2.CONT_CUST_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                     )    +                                                                      ( Select NVL(Sum(NVL(LCL_TARIFF_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                     TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5                                                  where                                                                                mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK     AND                   tt5.pol_grp_fk       = tran2.pol_grp_fk        AND                   tt5.pod_grp_fk       = tran2.pod_grp_fk        AND                   tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                   tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 2                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from CONT_CUST_TRN_SEA_TBL tt2, CONT_SUR_CHRG_SEA_TBL ff2 where                     tt2.CONT_CUST_TRN_SEA_PK  = tran2.CONT_CUST_TRN_SEA_PK and                     tt2.CONT_CUST_TRN_SEA_PK  = ff2.CONT_CUST_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";

                        OperatorRate = " ( Select nvl(Sum(NVL(LCL_APPROVED_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)             from  CONT_MAIN_SEA_TBL mx, CONT_TRN_SEA_FCL_LCL tx    where mx.ACTIVE                     = 1   AND                                  mx.CONT_APPROVED              = 1     AND                                  mx.CARGO_TYPE                 = 2     AND                                  mx.OPERATOR_MST_FK            = main2.OPERATOR_MST_FK AND                  mx.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          tx.CONT_MAIN_SEA_FK           = mx.CONT_MAIN_SEA_PK           AND          tx.LCL_BASIS                  = tran2.LCL_BASIS               AND          tx.pol_grp_fk            = tran2.pol_grp_fk         AND          tx.pod_grp_fk            = tran2.pod_grp_fk         AND          tx.CHECK_FOR_ALL_IN_RT        = 1 ) ";
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER       FROM(Select      DISTINCT                                                  main2.CONT_CUST_SEA_PK                     PK,                   " + SRC(SourceType.CustomerContract) + "      TYPE,                    main2.CONT_REF_NO                          REF_NO,                  main2.CONT_REF_NO                          REFNO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,               tran2.pol_grp_fk                      POL_PK,                  portpol2.port_grp_id                           POL_ID,                  tran2.pod_grp_fk                      POD_PK,                  portpod2.port_grp_id                           POD_ID,                  main2.OPERATOR_MST_FK                      OPER_PK,                 opr2.OPERATOR_ID                           OPER_ID,                 opr2.OPERATOR_NAME                         OPER_NAME,               tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                 cntr2.CONTAINER_TYPE_MST_ID                CNTR_ID,                 tran2.EXPECTED_VOLUME                      QUANTITY,                main2.COMMODITY_MST_FK                     COMM_PK,                 NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                 ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,           ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,           NULL                                       TARIFF,                  NULL                                       NET,                     'false'                                    SELECTED,              " + SourceType.CustomerContract + "          PRIORITYORDER,cntr2.PREFERENCES          from                                                                 CONT_CUST_SEA_TBL              main2,                               CONT_CUST_TRN_SEA_TBL          tran2,                               port_grp_mst_tbl                   portpol2,                            port_grp_mst_tbl                   portpod2,                            OPERATOR_MST_TBL               opr2,                                CONTAINER_TYPE_MST_TBL         cntr2,                               COMMODITY_MST_TBL              cmdt2                              where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                   AND    main2.CARGO_TYPE            = 1  and  main2.active=1                  AND    tran2.pol_grp_fk       = portpol2.port_grp_mst_pk(+)                  AND    tran2.pod_grp_fk       = portpod2.port_grp_mst_pk(+)                  AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                  AND    tran2.CONTAINER_TYPE_MST_FK = cntr2.CONTAINER_TYPE_MST_PK(+)           AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        strSQL = strSQL + "   ORDER BY Q.PK DESC,Q.PREFERENCES ";

                        //The following lines are delete - Snigdharani - 28/11/2008
                        //& "     V_EXCHANGE_RATE                Vex2                             " & vbCrLf _
                        //  and vex2.exch_rate_type_fk = 1
                        //& "     AND    tran2.CURRENCY_MST_FK       = Vex2.CURRENCY_MST_FK                 " & vbCrLf _
                        //       & "     AND    ROUND(sysdate-0.5) between Vex2.FROM_DATE and Vex2.TO_DATE         " & vbCrLf _
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                      main2.CONT_CUST_SEA_PK                     PK,                    " + SRC(SourceType.CustomerContract) + "      TYPE,                     main2.CONT_REF_NO                          REF_NO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran2.pol_grp_fk                      POL_PK,                   portpol2.port_grp_id                           POL_ID,                   tran2.pod_grp_fk                      POD_PK,                   portpod2.port_grp_id                           POD_ID,                   main2.OPERATOR_MST_FK                      OPER_PK,                  opr2.OPERATOR_ID                           OPER_ID,                  opr2.OPERATOR_NAME                         OPER_NAME,                main2.COMMODITY_MST_FK                     COMM_PK,                  NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                  tran2.LCL_BASIS                            LCL_BASIS,                NVL(dim2.DIMENTION_ID,'')                  DIMENTION_ID,             0                                          WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,            " + SourceType.CustomerContract + "        PRIORITYORDER            from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                port_grp_mst_tbl                   portpol2,                             port_grp_mst_tbl                   portpod2,                             OPERATOR_MST_TBL               opr2,                                 COMMODITY_MST_TBL              cmdt2,                                DIMENTION_UNIT_MST_TBL         dim2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                  AND    main2.CARGO_TYPE            = 2                                         AND    tran2.pol_grp_fk       = portpol2.port_grp_mst_pk(+)                   AND    tran2.pod_grp_fk       = portpod2.port_grp_mst_pk(+)                   AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                   AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                 AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    tran2.LCL_BASIS             = dim2.DIMENTION_UNIT_MST_PK(+)        ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                       ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS ,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                      ";
                        }
                        strSQL = strSQL + "    AND    (main2.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                      OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            ORDER BY PK DESC ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Customer Contract Query."

        #region " Operator Tariff Query."

        /// <summary>
        /// Oprs the tariff query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CurrPK">The curr pk.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="Group">The group.</param>
        /// <param name="isAgentType">if set to <c>true</c> [is agent type].</param>
        /// <param name="AgentPk">The agent pk.</param>
        /// <returns></returns>
        private string OprTariffQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string CurrPK = "", string OperPks = "", int Group = 0, bool isAgentType = false, int AgentPk = 0)
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                string OperatorRate = null;

                if (Group == 0)
                {
                    if (forFCL)
                    {
                        exchQueryFCL = " ( Select nvl(Sum(NVL(FCL_REQ_RATE * EXCHANGE_RATE,0)),0)                  from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,";
                        //TABLE(t5.CONTAINER_DTL_FCL) (+) c5 " & vbCrLf & _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL c5,                                      FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      c5.CONTAINER_TYPE_MST_FK = cont5.CONTAINER_TYPE_MST_FK  AND               c5.TARIFF_TRN_SEA_FK = t5.TARIFF_TRN_SEA_PK  AND                          t5.PORT_MST_POL_FK = tran5.PORT_MST_POL_FK AND                            t5.PORT_MST_POD_FK = tran5.PORT_MST_POD_FK AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND v5.CURRENCY_MST_BASE_FK = main5.base_currency_fk          and t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )/ (select count(*) from (         select distinct  port_mst_pol_fk,port_mst_pod_fk,t.tariff_main_sea_fk from TARIFF_TRN_SEA_FCL_LCL t)where tariff_main_sea_fk=main5.TARIFF_MAIN_SEA_PK) ";

                        OperatorRate = " ( Select nvl(Sum(NVL(FCL_APP_RATE * EXCHANGE_RATE,0)),0)                  from  CONT_MAIN_SEA_TBL m, CONT_TRN_SEA_FCL_LCL t, V_EXCHANGE_RATE v,  ";
                        // & vbCrLf & _

                        OperatorRate = OperatorRate + "CONT_TRN_SEA_FCL_RATES c                                    where m.ACTIVE                     = 1   and v.exch_rate_type_fk = 1  AND                                  m.CONT_APPROVED              = 1     AND                                  m.CARGO_TYPE                 = 1     AND                                  m.OPERATOR_MST_FK            = main5.OPERATOR_MST_FK AND                  t.CONT_TRN_SEA_PK = C.CONT_TRN_SEA_FK AND                                 m.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 v.FROM_DATE and v.TO_DATE                                          AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 t.VALID_FROM   AND   NVL(t.VALID_TO,NULL_DATE_FORMAT)         AND          t.CONT_MAIN_SEA_FK           = m.CONT_MAIN_SEA_PK            AND          c.CONTAINER_TYPE_MST_FK      = cont5.CONTAINER_TYPE_MST_FK   AND          t.PORT_MST_POL_FK            = tran5.PORT_MST_POL_FK         AND          t.PORT_MST_POD_FK            = tran5.PORT_MST_POD_FK         AND          t.CHECK_FOR_ALL_IN_RT        = 1                             AND          t.CURRENCY_MST_FK            = v.CURRENCY_MST_FK AND               v.CURRENCY_MST_BASE_FK = m.base_currency_fk) ";
                        //"         ROUND(sysdate-0.5) between v.FROM_DATE and v.TO_DATE )           "
                    }

                    if (!forFCL)
                    {
                        exchQueryLCL = "( Select nvl(Sum(NVL(LCL_TARIFF_RATE * EXCHANGE_RATE,0)),0)                from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                            FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      t5.PORT_MST_POL_FK = tran5.PORT_MST_POL_FK AND                            t5.PORT_MST_POD_FK = tran5.PORT_MST_POD_FK AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND v5.CURRENCY_MST_BASE_FK = main5.base_currency_fk          and t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";

                        OperatorRate = " ( Select nvl(Sum(NVL(LCL_APPROVED_RATE * EXCHANGE_RATE,0)),0)             from  CONT_MAIN_SEA_TBL m, CONT_TRN_SEA_FCL_LCL t, V_EXCHANGE_RATE v      where m.ACTIVE                     = 1  and v.exch_rate_type_fk = 1   AND                                  m.CONT_APPROVED              = 1     AND                                  m.CARGO_TYPE                 = 2     AND                                  m.OPERATOR_MST_FK            = main5.OPERATOR_MST_FK AND                  m.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 v.FROM_DATE and v.TO_DATE                                          AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 t.VALID_FROM   AND   NVL(t.VALID_TO,NULL_DATE_FORMAT)         AND          t.CONT_MAIN_SEA_FK           = m.CONT_MAIN_SEA_PK            AND          t.LCL_BASIS                  = tran5.LCL_BASIS               AND          t.PORT_MST_POL_FK            = tran5.PORT_MST_POL_FK         AND          t.PORT_MST_POD_FK            = tran5.PORT_MST_POD_FK         AND          t.CHECK_FOR_ALL_IN_RT        = 1                             AND          t.CURRENCY_MST_FK            = v.CURRENCY_MST_FK AND               v.CURRENCY_MST_BASE_FK = m.base_currency_fk) ";
                        //"         ROUND(sysdate-0.5) between v.FROM_DATE and v.TO_DATE )           "
                        //Operator rate query(for FCL and LCL) is Changed by Snigdharani - 04/06/2009
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER     FROM (Select  DISTINCT                                  main5.TARIFF_MAIN_SEA_PK                   PK,                    " + (isAgentType ? SRC(SourceType.AgentTariff) : SRC(SourceType.OperatorAirlineTariff)) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   main5.TARIFF_REF_NO                        REFNO,                    TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.PORT_MST_POL_FK                      POL_PK,                   portpol5.PORT_ID                           POL_ID,                   tran5.PORT_MST_POD_FK                      POD_PK,                   portpod5.PORT_ID                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr5.CONTAINER_TYPE_MST_ID                CNTR_ID,                  1                                          QUANTITY,                 0                                          COMM_PK,                  ''                                         COMM_ID,                  ROUND(NVL(" + exchQueryFCL + ",0),2)       ALL_IN_TARIFF,            ROUND(NVL(" + OperatorRate + ",0),2)       OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + (isAgentType ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "     PRIORITYORDER,          CNTR5.PREFERENCES                    from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_MST_TBL                   portpol5,                             PORT_MST_TBL                   portpod5,                             OPERATOR_MST_TBL               opr5,                            ";
                        //& vbCrLf _

                        strSQL = strSQL + " TARIFF_TRN_SEA_CONT_DTL    cont5,                                CONTAINER_TYPE_MST_TBL         cntr5                                 where                                                                                main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.STATUS                = 1                                        AND    cont5.TARIFF_TRN_SEA_FK     = tran5.TARIFF_TRN_SEA_PK                  AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 3";
                        }
                        else
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 1";
                        }
                        if (AgentPk > 0)
                        {
                            strSQL += "     AND    main5.AGENT_MST_FK = " + AgentPk;
                        }
                        strSQL += "     AND    tran5.PORT_MST_POL_FK       = portpol5.PORT_MST_PK(+)                  AND    tran5.PORT_MST_POD_FK       = portpod5.PORT_MST_PK(+)                  AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                  AND    cont5.CONTAINER_TYPE_MST_FK = cntr5.CONTAINER_TYPE_MST_PK(+)           AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        if (string.IsNullOrEmpty(OperPks))
                        {
                            strSQL = strSQL + "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       cont5.CONTAINER_TYPE_MST_FK ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT))Q            ORDER BY Q.PK DESC,Q.PREFERENCES  ";
                    }
                    else
                    {
                        strSQL = "  Select    DISTINCT                                       main5.TARIFF_MAIN_SEA_PK                   PK,                    " + (isAgentType ? SRC(SourceType.AgentTariff) : SRC(SourceType.OperatorAirlineTariff)) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.PORT_MST_POL_FK                      POL_PK,                   portpol5.PORT_ID                           POL_ID,                   tran5.PORT_MST_POD_FK                      POD_PK,                   portpod5.PORT_ID                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                0                                          COMM_PK,                  ''                                         COMM_ID,                  tran5.LCL_BASIS                            LCL_BASIS,                NVL(dim5.DIMENTION_ID,'')                  DIMENTION_ID,             NULL                                       WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,            " + (isAgentType ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "          PRIORITYORDER     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_MST_TBL                   portpol5,                             PORT_MST_TBL                   portpod5,                             OPERATOR_MST_TBL               opr5,                                 DIMENTION_UNIT_MST_TBL         dim5                                 where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                AND    main5.CARGO_TYPE            = 2                                       AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                  ";
                        if (isAgentType)
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 3";
                        }
                        else
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 1";
                        }
                        if (AgentPk > 0)
                        {
                            strSQL += "     AND    main5.AGENT_MST_FK = " + AgentPk;
                        }
                        strSQL += "     AND    tran5.PORT_MST_POL_FK       = portpol5.PORT_MST_PK(+)                 AND    tran5.PORT_MST_POD_FK       = portpod5.PORT_MST_PK(+)                 AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran5.LCL_BASIS             = dim5.DIMENTION_UNIT_MST_PK(+)      ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,tran5.LCL_BASIS )  " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                          " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPks))
                        {
                            strSQL = strSQL + "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)          ORDER BY PK DESC ";
                    }
                }
                else
                {
                    //Port Group
                    if (forFCL)
                    {
                        exchQueryFCL = " ( Select nvl(Sum(NVL(FCL_REQ_RATE * EXCHANGE_RATE,0)),0)                  from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,";
                        //TABLE(t5.CONTAINER_DTL_FCL) (+) c5 " & vbCrLf & _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL c5,                                      FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      c5.CONTAINER_TYPE_MST_FK = cont5.CONTAINER_TYPE_MST_FK  AND               c5.TARIFF_TRN_SEA_FK = t5.TARIFF_TRN_SEA_PK  AND                          t5.pol_grp_fk = tran5.pol_grp_fk AND                            t5.pod_grp_fk = tran5.pod_grp_fk AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND v5.CURRENCY_MST_BASE_FK = main5.base_currency_fk           and t5.port_mst_pol_fk in(           select t.port_mst_fk from port_grp_trn_tbl t where t.port_grp_mst_fk=t5.pol_grp_fk and rownum=1)           and t5.port_mst_pod_fk in(           select t.port_mst_fk from port_grp_trn_tbl t where t.port_grp_mst_fk=t5.pod_grp_fk and rownum=1)          and t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";

                        OperatorRate = " ( Select nvl(Sum(NVL(FCL_APP_RATE * EXCHANGE_RATE,0)),0)                  from  CONT_MAIN_SEA_TBL m, CONT_TRN_SEA_FCL_LCL t, V_EXCHANGE_RATE v,  ";
                        // & vbCrLf & _
                        //Snigdharani - 05/11/2008 - Removing v-array
                        //"         TABLE(t.CONTAINER_DTL_FCL) (+) c                                " & vbCrLf & _
                        OperatorRate = OperatorRate + "CONT_TRN_SEA_FCL_RATES c                                    where m.ACTIVE                     = 1   and v.exch_rate_type_fk = 1  AND                                  m.CONT_APPROVED              = 1     AND                                  m.CARGO_TYPE                 = 1     AND                                  m.OPERATOR_MST_FK            = main5.OPERATOR_MST_FK AND                  t.CONT_TRN_SEA_PK = C.CONT_TRN_SEA_FK AND                                 m.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 v.FROM_DATE and v.TO_DATE                                          AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 t.VALID_FROM   AND   NVL(t.VALID_TO,NULL_DATE_FORMAT)         AND          t.CONT_MAIN_SEA_FK           = m.CONT_MAIN_SEA_PK            AND          c.CONTAINER_TYPE_MST_FK      = cont5.CONTAINER_TYPE_MST_FK   AND          t.port_mst_pol_fk            = tran5.pol_grp_fk         AND          t.port_mst_pod_fk            = tran5.pod_grp_fk         AND          t.CHECK_FOR_ALL_IN_RT        = 1                             AND          t.CURRENCY_MST_FK            = v.CURRENCY_MST_FK AND               v.CURRENCY_MST_BASE_FK = m.base_currency_fk) ";
                        //"         ROUND(sysdate-0.5) between v.FROM_DATE and v.TO_DATE )           "
                    }

                    if (!forFCL)
                    {
                        exchQueryLCL = "( Select nvl(Sum(NVL(LCL_TARIFF_RATE * EXCHANGE_RATE,0)),0)                from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                            FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      t5.pol_grp_fk = tran5.pol_grp_fk AND                            t5.pod_grp_fk = tran5.pod_grp_fk AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND v5.CURRENCY_MST_BASE_FK = main5.base_currency_fk          and t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";

                        OperatorRate = " ( Select nvl(Sum(NVL(LCL_APPROVED_RATE * EXCHANGE_RATE,0)),0)             from  CONT_MAIN_SEA_TBL m, CONT_TRN_SEA_FCL_LCL t, V_EXCHANGE_RATE v      where m.ACTIVE                     = 1  and v.exch_rate_type_fk = 1   AND                                  m.CONT_APPROVED              = 1     AND                                  m.CARGO_TYPE                 = 2     AND                                  m.OPERATOR_MST_FK            = main5.OPERATOR_MST_FK AND                  m.COMMODITY_GROUP_FK         =  " + Convert.ToString(CommodityGroup) + " AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 v.FROM_DATE and v.TO_DATE                                          AND          ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                 t.VALID_FROM   AND   NVL(t.VALID_TO,NULL_DATE_FORMAT)         AND          t.CONT_MAIN_SEA_FK           = m.CONT_MAIN_SEA_PK            AND          t.LCL_BASIS                  = tran5.LCL_BASIS               AND          t.pol_grp_fk            = tran5.pol_grp_fk         AND          t.pod_grp_fk            = tran5.pod_grp_fk         AND          t.CHECK_FOR_ALL_IN_RT        = 1                             AND          t.CURRENCY_MST_FK            = v.CURRENCY_MST_FK AND               v.CURRENCY_MST_BASE_FK = m.base_currency_fk) ";
                        //"         ROUND(sysdate-0.5) between v.FROM_DATE and v.TO_DATE )           "
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER     FROM (Select  DISTINCT                                  main5.TARIFF_MAIN_SEA_PK                   PK,                    " + (isAgentType ? SRC(SourceType.AgentTariff) : SRC(SourceType.OperatorAirlineTariff)) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   main5.TARIFF_REF_NO                        REFNO,                    TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.pol_grp_fk                      POL_PK,                   portpol5.port_grp_id                           POL_ID,                   tran5.pod_grp_fk                      POD_PK,                   portpod5.port_grp_id                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr5.CONTAINER_TYPE_MST_ID                CNTR_ID,                  1                                         QUANTITY,                 0                                          COMM_PK,                  ''                                         COMM_ID,                  ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,            ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + (isAgentType ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "     PRIORITYORDER,          CNTR5.PREFERENCES                    from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                port_grp_mst_tbl                   portpol5,                             port_grp_mst_tbl                   portpod5,                             OPERATOR_MST_TBL               opr5,                            ";
                        //& vbCrLf _

                        strSQL = strSQL + " TARIFF_TRN_SEA_CONT_DTL    cont5,                                CONTAINER_TYPE_MST_TBL         cntr5                                 where                                                                                main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.STATUS                = 1                                        AND    cont5.TARIFF_TRN_SEA_FK     = tran5.TARIFF_TRN_SEA_PK                  AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 3";
                        }
                        else
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 1";
                        }
                        if (AgentPk > 0)
                        {
                            strSQL += "     AND    main5.AGENT_MST_FK = " + AgentPk;
                        }

                        strSQL += "     AND    tran5.pol_grp_fk       = portpol5.port_grp_mst_pk(+)                  AND    tran5.pod_grp_fk       = portpod5.port_grp_mst_pk(+)                  AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                  AND    cont5.CONTAINER_TYPE_MST_FK = cntr5.CONTAINER_TYPE_MST_PK(+)           AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        if (string.IsNullOrEmpty(OperPks))
                        {
                            strSQL = strSQL + "     AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       cont5.CONTAINER_TYPE_MST_FK ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT))Q            ORDER BY Q.PK DESC,Q.PREFERENCES  ";
                    }
                    else
                    {
                        strSQL = "  Select    DISTINCT                                       main5.TARIFF_MAIN_SEA_PK                   PK,                    " + (isAgentType ? SRC(SourceType.AgentTariff) : SRC(SourceType.OperatorAirlineTariff)) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.pol_grp_fk                      POL_PK,                   portpol5.port_grp_id                           POL_ID,                   tran5.pod_grp_fk                      POD_PK,                   portpod5.port_grp_id                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                0                                          COMM_PK,                  ''                                         COMM_ID,                  tran5.LCL_BASIS                            LCL_BASIS,                NVL(dim5.DIMENTION_ID,'')                  DIMENTION_ID,             NULL                                       WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + OperatorRate + ",0),2)                OPERATOR_RATE,            " + (isAgentType ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "          PRIORITYORDER     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                port_grp_mst_tbl                   portpol5,                             port_grp_mst_tbl                   portpod5,                             OPERATOR_MST_TBL               opr5,                                 DIMENTION_UNIT_MST_TBL         dim5                                 where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                AND    main5.CARGO_TYPE            = 2                                       AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                  ";
                        if (isAgentType)
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 3";
                        }
                        else
                        {
                            strSQL += "     AND    main5.TARIFF_TYPE = 1";
                        }
                        if (AgentPk > 0)
                        {
                            strSQL += "     AND    main5.AGENT_MST_FK = " + AgentPk;
                        }
                        strSQL += "     AND    tran5.pol_grp_fk       = portpol5.port_grp_mst_pk(+)                 AND    tran5.pod_grp_fk       = portpod5.port_grp_mst_pk(+)                 AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran5.LCL_BASIS             = dim5.DIMENTION_UNIT_MST_PK(+)      ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,tran5.LCL_BASIS )  " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                          " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPks))
                        {
                            strSQL = strSQL + "     AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)          ORDER BY PK DESC ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Operator Tariff Query."

        #region " General Tariff Query."

        /// <summary>
        /// Funs the gen tariff query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CurrPK">The curr pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPK">The oper pk.</param>
        /// <returns></returns>
        private string funGenTariffQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string CurrPK = "", int Group = 0, string OperPK = "")
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                if (Group == 1 | Group == 2)
                {
                    if (forFCL)
                    {
                        exchQueryFCL = " ( SELECT SUM(DISTINCT NVL(FCL_REQ_RATE * EXCHANGE_RATE,0))                  from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                   ";
                        //& vbCrLf & _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(t5.CONTAINER_DTL_FCL) (+) c5
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL c5,                                      FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      c5.CONTAINER_TYPE_MST_FK = cont5.CONTAINER_TYPE_MST_FK  AND               c5.TARIFF_TRN_SEA_FK = t5.TARIFF_TRN_SEA_PK  AND                          T5.POL_GRP_FK = TRAN5.POL_GRP_FK AND                                      T5.POD_GRP_FK = TRAN5.POD_GRP_FK AND                                      t5.CHECK_FOR_ALL_IN_RT   = 1 AND                                          t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              V5.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";
                    }

                    if (!forFCL)
                    {
                        exchQueryLCL = "( Select Sum(DISTINCT NVL(LCL_TARIFF_RATE * EXCHANGE_RATE,0))               from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                            FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      T5.POL_GRP_FK = TRAN5.POL_GRP_FK AND                                      T5.POD_GRP_FK = TRAN5.POD_GRP_FK AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND                                          t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              V5.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";
                    }

                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER     FROM (Select  DISTINCT                                  main5.TARIFF_MAIN_SEA_PK                   PK,                    " + SRC(SourceType.GeneralTariff) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   main5.TARIFF_REF_NO                        REFNO,                    TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                TRAN5.POL_GRP_FK                           POL_PK,                   PGL.PORT_GRP_ID                            POL_ID,                   TRAN5.POD_GRP_FK                           POD_PK,                   PGD.PORT_GRP_ID                            POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr5.CONTAINER_TYPE_MST_ID                CNTR_ID,                  1                                          QUANTITY,                 0                                          COMM_PK,                  ''                                         COMM_ID,                  ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,            NULL                                       OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + SourceType.GeneralTariff + "             PRIORITYORDER,           CNTR5.PREFERENCES                                                   from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_GRP_MST_TBL               PGL,                                  PORT_GRP_MST_TBL               PGD,                                  OPERATOR_MST_TBL               opr5,                            ";
                        //& vbCrLf _
                        //Modified by Snigdharani -29/10/2008 - Removin v-array
                        //TABLE(tran5.CONTAINER_DTL_FCL) (+) cont5,
                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont5,                                 CONTAINER_TYPE_MST_TBL         cntr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK                      AND    TRAN5.POL_GRP_FK            = PGL.PORT_GRP_MST_PK(+)                   AND    TRAN5.POD_GRP_FK            = PGD.PORT_GRP_MST_PK(+)                   AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                  AND    cont5.CONTAINER_TYPE_MST_FK = cntr5.CONTAINER_TYPE_MST_PK(+)           AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (TRAN5.POL_GRP_FK, TRAN5.POD_GRP_FK,                                                               cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (TRAN5.POL_GRP_FK, TRAN5.POD_GRP_FK,                                                               cont5.CONTAINER_TYPE_MST_FK,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT))Q             ORDER BY Q.PK DESC,Q.PREFERENCES";
                    }
                    else
                    {
                        strSQL = "Select    DISTINCT                                       main5.TARIFF_MAIN_SEA_PK                   PK,                    " + SRC(SourceType.GeneralTariff) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                TRAN5.POL_GRP_FK                           POL_PK,                   PGL.PORT_GRP_ID                            POL_ID,                   TRAN5.POD_GRP_FK                           POD_PK,                   PGD.PORT_GRP_ID                            POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                0                                          COMM_PK,                  ''                                         COMM_ID,                  tran5.LCL_BASIS                            LCL_BASIS,                NVL(dim5.DIMENTION_ID,'')                  DIMENTION_ID,             NULL                                       WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 NULL                                       OPERATOR_RATE,            " + SourceType.GeneralTariff + "           PRIORITYORDER            from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_GRP_MST_TBL               PGL,                                  PORT_GRP_MST_TBL               PGD,                                  OPERATOR_MST_TBL               opr5,                                 DIMENTION_UNIT_MST_TBL         dim5                                 where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                AND    main5.CARGO_TYPE            = 2                                       AND    main5.ACTIVE                = 1                                       AND    main5.TARIFF_TYPE           = 2                                       AND    main5.STATUS                = 1                                        AND    TRAN5.POL_GRP_FK            = PGL.PORT_GRP_MST_PK(+)                   AND    TRAN5.POD_GRP_FK            = PGD.PORT_GRP_MST_PK(+)                   AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran5.LCL_BASIS             = dim5.DIMENTION_UNIT_MST_PK(+)      ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (TRAN5.POL_GRP_FK, TRAN5.POD_GRP_FK,                                                               tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (TRAN5.POL_GRP_FK, TRAN5.POD_GRP_FK,                                                               tran5.LCL_BASIS,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)           ORDER BY PK DESC ";
                    }
                }
                else
                {
                    if (forFCL)
                    {
                        exchQueryFCL = " ( Select nvl(Sum(NVL(FCL_REQ_RATE * EXCHANGE_RATE,0)),0)                  from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                   ";
                        //& vbCrLf & _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(t5.CONTAINER_DTL_FCL) (+) c5
                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL c5,                                      FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      c5.CONTAINER_TYPE_MST_FK = cont5.CONTAINER_TYPE_MST_FK  AND               c5.TARIFF_TRN_SEA_FK = t5.TARIFF_TRN_SEA_PK  AND                          t5.PORT_MST_POL_FK = tran5.PORT_MST_POL_FK AND                            t5.PORT_MST_POD_FK = tran5.PORT_MST_POD_FK AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND                                          t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              V5.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";
                    }

                    if (!forFCL)
                    {
                        exchQueryLCL = "( Select nvl(Sum(NVL(LCL_TARIFF_RATE * EXCHANGE_RATE,0)),0)                from  TARIFF_TRN_SEA_FCL_LCL t5, V_EXCHANGE_RATE v5,                            FREIGHT_ELEMENT_MST_TBL f5                                          where t5.TARIFF_MAIN_SEA_FK = main5.TARIFF_MAIN_SEA_PK and v5.exch_rate_type_fk = 1 and                      t5.PORT_MST_POL_FK = tran5.PORT_MST_POL_FK AND                            t5.PORT_MST_POD_FK = tran5.PORT_MST_POD_FK AND                            t5.CHECK_FOR_ALL_IN_RT   = 1 AND                                          t5.CURRENCY_MST_FK =  v5.CURRENCY_MST_FK AND                              V5.CURRENCY_MST_BASE_FK= " + CurrPK + "                 AND          f5.FREIGHT_ELEMENT_MST_PK =  t5.FREIGHT_ELEMENT_MST_FK  AND               --f5.CHARGE_BASIS <> 2                                    AND               ROUND(sysdate-0.5) between v5.FROM_DATE and v5.TO_DATE )         ";
                    }

                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER   FROM(Select  DISTINCT                                  main5.TARIFF_MAIN_SEA_PK                   PK,                    " + SRC(SourceType.GeneralTariff) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   main5.TARIFF_REF_NO                        REFNO,                    TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.PORT_MST_POL_FK                      POL_PK,                   portpol5.PORT_ID                           POL_ID,                   tran5.PORT_MST_POD_FK                      POD_PK,                   portpod5.PORT_ID                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  cntr5.CONTAINER_TYPE_MST_ID                CNTR_ID,                  1                                          QUANTITY,                 0                                          COMM_PK,                  ''                                         COMM_ID,                  ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,            NULL                                       OPERATOR_RATE,            NULL                                       TARIFF,                   NULL                                       NET,                      'false'                                    SELECTED,               " + SourceType.GeneralTariff + "             PRIORITYORDER,           CNTR5.PREFERENCES                                                   from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_MST_TBL                   portpol5,                             PORT_MST_TBL                   portpod5,                             OPERATOR_MST_TBL               opr5,                            ";
                        //& vbCrLf _
                        //Modified by Snigdharani -29/10/2008 - Removin v-array
                        //TABLE(tran5.CONTAINER_DTL_FCL) (+) cont5,
                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont5,                                 CONTAINER_TYPE_MST_TBL         cntr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK                      AND    tran5.PORT_MST_POL_FK       = portpol5.PORT_MST_PK(+)                  AND    tran5.PORT_MST_POD_FK       = portpod5.PORT_MST_PK(+)                  AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                  AND    cont5.CONTAINER_TYPE_MST_FK = cntr5.CONTAINER_TYPE_MST_PK(+)           AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   cont5.CONTAINER_TYPE_MST_FK )              " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (TRAN5.PORT_MST_POL_FK, TRAN5.PORT_MST_POD_FK,                                                               cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (TRAN5.PORT_MST_POL_FK, TRAN5.PORT_MST_POD_FK,                                                               cont5.CONTAINER_TYPE_MST_FK,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT))Q             ORDER BY PK DESC,Q.PREFERENCES ";
                    }
                    else
                    {
                        strSQL = "    Select    DISTINCT                                       main5.TARIFF_MAIN_SEA_PK                   PK,                    " + SRC(SourceType.GeneralTariff) + "        TYPE,                     main5.TARIFF_REF_NO                        REF_NO,                   TO_CHAR(tran5.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran5.PORT_MST_POL_FK                      POL_PK,                   portpol5.PORT_ID                           POL_ID,                   tran5.PORT_MST_POD_FK                      POD_PK,                   portpod5.PORT_ID                           POD_ID,                   main5.OPERATOR_MST_FK                      OPER_PK,                  opr5.OPERATOR_ID                           OPER_ID,                  opr5.OPERATOR_NAME                         OPER_NAME,                0                                          COMM_PK,                  ''                                         COMM_ID,                  tran5.LCL_BASIS                            LCL_BASIS,                NVL(dim5.DIMENTION_ID,'')                  DIMENTION_ID,             NULL                                       WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 NULL                                       OPERATOR_RATE,            " + SourceType.GeneralTariff + "           PRIORITYORDER            from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                PORT_MST_TBL                   portpol5,                             PORT_MST_TBL                   portpod5,                             OPERATOR_MST_TBL               opr5,                                 DIMENTION_UNIT_MST_TBL         dim5                                 where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                AND    main5.CARGO_TYPE            = 2                                       AND    main5.ACTIVE                = 1                                       AND    main5.TARIFF_TYPE           = 2                                       AND    main5.STATUS                = 1                                        AND    tran5.PORT_MST_POL_FK       = portpol5.PORT_MST_PK(+)                 AND    tran5.PORT_MST_POD_FK       = portpod5.PORT_MST_PK(+)                 AND    main5.OPERATOR_MST_FK       = opr5.OPERATOR_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    tran5.LCL_BASIS             = dim5.DIMENTION_UNIT_MST_PK(+)      ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (TRAN5.PORT_MST_POL_FK, TRAN5.PORT_MST_POD_FK,                                                               tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (TRAN5.PORT_MST_POL_FK, TRAN5.PORT_MST_POD_FK,                                                              tran5.LCL_BASIS,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,tran5.LCL_BASIS )  " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                          " & vbCrLf _
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)           ORDER BY PK DESC ";
                    }
                }

                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " General Tariff Query."

        #endregion " Header Query "

        #region " Freight Level Query "

        #region " Quote Query "

        /// <summary>
        /// Quotes the freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPK">The oper pk.</param>
        /// <returns></returns>
        private string QuoteFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPK = "")
        {
            try
            {
                string strSQL = null;
                string cargos = "";
                //This procedure modified by Thiyagarajan on 29/5/08 for fcl and lcl combination
                //adding by Thiyagarajan
                if (cargotypes == 2)
                {
                    cargos = " and tran3.CONTAINER_TYPE_MST_FK is null";
                }
                else if (cargotypes == 1)
                {
                    cargos = " and tran3.basis is null ";
                }
                //endif
                if (Group == 1 | Group == 2)
                {
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select                 main3.QUOTATION_REF_NO                     REF_NO,                   TRAN3.POL_GRP_FK                           POL_PK,                   TRAN3.POD_GRP_FK                           POD_PK,                   tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_RATE                          QUOTERATE,                frtd3.QUOTED_RATE                          FINAL_RATE,               frtd3.PYMT_TYPE                            PYTYPE ,tran3.CARRIER_MST_FK as oper_pk     from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                        AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE            in ( 1 ,3 )                                 AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.CONTAINER_TYPE_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.CONTAINER_TYPE_MST_FK,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)) Q,             FREIGHT_ELEMENT_MST_TBL FRT             WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK             ORDER BY FRT.PREFERENCE ";
                        //Added by Rabbani raeson USS Gap,introduced New column as "QUOTED_MIN_RATE"
                    }
                    else
                    {
                        //    0       1       2        3        4      5         6        7         8       9       10
                        // REF_NO, POL_PK, POD_PK, LCLBASIS, FRT_PK, FRT_ID, FRT_NAME, SELECTED, CURR_PK, CURR_ID, RATE
                        //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                        strSQL = "    SELECT Q.* FROM (Select                 main3.QUOTATION_REF_NO                     REF_NO,                   TRAN3.POL_GRP_FK                           POL_PK,                   TRAN3.POD_GRP_FK                           POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTED_MIN_RATE,          frtd3.QUOTED_RATE                          QUOTERATE  ,                    (CASE WHEN frtd3.QUOTED_RATE > frtd3.QUOTED_MIN_RATE THEN frtd3.QUOTED_RATE ELSE frtd3.QUOTED_MIN_RATE END)  FINAL_RATE,frt3.Credit,tran3.CARRIER_MST_FK as oper_pk      from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                       AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE           in ( 2 , 3)                                   AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.BASIS )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.BASIS,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }

                        strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)       AND    frt3.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)      UNION ALL      Select                 main3.QUOTATION_REF_NO                     REF_NO,                   TRAN3.POL_GRP_FK                           POL_PK,                   TRAN3.POD_GRP_FK                           POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,      frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTED_MIN_RATE,          frtd3.QUOTED_RATE                          QUOTERATE,                      (CASE WHEN frtd3.QUOTED_RATE > frtd3.QUOTED_MIN_RATE THEN frtd3.QUOTED_RATE ELSE frtd3.QUOTED_MIN_RATE END)  FINAL_RATE,frt3.Credit,tran3.CARRIER_MST_FK as oper_pk      from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                       AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE            in(2,3)                                     AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 " + cargos;
                        //& "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                              " & vbCrLf _
                        //& "                                   tran3.BASIS,tran3.CARRIER_MST_FK )                               " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                            " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.BASIS )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (TRAN3.POL_GRP_FK, TRAN3.POD_GRP_FK ,                                                        tran3.BASIS,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        strSQL += "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)       AND    frt3.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,             FREIGHT_ELEMENT_MST_TBL FRT             WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK             ORDER BY FRT.PREFERENCE ";
                    }
                }
                else
                {
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select                 main3.QUOTATION_REF_NO                     REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_RATE                          QUOTERATE,                frtd3.QUOTED_RATE                          FINAL_RATE,               frtd3.PYMT_TYPE                            PYTYPE,tran3.CARRIER_MST_FK as oper_pk       from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                        AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE            in ( 1 ,3 )                                 AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.CONTAINER_TYPE_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.CONTAINER_TYPE_MST_FK,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }

                        strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)) Q,             FREIGHT_ELEMENT_MST_TBL FRT             WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK             ORDER BY FRT.PREFERENCE ";
                        //Added by Rabbani raeson USS Gap,introduced New column as "QUOTED_MIN_RATE"
                    }
                    else
                    {
                        //    0       1       2        3        4      5         6        7         8       9       10
                        // REF_NO, POL_PK, POD_PK, LCLBASIS, FRT_PK, FRT_ID, FRT_NAME, SELECTED, CURR_PK, CURR_ID, RATE
                        //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                        strSQL = "    SELECT Q.* FROM (Select                 main3.QUOTATION_REF_NO                     REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,               frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTED_MIN_RATE,          frtd3.QUOTED_RATE                          QUOTERATE  ,                    (CASE WHEN frtd3.QUOTED_RATE > frtd3.QUOTED_MIN_RATE THEN frtd3.QUOTED_RATE ELSE frtd3.QUOTED_MIN_RATE END)  FINAL_RATE,frt3.Credit,tran3.CARRIER_MST_FK as oper_pk      from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                       AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE           in ( 2 , 3)                                   AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 ";
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.BASIS )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.BASIS,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }

                        strSQL += cargos + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)       AND    frt3.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)      UNION ALL      Select                 main3.QUOTATION_REF_NO                     REF_NO,                   tran3.PORT_MST_POL_FK                      POL_PK,                   tran3.PORT_MST_POD_FK                      POD_PK,                   tran3.BASIS                                LCLBASIS,                 frtd3.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt3.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt3.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt3.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(frtd3.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       DECODE(frtd3.CHECK_ADVATOS, 1,'true','false') ADVATOS,      frtd3.CURRENCY_MST_FK                      CURR_PK,                  curr3.CURRENCY_ID                          CURR_ID,                  frtd3.QUOTED_MIN_RATE                      QUOTED_MIN_RATE,          frtd3.QUOTED_RATE                          QUOTERATE,                      (CASE WHEN frtd3.QUOTED_RATE > frtd3.QUOTED_MIN_RATE THEN frtd3.QUOTED_RATE ELSE frtd3.QUOTED_MIN_RATE END)  FINAL_RATE,frt3.Credit,tran3.CARRIER_MST_FK as oper_pk      from                                                                  QUOTATION_MST_TBL              main3,                                QUOTATION_DTL_TBL      tran3,                                QUOTATION_FREIGHT_TRN     frtd3,                                FREIGHT_ELEMENT_MST_TBL        frt3,                                 CURRENCY_TYPE_MST_TBL          curr3                                where                                                                            main3.QUOTATION_MST_PK      = tran3.QUOTATION_MST_FK                    AND    tran3.QUOTE_DTL_PK      = frtd3.QUOTATION_DTL_FK                    AND    frtd3.FREIGHT_ELEMENT_MST_FK = frt3.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt3.CHARGE_BASIS           <> 2                                       AND    frtd3.CURRENCY_MST_FK       = curr3.CURRENCY_MST_PK(+)                  AND    main3.CARGO_TYPE            in(2,3)                                     AND    tran3.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main3.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                 " + cargos;
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.BASIS )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        else
                        {
                            strSQL += "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                                                        tran3.BASIS,tran3.CARRIER_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                            ";
                        }
                        //& "     AND    (tran3.PORT_MST_POL_FK, tran3.PORT_MST_POD_FK,                     " & vbCrLf _
                        //& "                                   tran3.BASIS,tran3.CARRIER_MST_FK )                               " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                            " & vbCrLf _
                        strSQL += "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  BETWEEN                   main3.QUOTATION_DATE AND (main3.QUOTATION_DATE + main3.VALID_FOR)       AND    frt3.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,             FREIGHT_ELEMENT_MST_TBL FRT             WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK             ORDER BY FRT.PREFERENCE ";
                    }
                }

                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Quote Query "

        #region " Enquiry Query "

        /// <summary>
        /// Enquiries the freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <returns></returns>
        private string EnquiryFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string QuoteDate = "")
        {
            try
            {
                string strSQL = null;
                if (forFCL)
                {
                    strSQL = "    Select                 main4.ENQUIRY_REF_NO                       REF_NO,                   tran4.PORT_MST_POL_FK                      POL_PK,                   tran4.PORT_MST_POD_FK                      POD_PK,                   tran4.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd4.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt4.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt4.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frtd4.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    frtd4.CURRENCY_MST_FK                      CURR_PK,                  curr4.CURRENCY_ID                          CURR_ID,                  frtd4.TARIFF_RATE                          RATE,                     NULL                                       QUOTERATE,                NULL                                       PYTYPE                   from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                ENQUIRY_TRN_SEA_FRT_DTLS       frtd4,                                FREIGHT_ELEMENT_MST_TBL        frt4,                                 CURRENCY_TYPE_MST_TBL          curr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK                 AND    tran4.ENQUIRY_TRN_SEA_PK    = frtd4.ENQUIRY_TRN_SEA_FK                  AND    frtd4.FREIGHT_ELEMENT_MST_FK = frt4.FREIGHT_ELEMENT_MST_PK(+)           --AND    frt4.CHARGE_BASIS           <> 2                                        AND    frtd4.CURRENCY_MST_FK       = curr4.CURRENCY_MST_PK(+)                  AND    main4.CARGO_TYPE            = 1                                         AND    tran4.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "              AND    main4.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                      AND    (tran4.PORT_MST_POL_FK, tran4.PORT_MST_POD_FK,                                                        tran4.CONTAINER_TYPE_MST_FK )                             in ( " + Convert.ToString(SectorContainers) + " )                                 AND    ROUND(TO_DATE('" + QuoteDate + "','" + dateFormat + "')-0.5)  <=                       tran4.EXPECTED_SHIPMENT                                           ";
                    //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                }
                else
                {
                    strSQL = "    Select                 main4.ENQUIRY_REF_NO                       REF_NO,                   tran4.PORT_MST_POL_FK                      POL_PK,                   tran4.PORT_MST_POD_FK                      POD_PK,                   tran4.BASIS                                LCLBASIS,                 frtd4.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt4.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt4.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frtd4.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    frtd4.CURRENCY_MST_FK                      CURR_PK,                  curr4.CURRENCY_ID                          CURR_ID,                  frtd4.TARIFF_RATE                          RATE                     from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                ENQUIRY_TRN_SEA_FRT_DTLS       frtd4,                                FREIGHT_ELEMENT_MST_TBL        frt4,                                 CURRENCY_TYPE_MST_TBL          curr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK               AND    tran4.ENQUIRY_TRN_SEA_PK    = frtd4.ENQUIRY_TRN_SEA_FK                AND    frtd4.FREIGHT_ELEMENT_MST_FK = frt4.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt4.CHARGE_BASIS           <> 2                                      AND    frtd4.CURRENCY_MST_FK       = curr4.CURRENCY_MST_PK(+)                AND    main4.CARGO_TYPE            = 2                                       AND    tran4.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    main4.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                    AND    (tran4.PORT_MST_POL_FK, tran4.PORT_MST_POD_FK,                                                      tran4.LCL_BASIS )                                       in ( " + Convert.ToString(SectorContainers) + " )                               AND    ROUND(TO_DATE('" + QuoteDate + "','" + dateFormat + "')-0.5)  <=                     tran4.EXPECTED_SHIPMENT                                               AND    frt4.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)     UNION ALL     Select                 main4.ENQUIRY_REF_NO                       REF_NO,                   tran4.PORT_MST_POL_FK                      POL_PK,                   tran4.PORT_MST_POD_FK                      POD_PK,                   tran4.BASIS                                LCLBASIS,                 frtd4.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt4.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt4.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frtd4.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    frtd4.CURRENCY_MST_FK                      CURR_PK,                  curr4.CURRENCY_ID                          CURR_ID,                  frtd4.TARIFF_RATE                          RATE                     from                                                                  ENQUIRY_BKG_SEA_TBL            main4,                                ENQUIRY_TRN_SEA_FCL_LCL        tran4,                                ENQUIRY_TRN_SEA_FRT_DTLS       frtd4,                                FREIGHT_ELEMENT_MST_TBL        frt4,                                 CURRENCY_TYPE_MST_TBL          curr4                                where                                                                            main4.ENQUIRY_BKG_SEA_PK    = tran4.ENQUIRY_MAIN_SEA_FK               AND    tran4.ENQUIRY_TRN_SEA_PK    = frtd4.ENQUIRY_TRN_SEA_FK                AND    frtd4.FREIGHT_ELEMENT_MST_FK = frt4.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt4.CHARGE_BASIS           <> 2                                      AND    frtd4.CURRENCY_MST_FK       = curr4.CURRENCY_MST_PK(+)                AND    main4.CARGO_TYPE            = 2                                       AND    tran4.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    main4.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + "                    AND    (tran4.PORT_MST_POL_FK, tran4.PORT_MST_POD_FK,                                                      tran4.LCL_BASIS )                                       in ( " + Convert.ToString(SectorContainers) + " )                               AND    ROUND(TO_DATE('" + QuoteDate + "','" + dateFormat + "')-0.5)  <=                     tran4.EXPECTED_SHIPMENT                                               AND    frt4.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)";
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Enquiry Query "

        #region " Spot Rate Query "

        /// <summary>
        /// Spots the rate freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <returns></returns>
        private string SpotRateFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPKs = "")
        {
            try
            {
                string strSQL = null;
                //The following query is modified by Snigdharani on 28/11/2008 as commodity group is mandatory where as commodity is not mandatory.
                if (forFCL)
                {
                    strSQL = "    SELECT Q.* FROM(Select           main1.RFQ_REF_NO                           REF_NO,                   tran1.PORT_MST_POL_FK                      POL_PK,                   tran1.PORT_MST_POD_FK                      POD_PK,                   cont1.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran1.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt1.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt1.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt1.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran1.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran1.CURRENCY_MST_FK                      CURR_PK,                  curr1.CURRENCY_ID                          CURR_ID,                  cont1.FCL_APP_RATE                         QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,main1.operator_mst_fk as oper_pk                   from                                                                  RFQ_SPOT_RATE_SEA_TBL          main1,                                RFQ_SPOT_TRN_SEA_FCL_LCL       tran1,                           ";
                    // & vbCrLf _
                    //Snigdharani - Removing v-array - 04/11/2008
                    //& "TABLE(tran1.CONTAINER_DTL_FCL) (+) cont1,                    " & vbCrLf _
                    strSQL = strSQL + "RFQ_SPOT_TRN_SEA_CONT_DET   cont1,                         commodity_group_mst_tbl              cmdt1,COMMODITY_MST_TBL         cmdt2,     FREIGHT_ELEMENT_MST_TBL        frt1,                                 CURRENCY_TYPE_MST_TBL          curr1 ,OPERATOR_MST_TBL          OPR1     where                                                                            main1.RFQ_SPOT_SEA_PK       = tran1.RFQ_SPOT_SEA_FK                    AND    main1.CARGO_TYPE            = 1                                        AND    MAIN1.OPERATOR_MST_FK = OPR1.OPERATOR_MST_PK(+)                        AND    CONT1.RFQ_SPOT_SEA_TRN_FK=tran1.RFQ_SPOT_SEA_TRN_PK                    AND    main1.ACTIVE                = 1                                        AND    main1.APPROVED              = 1                                        AND    tran1.FREIGHT_ELEMENT_MST_FK = frt1.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt1.CHARGE_BASIS           <> 2                                       AND    tran1.CURRENCY_MST_FK       = curr1.CURRENCY_MST_PK(+)                 AND    main1.commodity_group_fk = cmdt1.commodity_group_pk                and    main1.commodity_mst_fk = cmdt2.commodity_mst_pk(+)                AND    cmdt1.COMMODITY_GROUP_pK    = " + Convert.ToString(CommodityGroup) + "             AND    (main1.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + " OR main1.CUSTOMER_MST_FK IS NULL      OR   main1.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    if (string.IsNullOrEmpty(OperPKs))
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       cont1.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    else
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       cont1.CONTAINER_TYPE_MST_FK, opr1.OPERATOR_MST_PK)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    strSQL = strSQL + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran1.VALID_FROM   AND   tran1.VALID_TO) Q,                                   FREIGHT_ELEMENT_MST_TBL FRT                                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                                   ORDER BY FRT.PREFERENCE                           ";
                    //Added by Rabbani raeson USS Gap,introduced New column as "Min.Rate"
                }
                else
                {
                    //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                    strSQL = "    SELECT Q.* FROM(Select                 main1.RFQ_REF_NO                           REF_NO,                   tran1.PORT_MST_POL_FK                      POL_PK,                   tran1.PORT_MST_POD_FK                      POD_PK,                   tran1.LCL_BASIS                            LCLBASIS,                 tran1.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt1.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt1.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt1.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran1.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran1.CURRENCY_MST_FK                      CURR_PK,                  curr1.CURRENCY_ID                          CURR_ID,                  tran1.LCL_APPROVED_MIN_RATE                QUOTE_MIN_RATE,                 tran1.LCL_APPROVED_RATE                    QUOTERATE,                      tran1.LCL_APPROVED_RATE                    FINAL_RATE,main1.operator_mst_fk as oper_pk               from                                                                  RFQ_SPOT_RATE_SEA_TBL          main1,                                RFQ_SPOT_TRN_SEA_FCL_LCL       tran1,                                commodity_group_mst_tbl        cmdt1,COMMODITY_MST_TBL         cmdt2,     FREIGHT_ELEMENT_MST_TBL        frt1,                                 CURRENCY_TYPE_MST_TBL          curr1                                where                                                                            main1.RFQ_SPOT_SEA_PK       = tran1.RFQ_SPOT_SEA_FK                    AND    main1.CARGO_TYPE            = 2                                        AND    main1.ACTIVE                = 1                                        AND    main1.APPROVED              = 1                                        AND    tran1.FREIGHT_ELEMENT_MST_FK = frt1.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt1.CHARGE_BASIS           <> 2                                       AND    tran1.CURRENCY_MST_FK       = curr1.CURRENCY_MST_PK(+)                 AND    main1.commodity_group_fk = cmdt1.commodity_group_pk                and    main1.commodity_mst_fk = cmdt2.commodity_mst_pk(+)                AND    cmdt1.COMMODITY_GROUP_pK    = " + Convert.ToString(CommodityGroup) + "             AND    (main1.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + " OR main1.CUSTOMER_MST_FK IS NULL      OR   main1.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    if (string.IsNullOrEmpty(OperPKs))
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    else
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS, opr1.OPERATOR_MST_PK)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran1.VALID_FROM   AND   tran1.VALID_TO                                AND    frt1.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)     UNION ALL      Select                 main1.RFQ_REF_NO                           REF_NO,                   tran1.PORT_MST_POL_FK                      POL_PK,                   tran1.PORT_MST_POD_FK                      POD_PK,                   tran1.LCL_BASIS                            LCLBASIS,                 tran1.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt1.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt1.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt1.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran1.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                     tran1.CURRENCY_MST_FK                      CURR_PK,                  curr1.CURRENCY_ID                          CURR_ID,                  tran1.LCL_APPROVED_MIN_RATE                QUOTE_MIN_RATE,                 tran1.LCL_APPROVED_RATE                    QUOTERATE ,                     tran1.LCL_APPROVED_RATE                    FINAL_RATE,main1.operator_mst_fk as oper_pk                     from                                                                  RFQ_SPOT_RATE_SEA_TBL          main1,                                RFQ_SPOT_TRN_SEA_FCL_LCL       tran1,                                commodity_group_mst_tbl        cmdt1,COMMODITY_MST_TBL         cmdt2,     FREIGHT_ELEMENT_MST_TBL        frt1,                                 CURRENCY_TYPE_MST_TBL          curr1                                where                                                                            main1.RFQ_SPOT_SEA_PK       = tran1.RFQ_SPOT_SEA_FK                    AND    main1.CARGO_TYPE            = 2                                        AND    main1.ACTIVE                = 1                                        AND    main1.APPROVED              = 1                                        AND    tran1.FREIGHT_ELEMENT_MST_FK = frt1.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt1.CHARGE_BASIS           <> 2                                       AND    tran1.CURRENCY_MST_FK       = curr1.CURRENCY_MST_PK(+)                 AND    main1.commodity_group_fk = cmdt1.commodity_group_pk                and    main1.commodity_mst_fk = cmdt2.commodity_mst_pk(+)                AND    cmdt1.COMMODITY_GROUP_pK    = " + Convert.ToString(CommodityGroup) + "             AND    (main1.CUSTOMER_MST_FK       = " + Convert.ToString(CustNo) + " OR main1.CUSTOMER_MST_FK IS NULL      OR   main1.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    if (string.IsNullOrEmpty(OperPKs))
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    else
                    {
                        strSQL = strSQL + "     AND    (tran1.PORT_MST_POL_FK, tran1.PORT_MST_POD_FK,                                                       tran1.LCL_BASIS, opr1.OPERATOR_MST_PK)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                    }
                    strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran1.VALID_FROM   AND   tran1.VALID_TO                                AND    frt1.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,            FREIGHT_ELEMENT_MST_TBL FRT                                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                                   ORDER BY FRT.PREFERENCE                           ";
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Spot Rate Query "

        #region " Customer Contract Query "

        /// <summary>
        /// Customers the cont freight query sea.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPK">The oper pk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string CustContFreightQuerySea(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPK = "", int Group = 0)
        {
            string strSQL = null;
            //Dim CargoType As String = "2"
            //If forFCL = True Then
            //    CargoType = "1"
            //End If

            try
            {
                string strContRefNo = null;
                string strFreightElements = null;
                string strSurcharge = null;
                string strContSectors = null;
                string strContNoLCL = null;
                string strFreightsLCL = null;
                string strSurchargeLCL = null;
                string strBasisSectors = null;

                //IF "APPROVED_ALL_IN_RATE" > 0 then
                //(1) Elements from child table having "CONT_SUR_CHRG_SEA_TBL.CHECK_FOR ALL_IN_RT"=1 with approved rates
                //(2) BOF with "CONT_CUST_TRN_SEA_TBL.CURRENT_BOF_RATE"
                //ELSE
                //(1) All Elements from child table with approved rates
                //(2) BOF with "CONT_CUST_TRN_SEA_TBL.APPROVED_BOF_RATE"
                if (Group == 0)
                {
                    strContRefNo = " (   Select    DISTINCT  CONT_REF_NO     from                                                                  CONT_CUST_SEA_TBL              main7,                                CONT_CUST_TRN_SEA_TBL          tran7                                where                                                                            main7.CONT_CUST_SEA_PK      = tran7.CONT_CUST_SEA_FK                   AND    main7.CARGO_TYPE            = 1   AND main7.active=1                   AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran7.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran7.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strContNoLCL = " (   Select    DISTINCT  CONT_REF_NO     from                                                                  CONT_CUST_SEA_TBL              main7,                                CONT_CUST_TRN_SEA_TBL          tran7                                where                                                                            main7.CONT_CUST_SEA_PK      = tran7.CONT_CUST_SEA_FK                   AND    main7.CARGO_TYPE            = 2                                        AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main7.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran7.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran7.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran7.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strFreightElements = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  CONT_CUST_SEA_TBL              main8,                                CONT_CUST_TRN_SEA_TBL          tran8,                                CONT_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.CONT_CUST_SEA_PK      = tran8.CONT_CUST_SEA_FK                   AND    tran8.CONT_CUST_TRN_SEA_PK  = frtd8.CONT_CUST_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 1  AND MAIN8.Active=1                   AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.PORT_MST_POL_FK       = tran6.PORT_MST_POL_FK                    AND    tran8.PORT_MST_POD_FK       = tran6.PORT_MST_POD_FK                    AND    tran8.CONTAINER_TYPE_MST_FK = cont6.CONTAINER_TYPE_MST_FK              AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strFreightsLCL = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  CONT_CUST_SEA_TBL              main8,                                CONT_CUST_TRN_SEA_TBL          tran8,                                CONT_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.CONT_CUST_SEA_PK      = tran8.CONT_CUST_SEA_FK                   AND    tran8.CONT_CUST_TRN_SEA_PK  = frtd8.CONT_CUST_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 2                                        AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.PORT_MST_POL_FK       = tran6.PORT_MST_POL_FK                    AND    tran8.PORT_MST_POD_FK       = tran6.PORT_MST_POD_FK                    AND    tran8.LCL_BASIS             = tran6.LCL_BASIS                          AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurcharge = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  CONT_CUST_SEA_TBL              main9,                                CONT_CUST_TRN_SEA_TBL          tran9                                where                                                                            main9.CONT_CUST_SEA_PK      = tran9.CONT_CUST_SEA_FK                   AND    main9.CARGO_TYPE            = 1 AND MAIN9.Active=1                    AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran9.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran9.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurchargeLCL = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  CONT_CUST_SEA_TBL              main9,                                CONT_CUST_TRN_SEA_TBL          tran9                                where                                                                            main9.CONT_CUST_SEA_PK      = tran9.CONT_CUST_SEA_FK                   AND    main9.CARGO_TYPE            = 2                                        AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran9.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran9.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strContSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.CONTAINER_TYPE_MST_FK                    from                                                                           CONT_CUST_SEA_TBL              main10,                                        CONT_CUST_TRN_SEA_TBL          tran10                                        where                                                                                 main10.CONT_CUST_SEA_PK      = tran10.CONT_CUST_SEA_FK                 AND    main10.CARGO_TYPE            = 1  AND MAIN10.Active=1                  AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    //& "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                  " & vbCrLf _
                    //& "                                   tran10.CONTAINER_TYPE_MST_FK )             " & vbCrLf _
                    //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strContSectors = strContSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strContSectors = strContSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.CONTAINER_TYPE_MST_FK,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strContSectors = strContSectors + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    strBasisSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.LCL_BASIS                                from                                                                           CONT_CUST_SEA_TBL              main10,                                        CONT_CUST_TRN_SEA_TBL          tran10                                        where                                                                                 main10.CONT_CUST_SEA_PK      = tran10.CONT_CUST_SEA_FK                 AND    main10.CARGO_TYPE            = 2                                       AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    //& "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                  " & vbCrLf _
                    //& "                                   tran10.LCL_BASIS )                         " & vbCrLf _
                    //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                      tran10.LCL_BASIS,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strBasisSectors = strBasisSectors + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select          main22.CONT_REF_NO                          REF_NO,                   tran22.PORT_MST_POL_FK                      POL_PK,                   tran22.PORT_MST_POD_FK                      POD_PK,                   tran22.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE,                     NULL                                        FINAL_RATE,                NULL                                        PYTYPE,MAIN22.OPERATOR_MST_FK AS OPER_PK          from                                                                   CONT_CUST_SEA_TBL              main22,                                CONT_CUST_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.CONT_CUST_SEA_PK      = tran22.CONT_CUST_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 1  AND main22.active=1                    AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND   (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran22.CONTAINER_TYPE_MST_FK )               " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                             " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.CONTAINER_TYPE_MST_FK,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    else
                    {
                        strSQL = "    SELECT Q.* FROM (Select          main22.CONT_REF_NO                          REF_NO,                   tran22.PORT_MST_POL_FK                      POL_PK,                   tran22.PORT_MST_POD_FK                      POD_PK,                   tran22.LCL_BASIS                            LCLBASIS,                 frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                  NULL  QUOTE_MIN_RATE,                ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE ,                   ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         FINAL_RATE,MAIN22.OPERATOR_MST_FK AS OPER_PK       from                                                                   CONT_CUST_SEA_TBL              main22,                                CONT_CUST_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.CONT_CUST_SEA_PK      = tran22.CONT_CUST_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 2                                         AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran22.LCL_BASIS )                           " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                             " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.LCL_BASIS,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }

                    if (forFCL)
                    {
                        strSQL += "    Select          main2.CONT_REF_NO                          REF_NO,                   tran2.PORT_MST_POL_FK                      POL_PK,                   tran2.PORT_MST_POD_FK                      POD_PK,                   tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  frtd2.APP_SURCHARGE_AMT                    QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN2.OPERATOR_MST_FK AS OPER_PK                   from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                CONT_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                   AND    tran2.CONT_CUST_TRN_SEA_PK  = frtd2.CONT_CUST_TRN_SEA_FK               AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt2.CHARGE_BASIS           <> 2                                       AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                 AND    main2.CARGO_TYPE            = 1   AND main2.active=1                   AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT, CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran2.CONTAINER_TYPE_MST_FK )              " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            UNION     Select                 " + strContRefNo + "                       REF_NO,                   tran6.PORT_MST_POL_FK                      POL_PK,                   tran6.PORT_MST_POD_FK                      POD_PK,                   cont6.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  cont6.FCL_REQ_RATE                         RATE,                     NULL                                       QUOTERATE,                NULL                                       PYTYPE,MAIN6.OPERATOR_MST_FK AS OPER_PK                   from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                           ";
                        //& vbCrLf _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(tran6.CONTAINER_DTL_FCL) (+) cont6
                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont6,                            FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContRefNo + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 1  AND MAIN6.ACTIVE = 1                 AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         AND    cont6.TARIFF_TRN_SEA_FK = tran6.TARIFF_TRN_SEA_PK                     --AND    frt6.CHARGE_BASIS           <> 2                                      AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      cont6.CONTAINER_TYPE_MST_FK )                           in ( " + strContSectors + " )                                       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightElements + ")      AND  " + strSurcharge + " = 1) Q,                       FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                    else
                    {
                        strSQL += "    Select                 main2.CONT_REF_NO                          REF_NO,                   tran2.PORT_MST_POL_FK                      POL_PK,                   tran2.PORT_MST_POD_FK                      POD_PK,                   tran2.LCL_BASIS                            LCLBASIS,                 frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      frtd2.APP_SURCHARGE_AMT                    RATE  ,                    frtd2.APP_SURCHARGE_AMT                    FINAL_RATE,MAIN2.OPERATOR_MST_FK AS OPER_PK                     from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                CONT_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                  AND    tran2.CONT_CUST_TRN_SEA_PK  = frtd2.CONT_CUST_TRN_SEA_FK              AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt2.CHARGE_BASIS           <> 2                                      AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                AND    main2.CARGO_TYPE            = 2                                       AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                   " & vbCrLf _
                        //& "                                   tran2.LCL_BASIS )                         " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                          " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)           UNION     Select                 " + strContNoLCL + "                       REF_NO,                   tran6.PORT_MST_POL_FK                      POL_PK,                   tran6.PORT_MST_POD_FK                      POD_PK,                   tran6.LCL_BASIS                            LCLBASIS,                 tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      tran6.LCL_TARIFF_RATE                      RATE  ,                    tran6.LCL_TARIFF_RATE                      FINAL_RATE,MAIN6.OPERATOR_MST_FK AS OPER_PK                      from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                                FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContNoLCL + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 2                                       AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt6.CHARGE_BASIS           <> 2                                       AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      tran6.LCL_BASIS )                                       in ( " + strBasisSectors + " )                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightsLCL + ")          AND  " + strSurchargeLCL + " = 1) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                }
                else
                {
                    //'Port Group Code
                    strContRefNo = " (   Select    DISTINCT  CONT_REF_NO     from                                                                  CONT_CUST_SEA_TBL              main7,                                CONT_CUST_TRN_SEA_TBL          tran7                                where                                                                            main7.CONT_CUST_SEA_PK      = tran7.CONT_CUST_SEA_FK                   AND    main7.CARGO_TYPE            = 1   AND main7.active=1                   AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran7.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran7.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strContNoLCL = " (   Select    DISTINCT  CONT_REF_NO     from                                                                  CONT_CUST_SEA_TBL              main7,                                CONT_CUST_TRN_SEA_TBL          tran7                                where                                                                            main7.CONT_CUST_SEA_PK      = tran7.CONT_CUST_SEA_FK                   AND    main7.CARGO_TYPE            = 2                                        AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main7.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran7.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran7.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran7.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strFreightElements = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  CONT_CUST_SEA_TBL              main8,                                CONT_CUST_TRN_SEA_TBL          tran8,                                CONT_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.CONT_CUST_SEA_PK      = tran8.CONT_CUST_SEA_FK                   AND    tran8.CONT_CUST_TRN_SEA_PK  = frtd8.CONT_CUST_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 1  AND MAIN8.Active=1                   AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.pol_grp_fk       = tran6.pod_grp_fk                    AND    tran8.pol_grp_fk       = tran6.pod_grp_fk                    AND    tran8.CONTAINER_TYPE_MST_FK = cont6.CONTAINER_TYPE_MST_FK              AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strFreightsLCL = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  CONT_CUST_SEA_TBL              main8,                                CONT_CUST_TRN_SEA_TBL          tran8,                                CONT_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.CONT_CUST_SEA_PK      = tran8.CONT_CUST_SEA_FK                   AND    tran8.CONT_CUST_TRN_SEA_PK  = frtd8.CONT_CUST_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 2                                        AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.pol_grp_fk       = tran6.pol_grp_fk                    AND    tran8.pod_grp_fk       = tran6.pod_grp_fk                    AND    tran8.LCL_BASIS             = tran6.LCL_BASIS                          AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurcharge = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  CONT_CUST_SEA_TBL              main9,                                CONT_CUST_TRN_SEA_TBL          tran9                                where                                                                            main9.CONT_CUST_SEA_PK      = tran9.CONT_CUST_SEA_FK                   AND    main9.CARGO_TYPE            = 1 AND MAIN9.Active=1                    AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran9.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran9.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurchargeLCL = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  CONT_CUST_SEA_TBL              main9,                                CONT_CUST_TRN_SEA_TBL          tran9                                where                                                                            main9.CONT_CUST_SEA_PK      = tran9.CONT_CUST_SEA_FK                   AND    main9.CARGO_TYPE            = 2                                        AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran9.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran9.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strContSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.CONTAINER_TYPE_MST_FK                    from                                                                           CONT_CUST_SEA_TBL              main10,                                        CONT_CUST_TRN_SEA_TBL          tran10                                        where                                                                                 main10.CONT_CUST_SEA_PK      = tran10.CONT_CUST_SEA_FK                 AND    main10.CARGO_TYPE            = 1  AND MAIN10.Active=1                  AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    //& "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                  " & vbCrLf _
                    //& "                                   tran10.CONTAINER_TYPE_MST_FK )             " & vbCrLf _
                    //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strContSectors = strContSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strContSectors = strContSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.CONTAINER_TYPE_MST_FK,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strContSectors = strContSectors + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    strBasisSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.LCL_BASIS                                from                                                                           CONT_CUST_SEA_TBL              main10,                                        CONT_CUST_TRN_SEA_TBL          tran10                                        where                                                                                 main10.CONT_CUST_SEA_PK      = tran10.CONT_CUST_SEA_FK                 AND    main10.CARGO_TYPE            = 2                                       AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                       AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                    //& "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                  " & vbCrLf _
                    //& "                                   tran10.LCL_BASIS )                         " & vbCrLf _
                    //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                      tran10.LCL_BASIS,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strBasisSectors = strBasisSectors + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select distinct         main22.CONT_REF_NO                          REF_NO,                   tran22.pol_grp_fk                      POL_PK,                   tran22.pod_grp_fk                      POD_PK,                   tran22.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE,                     NULL                                        FINAL_RATE,                NULL                                        PYTYPE,MAIN22.OPERATOR_MST_FK AS OPER_PK          from                                                                   CONT_CUST_SEA_TBL              main22,                                CONT_CUST_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.CONT_CUST_SEA_PK      = tran22.CONT_CUST_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 1  AND main22.active=1                    AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran22.CONTAINER_TYPE_MST_FK )               " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                             " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.CONTAINER_TYPE_MST_FK,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    else
                    {
                        strSQL = "    SELECT Q.* FROM (Select  distinct        main22.CONT_REF_NO                          REF_NO,                   tran22.pol_grp_fk                      POL_PK,                   tran22.pod_grp_fk                      POD_PK,                   tran22.LCL_BASIS                            LCLBASIS,                 frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                  NULL  QUOTE_MIN_RATE,                ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE ,                   ( Case When MAIN22.STATUS <> 2 Then    " + "            tran22.CURRENT_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         FINAL_RATE,MAIN22.OPERATOR_MST_FK AS OPER_PK       from                                                                   CONT_CUST_SEA_TBL              main22,                                CONT_CUST_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.CONT_CUST_SEA_PK      = tran22.CONT_CUST_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 2                                         AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran22.LCL_BASIS )                           " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                             " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.LCL_BASIS,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    if (forFCL)
                    {
                        strSQL += "    Select   distinct       main2.CONT_REF_NO                          REF_NO,                   tran2.pol_grp_fk                      POL_PK,                   tran2.pod_grp_fk                      POD_PK,                   tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  frtd2.APP_SURCHARGE_AMT                    QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN2.OPERATOR_MST_FK AS OPER_PK                   from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                CONT_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                   AND    tran2.CONT_CUST_TRN_SEA_PK  = frtd2.CONT_CUST_TRN_SEA_FK               AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt2.CHARGE_BASIS           <> 2                                       AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                 AND    main2.CARGO_TYPE            = 1   AND main2.active=1                   AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                       AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran2.CONTAINER_TYPE_MST_FK )              " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            UNION     Select   distinct              " + strContRefNo + "                       REF_NO,                   tran6.pol_grp_fk                      POL_PK,                   tran6.pod_grp_fk                      POD_PK,                   cont6.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  cont6.FCL_REQ_RATE                         RATE,                     NULL                                       QUOTERATE,                NULL                                       PYTYPE,MAIN6.OPERATOR_MST_FK AS OPER_PK                   from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                           ";
                        //& vbCrLf _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(tran6.CONTAINER_DTL_FCL) (+) cont6
                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont6,                            FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContRefNo + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 1  AND MAIN6.ACTIVE = 1                 AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         AND    cont6.TARIFF_TRN_SEA_FK = tran6.TARIFF_TRN_SEA_PK                     --AND    frt6.CHARGE_BASIS           <> 2                                      AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      cont6.CONTAINER_TYPE_MST_FK )                           in ( " + strContSectors + " )                                       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightElements + ")      AND  " + strSurcharge + " = 1) Q,                       FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                    else
                    {
                        strSQL += "    Select    distinct             main2.CONT_REF_NO                          REF_NO,                   tran2.pol_grp_fk                      POL_PK,                   tran2.pod_grp_fk                      POD_PK,                   tran2.LCL_BASIS                            LCLBASIS,                 frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      frtd2.APP_SURCHARGE_AMT                    RATE  ,                    frtd2.APP_SURCHARGE_AMT                    FINAL_RATE,MAIN2.OPERATOR_MST_FK AS OPER_PK                     from                                                                  CONT_CUST_SEA_TBL              main2,                                CONT_CUST_TRN_SEA_TBL          tran2,                                CONT_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.CONT_CUST_SEA_PK      = tran2.CONT_CUST_SEA_FK                  AND    tran2.CONT_CUST_TRN_SEA_PK  = frtd2.CONT_CUST_TRN_SEA_FK              AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt2.CHARGE_BASIS           <> 2                                      AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                AND    main2.CARGO_TYPE            = 2                                       AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";
                        //& "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                   " & vbCrLf _
                        //& "                                   tran2.LCL_BASIS )                         " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                          " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)           UNION     Select   distinct              " + strContNoLCL + "                       REF_NO,                   tran6.pol_grp_fk                      POL_PK,                   tran6.pod_grp_fk                      POD_PK,                   tran6.LCL_BASIS                            LCLBASIS,                 tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      tran6.LCL_TARIFF_RATE                      RATE  ,                    tran6.LCL_TARIFF_RATE                      FINAL_RATE,MAIN6.OPERATOR_MST_FK AS OPER_PK                      from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                                FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContNoLCL + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 2                                       AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt6.CHARGE_BASIS           <> 2                                       AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      tran6.LCL_BASIS )                                       in ( " + strBasisSectors + " )                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightsLCL + ")          AND  " + strSurchargeLCL + " = 1) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Customer Contract Query "

        #region " Operator Tariff Query "

        /// <summary>
        /// Oprs the tariff freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPk">The oper pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="isAgentType">if set to <c>true</c> [is agent type].</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        /// <returns></returns>
        private string OprTariffFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPk = "", int Group = 0, bool isAgentType = false, int TariffAgentPk = 0)
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                if (Group == 0)
                {
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  cont5.FCL_REQ_RATE                         QUOTERATE,                     NULL                                       FINAL_RATE,                'Collect'                                  PYTYPE,main5.operator_mst_fk as oper_Pk                   from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                           ";
                        //& vbCrLf _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(tran5.CONTAINER_DTL_FCL) (+) cont5
                        strSQL = strSQL + "     TARIFF_TRN_SEA_CONT_DTL cont5,                            FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }
                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK                      --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   cont5.CONTAINER_TYPE_MST_FK )              " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       cont5.CONTAINER_TYPE_MST_FK ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)) Q,            FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                        //Added by rabbani reason USS Gap,introduced New Column as "QUOTE_MIN_RATE"
                    }
                    else
                    {
                        //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                        strSQL = "    SELECT Q.* FROM (Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  QUOTE_MIN_RATE,           tran5.LCL_TARIFF_RATE                      QUOTERATE ,                     tran5.LCL_TARIFF_RATE                      FINAL_RATE,main5.operator_mst_fk as oper_Pk                     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }
                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran5.LCL_BASIS )                          " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)      UNION ALL      Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  QUOTE_MIN_RATE,           tran5.LCL_TARIFF_RATE                      RATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE,main5.operator_mst_fk as oper_Pk                     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }

                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran5.LCL_BASIS )                          " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,             FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                    }
                }
                else
                {
                    //port Group selected
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select   distinct              main5.TARIFF_REF_NO                        REF_NO,                   tran5.pol_grp_fk                      POL_PK,                   tran5.pod_grp_fk                      POD_PK,                   cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  cont5.FCL_REQ_RATE                         QUOTERATE,                     NULL                                       FINAL_RATE,                'Collect'                                  PYTYPE,main5.operator_mst_fk as oper_Pk                   from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                           ";
                        //& vbCrLf _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(tran5.CONTAINER_DTL_FCL) (+) cont5
                        strSQL = strSQL + "     TARIFF_TRN_SEA_CONT_DTL cont5,                            FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }
                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK                      --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   cont5.CONTAINER_TYPE_MST_FK )              " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       cont5.CONTAINER_TYPE_MST_FK ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)) Q,            FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                        //Added by rabbani reason USS Gap,introduced New Column as "QUOTE_MIN_RATE"
                    }
                    else
                    {
                        //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                        strSQL = "    SELECT Q.* FROM (Select distinct            main5.TARIFF_REF_NO                        REF_NO,                   tran5.pol_grp_fk                      POL_PK,                   tran5.pod_grp_fk                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  QUOTE_MIN_RATE,           tran5.LCL_TARIFF_RATE                      QUOTERATE ,                     tran5.LCL_TARIFF_RATE                      FINAL_RATE,main5.operator_mst_fk as oper_Pk                     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }
                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran5.LCL_BASIS )                          " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)      UNION ALL      Select   distinct             main5.TARIFF_REF_NO                        REF_NO,                   tran5.pol_grp_fk                      POL_PK,                   tran5.pod_grp_fk                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  QUOTE_MIN_RATE,           tran5.LCL_TARIFF_RATE                      RATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE,main5.operator_mst_fk as oper_Pk                     from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.STATUS                = 1                                        AND    main5.ACTIVE                = 1                                   ";
                        if (isAgentType)
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 3 ";
                        }
                        else
                        {
                            strSQL += " AND    main5.TARIFF_TYPE           = 1 ";
                        }
                        if (TariffAgentPk > 0)
                        {
                            strSQL += " AND    main5.AGENT_MST_FK           = " + TariffAgentPk;
                        }
                        strSQL += "     AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "        ";
                        //& "     AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                    " & vbCrLf _
                        //& "                                   tran5.LCL_BASIS )                          " & vbCrLf _
                        //& "              in ( " & CStr(SectorContainers) & " )                           " & vbCrLf _
                        if (string.IsNullOrEmpty(OperPk))
                        {
                            strSQL = strSQL + "     AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        else
                        {
                            strSQL = strSQL + "  AND    (tran5.pol_grp_fk, tran5.pod_grp_fk,                                                       tran5.LCL_BASIS ,main5.operator_mst_fk)                            in ( " + Convert.ToString(SectorContainers) + " )                           ";
                        }
                        strSQL = strSQL + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,             FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Operator Tariff Query "

        #region " General Tariff Query "

        /// <summary>
        /// Funs the gen tariff freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string funGenTariffFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", int Group = 0)
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                if (Group == 1 | Group == 2)
                {
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (SELECT DISTINCT                main5.TARIFF_REF_NO                        REF_NO,                   tran5.POL_GRP_FK                      POL_PK,                   tran5.POD_GRP_FK                      POD_PK,                   cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  cont5.FCL_REQ_RATE                         QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN5.OPERATOR_MST_FK AS OPER_PK                          FROM                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                TARIFF_TRN_SEA_CONT_DTL        cont5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                WHERE                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.POL_GRP_FK, tran5.POD_GRP_FK,                                                                 cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                    }
                    else
                    {
                        strSQL = "    SELECT Q.* FROM (Select DISTINCT                main5.TARIFF_REF_NO                        REF_NO,                   tran5.POL_GRP_FK                           POL_PK,                   tran5.POD_GRP_FK                           POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  MIN_RATE,                 tran5.LCL_TARIFF_RATE                      QUOTERATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE,MAIN5.OPERATOR_MST_FK AS OPER_PK                            from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.POL_GRP_FK, tran5.POD_GRP_FK,                                                                 tran5.LCL_BASIS )                                        in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)     UNION ALL     Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.POL_GRP_FK                           POL_PK,                   tran5.POD_GRP_FK                           POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  MIN_RATE,                 tran5.LCL_TARIFF_RATE                      RATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE,MAIN5.OPERATOR_MST_FK AS OPER_PK                            from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.POL_GRP_FK, tran5.POD_GRP_FK,                                                                 tran5.LCL_BASIS )                                        in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,            FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                    }
                }
                else
                {
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   cont5.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  cont5.FCL_REQ_RATE                         QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN5.OPERATOR_MST_FK AS OPER_PK                          from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                           ";
                        //& vbCrLf _
                        //Modified by Snigdharani - 29/10/2008 - Removing v-array
                        //TABLE(tran5.CONTAINER_DTL_FCL) (+) cont5
                        strSQL = strSQL + "     TARIFF_TRN_SEA_CONT_DTL cont5,                            FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 1                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          AND    cont5.TARIFF_TRN_SEA_FK = tran5.TARIFF_TRN_SEA_PK          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       cont5.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                        //Added by Rabbani raeson USS Gap,introduced New column as "MIN_RATE"
                    }
                    else
                    {
                        //Added by rabbani on 24/3/07 ,To display BOF as first element in Freight Element Column using UNION ALL.
                        strSQL = "    SELECT Q.* FROM (Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  MIN_RATE,                 tran5.LCL_TARIFF_RATE                      QUOTERATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE,MAIN5.OPERATOR_MST_FK AS OPER_PK                            from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    main5.STATUS                = 1                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS )                                        in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)     UNION ALL     Select                 main5.TARIFF_REF_NO                        REF_NO,                   tran5.PORT_MST_POL_FK                      POL_PK,                   tran5.PORT_MST_POD_FK                      POD_PK,                   tran5.LCL_BASIS                            LCLBASIS,                 tran5.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt5.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt5.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt5.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran5.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran5.CURRENCY_MST_FK                      CURR_PK,                  curr5.CURRENCY_ID                          CURR_ID,                  tran5.LCL_TARIFF_MIN_RATE                  MIN_RATE,                 tran5.LCL_TARIFF_RATE                      RATE,                      tran5.LCL_TARIFF_RATE                      FINAL_RATE ,MAIN5.OPERATOR_MST_FK AS OPER_PK                           from                                                                  TARIFF_MAIN_SEA_TBL            main5,                                TARIFF_TRN_SEA_FCL_LCL         tran5,                                FREIGHT_ELEMENT_MST_TBL        frt5,                                 CURRENCY_TYPE_MST_TBL          curr5                                where                                                                            main5.TARIFF_MAIN_SEA_PK    = tran5.TARIFF_MAIN_SEA_FK                 AND    main5.CARGO_TYPE            = 2                                        AND    main5.ACTIVE                = 1                                        AND    main5.TARIFF_TYPE           = 2                                        AND    tran5.FREIGHT_ELEMENT_MST_FK = frt5.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt5.CHARGE_BASIS           <> 2                                       AND    tran5.CURRENCY_MST_FK       = curr5.CURRENCY_MST_PK(+)                 AND    main5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "             AND    (tran5.PORT_MST_POL_FK, tran5.PORT_MST_POD_FK,                                                       tran5.LCL_BASIS )                                        in ( " + Convert.ToString(SectorContainers) + " )                                AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran5.VALID_FROM   AND   NVL(tran5.VALID_TO,NULL_DATE_FORMAT)            AND    frt5.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT PARM.FRT_BOF_FK  FROM PARAMETERS_TBL PARM)) Q,            FREIGHT_ELEMENT_MST_TBL FRT                    WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK                   ORDER BY FRT.PREFERENCE        ";
                    }
                }

                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " General Tariff Query "

        #endregion " Freight Level Query "

        #region " Supporting Methods "

        #region " Enhance Search Function for Enquiry "

        /// <summary>
        /// Fetches the enquiry reference no sea.
        /// </summary>
        /// <param name="strCond">The string cond.</param>
        /// <returns></returns>
        public string FetchEnquiryRefNoSea(string strCond)
        {
            WorkFlow objWF = new WorkFlow();
            OracleCommand SCM = new OracleCommand();
            string strReturn = null;
            Array arr = null;
            string strSERACH_IN = "";
            string CARGO = "";
            string QUOTEDATE = "";
            string Loc = "";
            string CustPK = "";
            string strReq = null;
            arr = strCond.Split('~');
            strReq = Convert.ToString(arr.GetValue(0));
            strSERACH_IN = Convert.ToString(arr.GetValue(1));
            if (arr.Length > 2)
                CARGO = Convert.ToString(arr.GetValue(2));
            if (arr.Length > 3)
                QUOTEDATE = Convert.ToString(arr.GetValue(3));
            if (arr.Length > 4)
                Loc = Convert.ToString(arr.GetValue(4));
            //Manoharan 14Sep07:Enquiry popup should display location based
            if (arr.Length > 5)
                CustPK = Convert.ToString(arr.GetValue(5));
            try
            {
                objWF.OpenConnection();
                SCM.Connection = objWF.MyConnection;
                SCM.CommandType = CommandType.StoredProcedure;
                SCM.CommandText = objWF.MyUserName + ".EN_BOOKING_PKG.GET_BOOKING_ENQUIRY_SEA";
                var _with7 = SCM.Parameters;
                _with7.Add("SEARCH_IN", ifDBNull(strSERACH_IN)).Direction = ParameterDirection.Input;
                _with7.Add("LOOKUP_VALUE_IN", strReq).Direction = ParameterDirection.Input;
                _with7.Add("CARGO_TYPE_IN", CARGO).Direction = ParameterDirection.Input;
                _with7.Add("QUOTEDATE_IN", QUOTEDATE).Direction = ParameterDirection.Input;
                //Manoharan 14Sep07:Enquiry popup should display location based
                _with7.Add("LogLoc_IN", Loc).Direction = ParameterDirection.Input;
                _with7.Add("CUSTOMER_PK_IN", (string.IsNullOrEmpty(CustPK) ? 0 : Convert.ToInt32(CustPK))).Direction = ParameterDirection.Input;
                //.Add("RETURN_VALUE", OracleDbType.NVarChar, 2000, "RETURN_VALUE").Direction = ParameterDirection.Output
                _with7.Add("RETURN_VALUE", OracleDbType.Clob).Direction = ParameterDirection.Output;
                SCM.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                SCM.ExecuteNonQuery();
                //Manoharan 14Sep07:Enquiry popup should display location based
                // strReturn = CStr(SCM.Parameters["RETURN_VALUE").Value).Trim
                OracleClob clob = null;
                clob = (OracleClob)SCM.Parameters["RETURN_VALUE"].Value;
                System.IO.StreamReader strReader = new System.IO.StreamReader(clob, Encoding.Unicode);
                strReturn = strReader.ReadToEnd();
                return strReturn.Trim();
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                SCM.Connection.Close();
            }
        }

        #endregion " Enhance Search Function for Enquiry "

        /// <summary>
        /// Fetches the customer category.
        /// </summary>
        /// <returns></returns>
        public DataTable fetchCustomerCategory()
        {
            string strSQL = null;
            strSQL = " Select CUSTOMER_CATEGORY_MST_PK, CUSTOMER_CATEGORY_ID " + " from CUSTOMER_CATEGORY_MST_TBL where ACTIVE_FLAG = 1 order by CUSTOMER_CATEGORY_ID ";
            try
            {
                return (new WorkFlow()).GetDataTable(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception eX)
            {
                throw eX;
            }
        }

        #endregion " Supporting Methods "

        #endregion " Fetch UWG1 Option Grid "

        #region "FETCH CREDTDAYS AND CREDIT LIMIT"

        /// <summary>
        /// Fetches the credit.
        /// </summary>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="Pk">The pk.</param>
        /// <param name="type">The type.</param>
        /// <param name="CustPk">The customer pk.</param>
        /// <param name="Biz_Type">Type of the biz_.</param>
        /// <returns></returns>
        public int fetchCredit(object CreditDays, object CreditLimit, string Pk = "0", int type = 0, int CustPk = 0, string Biz_Type = "")
        {
            //type
            //1--Enquiry
            //2--Quotation
            //3--CustomerContract
            try
            {
                StringBuilder strQuery = new StringBuilder();
                StringBuilder strCustQuery = new StringBuilder();
                //strCustQuery.Append("SELECT c.CREDIT_DAYS," & vbCrLf)
                //strCustQuery.Append(" c.CREDIT_LIMIT" & vbCrLf)
                strCustQuery.Append("SELECT C.SEA_CREDIT_DAYS,");
                strCustQuery.Append(" C.SEA_CREDIT_LIMIT");
                strCustQuery.Append("FROM customer_mst_tbl c");
                strCustQuery.Append("WHERE c.customer_mst_pk=" + CustPk);
                OracleDataReader dr = null;
                if (Biz_Type == "Sea")
                {
                    if (type == 1)
                    {
                        strQuery.Append("SELECT C.CREDIT_PERIOD");
                        strQuery.Append("  FROM ENQUIRY_BKG_SEA_TBL     EB,");
                        strQuery.Append("       ENQUIRY_TRN_SEA_FCL_LCL ET,");
                        strQuery.Append("       CONT_CUST_SEA_TBL       C");
                        strQuery.Append("       WHERE");
                        strQuery.Append("       ET.TRANS_REFERED_FROM=2");
                        strQuery.Append("       AND Eb.ENQUIRY_REF_NO='" + Pk + "'");
                        strQuery.Append("       AND EB.ENQUIRY_BKG_SEA_PK=ET.ENQUIRY_MAIN_SEA_FK");
                        strQuery.Append("       AND ET.TRANS_REF_NO=C.CONT_REF_NO");
                        strQuery.Append("     AND C.CUSTOMER_MST_FK=" + CustPk);
                    }
                    else if (type == 2)
                    {
                        strQuery.Append("SELECT Q.CREDIT_DAYS");
                        //strQuery.Append("     Q.CREDIT_LIMIT " & vbCrLf)
                        strQuery.Append("     FROM QUOTATION_MST_TBL Q");
                        strQuery.Append("     WHERE Q.QUOTATION_MST_PK=" + Pk);
                        strQuery.Append("     AND Q.CUSTOMER_MST_FK=" + CustPk);
                    }
                    else if (type == 3)
                    {
                        strQuery.Append("SELECT C.CREDIT_PERIOD FROM cont_cust_sea_tbl C  ");
                        strQuery.Append("WHERE C.CONT_CUST_SEA_PK=" + Pk);
                    }
                    else
                    {
                        strQuery = strCustQuery;
                    }
                }
                else
                {
                    if (type == 1)
                    {
                        strQuery.Append("SELECT C.CREDIT_PERIOD");
                        strQuery.Append("  FROM ENQUIRY_BKG_AIR_TBL     EB,");
                        strQuery.Append("       ENQUIRY_TRN_AIR ET,");
                        strQuery.Append("       CONT_CUST_AIR_TBL       C");
                        strQuery.Append("       WHERE");
                        strQuery.Append("       ET.TRANS_REFERED_FROM=2");
                        strQuery.Append("       AND Eb.ENQUIRY_REF_NO='" + Pk + "'");
                        strQuery.Append("       AND EB.ENQUIRY_BKG_AIR_PK=ET.ENQUIRY_MAIN_AIR_FK");
                        strQuery.Append("       AND ET.TRANS_REF_NO=C.CONT_REF_NO");
                        strQuery.Append("     AND C.CUSTOMER_MST_FK=" + CustPk);
                    }
                    else if (type == 2)
                    {
                        strQuery.Append("SELECT Q.CREDIT_DAYS");
                        strQuery.Append("     FROM QUOTATION_MST_TBL Q");
                        strQuery.Append("     WHERE Q.QUOTATION_MST_PK=" + Pk);
                        strQuery.Append("     AND Q.CUSTOMER_MST_FK=" + CustPk);
                    }
                    else if (type == 3)
                    {
                        strQuery.Append("SELECT C.CREDIT_PERIOD FROM cont_cust_AIR_tbl C  ");
                        strQuery.Append("WHERE C.CONT_CUST_AIR_PK=" + Pk);
                    }
                    else
                    {
                        strQuery = strCustQuery;
                    }
                }
                DataTable dt = null;
                dt = (new WorkFlow()).GetDataTable(strQuery.ToString());
                if (dt.Rows.Count > 0)
                {
                    CreditDays = getDefault(dt.Rows[0][0], "");
                    if (dt.Columns.Count > 1)
                        CreditLimit = getDefault(dt.Rows[0][1], "");
                }
                else
                {
                    dt = (new WorkFlow()).GetDataTable(strCustQuery.ToString());
                    CreditDays = getDefault(dt.Rows[0][0], "");
                    if (dt.Columns.Count > 1)
                        CreditLimit = getDefault(dt.Rows[0][1], "");
                }
                dr = (new WorkFlow()).GetDataReader(strCustQuery.ToString());
                while (dr.Read())
                {
                    if (string.IsNullOrEmpty(Convert.ToString(CreditDays)))
                        CreditDays = getDefault(dr[0], "");
                    if (string.IsNullOrEmpty(Convert.ToString(CreditLimit)))
                        CreditLimit = getDefault(dr[1], "");
                }
                dr.Close();
                if (!string.IsNullOrEmpty(Convert.ToString(CreditDays)))
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        #endregion "FETCH CREDTDAYS AND CREDIT LIMIT"

        #region " Save Quotation "

        #region " Header Part [ Save Quotation ] "

        //this is modified by Thiyagrajan on 29/5/08 for fcl and lcl quotation
        /// <summary>
        /// Saves the quotation.
        /// </summary>
        /// <param name="HDT">The HDT.</param>
        /// <param name="PDT">The PDT.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="DSCalculator">The ds calculator.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="QuotePk">The quote pk.</param>
        /// <param name="nLocationId">The n location identifier.</param>
        /// <param name="nEmpId">The n emp identifier.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="remarks">The remarks.</param>
        /// <param name="CargoMoveCode">The cargo move code.</param>
        /// <param name="Header">The header.</param>
        /// <param name="Footer">The footer.</param>
        /// <param name="cargo">The cargo.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="Group">The group.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="chkAIF">The CHK aif.</param>
        /// <param name="process_Type">Type of the process_.</param>
        /// <param name="Biz_Type">Type of the biz_.</param>
        /// <param name="Customer_Approved">if set to <c>true</c> [customer_ approved].</param>
        /// <param name="Options">The options.</param>
        /// <param name="flg_Gen_Specific">The FLG_ gen_ specific.</param>
        /// <param name="PolPk">The pol pk.</param>
        /// <param name="Podpk">The podpk.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <param name="PLRPK">The PLRPK.</param>
        /// <param name="PFDPK">The PFDPK.</param>
        /// <param name="PLRTransPK">The PLR trans pk.</param>
        /// <param name="PFDTransPK">The PFD trans pk.</param>
        /// <param name="Restricted">The restricted.</param>
        /// <param name="SaveVersionFlag">if set to <c>true</c> [save version flag].</param>
        /// <param name="salesexecutive">The salesexecutive.</param>
        /// <param name="polid">The polid.</param>
        /// <param name="podid">The podid.</param>
        /// <returns></returns>
        public ArrayList SaveQuotation(DataTable HDT, DataTable PDT, DataTable CDT, DataTable OthDT, DataSet GridDS, DataSet DSCalculator, object QuoteNo, object QuotePk, long nLocationId, long nEmpId,
        Int16 CargoType, string remarks = "", string CargoMoveCode = "", string Header = "", string Footer = "", Int16 cargo = 1, int PYMTType = 0, int INCOTerms = 0, Int16 Group = 0, bool AmendFlg = false,
        Int16 chkAIF = 0, int process_Type = 0, int Biz_Type = 0, bool Customer_Approved = false, object Options = null, int flg_Gen_Specific = 0, int PolPk = 0, int Podpk = 0, string Measure = "", string Wt = "",
        string DivFac = "", int PLRPK = 0, int PFDPK = 0, int PLRTransPK = 0, int PFDTransPK = 0, Int16 Restricted = 0, bool SaveVersionFlag = false, Int16 salesexecutive = 0, string polid = "", string podid = "")
        {
            WorkFlow objWK = new WorkFlow();
            OracleTransaction TRAN = null;
            //Dim TRAN1 As OracleTransaction
            bool chkFlag = false;
            objWK.OpenConnection();
            TRAN = objWK.MyConnection.BeginTransaction();
            //TRAN1 = objWK.MyConnection.BeginTransaction()
            arrMessage.Clear();
            objWK.MyCommand.Transaction = TRAN;
            string strExtendedQTN = null;
            Int16 nIndex = default(Int16);
            string PrevQuotPK = null;
            int GenSpecific = 0;
            try
            {
                if (flg_Gen_Specific == 1)
                {
                    GenSpecific = 0;
                }
                else
                {
                    GenSpecific = 1;
                }
                if (AmendFlg == true | SaveVersionFlag == true)
                {
                    PrevQuotPK = Convert.ToString(QuotePk);
                    QuotePk = "";
                }
                if (string.IsNullOrEmpty(Convert.ToString(QuoteNo)))
                {
                    //QuoteNo = GenerateQuoteNo(nLocationId, nEmpId, M_CREATED_BY_FK, objWK, process_Type, Biz_Type, polid, podid);
                    if (QuoteNo == "Protocol Not Defined.")
                    {
                        arrMessage.Add("Protocol Not Defined.");
                        QuoteNo = "";
                        return arrMessage;
                    }
                    chkFlag = true;
                }

                //by thiyagarajan
                if (!string.IsNullOrEmpty(Convert.ToString(QuotePk)))
                {
                    _PkValue = Convert.ToInt32(QuotePk);
                }
                //end
                //'
                if (AmendFlg == true)
                {
                    string str = null;
                    Int32 intIns = default(Int32);
                    Int32 ValidFor = default(Int32);
                    TimeSpan Span = default(TimeSpan);
                    OracleCommand updCmdUser = new OracleCommand();
                    updCmdUser.Transaction = TRAN;
                    System.DateTime QuotDate = default(System.DateTime);
                    //QuotDate = GetQuotDt(PrevQuotPK);
                    if (QuotDate > DateTime.Today.Date)
                    {
                        str = " update QUOTATION_MST_TBL QT SET QT.STATUS = 3 ,";
                        str += " QT.AMEND_FLAG = 1 ";
                        str += " WHERE QT.QUOTATION_MST_PK=" + PrevQuotPK;
                    }
                    else
                    {
                        Span = DateTime.Today.Subtract(QuotDate);
                        ValidFor = Span.Days;
                        str = " update QUOTATION_MST_TBL QT SET QT.EXPECTED_SHIPMENT_DT = SYSDATE ,";
                        str += " QT.AMEND_FLAG = 1 ,";
                        str += " QT.VALID_FOR = " + ValidFor;
                        str += " WHERE QT.QUOTATION_MST_PK=" + PrevQuotPK;
                    }
                    var _with8 = updCmdUser;
                    _with8.Connection = objWK.MyConnection;
                    _with8.Transaction = TRAN;
                    _with8.CommandType = CommandType.Text;
                    _with8.CommandText = str;
                    intIns = _with8.ExecuteNonQuery();
                }
                //'
                ///''
                if (SaveVersionFlag == true)
                {
                    string str = null;
                    Int32 intIns = default(Int32);
                    Int32 ValidFor = default(Int32);
                    TimeSpan Span = default(TimeSpan);
                    OracleCommand updCmdUser = new OracleCommand();
                    updCmdUser.Transaction = TRAN;
                    System.DateTime QuotDate = default(System.DateTime);
                    //QuotDate = GetQuotDt(PrevQuotPK);
                    if (QuotDate > DateTime.Today.Date)
                    {
                        str = " update QUOTATION_MST_TBL QT SET QT.STATUS = 3 ,";
                        str += " QT.AMEND_FLAG = 0 ";
                        str += " WHERE QT.QUOTATION_MST_PK=" + PrevQuotPK;
                    }
                    else
                    {
                        Span = DateTime.Today.Subtract(QuotDate);
                        ValidFor = Span.Days;
                        str = " update QUOTATION_MST_TBL QT SET QT.EXPECTED_SHIPMENT_DT = SYSDATE ,";
                        str += " QT.AMEND_FLAG = 0 ,";
                        str += " QT.VALID_FOR = " + ValidFor;
                        str += " WHERE QT.QUOTATION_MST_PK=" + PrevQuotPK;
                    }
                    var _with9 = updCmdUser;
                    _with9.Connection = objWK.MyConnection;
                    _with9.Transaction = TRAN;
                    _with9.CommandType = CommandType.Text;
                    _with9.CommandText = str;
                    intIns = _with9.ExecuteNonQuery();
                }
                ///''
                if (Convert.ToInt32(QuotePk) == 0)
                {
                    var _with10 = objWK.MyCommand;
                    _with10.CommandType = CommandType.StoredProcedure;
                    _with10.CommandText = objWK.MyUserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_MST_TBL_INS";
                    _with10.Parameters.Clear();

                    _with10.Parameters.Add("QUOTATION_REF_NO_IN", Convert.ToString(QuoteNo)).Direction = ParameterDirection.Input;
                    _with10.Parameters["QUOTATION_REF_NO_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("QUOTATION_DATE_IN", Convert.ToDateTime(HDT.Rows[0]["QUOTATION_DATE"])).Direction = ParameterDirection.Input;
                    _with10.Parameters["QUOTATION_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("VALID_FOR_IN", HDT.Rows[0]["VALID_FOR"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["VALID_FOR_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CARGO_TYPE_IN", HDT.Rows[0]["CARGO_TYPE"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["CARGO_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("PYMT_TYPE_IN", PYMTType).Direction = ParameterDirection.Input;
                    _with10.Parameters["PYMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("QUOTED_BY_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                    _with10.Parameters["QUOTED_BY_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("COL_PLACE_MST_FK_IN", HDT.Rows[0]["COL_PLACE_MST_FK"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["COL_PLACE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("COL_ADDRESS_IN", getDefault(HDT.Rows[0]["COL_ADDRESS"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["COL_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("DEL_PLACE_MST_FK_IN", HDT.Rows[0]["DEL_PLACE_MST_FK"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["DEL_PLACE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("DEL_ADDRESS_IN", getDefault(HDT.Rows[0]["DEL_ADDRESS"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["DEL_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("AGENT_MST_FK_IN", HDT.Rows[0]["AGENT_MST_FK"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("STATUS_IN", HDT.Rows[0]["STATUS"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["STATUS_IN"].SourceVersion = DataRowVersion.Current;

                    ///'
                    _with10.Parameters.Add("EXPECTED_SHIPMENT_DT_IN", Convert.ToDateTime(HDT.Rows[0]["EXPECTED_SHIPMENT_DT"])).Direction = ParameterDirection.Input;
                    _with10.Parameters["EXPECTED_SHIPMENT_DT_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CUSTOMER_MST_FK_IN", HDT.Rows[0]["CUSTOMER_MST_FK"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["CUSTOMER_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CUSTOMER_CATEGORY_MST_FK_IN", HDT.Rows[0]["CUSTOMER_CATEGORY_MST_FK"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["CUSTOMER_CATEGORY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("SPECIAL_INSTRUCTIONS_IN", getDefault(HDT.Rows[0]["SPECIAL_INSTRUCTIONS"], 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["SPECIAL_INSTRUCTIONS_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CUST_TYPE_IN", getDefault(HDT.Rows[0]["CUST_TYPE"], 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["CUST_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CREDIT_LIMIT_IN", HDT.Rows[0]["CREDIT_LIMIT"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["CREDIT_LIMIT_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CREDIT_DAYS_IN", HDT.Rows[0]["CREDIT_DAYS"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["CREDIT_DAYS_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                    _with10.Parameters["CREATED_BY_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CONFIG_PK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                    _with10.Parameters["CONFIG_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("REMARKS_IN", getDefault(remarks, "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CARGO_MOVE_CODE_IN", getDefault(CargoMoveCode, "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["CARGO_MOVE_CODE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("Header_IN", getDefault(Header, "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["Header_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("Footer_IN", getDefault(Footer, "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["Footer_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("BASE_CURRENCY_FK_IN", getDefault(HDT.Rows[0]["BASE_CURRENCY_FK"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["BASE_CURRENCY_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("PORT_GROUP_IN", getDefault(HDT.Rows[0]["PORT_GROUP"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["PORT_GROUP_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("AIF_FLAG_IN", getDefault(chkAIF, 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["AIF_FLAG_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("PROCESS_TYPE_IN", getDefault(process_Type, 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["PROCESS_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("BIZ_TYPE_IN", getDefault(Biz_Type, 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["BIZ_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("QUOTATION_TYPE_IN", getDefault(GenSpecific, 0)).Direction = ParameterDirection.Input;
                    _with10.Parameters["QUOTATION_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("CUSTOMER_APPROVED_IN", (Customer_Approved ? 1 : 0)).Direction = ParameterDirection.Input;

                    _with10.Parameters.Add("SHIPPING_TERMS_MST_PK_IN", INCOTerms).Direction = ParameterDirection.Input;
                    _with10.Parameters["SHIPPING_TERMS_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("COMMODITY_GROUP_MST_FK_IN", getDefault(HDT.Rows[0]["COMMODITY_GROUP_MST_FK"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["COMMODITY_GROUP_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("THIRD_PARTY_FRTPAYER_FK_IN", getDefault(HDT.Rows[0]["THIRD_PARTY_FRTPAYER_FK"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["THIRD_PARTY_FRTPAYER_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("TARIFF_AGENT_MST_FK_IN", getDefault(HDT.Rows[0]["TARIFF_AGENT_MST_FK"], "")).Direction = ParameterDirection.Input;
                    _with10.Parameters["TARIFF_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("COLLECT_AGENT_FLAG_IN", HDT.Rows[0]["COLLECT_AGENT_FLAG"]).Direction = ParameterDirection.Input;
                    _with10.Parameters["COLLECT_AGENT_FLAG_IN"].SourceVersion = DataRowVersion.Current;

                    _with10.Parameters.Add("RESTRICTED_IN", Restricted).Direction = ParameterDirection.Input;

                    _with10.Parameters.Add("EXECUTIVE_MST_FK_IN", salesexecutive).Direction = ParameterDirection.Input;

                    _with10.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 150, "RETURN_VALUE").Direction = ParameterDirection.Output;

                    _with10.ExecuteNonQuery();
                    _PkValue = Convert.ToInt64(objWK.MyCommand.Parameters["RETURN_VALUE"].Value);
                }
                HDT.Rows[0]["QUOTATION_MST_PK"] = _PkValue;

                if (flg_Gen_Specific == 2)
                {
                    arrMessage = SaveTransactionSpecific(PDT, CDT, OthDT, GridDS, DSCalculator, _PkValue, objWK.MyCommand, objWK.MyUserName, CargoType, process_Type,
                    Biz_Type, Options, flg_Gen_Specific, PolPk, Podpk, Measure, Wt, DivFac, Group, PLRPK,
                    PFDPK, PLRTransPK, PFDTransPK);
                }
                else
                {
                    //arrMessage = SaveTransaction(PDT, CDT, OthDT, GridDS, DSCalculator, _PkValue, objWK.MyCommand, objWK.MyUserName, CargoType, process_Type,
                    //Biz_Type, Options, flg_Gen_Specific, PolPk, Podpk, Measure, Wt, DivFac, Group, PLRPK,
                    //PFDPK, PLRTransPK, PFDTransPK);
                }

                if ((HttpContext.Current.Session["SessionLocalCharges"].ToString() != null))
                {
                    //SaveLocalCharges(objWK.MyCommand, objWK.MyUserName, HttpContext.Current Session["SessionLocalCharges"], _PkValue, 2, AmendFlg);
                }

                if ((CDT != null))
                {
                    try
                    {
                        string CurrFKs = "0";
                        System.DateTime ContractDt = default(System.DateTime);
                        cls_Operator_Contract objContract = new cls_Operator_Contract();
                        ContractDt = Convert.ToDateTime(HDT.Rows[0]["QUOTATION_DATE"]);
                        for (int nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                        {
                            if (CDT.Rows[nRowCnt]["SELECTED"] == "true" | CDT.Rows[nRowCnt]["SELECTED"] == "1")
                            {
                                CurrFKs += ',' + CDT.Rows[nRowCnt]["CURR_PK"].ToString();
                            }
                        }
                        objContract.UpdateTempExRate(_PkValue, objWK, CurrFKs, ContractDt, "QUOTATION");
                    }
                    catch (Exception ex)
                    {
                    }
                }

                //'
                // If arrMessage.Count > 0 Then
                //     If InStr(CStr(arrMessage(0)).ToUpper, "SAVED") = 0 Then
                //         TRAN.Rollback()
                //         Return arrMessage
                //     End If
                // End If
                // arrMessage = SaveOTHFreights(OTHDT, _PkValue, objWK.MyCommand, objWK.MyUserName)

                if (arrMessage.Count > 0)
                {
                    if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") > 0)
                    {
                        ///'
                        //Cancelling Previous Qut
                        if (SaveVersionFlag == true)
                        {
                            string str = null;
                            Int32 intIns = default(Int32);
                            Int32 ValidFor = default(Int32);
                            TimeSpan Span = default(TimeSpan);
                            OracleCommand updCmdUser = new OracleCommand();
                            updCmdUser.Transaction = TRAN;
                            System.DateTime QuotDate = default(System.DateTime);
                            str = " UPDATE QUOTATION_MST_TBL QT SET QT.STATUS = 3 ";
                            str += " WHERE QT.QUOTATION_MST_PK=" + PrevQuotPK;
                            var _with11 = updCmdUser;
                            _with11.Connection = objWK.MyConnection;
                            _with11.Transaction = TRAN;
                            _with11.CommandType = CommandType.Text;
                            _with11.CommandText = str;
                            intIns = _with11.ExecuteNonQuery();
                        }
                        ///'
                        arrMessage.Add("All data Saved successfully");
                        TRAN.Commit();
                        QuotePk = _PkValue;
                        return arrMessage;
                    }
                    else
                    {
                        TRAN.Rollback();
                        //added by surya prasad for implementinf protocol roll back on 18-02-2009
                        if (chkFlag)
                        {
                            RollbackProtocolKey("QUOTATION (SEA)", Convert.ToInt64(HttpContext.Current.Session["LOGED_IN_LOC_FK"]), Convert.ToInt64(HttpContext.Current.Session["EMP_PK"]), QuoteNo.ToString(), System.DateTime.Now);
                            chkFlag = false;
                        }
                        errors = 1;
                        return arrMessage;
                    }
                }
            }
            catch (OracleException oraexp)
            {
                TRAN.Rollback();
                if (chkFlag)
                {
                    RollbackProtocolKey("QUOTATION (SEA)", Convert.ToInt64(HttpContext.Current.Session["LOGED_IN_LOC_FK"]), Convert.ToInt64(HttpContext.Current.Session["EMP_PK"]), QuoteNo.ToString(), System.DateTime.Now);
                    chkFlag = false;
                }
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                TRAN.Rollback();
                if (chkFlag)
                {
                    RollbackProtocolKey("QUOTATION (SEA)", Convert.ToInt64(HttpContext.Current.Session["LOGED_IN_LOC_FK"]), Convert.ToInt64(HttpContext.Current.Session["EMP_PK"]), QuoteNo.ToString(), System.DateTime.Now);
                    chkFlag = false;
                }
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
            finally
            {
                objWK.MyCommand.Connection.Close();
            }
            return new ArrayList();
        }

        #endregion " Header Part [ Save Quotation ] "

        #region " Save Other Freights "

        /// <summary>
        /// Saves the oth freights.
        /// </summary>
        /// <param name="PDR">The PDR.</param>
        /// <param name="OTHDT">The othdt.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="OldPk">The old pk.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="FLG_Gen_Specific">The fl g_ gen_ specific.</param>
        /// <returns></returns>
        private ArrayList SaveOTHFreights(DataRow PDR, DataTable OTHDT, long PkValue, long OldPk, OracleCommand SCM, string UserName, int BIZ_TYPE = 0, int FLG_Gen_Specific = 0)
        {
            DataRow DR = null;
            long FreightPk = 0;
            decimal ChargeableWt = default(decimal);
            decimal BasisRate = default(decimal);
            decimal TrfRate = default(decimal);
            ChargeBasis CharBas = default(ChargeBasis);
            arrMessage.Clear();
            try
            {
                if (BIZ_TYPE == 1)
                {
                    var _with12 = SCM;
                    for (int nRowCnt = 0; nRowCnt <= OTHDT.Rows.Count - 1; nRowCnt++)
                    {
                        _with12.CommandType = CommandType.StoredProcedure;
                        _with12.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOT_OTHER_FREIGHT_TRN_INS";
                        DR = OTHDT.Rows[nRowCnt];
                        CharBas = (ChargeBasis)DR["CH_BASIS"];
                        if (FLG_Gen_Specific == 2)
                        {
                            ChargeableWt = Convert.ToDecimal(getDefault(PDR["CH_WT"], 0));
                        }
                        else
                        {
                            ChargeableWt = Convert.ToDecimal(getDefault(PDR["CHARGEABLE_WEIGHT"], 0));
                        }
                        BasisRate = Convert.ToDecimal(getDefault(DR["BASIS_RATE"], 0));
                        if (CharBas == ChargeBasis.Flat)
                        {
                            TrfRate = BasisRate;
                        }
                        else
                        {
                            TrfRate = BasisRate * ChargeableWt;
                        }
                        DR["TARIFF_RATE"] = TrfRate;
                        if (DR["FK"] == PDR["PK"])
                        {
                            var _with13 = _with12.Parameters;
                            _with13.Clear();
                            _with13.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                            _with13.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_FK"]).Direction = ParameterDirection.Input;
                            _with13.Add("CURRENCY_MST_FK_IN", DR["CURR_FK"]).Direction = ParameterDirection.Input;
                            _with13.Add("AMOUNT_IN", getDefault(DR["TARIFF_RATE"], 0)).Direction = ParameterDirection.Input;
                            _with13.Add("FREIGHT_TYPE_IN", getDefault(DR["PYMT_TYPE"], 0)).Direction = ParameterDirection.Input;
                            _with13.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                            _with13.Add("CHARGE_BASIS_IN", DR["CH_BASIS"]).Direction = ParameterDirection.Input;
                            _with13.Add("BASIS_RATE_IN", getDefault(DR["BASIS_RATE"], 0)).Direction = ParameterDirection.Input;
                            _with13.Add("RETURN_VALUE", OracleDbType.Int16, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with12.ExecuteNonQuery();
                            FreightPk = Convert.ToInt64(_with12.Parameters["RETURN_VALUE"].Value);
                        }
                    }
                }
                else
                {
                    var _with14 = SCM;
                    for (int nRowCnt = 0; nRowCnt <= OTHDT.Rows.Count - 1; nRowCnt++)
                    {
                        DR = OTHDT.Rows[nRowCnt];
                        if (Convert.ToInt64(DR[3]) == OldPk)
                        {
                            _with14.CommandType = CommandType.StoredProcedure;
                            _with14.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOT_OTHER_FREIGHT_TRN_INS";
                            var _with15 = _with14.Parameters;
                            _with15.Clear();
                            _with15.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                            _with15.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                            _with15.Add("CURRENCY_MST_FK_IN", DR["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                            _with15.Add("AMOUNT_IN", getDefault(DR["AMOUNT"], 0)).Direction = ParameterDirection.Input;
                            _with15.Add("FREIGHT_TYPE_IN", getDefault(DR["PYMT_TYPE"], 1)).Direction = ParameterDirection.Input;
                            _with15.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                            _with15.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with14.ExecuteNonQuery();
                            FreightPk = Convert.ToInt64(_with14.Parameters["RETURN_VALUE"].Value);
                        }
                    }
                }

                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Save Other Freights "

        /// <summary>
        /// Saves the transaction specific.
        /// </summary>
        /// <param name="PDT">The PDT.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="DSCalculator">The ds calculator.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="Options">The options.</param>
        /// <param name="flg_Gen_Specific">The FLG_ gen_ specific.</param>
        /// <param name="PolPk">The pol pk.</param>
        /// <param name="Podpk">The podpk.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <param name="Group">The group.</param>
        /// <param name="PLRPK">The PLRPK.</param>
        /// <param name="PFDPK">The PFDPK.</param>
        /// <param name="PLRTransPK">The PLR trans pk.</param>
        /// <param name="PFDTransPK">The PFD trans pk.</param>
        /// <returns></returns>
        private ArrayList SaveTransactionSpecific(DataTable PDT, DataTable CDT, DataTable OthDT, DataSet Gridds, DataSet DSCalculator, long PkValue, OracleCommand SCM, string UserName, Int16 CargoType, int PROCESS_TYPE = 0,
        int BIZ_TYPE = 0, object Options = null, int flg_Gen_Specific = 0, int PolPk = 0, int Podpk = 0, string Measure = "", string Wt = "", string DivFac = "", int Group = 0, int PLRPK = 0,
        int PFDPK = 0, int PLRTransPK = 0, int PFDTransPK = 0)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            Int16 AllInRate = default(Int16);
            Int16 BasisType = default(Int16);
            long TransactionPK = 0;
            arrMessage.Clear();
            try
            {
                var _with16 = SCM;
                for (nRowCnt = 0; nRowCnt <= PDT.Rows.Count - 1; nRowCnt++)
                {
                    _with16.CommandType = CommandType.StoredProcedure;
                    _with16.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_DTL_TBL_INS";
                    DR = PDT.Rows[nRowCnt];
                    var _with17 = _with16.Parameters;
                    _with17.Clear();
                    //++++++++++++++++
                    _with17.Add("QUOTATION_MST_FK_IN", PkValue).Direction = ParameterDirection.Input;
                    _with17.Add("PORT_MST_POL_FK_IN", DR["POLFK"]).Direction = ParameterDirection.Input;
                    _with17.Add("PORT_MST_POD_FK_IN", DR["PODFK"]).Direction = ParameterDirection.Input;
                    _with17.Add("VALID_FROM_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("VALID_TO_IN", "").Direction = ParameterDirection.Input;

                    _with17.Add("COMMODITY_MST_FK_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("CARRIER_MST_FK_IN", getDefault(DR["AIR_PK"], "")).Direction = ParameterDirection.Input;
                    _with17.Add("TRAN_REF_NO2_IN", getDefault(DR["REF_NO2"], "")).Direction = ParameterDirection.Input;
                    _with17.Add("REF_TYPE2_IN", getDefault(DR["TYPE2"], "")).Direction = ParameterDirection.Input;
                    _with17.Add("TRANS_REFERED_FROM_IN", DR["REF_TYPE"]).Direction = ParameterDirection.Input;

                    _with17.Add("SLAB_FK_IN", DR["SLAB"]).Direction = ParameterDirection.Input;
                    _with17.Add("QUANTITY_IN", getDefault(DR["BOXES"], 0)).Direction = ParameterDirection.Input;
                    _with17.Add("BUYING_RATE_IN", DR["AIR_RT"]).Direction = ParameterDirection.Input;
                    _with17.Add("CONTAINER_TYPE_MST_FK_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("PACK_TYPE_FK_IN", "").Direction = ParameterDirection.Input;

                    _with17.Add("BASIS_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("COMMODITY_GROUP_FK_IN", DR["COMM_GRPPK"]).Direction = ParameterDirection.Input;
                    _with17.Add("EXPECTED_VOLUME_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("EXPECTED_WEIGHT_IN", "").Direction = ParameterDirection.Input;
                    _with17.Add("TRANS_REF_NO_IN", DR["REF_NO"]).Direction = ParameterDirection.Input;

                    _with17.Add("COMMODITY_MST_FKS_IN", getDefault(DR["COMM_PK"], "")).Direction = ParameterDirection.Input;
                    _with17.Add("ALL_IN_TARIFF_IN", getDefault(DR["AI_TRF"], 0)).Direction = ParameterDirection.Input;
                    _with17.Add("ALL_IN_QUOTED_TARIFF_IN", getDefault(DR["AI_QT"], 0)).Direction = ParameterDirection.Input;
                    _with17.Add("CHARGEABLE_WEIGHT_IN", getDefault(DR["CH_WT"], 0)).Direction = ParameterDirection.Input;
                    _with17.Add("FREIGHT_WEIGHT_IN", getDefault(DR["FRT_WT"], 0)).Direction = ParameterDirection.Input;
                    _with17.Add("POL_GRP_FK_IN", (string.IsNullOrEmpty(DR["POL_GRP_FK"].ToString()) ? "" : DR["POL_GRP_FK"].ToString())).Direction = ParameterDirection.Input;
                    _with17.Add("POD_GRP_FK_IN", (string.IsNullOrEmpty(DR["POD_GRP_FK"].ToString()) ? "" : DR["POD_GRP_FK"].ToString())).Direction = ParameterDirection.Input;
                    _with17.Add("TARIFF_GRP_FK_IN", "").Direction = ParameterDirection.Input;

                    _with17.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                    _with17.Add("PROCESS_TYPE_IN", PROCESS_TYPE).Direction = ParameterDirection.Input;
                    _with17.Add("BIZ_TYPE_IN", BIZ_TYPE).Direction = ParameterDirection.Input;
                    ///Added By Sushama
                    _with17.Add("PORT_MST_PLR_FK_IN", PLRPK).Direction = ParameterDirection.Input;
                    _with17.Add("PORT_MST_PFD_FK_IN", PFDPK).Direction = ParameterDirection.Input;
                    _with17.Add("TRANSPORTER_PLR_FK_IN", PLRTransPK).Direction = ParameterDirection.Input;
                    _with17.Add("TRANSPORTER_PFD_FK_IN", PFDTransPK).Direction = ParameterDirection.Input;
                    ///Add END
                    _with17.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with16.ExecuteNonQuery();
                    TransactionPK = Convert.ToInt64(_with16.Parameters["RETURN_VALUE"].Value);
                    //arrMessage = SaveFreights(DR, Gridds, nRowCnt, CDT, TransactionPK, SCM, UserName, 0, BIZ_TYPE, flg_Gen_Specific,Group);
                    if (arrMessage.Count > 0)
                    {
                        if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") == 0)
                        {
                            return arrMessage;
                        }
                    }

                    arrMessage = SaveOTHFreights(DR, OthDT, TransactionPK, 0, SCM, UserName, BIZ_TYPE, flg_Gen_Specific);
                    if (arrMessage.Count > 0)
                    {
                        if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                        {
                            arrMessage.Add("All data saved successfully");
                        }
                        else
                        {
                            return arrMessage;
                        }
                    }
                    if ((DSCalculator != null))
                    {
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }

                    if (PDT.Columns.Contains("strSpclReq"))
                    {
                        //SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], ""), TransactionPK, DR["COMM_GRPPK"]);
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #region " Save Transaction FCL/LCL "

        /// <summary>
        /// Saves the transaction.
        /// </summary>
        /// <param name="PDT">The PDT.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="DSCalculator">The ds calculator.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="Options">The options.</param>
        /// <param name="flg_Gen_Specific">The FLG_ gen_ specific.</param>
        /// <param name="PolPk">The pol pk.</param>
        /// <param name="Podpk">The podpk.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <param name="Group">The group.</param>
        /// <param name="PLRPK">The PLRPK.</param>
        /// <param name="PFDPK">The PFDPK.</param>
        /// <param name="PLRTransPK">The PLR trans pk.</param>
        /// <param name="PFDTransPK">The PFD trans pk.</param>
        /// <returns></returns>
        /// <exception cref="System.Exception">Spot Rate should be within Contract Period only.</exception>
        private ArrayList SaveTransaction(DataTable PDT, DataTable CDT, DataTable OthDT, DataSet Gridds, DataSet DSCalculator, long PkValue, OracleCommand SCM, string UserName, Int16 CargoType, int PROCESS_TYPE = 0,
        int BIZ_TYPE = 0, object Options = null, int flg_Gen_Specific = 0, int PolPk = 0, int Podpk = 0, string Measure = "", string Wt = "", string DivFac = "", int Group = 0, int PLRPK = 0,
        int PFDPK = 0, int PLRTransPK = 0, int PFDTransPK = 0)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            bool Flag = false;
            Int16 AllInRate = default(Int16);
            Int16 BasisType = default(Int16);
            long TransactionPK = 0;
            long OldPk = 0;
            long BaseCurrency = 0;
            long gTranPk = 0;
            string REF_NO = null;
            WorkFlow objWF = new WorkFlow();
            arrMessage.Clear();
            BaseCurrency = Convert.ToInt64(HttpContext.Current.Session["CURRENCY_MST_PK"]);
            try
            {
                //'Air Save
                if (BIZ_TYPE == 1)
                {
                    var _with18 = SCM;
                    _with18.CommandType = CommandType.StoredProcedure;
                    for (nRowCnt = 0; nRowCnt <= Gridds.Tables[0].Rows.Count - 1; nRowCnt++)
                    {
                        for (int cRCnt = 0; cRCnt <= Gridds.Tables[1].Rows.Count - 1; cRCnt++)
                        {
                            //'Added
                            if (Gridds.Tables[1].Rows[cRCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[cRCnt]["SELECTED"] == "1")
                            {
                                gTranPk = Convert.ToInt64(Gridds.Tables[0].Rows[nRowCnt]["PK"]);
                                _with18.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_DTL_TBL_INS";
                                DR = PDT.Rows[nRowCnt];
                                var _with19 = _with18.Parameters;
                                _with19.Clear();
                                _with19.Add("QUOTATION_MST_FK_IN", PkValue).Direction = ParameterDirection.Input;
                                _with19.Add("PORT_MST_POL_FK_IN", Gridds.Tables[0].Rows[nRowCnt]["PORT_MST_POL_FK"]).Direction = ParameterDirection.Input;
                                _with19.Add("PORT_MST_POD_FK_IN", Gridds.Tables[0].Rows[nRowCnt]["PORT_MST_POD_FK"]).Direction = ParameterDirection.Input;
                                _with19.Add("VALID_FROM_IN", Convert.ToString(Convert.ToDateTime(Gridds.Tables[0].Rows[nRowCnt]["VALID_FROM"]).Date)).Direction = ParameterDirection.Input;
                                if ((object.ReferenceEquals(Gridds.Tables[0].Rows[0]["VALID_TO"], "")))
                                {
                                    _with19.Add("VALID_TO_IN", "").Direction = ParameterDirection.Input;
                                }
                                else if (Gridds.Tables[0].Rows[nRowCnt]["VALID_TO"] == "  /  /    ")
                                {
                                    _with19.Add("VALID_TO_IN", "").Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with19.Add("VALID_TO_IN", Convert.ToString(Convert.ToDateTime(Gridds.Tables[0].Rows[nRowCnt]["VALID_TO"]))).Direction = ParameterDirection.Input;
                                }
                                _with19.Add("COMMODITY_MST_FKS_IN", getDefault(Gridds.Tables[0].Rows[nRowCnt]["COMMODITY_MST_FK"], "")).Direction = ParameterDirection.Input;
                                _with19.Add("CARRIER_MST_FK_IN", getDefault(Gridds.Tables[0].Rows[nRowCnt]["AIRLINE_MST_PK"], "")).Direction = ParameterDirection.Input;
                                _with19.Add("TRAN_REF_NO2_IN", Gridds.Tables[0].Rows[nRowCnt]["REF_NO"]).Direction = ParameterDirection.Input;
                                _with19.Add("REF_TYPE2_IN", "").Direction = ParameterDirection.Input;
                                //_with19.Add("TRANS_REFERED_FROM_IN", TransRefer[Options]).Direction = ParameterDirection.Input;

                                _with19.Add("CONTAINER_TYPE_MST_FK_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("PACK_TYPE_FK_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("BASIS_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("COMMODITY_GROUP_FK_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("EXPECTED_VOLUME_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("EXPECTED_WEIGHT_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("TRANS_REF_NO_IN", Gridds.Tables[0].Rows[nRowCnt]["REF_NO"]).Direction = ParameterDirection.Input;

                                _with19.Add("COMMODITY_MST_FK_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("ALL_IN_TARIFF_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("ALL_IN_QUOTED_TARIFF_IN", "").Direction = ParameterDirection.Input;
                                _with19.Add("POL_GRP_FK_IN", getDefault(Gridds.Tables[0].Rows[nRowCnt]["POL_GRP_FK"], "")).Direction = ParameterDirection.Input;
                                _with19.Add("POD_GRP_FK_IN", getDefault(Gridds.Tables[0].Rows[nRowCnt]["POD_GRP_FK"], "")).Direction = ParameterDirection.Input;
                                _with19.Add("TARIFF_GRP_FK_IN", getDefault(Gridds.Tables[0].Rows[nRowCnt]["TARIFF_GRP_FK"], "")).Direction = ParameterDirection.Input;

                                _with19.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                _with19.Add("PROCESS_TYPE_IN", PROCESS_TYPE).Direction = ParameterDirection.Input;
                                _with19.Add("BIZ_TYPE_IN", BIZ_TYPE).Direction = ParameterDirection.Input;

                                ///Added By Sushama
                                _with19.Add("PORT_MST_PLR_FK_IN", PLRPK).Direction = ParameterDirection.Input;
                                _with19.Add("PORT_MST_PFD_FK_IN", PFDPK).Direction = ParameterDirection.Input;
                                _with19.Add("TRANSPORTER_PLR_FK_IN", PLRTransPK).Direction = ParameterDirection.Input;
                                _with19.Add("TRANSPORTER_PFD_FK_IN", PFDTransPK).Direction = ParameterDirection.Input;
                                ///Add END
                                _with19.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                _with18.ExecuteNonQuery();
                                TransactionPK = Convert.ToInt64(_with18.Parameters["RETURN_VALUE"].Value);
                                if (TransactionPK == -1)
                                {
                                    throw new Exception("Spot Rate should be within Contract Period only.");
                                }
                                Flag = true;
                            }
                            //'Added
                            if (Flag == true)
                            {
                                Flag = false;
                                //break; // TODO: might not be correct. Was : Exit For
                            }

                            //arrMessage = SaveFreights(DR, Gridds, nRowCnt, CDT, TransactionPK, SCM, UserName, 0, BIZ_TYPE, flg_Gen_Specific,
                            //Group);
                            if (arrMessage.Count > 0)
                            {
                                if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                {
                                    arrMessage.Add("All data saved successfully");
                                }
                                else
                                {
                                    return arrMessage;
                                }
                            }
                            arrMessage = SaveOTHFreights(DR, OthDT, TransactionPK, OldPk, SCM, UserName, BIZ_TYPE, flg_Gen_Specific);
                            if (arrMessage.Count > 0)
                            {
                                if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                {
                                    arrMessage.Add("All data saved successfully");
                                }
                                else
                                {
                                    return arrMessage;
                                }
                            }
                            if (flg_Gen_Specific == 2)
                            {
                                //arrMessage = SaveSurcharge(Gridds, nRowCnt, TransactionPK, SCM, UserName, BaseCurrency);
                                if (arrMessage.Count > 0)
                                {
                                    if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                    {
                                        arrMessage.Add("All data saved successfully");
                                    }
                                    else
                                    {
                                        return arrMessage;
                                    }
                                }
                            }
                            if ((DSCalculator != null))
                            {
                                //arrMessage = SaveCargoInfo(DR, DSCalculator.Tables[0], TransactionPK, SCM, UserName, Measure, Wt, DivFac);
                                if (arrMessage.Count > 0)
                                {
                                    if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                    {
                                        arrMessage.Add("All data saved successfully");
                                    }
                                    else
                                    {
                                        return arrMessage;
                                    }
                                }
                            }
                            if (DR.Table.Columns.Contains("strSpclReq"))
                            {
                                //SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], ""), TransactionPK, DR["COMM_GRPPK"]);
                            }
                            if (arrMessage.Count > 0)
                            {
                                if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                {
                                    arrMessage.Add("All data saved successfully");
                                }
                                else
                                {
                                    return arrMessage;
                                }
                            }
                            else
                            {
                                var _with20 = SCM;
                                for (nRowCnt = 0; nRowCnt <= PDT.Rows.Count - 1; nRowCnt++)
                                {
                                    _with20.CommandType = CommandType.StoredProcedure;
                                    _with20.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_DTL_TBL_INS";
                                    if (PDT.Columns.Contains("REFNO"))
                                    {
                                        if (!string.IsNullOrEmpty(PDT.Rows[nRowCnt]["REFNO"].ToString()) & (PDT.Rows[nRowCnt]["REFNO"] != null))
                                        {
                                            if (CargoType == 1 | CargoType == 2)
                                            {
                                                PDT.Rows[nRowCnt]["REF_NO"] = PDT.Rows[nRowCnt]["REFNO"];
                                            }
                                        }
                                    }
                                    DR = PDT.Rows[nRowCnt];
                                    var _with21 = _with20.Parameters;
                                    _with21.Clear();
                                    _with21.Add("QUOTATION_MST_FK_IN", PkValue).Direction = ParameterDirection.Input;
                                    _with21.Add("CARRIER_MST_FK_IN", getDefault(DR["OPER_PK"], "")).Direction = ParameterDirection.Input;
                                    if (CargoType == 4)
                                    {
                                        _with21.Add("PORT_MST_POL_FK_IN", Convert.ToInt64(PolPk)).Direction = ParameterDirection.Input;
                                        _with21.Add("PORT_MST_POD_FK_IN", Convert.ToInt64(Podpk)).Direction = ParameterDirection.Input;
                                        _with21.Add("TRANS_REFERED_FROM_IN", 6).Direction = ParameterDirection.Input;
                                        _with21.Add("REF_TYPE2_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("COMMODITY_MST_FKS_IN", getDefault(Convert.ToInt64(DR["COMM_PK"]), "")).Direction = ParameterDirection.Input;
                                        if (!string.IsNullOrEmpty(DR["OPERATOR_RATE"].ToString()))
                                        {
                                            _with21.Add("BUYING_RATE_IN", getDefault(Convert.ToDouble(DR["OPERATOR_RATE"]), 0)).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with21.Add("BUYING_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        }
                                        _with21.Add("TRAN_REF_NO2_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("PACK_TYPE_FK_IN", Convert.ToInt32(DR["PACK_PK"])).Direction = ParameterDirection.Input;
                                        _with21.Add("TRANS_REF_NO_IN", DR["REFNO"]).Direction = ParameterDirection.Input;
                                    }
                                    else
                                    {
                                        _with21.Add("PORT_MST_POL_FK_IN", DR["POL_PK"]).Direction = ParameterDirection.Input;
                                        _with21.Add("PORT_MST_POD_FK_IN", DR["POD_PK"]).Direction = ParameterDirection.Input;
                                        _with21.Add("TRANS_REFERED_FROM_IN", Convert.ToInt32(SourceEnum("'" + DR["TYPE"] + "'"))).Direction = ParameterDirection.Input;
                                        if (!string.IsNullOrEmpty(DR["OPERATOR_RATE"].ToString()))
                                        {
                                            _with21.Add("BUYING_RATE_IN", DR["OPERATOR_RATE"]).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with21.Add("BUYING_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        }
                                        if (getDefault(DR["TYPE2"], "0") == "0")
                                        {
                                            _with21.Add("REF_TYPE2_IN", DR["TYPE2"]).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with21.Add("REF_TYPE2_IN", SourceEnum(DR["TYPE2"].ToString())).Direction = ParameterDirection.Input;
                                        }
                                        _with21.Add("COMMODITY_MST_FKS_IN", getDefault(DR["COMMODITY_MST_FKS"], "")).Direction = ParameterDirection.Input;
                                        _with21.Add("TRAN_REF_NO2_IN", DR["REF_NO2"]).Direction = ParameterDirection.Input;
                                        _with21.Add("PACK_TYPE_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("TRANS_REF_NO_IN", DR["REF_NO"]).Direction = ParameterDirection.Input;
                                    }
                                    if (CargoType == 2)
                                    {
                                        _with21.Add("EXPECTED_VOLUME_IN", DR["VOLUME"]).Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_WEIGHT_IN", DR["WEIGHT"]).Direction = ParameterDirection.Input;
                                    }
                                    else if (CargoType == 4)
                                    {
                                        _with21.Add("EXPECTED_VOLUME_IN", Convert.ToDouble(DR["CARGO_VOL"])).Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_WEIGHT_IN", Convert.ToDouble(DR["CARGO_WT"])).Direction = ParameterDirection.Input;
                                    }
                                    else
                                    {
                                        _with21.Add("EXPECTED_VOLUME_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_WEIGHT_IN", "").Direction = ParameterDirection.Input;
                                    }

                                    if (CargoType == 1)
                                    {
                                        _with21.Add("CONTAINER_TYPE_MST_FK_IN", DR["CNTR_PK"]).Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_BOXES_IN", DR["QUANTITY"]).Direction = ParameterDirection.Input;
                                    }
                                    else if (CargoType == 4)
                                    {
                                        _with21.Add("CONTAINER_TYPE_MST_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_BOXES_IN", Convert.ToInt32(DR["QUANTITY"])).Direction = ParameterDirection.Input;
                                    }
                                    else
                                    {
                                        _with21.Add("CONTAINER_TYPE_MST_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("EXPECTED_BOXES_IN", "").Direction = ParameterDirection.Input;
                                    }
                                    if (CargoType == 2)
                                    {
                                        _with21.Add("BASIS_IN", DR["LCL_BASIS"]).Direction = ParameterDirection.Input;
                                    }
                                    else if (CargoType == 4)
                                    {
                                        _with21.Add("BASIS_IN", Convert.ToInt64(DR["BASIS_PK"])).Direction = ParameterDirection.Input;
                                    }
                                    else
                                    {
                                        _with21.Add("BASIS_IN", "").Direction = ParameterDirection.Input;
                                    }
                                    if (CargoType != 4)
                                    {
                                        _with21.Add("COMMODITY_GROUP_FK_IN", DR["COMM_GRPPK"]).Direction = ParameterDirection.Input;
                                        _with21.Add("ALL_IN_TARIFF_IN", DR["ALL_IN_TARIFF"]).Direction = ParameterDirection.Input;
                                        _with21.Add("ALL_IN_QUOTED_TARIFF_IN", DR["ALL_IN_QUOTE"]).Direction = ParameterDirection.Input;
                                        _with21.Add("POL_GRP_FK_IN", (string.IsNullOrEmpty(DR["POL_GRP_FK"].ToString()) ? "" : DR["POL_GRP_FK"])).Direction = ParameterDirection.Input;
                                        _with21.Add("POD_GRP_FK_IN", (string.IsNullOrEmpty(DR["POD_GRP_FK"].ToString()) ? "" : DR["POD_GRP_FK"])).Direction = ParameterDirection.Input;
                                        _with21.Add("TARIFF_GRP_FK_IN", (string.IsNullOrEmpty(DR["TARIFF_GRP_FK"].ToString()) ? "" : DR["TARIFF_GRP_FK"])).Direction = ParameterDirection.Input;
                                    }
                                    else
                                    {
                                        _with21.Add("COMMODITY_GROUP_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("ALL_IN_TARIFF_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("ALL_IN_QUOTED_TARIFF_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("POL_GRP_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("POD_GRP_FK_IN", "").Direction = ParameterDirection.Input;
                                        _with21.Add("TARIFF_GRP_FK_IN", "").Direction = ParameterDirection.Input;
                                    }
                                    _with21.Add("COMMODITY_MST_FK_IN", getDefault(DR["COMM_PK"], "")).Direction = ParameterDirection.Input;
                                    _with21.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                    _with21.Add("PROCESS_TYPE_IN", PROCESS_TYPE).Direction = ParameterDirection.Input;
                                    _with21.Add("BIZ_TYPE_IN", BIZ_TYPE).Direction = ParameterDirection.Input;
                                    ///Added By Sushama
                                    _with21.Add("PORT_MST_PLR_FK_IN", PLRPK).Direction = ParameterDirection.Input;
                                    _with21.Add("PORT_MST_PFD_FK_IN", PFDPK).Direction = ParameterDirection.Input;
                                    _with21.Add("TRANSPORTER_PLR_FK_IN", PLRTransPK).Direction = ParameterDirection.Input;
                                    _with21.Add("TRANSPORTER_PFD_FK_IN", PFDTransPK).Direction = ParameterDirection.Input;
                                    ///Add END
                                    _with21.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                    _with20.ExecuteNonQuery();
                                    TransactionPK = Convert.ToInt64(_with20.Parameters["RETURN_VALUE"].Value);
                                    if (CargoType == 4)
                                    {
                                        OldPk = Convert.ToInt64(getDefault(DR["PK"], -1));
                                    }
                                    else
                                    {
                                        OldPk = Convert.ToInt64(getDefault(DR["FK"], -1));
                                    }
                                    // = TransactionPK
                                    arrMessage = SaveFreights(DR, Gridds, 0, CDT, TransactionPK, SCM, UserName, CargoType, BIZ_TYPE);
                                    if (arrMessage.Count > 0)
                                    {
                                        if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") == 0)
                                        {
                                            return arrMessage;
                                        }
                                    }
                                    arrMessage = SaveOTHFreights(DR, OthDT, TransactionPK, OldPk, SCM, UserName, BIZ_TYPE);
                                    if (arrMessage.Count > 0)
                                    {
                                        if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") == 0)
                                        {
                                            return arrMessage;
                                        }
                                    }
                                    if (CargoType == 4)
                                    {
                                        if ((DSCalculator != null))
                                        {
                                            //SaveCargoInfo(DR, DSCalculator.Tables[0], TransactionPK, SCM, UserName, Measure, Wt, DivFac);
                                        }
                                    }
                                    if (arrMessage.Count > 0)
                                    {
                                        if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") == 0)
                                        {
                                            return arrMessage;
                                        }
                                    }
                                    string CntrType = null;
                                    if (CargoType == 2)
                                    {
                                        CntrType = (string.IsNullOrEmpty(Convert.ToString(DR.ItemArray[12])) ? "0" : Convert.ToString(DR.ItemArray[12]));
                                    }
                                    else
                                    {
                                        CntrType = Convert.ToString(DR.ItemArray[13]);
                                    }
                                    if (CargoType != 4)
                                    {
                                        int i = 0;
                                        string strSql = null;
                                        string drCntKind = null;
                                        strSql = "SELECT C.CONTAINER_KIND FROM CONTAINER_TYPE_MST_TBL C WHERE C.CONTAINER_TYPE_MST_ID= '" + CntrType + "'";
                                        drCntKind = objWF.ExecuteScaler(strSql);
                                        if ((DR["COMM_GRPPK"] != null))
                                        {
                                            if (Convert.ToInt32(DR["COMM_GRPPK"]) == HAZARDOUS)
                                            {
                                                if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, ODC);
                                                }
                                                else
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, HAZARDOUS);
                                                }
                                            }
                                            else if (Convert.ToInt32(DR["COMM_GRPPK"]) == REEFER)
                                            {
                                                if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, ODC);
                                                }
                                                else
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, REEFER);
                                                }
                                            }
                                            else if (Convert.ToInt32(DR["COMM_GRPPK"]) == ODC)
                                            {
                                                if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, ODC);
                                                }
                                            }
                                            else
                                            {
                                                if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                                {
                                                    arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(DR["strSpclReq"], "").ToString(), TransactionPK, ODC);
                                                }
                                            }
                                            if (arrMessage.Count > 0)
                                            {
                                                if (string.Compare(Convert.ToString(arrMessage[0]).ToUpper(), "SAVED") == 0)
                                                {
                                                    return arrMessage;
                                                }
                                            }
                                        }
                                        //end
                                    }
                                }
                                arrMessage.Add("All data saved successfully");
                                return arrMessage;
                            }
                        }
                    }
                }
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
            //arrMessage.Add(ex.Message);
            return arrMessage;
        }

        #endregion " Save Transaction FCL/LCL "

        #region "Spacial Request"

        /// <summary>
        /// Saves the transaction special req.
        /// </summary>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="strSpclRequest">The string SPCL request.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="CommodityGrp">The commodity GRP.</param>
        /// <returns></returns>
        private ArrayList SaveTransactionSpecialReq(OracleCommand SCM, string UserName, string strSpclRequest, long PkValue, int CommodityGrp = 0)
        {
            if (!string.IsNullOrEmpty(strSpclRequest))
            {
                arrMessage.Clear();
                string[] strParam = null;
                strParam = strSpclRequest.Split('~');
                try
                {
                    var _with25 = SCM;
                    _with25.CommandType = CommandType.StoredProcedure;
                    _with25.CommandText = UserName + ".QUOT_HAZ_SPL_ODC_REQ_PKG.QUOT_HAZ_SPL_ODC_REQ_INS";
                    if (CommodityGrp == HAZARDOUS)
                    {
                        var _with26 = _with25.Parameters;
                        ///Haz
                        _with26.Clear();
                        _with26.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        _with26.Add("OUTER_PACK_TYPE_MST_FK_IN", getDefault(strParam[0], "")).Direction = ParameterDirection.Input;
                        _with26.Add("INNER_PACK_TYPE_MST_FK_IN", getDefault(strParam[1], "")).Direction = ParameterDirection.Input;
                        _with26.Add("MIN_TEMP_IN", getDefault(strParam[2], "")).Direction = ParameterDirection.Input;
                        _with26.Add("MIN_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[2]) ? "" : strParam[3]), 0)).Direction = ParameterDirection.Input;
                        _with26.Add("MAX_TEMP_IN", getDefault(strParam[4], "")).Direction = ParameterDirection.Input;
                        _with26.Add("MAX_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[4]) ? "" : strParam[5]), 0)).Direction = ParameterDirection.Input;
                        _with26.Add("FLASH_PNT_TEMP_IN", getDefault(strParam[6], "")).Direction = ParameterDirection.Input;
                        _with26.Add("FLASH_PNT_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[6]) ? "" : strParam[7]), 0)).Direction = ParameterDirection.Input;
                        _with26.Add("IMDG_CLASS_CODE_IN", getDefault(strParam[8], "")).Direction = ParameterDirection.Input;
                        _with26.Add("UN_NO_IN", getDefault(strParam[9], "")).Direction = ParameterDirection.Input;
                        _with26.Add("IMO_SURCHARGE_IN", getDefault(strParam[10], 0)).Direction = ParameterDirection.Input;
                        _with26.Add("SURCHARGE_AMT_IN", getDefault(strParam[11], 0)).Direction = ParameterDirection.Input;
                        _with26.Add("IS_MARINE_POLLUTANT_IN", getDefault(strParam[12], 0)).Direction = ParameterDirection.Input;
                        _with26.Add("EMS_NUMBER_IN", getDefault(strParam[13], "")).Direction = ParameterDirection.Input;
                        _with26.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    }
                    else if (CommodityGrp == REEFER)
                    {
                        var _with27 = _with25.Parameters;
                        _with27.Clear();
                        _with27.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        _with27.Add("VENTILATION_IN", strParam[0]).Direction = ParameterDirection.Input;
                        _with27.Add("AIR_COOL_METHOD_IN", strParam[1]).Direction = ParameterDirection.Input;
                        _with27.Add("HUMIDITY_FACTOR_IN", getDefault(strParam[2], "")).Direction = ParameterDirection.Input;
                        _with27.Add("IS_PERISHABLE_GOODS_IN", strParam[3]).Direction = ParameterDirection.Input;
                        _with27.Add("MIN_TEMP_IN", getDefault(strParam[4], "")).Direction = ParameterDirection.Input;
                        _with27.Add("MIN_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[5]) ? "" : strParam[5]), 0)).Direction = ParameterDirection.Input;
                        _with27.Add("MAX_TEMP_IN", getDefault(strParam[6], "")).Direction = ParameterDirection.Input;
                        _with27.Add("MAX_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[7]) ? "" : strParam[7]), 0)).Direction = ParameterDirection.Input;
                        _with27.Add("PACK_TYPE_MST_FK_IN", getDefault(strParam[8], "")).Direction = ParameterDirection.Input;
                        _with27.Add("PACK_COUNT_IN", getDefault(strParam[9], 0)).Direction = ParameterDirection.Input;

                        _with27.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    }
                    else if (CommodityGrp == ODC)
                    {
                        var _with28 = _with25.Parameters;
                        _with28.Clear();
                        _with28.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        _with28.Add("LENGTH_IN", getDefault(strParam[0], "")).Direction = ParameterDirection.Input;
                        _with28.Add("LENGTH_UOM_MST_FK_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("HEIGHT_IN", getDefault(strParam[2], "")).Direction = ParameterDirection.Input;
                        _with28.Add("HEIGHT_UOM_MST_FK_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("WIDTH_IN", getDefault(strParam[1], 0)).Direction = ParameterDirection.Input;
                        _with28.Add("WIDTH_UOM_MST_FK_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("WEIGHT_IN", getDefault(strParam[3], "")).Direction = ParameterDirection.Input;
                        _with28.Add("WEIGHT_UOM_MST_FK_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("VOLUME_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("VOLUME_UOM_MST_FK_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("SLOT_LOSS_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("LOSS_QUANTITY_IN", "").Direction = ParameterDirection.Input;
                        _with28.Add("APPR_REQ_IN", "").Direction = ParameterDirection.Input;
                        if (Convert.ToBoolean(strParam[4]) == true)
                        {
                            _with28.Add("STOWAGE_IN", 1).Direction = ParameterDirection.Input;
                        }
                        else
                        {
                            _with28.Add("STOWAGE_IN", 2).Direction = ParameterDirection.Input;
                        }
                        _with28.Add("HAND_INST_IN", (string.IsNullOrEmpty(strParam[6]) ? "" : strParam[6])).Direction = ParameterDirection.Input;
                        _with28.Add("LASH_INST_IN", (string.IsNullOrEmpty(strParam[7]) ? "" : strParam[7])).Direction = ParameterDirection.Input;
                        _with28.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    }
                    _with25.ExecuteNonQuery();
                    arrMessage.Add("All data saved successfully");
                    return arrMessage;
                }
                catch (OracleException oraexp)
                {
                    arrMessage.Add(oraexp.Message);
                    return arrMessage;
                }
                catch (Exception ex)
                {
                    arrMessage.Add(ex.Message);
                    return arrMessage;
                }
            }
            arrMessage.Add("All data saved successfully");
            return arrMessage;
        }

        /// <summary>
        /// Fetches the SPCL req.
        /// </summary>
        /// <param name="strPK">The string pk.</param>
        /// <param name="strRef">The string reference.</param>
        /// <returns></returns>
        public DataTable fetchSpclReq(string strPK, string strRef)
        {
            try
            {
                if (!string.IsNullOrEmpty(strPK))
                {
                    StringBuilder strQuery = new StringBuilder();
                    strQuery.Append("SELECT QUOTATION_HAZ_REF_ODC_SPL_PK,");
                    strQuery.Append("QUOTATION_DTL_FK,");
                    strQuery.Append("OUTER_PACK_TYPE_MST_FK,");
                    strQuery.Append("INNER_PACK_TYPE_MST_FK,");
                    strQuery.Append("MIN_TEMP,");
                    strQuery.Append("MIN_TEMP_UOM,");
                    strQuery.Append("MAX_TEMP,");
                    strQuery.Append("MAX_TEMP_UOM,");
                    strQuery.Append("FLASH_PNT_TEMP,");
                    strQuery.Append("FLASH_PNT_TEMP_UOM,");
                    strQuery.Append("IMDG_CLASS_CODE,");
                    strQuery.Append("UN_NO,");
                    strQuery.Append("IMO_SURCHARGE,");
                    strQuery.Append("SURCHARGE_AMT,");
                    strQuery.Append("IS_MARINE_POLLUTANT,");
                    strQuery.Append("EMS_NUMBER FROM QUOTATION_HAZ_SPL_ODC_REQ Q");
                    //,QUOTATION_DTL_TBL QT,QUOTATION_MST_TBL QM" & vbCrLf)
                    strQuery.Append("WHERE ");
                    strQuery.Append("Q.QUOTATION_DTL_FK=" + strPK);
                    return (new WorkFlow()).GetDataTable(strQuery.ToString());
                }
                else
                {
                    return null;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the imo uno.
        /// </summary>
        /// <param name="COM">The COM.</param>
        /// <param name="IMO">The imo.</param>
        /// <param name="Unr">The unr.</param>
        /// <returns></returns>
        public int FetchIMOUno(string COM, string IMO, string Unr)
        {
            OracleDataReader dr = null;
            string UNnr = null;
            //job_trn_sea_exp_spl_req()
            //Dim strQuery As String = "SELECT CO.IMDG_CLASS_CODE,CO.UN_NO,CO.COMMODITY_NAME FROM  job_trn_sea_exp_spl_req co WHERE co.COMMODITY_NAME='" & COM & "'"
            string strQuery = "SELECT CO.IMDG_CLASS_CODE,CO.UN_NO,CO.COMMODITY_NAME FROM commodity_mst_tbl co WHERE co.COMMODITY_NAME='" + COM + "'";
            try
            {
                dr = (new WorkFlow()).GetDataReader(strQuery);
                while (dr.Read())
                {
                    IMO = Convert.ToString(getDefault(dr["IMDG_CLASS_CODE"], ""));
                    Unr = Convert.ToString(getDefault(dr["UN_NO"], ""));
                    COM = Convert.ToString(dr["COMMODITY_NAME"]);
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }
            finally
            {
                dr.Close();
            }
        }

        /// <summary>
        /// Saves the transaction reefer.
        /// </summary>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="strSpclRequest">The string SPCL request.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <returns></returns>
        private ArrayList SaveTransactionReefer(OracleCommand SCM, string UserName, string strSpclRequest, long PkValue)
        {
            if (!string.IsNullOrEmpty(strSpclRequest))
            {
                arrMessage.Clear();
                string[] strParam = null;
                strParam = strSpclRequest.Split('~');
                try
                {
                    var _with29 = SCM;
                    _with29.CommandType = CommandType.StoredProcedure;
                    _with29.CommandText = UserName + ".QUOTE_SEA_REF_SPL_REQ_PKG.QUOTE_SEA_REF_SPL_REQ_INS";
                    var _with30 = _with29.Parameters;
                    _with30.Clear();
                    //QUOTATION_DTL_FK_IN()
                    _with30.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                    //VENTILATION_IN()
                    _with30.Add("VENTILATION_IN", strParam[0]).Direction = ParameterDirection.Input;
                    //AIR_COOL_METHOD_IN()
                    _with30.Add("AIR_COOL_METHOD_IN", strParam[1]).Direction = ParameterDirection.Input;
                    //HUMIDITY_FACTOR_IN()
                    _with30.Add("HUMIDITY_FACTOR_IN", getDefault(strParam[2], "")).Direction = ParameterDirection.Input;
                    //IS_PERISHABLE_GOODS_IN()
                    _with30.Add("IS_PERISHABLE_GOODS_IN", strParam[3]).Direction = ParameterDirection.Input;
                    //MIN_TEMP_IN()
                    _with30.Add("MIN_TEMP_IN", getDefault(strParam[4], "")).Direction = ParameterDirection.Input;
                    //MIN_TEMP_UOM_IN()
                    _with30.Add("MIN_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[4]) ? "" : strParam[5]), 0)).Direction = ParameterDirection.Input;
                    //MAX_TEMP_IN()
                    _with30.Add("MAX_TEMP_IN", getDefault(strParam[6], "")).Direction = ParameterDirection.Input;
                    //MAX_TEMP_UOM_IN()
                    _with30.Add("MAX_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[6]) ? "" : strParam[7]), 0)).Direction = ParameterDirection.Input;
                    //PACK_TYPE_MST_FK_IN()
                    _with30.Add("PACK_TYPE_MST_FK_IN", getDefault(strParam[8], "")).Direction = ParameterDirection.Input;
                    //PACK_COUNT_IN()
                    _with30.Add("PACK_COUNT_IN", getDefault(strParam[9], 0)).Direction = ParameterDirection.Input;
                    //RETURN_VALUE()
                    _with30.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with29.ExecuteNonQuery();
                    arrMessage.Add("All data saved successfully");
                    return arrMessage;
                }
                catch (OracleException oraexp)
                {
                    arrMessage.Add(oraexp.Message);
                    return arrMessage;
                }
                catch (Exception ex)
                {
                    arrMessage.Add(ex.Message);
                    return arrMessage;
                }
            }
            arrMessage.Add("All data saved successfully");
            return arrMessage;
        }

        /// <summary>
        /// Fetches the SPCL req reefer.
        /// </summary>
        /// <param name="strPK">The string pk.</param>
        /// <param name="strRef">The string reference.</param>
        /// <returns></returns>
        public DataTable fetchSpclReqReefer(string strPK, string strRef)
        {
            try
            {
                if (!string.IsNullOrEmpty(strPK))
                {
                    StringBuilder strQuery = new StringBuilder();
                    strQuery.Append("SELECT QUOTATION_HAZ_REF_ODC_SPL_PK QUOTE_SEA_REF_SPL_REQ_PK,");
                    strQuery.Append("QUOTATION_DTL_FK,");
                    strQuery.Append("VENTILATION,");
                    strQuery.Append("AIR_COOL_METHOD,");
                    strQuery.Append("HUMIDITY_FACTOR,");
                    strQuery.Append("IS_PERISHABLE_GOODS,");
                    strQuery.Append("MIN_TEMP,");
                    strQuery.Append("MIN_TEMP_UOM,");
                    strQuery.Append("MAX_TEMP,");
                    strQuery.Append("MAX_TEMP_UOM,");
                    strQuery.Append("OUTER_PACK_TYPE_MST_FK PACK_TYPE_MST_FK,");
                    strQuery.Append("PACK_COUNT ");
                    strQuery.Append("FROM QUOTATION_HAZ_SPL_ODC_REQ Q");
                    strQuery.Append("WHERE ");
                    strQuery.Append("Q.QUOTATION_DTL_FK=" + strPK);
                    return (new WorkFlow()).GetDataTable(strQuery.ToString());
                }
                else
                {
                    return null;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the SPCL req odc.
        /// </summary>
        /// <param name="strPK">The string pk.</param>
        /// <param name="strRef">The string reference.</param>
        /// <returns></returns>
        public DataTable fetchSpclReqODC(string strPK, string strRef)
        {
            try
            {
                if (!string.IsNullOrEmpty(strPK))
                {
                    StringBuilder strQuery = new StringBuilder();
                    strQuery.Append("SELECT ");
                    strQuery.Append("QUOTATION_HAZ_REF_ODC_SPL_PK,");
                    strQuery.Append("QUOTATION_DTL_FK,");
                    strQuery.Append("LENGTH,");
                    strQuery.Append("LENGTH_UOM_MST_FK,");
                    strQuery.Append("HEIGHT,");
                    strQuery.Append("HEIGHT_UOM_MST_FK,");
                    strQuery.Append("WIDTH,");
                    strQuery.Append("WIDTH_UOM_MST_FK,");
                    strQuery.Append("WEIGHT,");
                    strQuery.Append("WEIGHT_UOM_MST_FK,");
                    strQuery.Append("VOLUME,");
                    strQuery.Append("VOLUME_UOM_MST_FK,");
                    strQuery.Append("SLOT_LOSS,");
                    strQuery.Append("LOSS_QUANTITY,");
                    strQuery.Append("APPR_REQ, ");
                    strQuery.Append("STOWAGE, ");
                    strQuery.Append("HANDLING_INSTR, ");
                    strQuery.Append("LASHING_INSTR ");
                    strQuery.Append("FROM QUOTATION_HAZ_SPL_ODC_REQ Q");
                    strQuery.Append("WHERE ");
                    strQuery.Append("Q.QUOTATION_DTL_FK=" + strPK);
                    return (new WorkFlow()).GetDataTable(strQuery.ToString());
                }
                else
                {
                    return null;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Spacial Request"

        #region " Freight Elemenmts "

        /// <summary>
        /// Saves the freights.
        /// </summary>
        /// <param name="PDR">The PDR.</param>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="RowNo">The row no.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="TrnPKValue">The TRN pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="FLG_Gen_Specific">The fl g_ gen_ specific.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private ArrayList SaveFreights(DataRow PDR, DataSet Gridds, Int16 RowNo, DataTable CDT, long TrnPKValue, OracleCommand SCM, string UserName, Int16 CargoType, int BIZ_TYPE = 0, int FLG_Gen_Specific = 0,
        int Group = 0)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            bool Flag = false;
            Int16 AllInRate = default(Int16);
            Int16 ChkAdvatos = default(Int16);
            long FreightPk = 0;

            arrMessage.Clear();
            try
            {
                //'Air
                if (BIZ_TYPE == 1)
                {
                    if (FLG_Gen_Specific == 2)
                    {
                        var _with31 = SCM;
                        for (nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                        {
                            _with31.CommandType = CommandType.StoredProcedure;
                            _with31.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_INS";
                            DR = CDT.Rows[nRowCnt];
                            Flag = false;
                            if (CDT.Rows[nRowCnt]["SELECTED"] == "true" | CDT.Rows[nRowCnt]["SELECTED"] == "1")
                            {
                                if (CDT.Rows[nRowCnt]["POL_FK"] == PDR["POLFK"] & CDT.Rows[nRowCnt]["POD_FK"] == PDR["PODFK"])
                                {
                                    var _with32 = _with31.Parameters;
                                    _with32.Clear();
                                    AllInRate = Convert.ToInt16(DR["SELECTED"] == "true" ? 1 : 0);
                                    ChkAdvatos = Convert.ToInt16(DR["ADVATOS"] == "true" ? 1 : 0);
                                    _with32.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                    _with32.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_FK"]).Direction = ParameterDirection.Input;
                                    _with32.Add("CHECK_FOR_ALL_IN_RT_IN", AllInRate).Direction = ParameterDirection.Input;
                                    _with32.Add("CURRENCY_MST_FK_IN", DR["CURR_FK"]).Direction = ParameterDirection.Input;
                                    _with32.Add("TARIFF_RATE_IN", getDefault(DR["TARIFF_RATE"], 0)).Direction = ParameterDirection.Input;
                                    _with32.Add("QUOTED_RATE_IN", getDefault(DR["QUOTED_RATE"], 0)).Direction = ParameterDirection.Input;
                                    _with32.Add("PYMT_TYPE_IN", getDefault(DR["P_TYPE"], 1)).Direction = ParameterDirection.Input;
                                    _with32.Add("CHARGE_BASIS_IN", DR["CH_BASIS"]).Direction = ParameterDirection.Input;
                                    _with32.Add("BASIS_RATE_IN", getDefault(DR["BASIS_RATE"], 0)).Direction = ParameterDirection.Input;
                                    _with32.Add("FREIGHT_TYPE_IN", DR["FRT_TYPE"]).Direction = ParameterDirection.Input;
                                    _with32.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                    _with32.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                    _with32.Add("CHECK_ADVATOS_IN", ChkAdvatos).Direction = ParameterDirection.Input;
                                    _with32.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                                    _with32.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                    _with32.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                    _with32.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                    _with31.ExecuteNonQuery();
                                    FreightPk = Convert.ToInt64(_with31.Parameters["RETURN_VALUE"].Value);
                                }
                            }
                        }
                    }
                    else
                    {
                        ///
                        var _with33 = SCM;
                        _with33.CommandType = CommandType.StoredProcedure;

                        for (nRowCnt = 0; nRowCnt <= Gridds.Tables[1].Rows.Count - 1; nRowCnt++)
                        {
                            if (Group == 1 | Group == 2)
                            {
                                if (Gridds.Tables[1].Rows[nRowCnt]["POLPK"] == PDR["PORT_MST_POL_FK"] & Gridds.Tables[1].Rows[nRowCnt]["PODPK"] == PDR["PORT_MST_POD_FK"] & Gridds.Tables[1].Rows[nRowCnt]["AIRLINE_MST_PK"] == PDR["AIRLINE_MST_PK"])
                                {
                                    if (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "1")
                                    {
                                        _with33.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_INS";
                                        var _with34 = _with33.Parameters;
                                        _with34.Clear();
                                        _with34.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                        _with34.Add("FREIGHT_ELEMENT_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with34.Add("CHECK_FOR_ALL_IN_RT_IN", (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        _with34.Add("CURRENCY_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with34.Add("TARIFF_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with34.Add("QUOTED_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with34.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                        _with34.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                        _with34.Add("PYMT_TYPE_IN", "").Direction = ParameterDirection.Input;
                                        _with34.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                        _with34.Add("CHECK_ADVATOS_IN", (Gridds.Tables[1].Rows[nRowCnt]["ADVATOS"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        //'Added By Koteshwari
                                        if (Gridds.Tables[1].Columns.Contains("MIN_AMOUNT"))
                                        {
                                            _with34.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"])).Direction = ParameterDirection.Input;
                                        }
                                        else if (Gridds.Tables[1].Columns.Contains("QUOTED_MIN_RATE"))
                                        {
                                            _with34.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"])).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with34.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                                        }
                                        _with34.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                        _with34.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                        if (CargoType == 4)
                                        {
                                            _with34.Add("FINAL_AMOUNT_IN", (string.IsNullOrEmpty(DR["FINAL_AMOUNT"].ToString()) ? 0 : Convert.ToDouble(DR["FINAL_AMOUNT"]))).Direction = ParameterDirection.Input;
                                        }
                                        _with34.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                        _with33.ExecuteNonQuery();
                                        FreightPk = Convert.ToInt64(_with33.Parameters["RETURN_VALUE"].Value);
                                        arrMessage = SaveSlabs(Gridds, Convert.ToInt16(nRowCnt), FreightPk, SCM, UserName, Group);
                                        if (arrMessage.Count > 0)
                                        {
                                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                            {
                                                arrMessage.Add("All data saved successfully");
                                            }
                                            else
                                            {
                                                return arrMessage;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "1")
                                {
                                    Flag = false;
                                    if (!Gridds.Tables[1].Columns.Contains("FK"))
                                    {
                                        if (Gridds.Tables[1].Columns.Contains("POLPK"))
                                        {
                                            if (Gridds.Tables[1].Rows[nRowCnt]["POLPK"] == PDR["PORT_MST_POL_FK"] & Gridds.Tables[1].Rows[nRowCnt]["PODPK"] == PDR["PORT_MST_POD_FK"] & Gridds.Tables[1].Rows[nRowCnt]["AIRLINE_MST_PK"] == PDR["AIRLINE_MST_PK"])
                                            {
                                                Flag = true;
                                            }
                                        }
                                        else
                                        {
                                            if (Gridds.Tables[1].Rows[nRowCnt]["POL_PK"] == PDR["PORT_MST_POL_FK"] & Gridds.Tables[1].Rows[nRowCnt]["POD_PK"] == PDR["PORT_MST_POD_FK"] & Gridds.Tables[1].Rows[nRowCnt]["AIRLINE_MST_PK"] == PDR["AIRLINE_MST_PK"])
                                            {
                                                Flag = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (Gridds.Tables[1].Rows[nRowCnt]["FK"] == PDR["PK"])
                                        {
                                            Flag = true;
                                        }
                                    }
                                    if (Flag == true)
                                    {
                                        _with33.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_INS";
                                        var _with35 = _with33.Parameters;
                                        _with35.Clear();
                                        _with35.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                        _with35.Add("FREIGHT_ELEMENT_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with35.Add("CHECK_FOR_ALL_IN_RT_IN", (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        _with35.Add("CURRENCY_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with35.Add("TARIFF_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with35.Add("QUOTED_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with35.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                        _with35.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                        _with35.Add("PYMT_TYPE_IN", "").Direction = ParameterDirection.Input;
                                        _with35.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                        _with35.Add("CHECK_ADVATOS_IN", (Gridds.Tables[1].Rows[nRowCnt]["ADVATOS"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        //'Added By Koteshwari
                                        if (Gridds.Tables[1].Columns.Contains("MIN_AMOUNT"))
                                        {
                                            _with35.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"])).Direction = ParameterDirection.Input;
                                        }
                                        else if (Gridds.Tables[1].Columns.Contains("QUOTED_MIN_RATE"))
                                        {
                                            _with35.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"])).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with35.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                                        }
                                        //.Add("ROE_IN", DR.Item("EXCHANGE_RATE")).Direction = ParameterDirection.Input
                                        _with35.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                        _with35.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                        //If CargoType = 4 Then
                                        //    .Add("FINAL_AMOUNT_IN", IIf(IsDBNull(DR.Item("FINAL_AMOUNT")), 0, CDbl(DR.Item("FINAL_AMOUNT")))).Direction = ParameterDirection.Input
                                        //End If
                                        _with35.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                        _with33.ExecuteNonQuery();
                                        FreightPk = Convert.ToInt64(_with33.Parameters["RETURN_VALUE"].Value);
                                        arrMessage = SaveSlabs(Gridds, Convert.ToInt16(nRowCnt), FreightPk, SCM, UserName, Group);
                                        if (arrMessage.Count > 0)
                                        {
                                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                            {
                                                arrMessage.Add("All data saved successfully");
                                            }
                                            else
                                            {
                                                return arrMessage;
                                            }
                                        }
                                    }
                                }
                                //'
                            }
                        }
                    }
                }
                else
                {
                    var _with36 = SCM;
                    for (nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                    {
                        _with36.CommandType = CommandType.StoredProcedure;
                        _with36.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_INS";
                        DR = CDT.Rows[nRowCnt];
                        Flag = false;
                        if (CDT.Columns.Contains("OPER_PK"))
                        {
                            if (string.IsNullOrEmpty(DR["OPER_PK"].ToString()))
                            {
                                if (CargoType == 1)
                                {
                                    if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["CNTR_PK"] == PDR["CNTR_PK"])
                                    {
                                        Flag = true;
                                    }
                                }
                                else if (CargoType == 2)
                                {
                                    if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["LCLBASIS"] == PDR["LCL_BASIS"])
                                    {
                                        Flag = true;
                                    }
                                }
                                else
                                {
                                    if (DR["COMM_PK"] == PDR["COMM_PK"])
                                    {
                                        Flag = true;
                                    }
                                }
                            }
                            else
                            {
                                if (CargoType == 1)
                                {
                                    if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["CNTR_PK"] == PDR["CNTR_PK"] & DR["OPER_PK"] == PDR["OPER_PK"])
                                    {
                                        Flag = true;
                                    }
                                }
                                else if (CargoType == 2)
                                {
                                    if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["LCLBASIS"] == PDR["LCL_BASIS"] & DR["OPER_PK"] == PDR["OPER_PK"])
                                    {
                                        Flag = true;
                                    }
                                }
                                else
                                {
                                    if (DR["COMM_PK"] == PDR["COMM_PK"])
                                    {
                                        Flag = true;
                                    }
                                    //If DR.Item("REFNO") = PDR.Item("REFNO") Then
                                    //    Flag = True
                                    //End If
                                }
                            }
                        }
                        else
                        {
                            if (CargoType == 1)
                            {
                                if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["CNTR_PK"] == PDR["CNTR_PK"])
                                {
                                    Flag = true;
                                }
                            }
                            else if (CargoType == 2)
                            {
                                if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["LCLBASIS"] == PDR["LCL_BASIS"])
                                {
                                    Flag = true;
                                }
                            }
                            else
                            {
                                if (DR["COMM_PK"] == PDR["COMM_PK"])
                                {
                                    Flag = true;
                                }
                            }
                        }

                        if (Flag == true)
                        {
                            var _with37 = _with36.Parameters;
                            _with37.Clear();
                            if (CargoType == 4)
                            {
                                AllInRate = Convert.ToInt16(DR["SELECTED"] == "true" ? 1 : 0);
                                ChkAdvatos = Convert.ToInt16(((string.IsNullOrEmpty(DR["ADVATOS"].ToString()) ? "false" : DR["ADVATOS"]) == "true" ? 1 : 0));
                                _with37.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                _with37.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_PK"]).Direction = ParameterDirection.Input;
                                _with37.Add("CHECK_FOR_ALL_IN_RT_IN", AllInRate).Direction = ParameterDirection.Input;
                                _with37.Add("CURRENCY_MST_FK_IN", DR["CURR_PK"]).Direction = ParameterDirection.Input;
                                _with37.Add("TARIFF_RATE_IN", (string.IsNullOrEmpty(DR["FINAL_RATE"].ToString()) ? 0 : DR["FINAL_RATE"])).Direction = ParameterDirection.Input;
                                _with37.Add("QUOTED_RATE_IN", (string.IsNullOrEmpty(DR["QUOTERATE"].ToString()) ? 0 : DR["QUOTERATE"])).Direction = ParameterDirection.Input;
                                _with37.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                _with37.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                if (DR["PYTPE"].ToString() == "Collect" | Convert.ToString(DR["PYTPE"]) == "2")
                                {
                                    _with37.Add("PYMT_TYPE_IN", 2).Direction = ParameterDirection.Input;
                                }
                                else if (DR["PYTPE"].ToString() == "PrePaid" | Convert.ToString(DR["PYTPE"]) == "1")
                                {
                                    _with37.Add("PYMT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with37.Add("PYMT_TYPE_IN", 3).Direction = ParameterDirection.Input;
                                }
                                //.Add("PYMT_TYPE_IN", 1).Direction = ParameterDirection.Input
                                _with37.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                _with37.Add("CHECK_ADVATOS_IN", ChkAdvatos).Direction = ParameterDirection.Input;
                                //'Added By Koteshwari
                                _with37.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(DR["QUOTE_MIN_RATE"].ToString()) ? 0 : DR["QUOTE_MIN_RATE"])).Direction = ParameterDirection.Input;
                                _with37.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                _with37.Add("ROE_IN", DR["EXCHANGE_RATE"]).Direction = ParameterDirection.Input;
                                _with37.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            }
                            else
                            {
                                AllInRate = Convert.ToInt16((DR["SELECTED"] == "true" ? 1 : 0));
                                ChkAdvatos = Convert.ToInt16(((string.IsNullOrEmpty(DR["ADVATOS"].ToString()) ? "false" : DR["ADVATOS"]) == "true" ? 1 : 0));
                                _with37.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                _with37.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_PK"]).Direction = ParameterDirection.Input;
                                _with37.Add("CHECK_FOR_ALL_IN_RT_IN", AllInRate).Direction = ParameterDirection.Input;
                                _with37.Add("CURRENCY_MST_FK_IN", DR["CURR_PK"]).Direction = ParameterDirection.Input;
                                _with37.Add("TARIFF_RATE_IN", (string.IsNullOrEmpty(DR["FINAL_RATE"].ToString()) ? 0 : DR["FINAL_RATE"])).Direction = ParameterDirection.Input;
                                _with37.Add("QUOTED_RATE_IN", (string.IsNullOrEmpty(DR["QUOTERATE"].ToString()) ? 0 : DR["QUOTERATE"])).Direction = ParameterDirection.Input;
                                _with37.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                _with37.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                _with37.Add("PYMT_TYPE_IN", DR["PYTPE"]).Direction = ParameterDirection.Input;
                                _with37.Add("SURCHARGE_IN", DR["SURCHARGE"]).Direction = ParameterDirection.Input;
                                _with37.Add("CHECK_ADVATOS_IN", ChkAdvatos).Direction = ParameterDirection.Input;
                                //'Added By Koteshwari
                                if (CargoType == 4)
                                {
                                    _with37.Add("ROE_IN", DR["EXCHANGE_RATE"]).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with37.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                }
                                if (CargoType == 1)
                                {
                                    _with37.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                                    //Added by rabbani reason USS Gap,introduced New Column Min.Qte.Rate
                                }
                                else
                                {
                                    _with37.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(DR["QUOTE_MIN_RATE"].ToString()) ? 0 : DR["QUOTE_MIN_RATE"])).Direction = ParameterDirection.Input;
                                    //Added by rabbani reason USS Gap,introduced New Column Min.Qte.Rate
                                }
                                _with37.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                _with37.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            }

                            _with36.ExecuteNonQuery();
                            FreightPk = Convert.ToInt64(_with36.Parameters["RETURN_VALUE"].Value);
                        }
                    }
                }

                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        /// <summary>
        /// Updates the freights.
        /// </summary>
        /// <param name="PDR">The PDR.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="TrnPKValue">The TRN pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="flg_Gen_Specific">The FLG_ gen_ specific.</param>
        /// <param name="Group">The group.</param>
        /// <param name="POLGRPFK">The polgrpfk.</param>
        /// <param name="PODGRPFK">The podgrpfk.</param>
        /// <param name="HeaderPK">The header pk.</param>
        /// <returns></returns>
        private ArrayList UpdateFreights(DataRow PDR, DataTable CDT, long TrnPKValue, OracleCommand SCM, string UserName, Int16 CargoType, DataSet Gridds, int BIZ_TYPE = 0, int flg_Gen_Specific = 0, int Group = 0,
        long POLGRPFK = 0, long PODGRPFK = 0, int HeaderPK = 0)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            bool Flag = false;
            Int16 AllInRate = default(Int16);
            Int16 ChkAdvatos = default(Int16);
            long FreightPk = 0;

            arrMessage.Clear();
            try
            {
                //'Air
                if (BIZ_TYPE == 1)
                {
                    if (flg_Gen_Specific == 2)
                    {
                        var _with38 = SCM;
                        for (nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                        {
                            _with38.CommandType = CommandType.StoredProcedure;
                            _with38.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_UPD";
                            DR = CDT.Rows[nRowCnt];
                            Flag = false;
                            if (getDefault(DR["FK"], 0) == getDefault(PDR["PK"], 0))
                            {
                                var _with39 = _with38.Parameters;
                                _with39.Clear();
                                AllInRate = Convert.ToInt16((DR["SELECTED"] == "true" ? 1 : 0));
                                ChkAdvatos = Convert.ToInt16((DR["ADVATOS"] == "true" ? 1 : 0));
                                _with39.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                _with39.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_FK"]).Direction = ParameterDirection.Input;
                                _with39.Add("CHECK_FOR_ALL_IN_RT_IN", AllInRate).Direction = ParameterDirection.Input;
                                _with39.Add("CURRENCY_MST_FK_IN", DR["CURR_FK"]).Direction = ParameterDirection.Input;
                                _with39.Add("TARIFF_RATE_IN", getDefault(DR["TARIFF_RATE"], 0)).Direction = ParameterDirection.Input;
                                _with39.Add("QUOTED_RATE_IN", getDefault(DR["QUOTED_RATE"], 0)).Direction = ParameterDirection.Input;
                                if (DR["P_TYPE"].ToString() == "Collect" | DR["P_TYPE"] == "2")
                                {
                                    _with39.Add("PYMT_TYPE_IN", 2).Direction = ParameterDirection.Input;
                                }
                                else if (DR["P_TYPE"].ToString() == "Prepaid" | DR["P_TYPE"] == "1")
                                {
                                    _with39.Add("PYMT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with39.Add("PYMT_TYPE_IN", 3).Direction = ParameterDirection.Input;
                                }
                                _with39.Add("CHARGE_BASIS_IN", DR["CH_BASIS"]).Direction = ParameterDirection.Input;
                                _with39.Add("BASIS_RATE_IN", getDefault(DR["BASIS_RATE"], 0)).Direction = ParameterDirection.Input;
                                _with39.Add("FREIGHT_TYPE_IN", DR["FRT_TYPE"]).Direction = ParameterDirection.Input;
                                _with39.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                _with39.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                _with39.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                _with39.Add("CHECK_ADVATOS_IN", ChkAdvatos).Direction = ParameterDirection.Input;
                                _with39.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                                _with39.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                                _with39.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                _with38.ExecuteNonQuery();
                                FreightPk = Convert.ToInt64(_with38.Parameters["RETURN_VALUE"].Value);
                            }
                        }
                    }
                    else
                    {
                        if (Group == 1 | Group == 2)
                        {
                            for (nRowCnt = 0; nRowCnt <= Gridds.Tables[1].Rows.Count - 1; nRowCnt++)
                            {
                                if (POLGRPFK == Convert.ToInt16(Gridds.Tables[1].Rows[nRowCnt]["POL_GRP_FK"]) & PODGRPFK == Convert.ToInt16(Gridds.Tables[1].Rows[nRowCnt]["POD_GRP_FK"]))
                                {
                                    if (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "1")
                                    {
                                        var _with40 = SCM;
                                        _with40.CommandType = CommandType.StoredProcedure;
                                        _with40.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_UPD";
                                        var _with41 = _with40.Parameters;
                                        _with41.Clear();
                                        _with41.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                        _with41.Add("FREIGHT_ELEMENT_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with41.Add("CHECK_FOR_ALL_IN_RT_IN", (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        _with41.Add("CURRENCY_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with41.Add("TARIFF_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with41.Add("QUOTED_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with41.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                        _with41.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                        _with41.Add("PYMT_TYPE_IN", "").Direction = ParameterDirection.Input;
                                        _with41.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                        _with41.Add("CHECK_ADVATOS_IN", (Gridds.Tables[1].Rows[nRowCnt]["ADVATOS"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        //'Added By Koteshwari
                                        _with41.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"])).Direction = ParameterDirection.Input;
                                        if (CargoType == 4)
                                        {
                                            _with41.Add("ROE_IN", DR["EXCHANGE_RATE"]).Direction = ParameterDirection.Input;
                                        }
                                        else
                                        {
                                            _with41.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                        }
                                        _with41.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                                        _with41.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                        _with40.ExecuteNonQuery();
                                        FreightPk = Convert.ToInt64(_with40.Parameters["RETURN_VALUE"].Value);
                                        arrMessage = SaveSlabs(Gridds, Convert.ToInt16(nRowCnt), FreightPk, SCM, UserName, Group);
                                        if (arrMessage.Count > 0)
                                        {
                                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                            {
                                                arrMessage.Add("All data saved successfully");
                                            }
                                            else
                                            {
                                                return arrMessage;
                                            }
                                        }
                                    }
                                }
                                //End If
                            }
                        }
                        else
                        {
                            var _with42 = SCM;
                            _with42.CommandType = CommandType.StoredProcedure;
                            for (nRowCnt = 0; nRowCnt <= Gridds.Tables[1].Rows.Count - 1; nRowCnt++)
                            {
                                if (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "1")
                                {
                                    if (Convert.ToInt16(Gridds.Tables[1].Rows[nRowCnt]["FK"]) == HeaderPK)
                                    {
                                        _with42.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_UPD";
                                        var _with43 = _with42.Parameters;
                                        _with43.Clear();
                                        _with43.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                                        _with43.Add("FREIGHT_ELEMENT_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with43.Add("CHECK_FOR_ALL_IN_RT_IN", (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        _with43.Add("CURRENCY_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                                        _with43.Add("TARIFF_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with43.Add("QUOTED_RATE_IN", 0).Direction = ParameterDirection.Input;
                                        _with43.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                                        _with43.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                                        _with43.Add("PYMT_TYPE_IN", "").Direction = ParameterDirection.Input;
                                        _with43.Add("SURCHARGE_IN", "").Direction = ParameterDirection.Input;
                                        _with43.Add("CHECK_ADVATOS_IN", (Gridds.Tables[1].Rows[nRowCnt]["ADVATOS"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                                        //'Added By Koteshwari
                                        _with43.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["QUOTED_MIN_RATE"])).Direction = ParameterDirection.Input;
                                        _with43.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                                        _with43.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                                        _with43.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                        _with42.ExecuteNonQuery();
                                        FreightPk = Convert.ToInt64(_with42.Parameters["RETURN_VALUE"].Value);
                                        arrMessage = SaveSlabs(Gridds, Convert.ToInt16(nRowCnt), FreightPk, SCM, UserName, Group);
                                        if (arrMessage.Count > 0)
                                        {
                                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                                            {
                                                arrMessage.Add("All data saved successfully");
                                            }
                                            else
                                            {
                                                return arrMessage;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    arrMessage.Add("All data saved successfully");
                }
                else
                {
                    var _with44 = SCM;
                    for (nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                    {
                        _with44.CommandType = CommandType.StoredProcedure;
                        _with44.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_UPD";
                        DR = CDT.Rows[nRowCnt];
                        Flag = false;
                        if (CargoType == 1)
                        {
                            if (!string.IsNullOrEmpty(DR["REF_NO"].ToString()))
                            {
                                if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["CNTR_PK"] == PDR["CNTR_PK"])
                                {
                                    Flag = true;
                                }
                            }
                            else
                            {
                                Flag = true;
                            }
                        }
                        else if (CargoType == 2)
                        {
                            if (!string.IsNullOrEmpty(DR["REF_NO"].ToString()))
                            {
                                if (DR["REF_NO"] == PDR["REF_NO"] & DR["POL_PK"] == PDR["POL_PK"] & DR["POD_PK"] == PDR["POD_PK"] & DR["LCLBASIS"] == PDR["LCL_BASIS"])
                                {
                                    Flag = true;
                                }
                            }
                            else
                            {
                                Flag = true;
                            }
                        }
                        else
                        {
                            Flag = true;
                        }
                        if (Flag == true)
                        {
                            var _with45 = _with44.Parameters;
                            _with45.Clear();
                            AllInRate = Convert.ToInt16((DR["SELECTED"] == "true" ? 1 : 0));
                            ChkAdvatos = (Convert.ToInt16((string.IsNullOrEmpty(DR["ADVATOS"].ToString()) ? "false" : DR["ADVATOS"]) == "true" ? 1 : 0));
                            _with45.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                            _with45.Add("CHECK_FOR_ALL_IN_RT_IN", AllInRate).Direction = ParameterDirection.Input;
                            _with45.Add("TARIFF_RATE_IN", (string.IsNullOrEmpty(DR["FINAL_RATE"].ToString()) ? 0 : DR["FINAL_RATE"])).Direction = ParameterDirection.Input;
                            _with45.Add("CURRENCY_MST_FK_IN", DR["CURR_PK"]).Direction = ParameterDirection.Input;
                            _with45.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_PK"]).Direction = ParameterDirection.Input;
                            if (DR["PYTPE"].ToString() == "Collect" | DR["PYTPE"] == "2")
                            {
                                _with45.Add("PYMT_TYPE_IN", 2).Direction = ParameterDirection.Input;
                            }
                            else if (DR["PYTPE"].ToString() == "PrePaid" | DR["PYTPE"] == "1")
                            {
                                _with45.Add("PYMT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                            }
                            else
                            {
                                _with45.Add("PYMT_TYPE_IN", 3).Direction = ParameterDirection.Input;
                            }
                            _with45.Add("SURCHARGE_IN", DR["SURCHARGE"]).Direction = ParameterDirection.Input;
                            _with45.Add("QUOTED_RATE_IN", (string.IsNullOrEmpty(DR["QUOTERATE"].ToString()) ? 0 : DR["QUOTERATE"])).Direction = ParameterDirection.Input;
                            _with45.Add("FREIGHT_TYPE_IN", 1).Direction = ParameterDirection.Input;
                            _with45.Add("APPROVED_RATE_IN", "").Direction = ParameterDirection.Input;
                            _with45.Add("CHECK_ADVATOS_IN", ChkAdvatos).Direction = ParameterDirection.Input;
                            if (CargoType == 1)
                            {
                                _with45.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                            }
                            else
                            {
                                _with45.Add("QUOTED_MIN_RATE_IN", (string.IsNullOrEmpty(DR["QUOTE_MIN_RATE"].ToString()) ? 0 : DR["QUOTE_MIN_RATE"])).Direction = ParameterDirection.Input;
                            }
                            _with45.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                            _with45.Add("FINAL_AMOUNT_IN", (string.IsNullOrEmpty(DR["FINAL_RATE"].ToString()) ? 0 : DR["FINAL_RATE"])).Direction = ParameterDirection.Input;
                            if (CargoType == 4)
                            {
                                _with45.Add("ROE_IN", DR["EXCHANGE_RATE"]).Direction = ParameterDirection.Input;
                            }
                            else
                            {
                                _with45.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                            }
                            _with45.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with44.ExecuteNonQuery();
                            FreightPk = Convert.ToInt64(_with44.Parameters["RETURN_VALUE"].Value);
                        }
                    }
                    arrMessage.Add("All data saved successfully");
                }
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Freight Elemenmts "

        #region " Protocol No Generation "

        /// <summary>
        /// Generates the quote no.
        /// </summary>
        /// <param name="nLocationId">The n location identifier.</param>
        /// <param name="nEmployeeId">The n employee identifier.</param>
        /// <param name="nCreatedBy">The n created by.</param>
        /// <param name="ObjWK">The object wk.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <param name="BIZ_TYPE">Type of the bi z_.</param>
        /// <param name="POLID">The polid.</param>
        /// <param name="PODID">The podid.</param>
        /// <returns></returns>
        public new string GenerateQuoteNo(long nLocationId, long nEmployeeId, long nCreatedBy, WorkFlow ObjWK = null, int PROCESS_TYPE = 0, int BIZ_TYPE = 0, string POLID = "", string PODID = "")
        {
            string protocolID = "";
            if (BIZ_TYPE == 2)
            {
                //'Export
                if (PROCESS_TYPE == 1)
                {
                    protocolID = "QUOTATION (SEA)";
                }
                else
                {
                    protocolID = "IMPORT QUOTATION SEA";
                }
            }
            else
            {
                //'Export
                if (PROCESS_TYPE == 1)
                {
                    protocolID = "QUOTATION (AIR)";
                }
                else
                {
                    protocolID = "IMPORT QUOTATION AIR";
                }
            }
            return GenerateProtocolKey(protocolID, nLocationId, nEmployeeId, DateTime.Now, "", "", POLID, nCreatedBy, ObjWK, "", PODID);
        }

        #endregion " Protocol No Generation "

        #endregion " Save Quotation "

        #region " Get Address of Quotation "

        /// <summary>
        /// Gets the address of quotation.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <returns></returns>
        public DataTable GetAddressOfQuotation(long QuotationPK)
        {
            string strSQL = null;
            strSQL = " Select COL_PLACE_MST_FK, col.PLACE_CODE colplace, CMT.COL_ADDRESS," + " DEL_PLACE_MST_FK, del.PLACE_CODE delplace,CMT.DEL_ADDRESS " + " from PLACE_MST_TBL col, PLACE_MST_TBL del, QUOTATION_MST_TBL q ,CUSTOMER_MST_TBL CMT" + " where q.COL_PLACE_MST_FK = col.PLACE_PK(+) and " + "       q.DEL_PLACE_MST_FK = del.PLACE_PK(+) and " + "       Q.CUSTOMER_MST_FK=CMT.CUSTOMER_MST_PK and " + "       QUOTATION_MST_PK = " + QuotationPK;
            try
            {
                return (new WorkFlow()).GetDataTable(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the address of customer.
        /// </summary>
        /// <param name="CustomerPK">The customer pk.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <returns></returns>
        public DataTable GetAddressOfCustomer(long CustomerPK, Int16 CustomerType)
        {
            string strSQL = null;
            strSQL = " Select '' COL_PLACE_MST_FK, '' colplace, COL_ADDRESS, " + " '' DEL_PLACE_MST_FK, '' delplace, DEL_ADDRESS " + " from V_ALL_CUSTOMER cm " + " where cm.CUSTOMER_MST_PK = " + CustomerPK + "   and cm.CUSTOMER_TYPE = " + CustomerType;
            try
            {
                return (new WorkFlow()).GetDataTable(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Get Address of Quotation "

        #region " Update Quotation [ Status ] "

        /// <summary>
        /// Updates the quotation.
        /// </summary>
        /// <param name="HDT">The HDT.</param>
        /// <param name="PDT">The PDT.</param>
        /// <param name="CDT">The CDT.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="DSCalculator">The ds calculator.</param>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="Status">The status.</param>
        /// <param name="ExpectedShipmentDate">The expected shipment date.</param>
        /// <param name="remarks">The remarks.</param>
        /// <param name="CargoMoveCode">The cargo move code.</param>
        /// <param name="Header">The header.</param>
        /// <param name="Footer">The footer.</param>
        /// <param name="updation">The updation.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="chkAIF">The CHK aif.</param>
        /// <param name="Process_Type">Type of the process_.</param>
        /// <param name="Biz_Type">Type of the biz_.</param>
        /// <param name="Customer_Approved">if set to <c>true</c> [customer_ approved].</param>
        /// <param name="Options">The options.</param>
        /// <param name="flg_Gen_Specific">The FLG_ gen_ specific.</param>
        /// <param name="PolPk">The pol pk.</param>
        /// <param name="Podpk">The podpk.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <param name="PLRPK">The PLRPK.</param>
        /// <param name="PFDPK">The PFDPK.</param>
        /// <param name="PLRTransPK">The PLR trans pk.</param>
        /// <param name="PFDTransPK">The PFD trans pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Restricted">The restricted.</param>
        /// <param name="salesexecutive">The salesexecutive.</param>
        /// <returns></returns>
        public ArrayList UpdateQuotation(DataTable HDT, DataTable PDT, DataTable CDT, DataTable OthDT, DataSet GridDS, DataSet DSCalculator, string QuotationPk, string ValidFor, Int16 CargoType, string Status,
        string ExpectedShipmentDate, string remarks, string CargoMoveCode, string Header = "", string Footer = "", Int32 updation = 0, int PYMTType = 0, int INCOTerms = 0, Int32 chkAIF = 0, int Process_Type = 0,
        int Biz_Type = 0, bool Customer_Approved = false, object Options = null, int flg_Gen_Specific = 0, int PolPk = 0, int Podpk = 0, string Measure = "", string Wt = "", string DivFac = "", int PLRPK = 0,
        int PFDPK = 0, int PLRTransPK = 0, int PFDTransPK = 0, int Group = 0, Int16 Restricted = 0, Int16 salesexecutive = 0)
        {
            WorkFlow objWK = new WorkFlow();
            OracleTransaction TRAN = null;
            Int32 prvstatus = default(Int32);
            StringBuilder strquery = new StringBuilder();
            objWK.OpenConnection();
            TRAN = objWK.MyConnection.BeginTransaction();
            arrMessage.Clear();
            objWK.MyCommand.Transaction = TRAN;
            try
            {
                //modified by Thiyagarajan on 1/7/08 for fcl and lcl quotation task
                if (updation <= 1)
                {
                    var _with46 = objWK.MyCommand;
                    _with46.CommandType = CommandType.StoredProcedure;
                    _with46.CommandText = objWK.MyUserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_MST_TBL_UPD";
                    var _with47 = _with46.Parameters;
                    //.Clear()
                    // OracleDbType.Number, 10
                    _with47.Add("QUOTATION_MST_PK_IN", QuotationPk).Direction = ParameterDirection.Input;
                    _with47.Add("VALID_FOR_IN", ValidFor).Direction = ParameterDirection.Input;
                    _with47.Add("STATUS_IN", Status).Direction = ParameterDirection.Input;
                    _with47.Add("EXPECTED_SHIPMENT_DT_IN", ExpectedShipmentDate).Direction = ParameterDirection.Input;
                    _with47.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                    _with47.Add("VERSION_NO_IN", Version_No).Direction = ParameterDirection.Input;
                    _with47.Add("CONFIG_PK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                    _with47.Add("COL_PLACE_MST_FK_IN", OracleDbType.Int32, 10).Direction = ParameterDirection.Input;
                    _with47.Add("COL_ADDRESS_IN", OracleDbType.Varchar2, 200).Direction = ParameterDirection.Input;
                    _with47.Add("DEL_PLACE_MST_FK_IN", OracleDbType.Int32, 10).Direction = ParameterDirection.Input;
                    _with47.Add("DEL_ADDRESS_IN", OracleDbType.Varchar2, 200).Direction = ParameterDirection.Input;
                    _with47.Add("REMARKS_IN", OracleDbType.Varchar2, 250).Direction = ParameterDirection.Input;
                    _with47.Add("CARGO_MOVE_CODE_IN", OracleDbType.Int32, 10).Direction = ParameterDirection.Input;
                    _with47.Add("Header_IN", OracleDbType.Varchar2, 2000).Direction = ParameterDirection.Input;
                    _with47.Add("Footer_IN", OracleDbType.Varchar2, 2000).Direction = ParameterDirection.Input;
                    _with47.Add("SHIPPING_TERMS_MST_PK_IN", INCOTerms).Direction = ParameterDirection.Input;
                    _with47.Add("COMMODITY_GROUP_MST_FK_IN", getDefault(HDT.Rows[0]["COMMODITY_GROUP_MST_FK"], "")).Direction = ParameterDirection.Input;
                    _with47.Add("AIF_FLAG_IN", chkAIF).Direction = ParameterDirection.Input;
                    _with47.Add("PYMTType_IN", PYMTType).Direction = ParameterDirection.Input;
                    _with47.Add("PROCESS_TYPE_IN", getDefault(Process_Type, 0)).Direction = ParameterDirection.Input;
                    _with47.Add("CUSTOMER_APPROVED_IN", (Customer_Approved ? 1 : 0)).Direction = ParameterDirection.Input;
                    _with47.Add("RESTRICTED_IN", Restricted).Direction = ParameterDirection.Input;
                    _with47.Add("EXECUTIVE_MST_FK_IN", salesexecutive).Direction = ParameterDirection.Input;
                    _with47.Add("RETURN_VALUE", OracleDbType.Varchar2, 20, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with46.Parameters["COL_PLACE_MST_FK_IN"].Value = getDefault(HDT.Rows[0]["COL_PLACE_MST_FK"], "");
                    _with46.Parameters["COL_ADDRESS_IN"].Value = getDefault(HDT.Rows[0]["COL_ADDRESS"], "");
                    //
                    _with46.Parameters["DEL_PLACE_MST_FK_IN"].Value = getDefault(HDT.Rows[0]["DEL_PLACE_MST_FK"], "");
                    _with46.Parameters["DEL_ADDRESS_IN"].Value = getDefault(HDT.Rows[0]["DEL_ADDRESS"], "");
                    _with46.Parameters.Add("THIRD_PARTY_FRTPAYER_FK_IN", getDefault(HDT.Rows[0]["THIRD_PARTY_FRTPAYER_FK"], "")).Direction = ParameterDirection.Input;
                    _with46.Parameters["THIRD_PARTY_FRTPAYER_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with46.Parameters.Add("TARIFF_AGENT_MST_FK_IN", getDefault(HDT.Rows[0]["TARIFF_AGENT_MST_FK"], "")).Direction = ParameterDirection.Input;
                    _with46.Parameters["TARIFF_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    _with46.Parameters.Add("COLLECT_AGENT_FLAG_IN", HDT.Rows[0]["COLLECT_AGENT_FLAG"]).Direction = ParameterDirection.Input;
                    _with46.Parameters["COLLECT_AGENT_FLAG_IN"].SourceVersion = DataRowVersion.Current;

                    _with46.Parameters["REMARKS_IN"].Value = getDefault(remarks, "");
                    _with46.Parameters["CARGO_MOVE_CODE_IN"].Value = getDefault(CargoMoveCode, "");
                    _with46.Parameters["Header_IN"].Value = getDefault(Header, "");
                    _with46.Parameters["Footer_IN"].Value = getDefault(Footer, "");

                    _with46.ExecuteNonQuery();
                    _PkValue = Convert.ToInt64(objWK.MyCommand.Parameters["RETURN_VALUE"].Value);
                }
                if (updation > 1)
                {
                    _PkValue = Convert.ToInt64(QuotationPk);
                }

                //arrMessage = UpdateTransaction(PDT, CDT, OthDT, GridDS, _PkValue, objWK.MyCommand, objWK.MyUserName, CargoType, Process_Type, Biz_Type,Options, flg_Gen_Specific, PolPk, Podpk, PLRPK, PFDPK, PLRTransPK, PFDTransPK, Group);

                if (prvstatus != 2 & prvstatus != 3)
                {
                    updateOthCharge(PDT, OthDT, DSCalculator, objWK.MyCommand, objWK.MyUserName, Measure, Wt, DivFac);
                }
                if ((HttpContext.Current.Session["SessionLocalCharges"] != null))
                {
                    SaveLocalCharges(objWK.MyCommand, objWK.MyUserName, (DataSet)HttpContext.Current.Session["SessionLocalCharges"], _PkValue, 2);
                }

                if ((CDT != null))
                {
                    try
                    {
                        string CurrFKs = "0";
                        System.DateTime ContractDt = default(System.DateTime);
                        cls_Operator_Contract objContract = new cls_Operator_Contract();
                        ContractDt = Convert.ToDateTime(HDT.Rows[0]["QUOTATION_DATE"]);
                        for (int nRowCnt = 0; nRowCnt <= CDT.Rows.Count - 1; nRowCnt++)
                        {
                            if (CDT.Rows[nRowCnt]["SELECTED"] == "true" | CDT.Rows[nRowCnt]["SELECTED"] == "1")
                            {
                                CurrFKs += ',' + CDT.Rows[nRowCnt]["CURR_PK"].ToString();
                            }
                        }
                        objContract.UpdateTempExRate(_PkValue, objWK, CurrFKs, ContractDt, "QUOTATION");
                    }
                    catch (Exception ex)
                    {
                    }
                }
                if (arrMessage.Count > 0)
                {
                    if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                    {
                        TRAN.Commit();
                        arrMessage.Add("All data saved successfully");
                    }
                    else
                    {
                        TRAN.Rollback();
                        errors = 1;
                    }
                }
                else
                {
                    TRAN.Commit();
                    arrMessage.Add("All data saved successfully");
                }
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                TRAN.Rollback();
                errors = 1;
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                TRAN.Rollback();
                errors = 1;
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
            finally
            {
                objWK.MyCommand.Connection.Close();
            }
        }

        /// <summary>
        /// Gets the status.
        /// </summary>
        /// <param name="pk">The pk.</param>
        /// <returns></returns>
        public int getStatus(string pk)
        {
            StringBuilder strQuery = new StringBuilder();
            OracleDataReader dr = null;
            try
            {
                strQuery.Append("SELECT STATUS");
                strQuery.Append("FROM QUOTATION_MST_TBL AIR");
                strQuery.Append("WHERE AIR.QUOTATION_MST_PK =");
                strQuery.Append(pk);
                dr = (new WorkFlow()).GetDataReader(strQuery.ToString());
                while (dr.Read())
                {
                    return Convert.ToInt32(dr[0]);
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                return 0;
            }
            finally
            {
                dr.Close();
            }
            return 0;
        }

        /// <summary>
        /// Updates the oth charge.
        /// </summary>
        /// <param name="PDT">The PDT.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="DSCalculator">The ds calculator.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <returns></returns>
        private ArrayList updateOthCharge(DataTable PDT, DataTable OthDT, DataSet DSCalculator, OracleCommand SCM, string UserName, string Measure = "", string Wt = "", string DivFac = "")
        {
            DataRow Pdr = null;
            DataRow Odr = null;
            int delFlage = 0;

            try
            {
                foreach (DataRow Pdr_loopVariable in PDT.Rows)
                {
                    Pdr = Pdr_loopVariable;
                    delFlage = 1;
                    foreach (DataRow Odr_loopVariable in OthDT.Rows)
                    {
                        Odr = Odr_loopVariable;
                        SCM.CommandType = CommandType.StoredProcedure;
                        SCM.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOT_OTHER_FREIGHT_TRN_UPD";
                        if (Odr["QUOTATION_DTL_FK"] == Pdr["FK"])
                        {
                            var _with1 = SCM.Parameters;
                            _with1.Clear();
                            _with1.Add("DEL_FLAG", delFlage);
                            _with1.Add("QUOTATION_MST_FK_IN", Odr["QUOTATION_DTL_FK"]);
                            _with1.Add("FREIGHT_ELEMENT_MST_FK_IN", Odr["FREIGHT_ELEMENT_MST_FK"]);
                            _with1.Add("CURRENCY_MST_FK_IN", Odr["CURRENCY_MST_FK"]);
                            _with1.Add("AMOUNT_IN", getDefault(Odr["AMOUNT"], 0));
                            _with1.Add("FREIGHT_TYPE_IN", getDefault(Odr["PYMT_TYPE"], 1)).Direction = ParameterDirection.Input;
                            _with1.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                            _with1.Add("RETURN_VALUE", OracleDbType.Varchar2, 20, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            delFlage += SCM.ExecuteNonQuery();
                        }
                    }
                    if ((DSCalculator != null))
                    {
                        foreach (DataRow dr_loopVariable in DSCalculator.Tables[0].Rows)
                        {
                            DataRow dr = dr_loopVariable;
                            SCM.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_CARGO_CALC_UPD";
                            if (dr["FK"] == Pdr["PK"])
                            {
                                var _with2 = SCM.Parameters;
                                _with2.Clear();
                                _with2.Add("DEL_FLAG", delFlage);
                                _with2.Add("QUOTATION_DTL_FK_IN", dr["FK"]).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_NOP_IN", getDefault(dr["NOP"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_LENGTH_IN", getDefault(dr["Length"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_WIDTH_IN", getDefault(dr["Width"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_HEIGHT_IN", getDefault(dr["Height"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_CUBE_IN", getDefault(dr["Cube"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_VOLUME_WT_IN", getDefault(dr["VolWeight"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_ACTUAL_WT_IN", getDefault(dr["ActWeight"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_DENSITY_IN", getDefault(dr["Density"], 0)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_MEASURE_IN", (string.IsNullOrEmpty(Measure) ? "0" : Measure)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_WT_IN", (string.IsNullOrEmpty(Wt) ? "0" : Wt)).Direction = ParameterDirection.Input;
                                _with2.Add("CARGO_DIVFAC_IN", (string.IsNullOrEmpty(DivFac) ? "0" : DivFac)).Direction = ParameterDirection.Input;
                                _with2.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                delFlage += SCM.ExecuteNonQuery();
                            }
                        }
                    }
                    //arrMessage = SaveTransactionSpecialReq(SCM, UserName, getDefault(Pdr.Item("strSpclReq"), ""), Pdr.Item("FK"), Pdr.Item("COMM_GRPPK"))
                    //If Pdr.Item("COMM_GRPPK") = HAZARDOUS Then
                    //    arrMessage = SaveTransactionHZSpcl(SCM, UserName, getDefault(Pdr.Item("strSpclReq"), ""), Pdr.Item("FK"), HAZARDOUS)
                    //ElseIf Pdr.Item("COMM_GRPPK") = REEFER Then
                    //    arrMessage = SaveTransactionReefer(SCM, UserName, getDefault(Pdr.Item("strSpclReq"), ""), Pdr.Item("FK"))
                    //ElseIf Pdr.Item("COMM_GRPPK") = ODC Then
                    //    arrMessage = SaveTransactionODC(SCM, UserName, getDefault(Pdr.Item("strSpclReq"), ""), Pdr.Item("FK"))
                    //End If
                    if (arrMessage.Count > 0)
                    {
                        if (string.Compare(Convert.ToString(arrMessage[0].ToString()).ToUpper(), "SAVED") == 0)
                        {
                            return arrMessage;
                        }
                    }
                }
                arrMessage.Add("saved");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        /// <summary>
        /// Saves the local charges.
        /// </summary>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="dsLocalChrgs">The ds local CHRGS.</param>
        /// <param name="Quotation_Mst_fk">The quotation_ MST_FK.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="FromFlg">From FLG.</param>
        /// <param name="Qout_Type">Type of the qout_.</param>
        /// <param name="QuotOrBkgFlag">The quot or BKG flag.</param>
        /// <returns></returns>
        public ArrayList SaveLocalCharges(OracleCommand SCM, string UserName, DataSet dsLocalChrgs, long Quotation_Mst_fk = 0, int BizType = 2, bool AmendFlg = false, int FromFlg = 0, int Qout_Type = 0, int QuotOrBkgFlag = 1)
        {
            int Rcnt = 0;
            DataRow Odr = null;
            int delFlage = 0;
            string QoutLocDtlPKs = "0";

            try
            {
                if (dsLocalChrgs.Tables[0].Rows.Count > 0)
                {
                    for (Rcnt = 0; Rcnt <= dsLocalChrgs.Tables[0].Rows.Count - 1; Rcnt++)
                    {
                        if (AmendFlg == true)
                        {
                            dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOTATION_LOCAL_PK"] = "";
                        }
                        if (!string.IsNullOrEmpty(dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOTATION_LOCAL_PK"].ToString()) & (dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOTATION_LOCAL_PK"] != null))
                        {
                            if (Convert.ToString(dsLocalChrgs.Tables[0].Rows[Rcnt]["SEL"]) == "TRUE" | Convert.ToBoolean(dsLocalChrgs.Tables[0].Rows[Rcnt]["SEL"]) == true)
                            {
                                QoutLocDtlPKs += ',' + dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOTATION_LOCAL_PK"].ToString();
                                SCM.CommandType = CommandType.StoredProcedure;
                                SCM.CommandText = UserName + ".QUOTATION_LOCAL_CHRG_PKG.QUOTATION_LOCAL_TRN_UPD";
                                var _with50 = SCM.Parameters;
                                _with50.Clear();
                                _with50.Add("QUOTATION_LOCAL_PK_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOTATION_LOCAL_PK"]);
                                _with50.Add("TARIFF_TRN_FK_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["TARIFF_PK"]);
                                _with50.Add("MINIMUM_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_MINAMT"]);
                                _with50.Add("SHIPMENT_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_SHIPMENT_AMT"]);
                                _with50.Add("CONT_20_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_CONT_20_AMT"]);
                                _with50.Add("CONT_40_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_CONT_40_AMT"]).Direction = ParameterDirection.Input;
                                _with50.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                                _with50.Add("PROCESS_TYPE_IN", (FromFlg == 0 ? 1 : 2)).Direction = ParameterDirection.Input;
                                _with50.Add("LAST_MODIFIED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                _with50.Add("CONFIG_MST_FK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                                _with50.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                SCM.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            if (dsLocalChrgs.Tables[0].Rows[Rcnt]["SEL"] == "TRUE" | Convert.ToBoolean(dsLocalChrgs.Tables[0].Rows[Rcnt]["SEL"]) == true)
                            {
                                SCM.CommandType = CommandType.StoredProcedure;
                                SCM.CommandText = UserName + ".QUOTATION_LOCAL_CHRG_PKG.QUOTATION_LOCAL_TRN_INS";
                                var _with51 = SCM.Parameters;
                                _with51.Clear();
                                _with51.Add("QUOTATION_MST_FK_IN", Quotation_Mst_fk);
                                _with51.Add("TARIFF_TRN_FK_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["TARIFF_PK"]);
                                _with51.Add("MINIMUM_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_MINAMT"]);
                                _with51.Add("SHIPMENT_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_SHIPMENT_AMT"]);
                                _with51.Add("CONT_20_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_CONT_20_AMT"]);
                                _with51.Add("CONT_40_AMT_IN", dsLocalChrgs.Tables[0].Rows[Rcnt]["QUOT_CONT_40_AMT"]).Direction = ParameterDirection.Input;
                                _with51.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                                _with51.Add("PROCESS_TYPE_IN", (FromFlg == 0 ? 1 : 2)).Direction = ParameterDirection.Input;
                                _with51.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                                _with51.Add("CONFIG_MST_FK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                                _with51.Add("FROM_FLAG_IN", QuotOrBkgFlag).Direction = ParameterDirection.Input;
                                _with51.Add("QUOT_TYPE_IN", Qout_Type).Direction = ParameterDirection.Input;
                                _with51.Add("RETURN_VALUE", OracleDbType.Varchar2, 150, "RETURN_VALUE").Direction = ParameterDirection.Output;
                                SCM.ExecuteNonQuery();
                                QoutLocDtlPKs += ',' + SCM.Parameters["RETURN_VALUE"].Value.ToString();
                            }
                        }
                    }
                    if (QoutLocDtlPKs.Length > 0)
                    {
                        SCM.CommandType = CommandType.StoredProcedure;
                        SCM.CommandText = UserName + ".QUOTATION_LOCAL_CHRG_PKG.QUOTATION_LOCAL_TRN_DEL";
                        var _with52 = SCM.Parameters;
                        _with52.Clear();
                        _with52.Add("QUOTATION_LOCAL_PKS_IN", QoutLocDtlPKs);
                        _with52.Add("QUOTATION_MST_FK_IN", Quotation_Mst_fk);
                        _with52.Add("QUOT_TYPE_IN", Qout_Type).Direction = ParameterDirection.Input;
                        _with52.Add("FROM_FLAG_IN", QuotOrBkgFlag).Direction = ParameterDirection.Input;
                        _with52.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        SCM.ExecuteNonQuery();
                    }
                    arrMessage.Add("saved");
                    return arrMessage;
                }
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
            return new ArrayList();
        }

        #endregion " Update Quotation [ Status ] "

        #region " Header - Info. "

        /// <summary>
        /// Headers the information.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <returns></returns>
        public DataTable HeaderInfo(string QuotationPK, bool AmendFlg = false)
        {
            if (AmendFlg == true)
            {
                QuotationPK = "";
            }
            if (string.IsNullOrEmpty(QuotationPK))
                QuotationPK = "-1";
            string strSQL = null;
            strSQL = " Select QUOTATION_MST_PK,            QUOTATION_REF_NO,                                                          to_char(QUOTATION_DATE,'" + dateFormat + "')        QUOTATION_DATE,                VALID_FOR,                                                                 CARGO_TYPE,                                                                PYMT_TYPE,                                                                 QUOTED_BY,                                                                 COL_PLACE_MST_FK,                                                          COL_ADDRESS,                                                               DEL_PLACE_MST_FK,                                                          DEL_ADDRESS,                                                               AGENT_MST_FK,                                                              STATUS,                                                                    CREATED_BY_FK,                                                             to_char(CREATED_DT,'" + dateFormat + "')            CREATED_DT,                    LAST_MODIFIED_BY_FK,                                                       to_char(LAST_MODIFIED_DT,'" + dateFormat + "')      LAST_MODIFIED_DT,              Version_No,                                                                to_char(EXPECTED_SHIPMENT_DT,'" + dateFormat + "')  EXPECTED_SHIPMENT_DT,          CUSTOMER_MST_FK,                                                           CUSTOMER_CATEGORY_MST_FK,                                                 COMMODITY_GROUP_MST_FK,                                                  SPECIAL_INSTRUCTIONS,                                                      CUST_TYPE ,                                                               CREDIT_DAYS,                                                              CREDIT_LIMIT,BASE_CURRENCY_FK,PORT_GROUP,HEADER_CONTENT,FOOTER_CONTENT,                                 THIRD_PARTY_FRTPAYER_FK,TARIFF_AGENT_MST_FK, COLLECT_AGENT_FLAG        from QUOTATION_MST_TBL                                                   Where  QUOTATION_MST_PK = " + QuotationPK;
            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            try
            {
                return (new WorkFlow()).GetDataTable(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Header - Info. "

        #region "Fetch_Fcl_Lcl_Header"

        //Public Function Header_Fcl_Lcl(ByVal QuotationPk As String) As DataSet
        //    Try
        //        Dim ObjWk As New  WorkFlow
        //        Dim strquery As New StringBuilder

        //strquery.Append("SELECT     DISTINCT                                    " & vbCrLf)
        //strquery.Append("    tran3.QUOTE_DTL_PK                     PK," & vbCrLf)
        //strquery.Append("     OPR3.OPERATOR_NAME                         OPER_NAME,    " & vbCrLf)
        //strquery.Append("     DECODE(MAIN3.PYMT_TYPE,1,'PREPAID','COLLECT') P_TYPE_ID,                 " & vbCrLf)
        //strquery.Append("     PORTPOL3.PORT_ID                           POL_ID,              " & vbCrLf)
        //strquery.Append("     PORTPOD3.PORT_ID                           POD_ID, " & vbCrLf)
        //strquery.Append("     MAIN3.QUOTATION_DATE                       VALID_FROM," & vbCrLf)
        //strquery.Append("     CNTR3.CONTAINER_TYPE_MST_ID                CNTR_ID,             " & vbCrLf)
        //strquery.Append("     DECODE(MAIN3.CARGO_TYPE,1,'FCL','LCL')  CARGO_TYPE," & vbCrLf)
        //strquery.Append("      DUMT.DIMENTION_ID                                LCLBASIS " & vbCrLf)
        //strquery.Append(" FROM                                                             " & vbCrLf)
        //strquery.Append("     QUOTATION_MST_TBL              MAIN3,                           " & vbCrLf)
        //strquery.Append("     QUOTATION_DTL_TBL      TRAN3,                           " & vbCrLf)
        //strquery.Append("     PORT_MST_TBL                   PORTPOL3,                        " & vbCrLf)
        //strquery.Append("     PORT_MST_TBL                   PORTPOD3,                        " & vbCrLf)
        //strquery.Append("     OPERATOR_MST_TBL               OPR3,                            " & vbCrLf)
        //strquery.Append("     CONTAINER_TYPE_MST_TBL         CNTR3," & vbCrLf)
        //strquery.Append("     DIMENTION_UNIT_MST_TBL          DUMT                            " & vbCrLf)
        //strquery.Append("   WHERE    MAIN3.QUOTATION_MST_PK      = TRAN3.QUOTATION_MST_FK             " & vbCrLf)
        //strquery.Append("     AND    TRAN3.PORT_MST_POL_FK       = PORTPOL3.PORT_MST_PK(+)            " & vbCrLf)
        //strquery.Append("     AND    TRAN3.PORT_MST_POD_FK       = PORTPOD3.PORT_MST_PK(+)            " & vbCrLf)
        //strquery.Append("     AND    TRAN3.OPERATOR_MST_FK       = OPR3.OPERATOR_MST_PK(+)            " & vbCrLf)
        //strquery.Append("     AND    TRAN3.CONTAINER_TYPE_MST_FK = CNTR3.CONTAINER_TYPE_MST_PK(+)     " & vbCrLf)
        //strquery.Append("     AND    TRAN3.BASIS = DUMT.DIMENTION_UNIT_MST_PK(+)" & vbCrLf)
        //strquery.Append("     AND    MAIN3.QUOTATION_MST_PK =  " & QuotationPk)
        //        strquery.Append(" SELECT     DISTINCT                                    " & vbCrLf)
        //        strquery.Append("     MAIN3.QUOTATION_MST_PK                     PK," & vbCrLf)
        //        strquery.Append("     0                     Fk," & vbCrLf)
        //        strquery.Append("     OPR3.OPERATOR_NAME                         OPER_NAME,    " & vbCrLf)
        //        strquery.Append("     DECODE(MAIN3.PYMT_TYPE,1,'PREPAID','COLLECT') P_TYPE_ID,                 " & vbCrLf)
        //        'strquery.Append("     PORTPOL3.PORT_ID                           POL_ID,              " & vbCrLf)
        //        'strquery.Append("     PORTPOD3.PORT_ID                           POD_ID, " & vbCrLf)
        //        strquery.Append("     PLG.PORT_GRP_CODE POL_ID                           ,              " & vbCrLf)
        //        strquery.Append("     PDG.PORT_GRP_CODE POD_ID                           , " & vbCrLf)

        //        strquery.Append("     MAIN3.QUOTATION_DATE                       VALID_FROM," & vbCrLf)
        //        strquery.Append("     MAIN3.HEADER_CONTENT  HEADER, " & vbCrLf)
        //        strquery.Append("     MAIN3.FOOTER_CONTENT  FOOTER, " & vbCrLf)
        //        strquery.Append("     ' '                CNTR_ID,             " & vbCrLf)
        //        'modified by Thiyagarjan on 30/6/08 for fcl and lcl quotation
        //        'strquery.Append("     DECODE(MAIN3.CARGO_TYPE,1,'FCL','LCL')  CARGO_TYPE," & vbCrLf)
        //        strquery.Append("    ( case when TRAN3.container_type_mst_fk is not null then 'FCL' else 'LCL' end )  CARGO_TYPE," & vbCrLf)
        //        'end
        //        strquery.Append("      ' '      LCLBASIS, " & vbCrLf)
        //        strquery.Append("      CMMT.CARGO_MOVE_CODE, " & vbCrLf)
        //        strquery.Append("      ' ' COMMODITY_GROUP_CODE, " & vbCrLf)
        //        strquery.Append("      SUM(NVL(TRAN3.EXPECTED_BOXES,0)) BOXES, " & vbCrLf)
        //        strquery.Append("      SUM(NVL(TRAN3.EXPECTED_WEIGHT,0)) WEIGHT, " & vbCrLf)
        //        strquery.Append("      SUM(NVL(TRAN3.EXPECTED_VOLUME,0)) VOLUME " & vbCrLf)
        //        strquery.Append(" FROM                                                             " & vbCrLf)
        //        strquery.Append("     QUOTATION_MST_TBL              MAIN3,                           " & vbCrLf)
        //        strquery.Append("     QUOTATION_DTL_TBL      TRAN3,                           " & vbCrLf)
        //        strquery.Append("     PORT_MST_TBL                   PORTPOL3,                        " & vbCrLf)
        //        strquery.Append("     PORT_MST_TBL                   PORTPOD3,                        " & vbCrLf)
        //        strquery.Append("     OPERATOR_MST_TBL               OPR3,                            " & vbCrLf)
        //        strquery.Append("     CONTAINER_TYPE_MST_TBL         CNTR3," & vbCrLf)
        //        strquery.Append("     DIMENTION_UNIT_MST_TBL          DUMT, PORT_GROUP_MST_TBL        PLG,PORT_GROUP_MST_TBL        PDG,CARGO_MOVE_MST_TBL        CMMT                            " & vbCrLf)
        //        strquery.Append("   WHERE    MAIN3.QUOTATION_MST_PK      = TRAN3.QUOTATION_MST_FK             " & vbCrLf)
        //        strquery.Append("     AND    TRAN3.PORT_MST_POL_FK       = PORTPOL3.PORT_MST_PK(+)            " & vbCrLf)
        //        strquery.Append("     AND    TRAN3.PORT_MST_POD_FK       = PORTPOD3.PORT_MST_PK(+)            " & vbCrLf)
        //        strquery.Append("     AND    TRAN3.OPERATOR_MST_FK       = OPR3.OPERATOR_MST_PK(+)            " & vbCrLf)
        //        strquery.Append("     AND    TRAN3.CONTAINER_TYPE_MST_FK = CNTR3.CONTAINER_TYPE_MST_PK(+)     " & vbCrLf)
        //        strquery.Append("     AND MAIN3.CUSTOMER_MST_FK = CMMT.CARGO_MOVE_PK(+) " & vbCrLf)
        //        strquery.Append("     AND    TRAN3.BASIS = DUMT.DIMENTION_UNIT_MST_PK(+)  AND PLG.PORT_GRP_MST_PK = PORTPOL3.PORT_GRP_MST_FK  AND PDG.PORT_GRP_MST_PK = PORTPOD3.PORT_GRP_MST_FK " & vbCrLf)
        //        strquery.Append("     AND    MAIN3.QUOTATION_MST_PK =  " & QuotationPk)
        //        strquery.Append("     GROUP BY MAIN3.QUOTATION_MST_PK ," & vbCrLf)
        //        strquery.Append("     OPR3.OPERATOR_NAME," & vbCrLf)
        //        strquery.Append("     MAIN3.PYMT_TYPE," & vbCrLf)
        //        strquery.Append("     PLG.PORT_GRP_CODE," & vbCrLf)
        //        strquery.Append("     PDG.PORT_GRP_CODE," & vbCrLf)
        //        strquery.Append("     MAIN3.QUOTATION_DATE," & vbCrLf)
        //        strquery.Append("     MAIN3.HEADER_CONTENT," & vbCrLf)
        //        strquery.Append("     MAIN3.FOOTER_CONTENT ," & vbCrLf)
        //        strquery.Append("     TRAN3.CONTAINER_TYPE_MST_FK ," & vbCrLf)
        //        strquery.Append("     CMMT.CARGO_MOVE_CODE " & vbCrLf)

        //    Return ObjWk.GetDataSet(strquery.ToString)
        //    Catch Oraexp As OracleException
        //        Throw Oraexp
        //    Catch ex As Exception
        //        Throw ex
        //    End Try
        //End Function

        #endregion "Fetch_Fcl_Lcl_Header"

        #region "Fetch_Fcl_Lcl_Header"

        /// <summary>
        /// Fetches the currency summary.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet fetchCurrencySummary(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder sb = new StringBuilder(5000);

                sb.Append("       SELECT 'Total in ' || CURRENCY_ID CURRENCY_ID, ");
                sb.Append("              SUM(CASE ");
                sb.Append("                    WHEN PYMT_TYPE = 'P' THEN ");
                sb.Append("                     QUOTERATE1 ");
                sb.Append("                    ELSE ");
                sb.Append("                     NULL ");
                sb.Append("                  END) PREPAID, ");
                sb.Append("              SUM(CASE ");
                sb.Append("                    WHEN PYMT_TYPE = 'C' THEN ");
                sb.Append("                     QUOTERATE1 ");
                sb.Append("                    ELSE ");
                sb.Append("                     NULL ");
                sb.Append("                  END) COLLECT, ");
                sb.Append("              SUM(QUOTERATE1) TOTAL ");
                sb.Append("         FROM (SELECT VCUR.CURRENCY_ID, ");
                sb.Append("                      DECODE(FRTD3.PYMT_TYPE, 2, 'C', 1,'P', 3, 'F') PYMT_TYPE, ");
                sb.Append("                      SUM(ROUND(ABS(FRTD3.QUOTED_RATE) * ");
                sb.Append("                                NVL(DECODE(FRT3.CREDIT, NULL, 1, 0, -1, 1, 1), 1) * ");
                sb.Append("                                GET_EX_RATE(FRTD3.CURRENCY_MST_FK, ");
                sb.Append("                                            VCUR.CURRENCY_MST_PK, ");
                sb.Append("                                            TO_DATE(QMT.QUOTATION_DATE, DATEFORMAT)), ");
                sb.Append("                                2)) QUOTERATE1 ");
                sb.Append("                 FROM QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL TRAN3, ");
                sb.Append("                      QUOTATION_FREIGHT_TRN FRTD3, ");
                sb.Append("                      FREIGHT_ELEMENT_MST_TBL FRT3, ");
                sb.Append("                      (SELECT CTMT.CURRENCY_MST_PK, CTMT.CURRENCY_ID ");
                sb.Append("                         FROM QUOTATION_DTL_TBL     TRAN3, ");
                sb.Append("                              QUOTATION_FREIGHT_TRN FRTD3, ");
                sb.Append("                              CURRENCY_TYPE_MST_TBL CTMT ");
                sb.Append("                        WHERE TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK ");
                sb.Append("                          AND CTMT.CURRENCY_MST_PK = FRTD3.CURRENCY_MST_FK ");
                sb.Append("                          AND TRAN3.QUOTATION_MST_FK = " + QuotationPk);
                sb.Append("                       UNION ");
                sb.Append("                       SELECT " + HttpContext.Current.Session["CURRENCY_MST_PK"] + ", '" + HttpContext.Current.Session["CURRENCY_ID"] + "' FROM DUAL) VCUR ");
                sb.Append("                WHERE QMT.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK ");
                sb.Append("                  AND VCUR.CURRENCY_MST_PK = VCUR.CURRENCY_MST_PK ");
                sb.Append("                  AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK ");
                sb.Append("                  AND TRAN3.QUOTATION_MST_FK = " + QuotationPk);
                sb.Append("                GROUP BY DECODE(FRTD3.PYMT_TYPE, 2, 'C', 'P'), VCUR.CURRENCY_ID, FRTD3.PYMT_TYPE) ");
                sb.Append("        GROUP BY CURRENCY_ID ");

                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch_Fcl_Lcl_Header"

        #region "Fetch_Fcl_Lcl_Header"

        /// <summary>
        /// Header_s the FCL_ LCL.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet Header_Fcl_Lcl(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder sb = new StringBuilder(5000);
                sb.Append("select PK,");
                sb.Append("       fk,");
                sb.Append("       OPER_NAME,");
                sb.Append("       P_TYPE_ID,");
                sb.Append("       POL_ID,");
                sb.Append("       POD_ID,");
                sb.Append("       VALID_FROM,");
                sb.Append("       HEADER,");
                sb.Append("       FOOTER,");
                sb.Append("       CNTR_ID,");
                sb.Append("       CARGO_TYPE,");
                sb.Append("       LCLBASIS,");
                sb.Append("       CARGO_MOVE_CODE,");
                sb.Append("       COMMODITY_GROUP_CODE,");
                sb.Append("       sum(BOXES) BOXES,");
                sb.Append("       sum(WEIGHT) WEIGHT,");
                sb.Append("       sum(VOLUME) VOLUME,");

                sb.Append("      (SELECT E.EMPLOYEE_NAME SALESREP");
                sb.Append("          FROM quotation_mst_tbl B, EMPLOYEE_MST_TBL E");
                sb.Append("      WHERE B.executive_mst_fk = E.EMPLOYEE_MST_PK");
                sb.Append("            AND b.quotation_mst_pk= " + QuotationPk);
                sb.Append("  )");
                sb.Append("    as Salesexecutive ");

                sb.Append("  from (SELECT DISTINCT MAIN3.QUOTATION_MST_PK PK,");
                sb.Append("                        (select qdt.quote_dtl_pk from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=main3.quotation_mst_pk and nvl(qdt.carrier_mst_fk,0)=nvl(tran3.carrier_mst_fk,0) ");
                sb.Append("                        and nvl(qdt.pol_grp_fk,0)=nvl(tran3.pol_grp_fk,0) and nvl(qdt.pod_grp_fk,0)=nvl(tran3.pod_grp_fk,0)and rownum=1) Fk,");
                sb.Append("                        NVL(UPPER(OPR3.OPERATOR_NAME),'') OPER_NAME,");
                sb.Append("                        DECODE(MAIN3.PYMT_TYPE, 1, 'PREPAID', 2,'COLLECT', 3,'FOREIGN') P_TYPE_ID,");
                sb.Append("                        CASE WHEN NVL(MAIN3.PORT_GROUP, 0) <> 0 THEN UPPER(PLG.PORT_GRP_NAME) ELSE UPPER(PORTPOL3.PORT_NAME) END POL_ID,");
                sb.Append("                        CASE WHEN NVL(MAIN3.PORT_GROUP, 0) <> 0 THEN UPPER(PDG.PORT_GRP_NAME) ELSE UPPER(PORTPOD3.PORT_NAME) END POD_ID,");
                sb.Append("                        MAIN3.QUOTATION_DATE VALID_FROM,");
                sb.Append("                        MAIN3.HEADER_CONTENT HEADER,");
                sb.Append("                        MAIN3.FOOTER_CONTENT FOOTER,");
                sb.Append("                        TRAN3.container_type_mst_fk,");
                sb.Append("                        ' ' CNTR_ID,");
                sb.Append("                        (case");
                sb.Append("                           WHEN MAIN3.BIZ_TYPE = 1  then");
                sb.Append("                           ''");
                sb.Append("                          else");
                sb.Append("                            DECODE(MAIN3.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') ");
                sb.Append("                        end) CARGO_TYPE,");
                sb.Append("                        ' ' LCLBASIS,");
                sb.Append("                        CMMT.CARGO_MOVE_CODE,");
                sb.Append("                        CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP_CODE,");
                sb.Append("                        NVL(TRAN3.EXPECTED_BOXES, 0) BOXES,");
                sb.Append("                        NVL(TRAN3.EXPECTED_WEIGHT, 0) WEIGHT,");
                sb.Append("                        NVL(TRAN3.EXPECTED_VOLUME, 0) VOLUME");
                sb.Append("          FROM QUOTATION_MST_TBL         MAIN3,");
                sb.Append("               QUOTATION_DTL_TBL TRAN3,");
                sb.Append("               PORT_MST_TBL              PORTPOL3,");
                sb.Append("               PORT_MST_TBL              PORTPOD3,");
                sb.Append("               OPERATOR_MST_TBL          OPR3,");
                sb.Append("               CONTAINER_TYPE_MST_TBL    CNTR3,");
                sb.Append("               DIMENTION_UNIT_MST_TBL    DUMT,");
                sb.Append("               PORT_GRP_MST_TBL        PLG,");
                sb.Append("               PORT_GRP_MST_TBL        PDG,");
                sb.Append("               CARGO_MOVE_MST_TBL        CMMT, COMMODITY_GROUP_MST_TBL   CGMT ");
                sb.Append("         WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
                sb.Append("           AND TRAN3.PORT_MST_POL_FK = PORTPOL3.PORT_MST_PK(+)");
                sb.Append("           AND TRAN3.PORT_MST_POD_FK = PORTPOD3.PORT_MST_PK(+)");
                sb.Append("           AND TRAN3.CARRIER_MST_FK = OPR3.OPERATOR_MST_PK(+)");
                sb.Append("           AND TRAN3.CONTAINER_TYPE_MST_FK = CNTR3.CONTAINER_TYPE_MST_PK(+)");
                sb.Append("           AND MAIN3.CARGO_MOVE_FK = CMMT.CARGO_MOVE_PK(+)");
                sb.Append("           AND TRAN3.BASIS = DUMT.DIMENTION_UNIT_MST_PK(+)");
                sb.Append("           AND PLG.PORT_GRP_MST_PK(+) = TRAN3.POL_GRP_FK");
                sb.Append("           AND PDG.PORT_GRP_MST_PK(+) = TRAN3.POD_GRP_FK AND CGMT.COMMODITY_GROUP_PK(+) = TRAN3.COMMODITY_GROUP_FK ");
                sb.Append("           AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);
                sb.Append("         GROUP BY MAIN3.QUOTATION_MST_PK,");
                sb.Append("                  OPR3.OPERATOR_NAME,");
                sb.Append("                  MAIN3.PYMT_TYPE,");
                sb.Append("                  PLG.PORT_GRP_NAME,");
                sb.Append("                  PDG.PORT_GRP_NAME,");
                sb.Append("                  MAIN3.QUOTATION_DATE,");
                sb.Append("                  MAIN3.HEADER_CONTENT,");
                sb.Append("                  MAIN3.FOOTER_CONTENT,");
                sb.Append("                  TRAN3.CONTAINER_TYPE_MST_FK, MAIN3.CARGO_TYPE, MAIN3.BIZ_TYPE,");
                sb.Append("                  CMMT.CARGO_MOVE_CODE,");
                sb.Append("                  TRAN3.EXPECTED_BOXES,");
                sb.Append("                  TRAN3.EXPECTED_WEIGHT,");
                sb.Append("                  TRAN3.EXPECTED_VOLUME, PORTPOL3.PORT_NAME, PORTPOD3.PORT_NAME, CGMT.COMMODITY_GROUP_CODE, MAIN3.PORT_GROUP,tran3.carrier_mst_fk,tran3.pol_grp_fk,tran3.pod_grp_fk)");
                sb.Append("       group by PK,");
                sb.Append("       fk,");
                sb.Append("       OPER_NAME,");
                sb.Append("       P_TYPE_ID,");
                sb.Append("       POL_ID,");
                sb.Append("       POD_ID,");
                sb.Append("       VALID_FROM,");
                sb.Append("       HEADER,");
                sb.Append("       FOOTER,");
                sb.Append("       CNTR_ID,");
                sb.Append("       CARGO_TYPE,");
                sb.Append("       LCLBASIS,");
                sb.Append("       CARGO_MOVE_CODE,");
                sb.Append("       COMMODITY_GROUP_CODE");
                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch_Fcl_Lcl_Header"

        #region "Fetch_Fcl_Lcl_Main"

        /// <summary>
        /// Main_s the FCL_ LCL.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet Main_Fcl_Lcl(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();
                strquery.Append("SELECT DISTINCT TRAN3.QUOTATION_MST_FK PK,");
                strquery.Append("                TRAN3.QUOTE_DTL_PK QUOTE_TRN_SEA_PK,");
                strquery.Append("       CASE WHEN  NVL(TRAN3.EXPECTED_BOXES,0)=0 THEN 'NA' ");
                strquery.Append("        ELSE TRAN3.EXPECTED_BOXES||''  END QUANTITY, ");
                strquery.Append("        ");
                strquery.Append("                CMDT4.COMMODITY_GROUP_CODE  COMM_ID,");
                strquery.Append("                TRAN3.Expected_Weight      GROSSWEIGTH,");
                strquery.Append("                TRAN3.Expected_Volume      VOLUME,");
                strquery.Append("                cmt.cargo_move_code,");
                strquery.Append("                main3.cargo_type");
                strquery.Append("  FROM QUOTATION_MST_TBL         MAIN3,");
                strquery.Append("       QUOTATION_DTL_TBL TRAN3,");
                strquery.Append("       COMMODITY_MST_TBL         CMDT3,");
                strquery.Append("       COMMODITY_GROUP_MST_TBL CMDT4 ,");
                strquery.Append("       cargo_move_mst_tbl      cmt");
                strquery.Append(" WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
                strquery.Append("    AND TRAN3.COMMODITY_GROUP_FK = CMDT4.COMMODITY_GROUP_PK(+)");
                strquery.Append("    and main3.cargo_move_fk=cmt.cargo_move_pk(+)");
                strquery.Append("    AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);

                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch_Fcl_Lcl_Main"

        #region "Fetch_Fcl_Lcl_Charges_Description"

        /// <summary>
        /// Charges_s the description.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <returns></returns>
        public DataSet Charges_Description(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();

                strquery.Append("SELECT TRAN3.QUOTATION_MST_FK PK,");
                strquery.Append("       TRAN3.QUOTE_DTL_PK QUOTE_TRN_SEA_PK,");
                strquery.Append("       CASE WHEN FRTD3.SURCHARGE IS NULL THEN  FRT3.FREIGHT_ELEMENT_NAME");
                strquery.Append("       ELSE (FRT3.FREIGHT_ELEMENT_NAME || ' ( ' ||  FRTD3.SURCHARGE  || ' ) ' || '')");
                strquery.Append("       END FRT_NAME,");
                strquery.Append("       CURR3.CURRENCY_ID CURR_ID,");
                strquery.Append("       FRTD3.QUOTED_RATE QUOTERATE1,");
                strquery.Append("       ROUND((SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK, " + baseCurrency + ",TO_DATE('" + QuotationDate + "', DATEFORMAT)) FROM DUAL), 6) ROE,");
                strquery.Append("       FRTD3.QUOTED_RATE QUOTERATE,");
                strquery.Append("       ROUND(ABS(FRTD3.QUOTED_RATE)*NVL(DECODE(FRT3.CREDIT,NULL,1,0,-1,1,1),1)* (SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK, " + baseCurrency + ",TO_DATE('" + QuotationDate + "', DATEFORMAT))FROM DUAL), 2) QUOTFINALRATE,");
                strquery.Append("       DUMT.DIMENTION_ID, ");
                strquery.Append("       DECODE(FRTD3.PYMT_TYPE, 2, 'C', 'P') PYMT_TYPE ");
                strquery.Append("  FROM QUOTATION_MST_TBL          MAIN3,");
                strquery.Append("       QUOTATION_DTL_TBL  TRAN3,");
                strquery.Append("       QUOTATION_FREIGHT_TRN FRTD3,");
                strquery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
                strquery.Append("       CURRENCY_TYPE_MST_TBL      CURR3,");
                strquery.Append("       DIMENTION_UNIT_MST_TBL  DUMT");
                strquery.Append("       ");
                strquery.Append(" WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
                strquery.Append("   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK");
                strquery.Append("   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)");
                strquery.Append("   AND TRAN3.BASIS=DUMT.DIMENTION_UNIT_MST_PK(+)");
                strquery.Append("   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)");
                strquery.Append("   AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);
                strquery.Append("   order by preference");

                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Charges_s the description_ new.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <param name="FCL">The FCL.</param>
        /// <returns></returns>
        public DataSet Charges_Description_New(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency, int FCL = 0)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();
                strquery.Append("SELECT PORT_GRP_CODE,");
                strquery.Append("PORT_GRP_CODE1,");
                strquery.Append("POL,");
                strquery.Append("POD,");
                strquery.Append("CARRIER,");
                strquery.Append("FRT_NAME,");
                if (FCL == 1)
                {
                    strquery.Append("CONTAINER_TYPE_MST_ID || ' (' || CURR_ID || ')' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    strquery.Append("CONTAINER_TYPE_MST_ID || ' (' || CURR_ID || ')' CONTAINER_TYPE_MST_ID,");
                }
                strquery.Append("CURR_ID,");
                strquery.Append("QUOTERATE,");
                strquery.Append("ROE,");
                strquery.Append("QUOTERATE1, PREFERENCE from ");
                strquery.Append("(SELECT distinct case when PGL.PORT_GRP_NAME is not null then UPPER(PGL.PORT_GRP_NAME) else UPPER(pol.port_NAME) end PORT_GRP_CODE,");
                strquery.Append("       case when PGD.PORT_GRP_NAME is not null then UPPER(PGD.PORT_GRP_NAME) else UPPER(pod.port_NAME) end PORT_GRP_CODE1,");
                strquery.Append("       DECODE(FRTD3.PYMT_TYPE, 2, 'C', 'P') POL,");
                strquery.Append("       '' POD,");
                strquery.Append("       NVL(UPPER(OMT.OPERATOR_NAME),'') Carrier,");
                //'changed for surcharge
                strquery.Append("       FRT3.FREIGHT_ELEMENT_NAME FRT_NAME,");
                if (FCL == 1)
                {
                    strquery.Append("       CTMT.CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    strquery.Append("       DUMT.DIMENTION_ID CONTAINER_TYPE_MST_ID,");
                }

                strquery.Append("       CURR3.CURRENCY_ID CURR_ID,");
                strquery.Append("       FRTD3.QUOTED_RATE QUOTERATE,");
                strquery.Append("       ROUND((SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK, " + baseCurrency + ",TO_DATE('" + QuotationDate + "', DATEFORMAT)) FROM DUAL), 6) ROE,");
                strquery.Append("       ROUND(ABS(FRTD3.QUOTED_RATE)*NVL(DECODE(FRT3.CREDIT,NULL,1,0,-1,1,1),1), 2) QUOTERATE1, FRT3.PREFERENCE ");
                strquery.Append("  FROM QUOTATION_MST_TBL          MAIN3,");
                strquery.Append("       QUOTATION_DTL_TBL  TRAN3,");
                strquery.Append("       QUOTATION_FREIGHT_TRN FRTD3,");
                strquery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
                if (FCL == 1)
                {
                    strquery.Append("       CONTAINER_TYPE_MST_TBL     CTMT,");
                }
                else
                {
                    strquery.Append("       DIMENTION_UNIT_MST_TBL       DUMT,");
                }
                strquery.Append("       CURRENCY_TYPE_MST_TBL      CURR3,");
                strquery.Append("       PORT_MST_TBL               POL,");
                strquery.Append("       PORT_MST_TBL               POD,");
                strquery.Append("       port_grp_mst_tbl         PGL,");
                strquery.Append("       port_grp_mst_tbl PGD, OPERATOR_MST_TBL           OMT        ");
                strquery.Append("       ");
                strquery.Append(" WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
                strquery.Append("   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK");
                strquery.Append("   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)");
                strquery.Append("   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)");
                if (FCL == 1)
                {
                    strquery.Append("   AND CTMT.CONTAINER_TYPE_MST_PK(+) = TRAN3.CONTAINER_TYPE_MST_FK");
                }
                else
                {
                    strquery.Append("   AND DUMT.DIMENTION_UNIT_MST_PK(+) = TRAN3.BASIS");
                }
                strquery.Append("   AND TRAN3.PORT_MST_POL_FK  = POL.PORT_MST_PK");
                strquery.Append("   AND TRAN3.PORT_MST_POD_FK  = POD.PORT_MST_PK");
                strquery.Append("   AND PGL.PORT_GRP_MST_PK(+) = tran3.pol_grp_fk");
                strquery.Append("   AND PGD.PORT_GRP_MST_PK(+) = tran3.pod_grp_fk");
                strquery.Append("   AND OMT.OPERATOR_MST_PK(+) = TRAN3.CARRIER_MST_FK");
                strquery.Append("   AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);
                strquery.Append("   ) Q");

                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Charges_s the description_ vatos.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <returns></returns>
        public DataSet Charges_Description_Vatos(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();
                strquery.Append("SELECT PORT_GRP_CODE,");
                strquery.Append("PORT_GRP_CODE1,");
                strquery.Append("POL,");
                strquery.Append("POD,");
                strquery.Append("CARRIER,");
                strquery.Append("CHECK_ADVATOS,");
                strquery.Append("FRT_NAME,");
                strquery.Append("CONTAINER_TYPE_MST_ID,");
                strquery.Append("CURR_ID,");
                strquery.Append("QUOTERATE,");
                strquery.Append("ROE,");
                strquery.Append("QUOTERATE1 from ");
                strquery.Append("(SELECT PGL.PORT_GRP_NAME PORT_GRP_CODE,");
                strquery.Append("       PGD.PORT_GRP_NAME PORT_GRP_CODE1,");
                strquery.Append("       POL.PORT_NAME POL,");
                strquery.Append("       POD.PORT_NAME POD,");
                strquery.Append("       OMT.OPERATOR_ID Carrier,");
                strquery.Append("       FRTD3.CHECK_ADVATOS,");
                //'changed for surcharge
                strquery.Append("       FRT3.FREIGHT_ELEMENT_NAME FRT_NAME,");
                strquery.Append("       CTMT.CONTAINER_TYPE_MST_ID,");
                strquery.Append("       CURR3.CURRENCY_ID CURR_ID,");
                strquery.Append("       FRTD3.QUOTED_RATE QUOTERATE,");
                strquery.Append("       ROUND((SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK, " + baseCurrency + ",TO_DATE('" + QuotationDate + "', DATEFORMAT)) FROM DUAL), 6) ROE,");
                strquery.Append("       ROUND(ABS(FRTD3.QUOTED_RATE)*NVL(DECODE(FRT3.CREDIT,NULL,1,0,-1,1,1),1)* (SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK, " + baseCurrency + ",TO_DATE('" + QuotationDate + "', DATEFORMAT))FROM DUAL), 2) QUOTERATE1");
                strquery.Append("  FROM QUOTATION_MST_TBL          MAIN3,");
                strquery.Append("       QUOTATION_DTL_TBL  TRAN3,");
                strquery.Append("       QUOTATION_FREIGHT_TRN FRTD3,");
                strquery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
                strquery.Append("       CONTAINER_TYPE_MST_TBL     CTMT,");
                strquery.Append("       CURRENCY_TYPE_MST_TBL      CURR3,");
                strquery.Append("       PORT_MST_TBL               POL,");
                strquery.Append("       PORT_MST_TBL               POD,");
                strquery.Append("       PORT_GROUP_MST_TBL         PGL,");
                strquery.Append("       PORT_GROUP_MST_TBL PGD, OPERATOR_MST_TBL           OMT        ");
                strquery.Append("       ");
                strquery.Append(" WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
                strquery.Append("   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK");
                strquery.Append("   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)");
                strquery.Append("   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)");
                strquery.Append("   AND CTMT.CONTAINER_TYPE_MST_PK(+) = TRAN3.CONTAINER_TYPE_MST_FK");
                strquery.Append("   AND TRAN3.PORT_MST_POL_FK  = POL.PORT_MST_PK");
                strquery.Append("   AND TRAN3.PORT_MST_POD_FK  = POD.PORT_MST_PK");
                strquery.Append("   AND PGL.PORT_GRP_MST_PK(+) = POL.PORT_GRP_MST_FK");
                strquery.Append("   AND PGD.PORT_GRP_MST_PK(+) = POD.PORT_GRP_MST_FK");
                strquery.Append("   AND OMT.OPERATOR_MST_PK(+) = TRAN3.CARRIER_MST_FK AND MAIN3.BIZ_TYPE=2");
                strquery.Append("   AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);
                strquery.Append("   order by preference) Q");
                strquery.Append("   WHERE (Q.QUOTERATE1 = 0 OR Q.CHECK_ADVATOS=1)");

                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch_Fcl_Lcl_Charges_Description"

        #region "Fetch_Fcl_Lcl_Other_Charges"

        //'added by subhransu for the quotation report 09/aug/2011

        /// <summary>
        /// Fetch_s the freight.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <returns></returns>
        public DataSet Fetch_Freight(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("       SELECT DISTINCT FRT3.FREIGHT_ELEMENT_MST_PK,");
            sb.Append("       FRT3.FREIGHT_ELEMENT_NAME FRT_NAME,");
            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCY_ID,");
            sb.Append("       '" + QuotationDate + "' QUOTERATE,");
            sb.Append("       PLG.PORT_GRP_NAME PGC,");
            sb.Append("       PDG.PORT_GRP_NAME PDC");
            sb.Append("");
            sb.Append("       FROM QUOTATION_MST_TBL          MAIN3,");
            sb.Append("       QUOTATION_DTL_TBL  TRAN3,");
            sb.Append("       QUOTATION_FREIGHT_TRN FRTD3,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
            sb.Append("       PORT_MST_TBL               POL,");
            sb.Append("       PORT_MST_TBL               POD,");
            sb.Append("       PORT_GROUP_MST_TBL         PLG,");
            sb.Append("       PORT_GROUP_MST_TBL         PDG");
            sb.Append("");
            sb.Append("   WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
            sb.Append("   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK");
            sb.Append("   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)");
            sb.Append("   AND MAIN3.QUOTATION_MST_PK = " + QuotationPk);
            sb.Append("   AND TRAN3.PORT_MST_POL_FK = POL.PORT_MST_PK");
            sb.Append("   AND TRAN3.PORT_MST_POD_FK = POD.PORT_MST_PK");
            sb.Append("   AND POL.PORT_GRP_MST_FK = PLG.PORT_GRP_MST_PK");
            sb.Append("   AND POD.PORT_GRP_MST_FK = PDG.PORT_GRP_MST_PK");
            sb.Append("   AND FRTD3.QUOTED_RATE <> 0");
            sb.Append("");
            sb.Append("          GROUP BY FRT3.FREIGHT_ELEMENT_NAME,");
            sb.Append("          FRTD3.CURRENCY_MST_FK,");
            sb.Append("          FRT3.CREDIT,");
            sb.Append("          FRT3.FREIGHT_ELEMENT_MST_PK,");
            sb.Append("          PLG.PORT_GRP_NAME,");
            sb.Append("          PDG.PORT_GRP_NAME");
            sb.Append("");

            try
            {
                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetch_s the container.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <returns></returns>
        public DataSet Fetch_Container(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("  SELECT DISTINCT CNT.CONTAINER_TYPE_MST_PK, CNT.CONTAINER_TYPE_MST_ID");
            sb.Append("");
            sb.Append("  FROM QUOTATION_MST_TBL         MAIN3,");
            sb.Append("       QUOTATION_DTL_TBL TRAN3,");
            sb.Append("       CONTAINER_TYPE_MST_TBL    CNT");
            sb.Append("");
            sb.Append("   WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
            sb.Append("   AND CNT.CONTAINER_TYPE_MST_PK = TRAN3.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND MAIN3.QUOTATION_MST_PK =" + QuotationPk);
            try
            {
                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetch_s the total_ freight.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <param name="baseCurrency">The base currency.</param>
        /// <returns></returns>
        public DataSet Fetch_Total_Freight(string QuotationPk, System.DateTime QuotationDate, Int64 baseCurrency)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("      SELECT TRAN3.QUOTATION_MST_FK PK,");
            sb.Append("        FRT3.FREIGHT_ELEMENT_MST_PK,TRAN3.QUOTE_DTL_PK QUOTE_TRN_SEA_PK,");
            sb.Append("       FRT3.FREIGHT_ELEMENT_NAME,");
            sb.Append("       CASE");
            sb.Append("         WHEN FRTD3.SURCHARGE IS NULL THEN");
            sb.Append("          FRT3.FREIGHT_ELEMENT_NAME");
            sb.Append("         ELSE");
            sb.Append("          (FRT3.FREIGHT_ELEMENT_NAME || ' ( ' || FRTD3.SURCHARGE || ' ) ' || '')");
            sb.Append("       END FRT_NAME,");
            sb.Append("       CURR3.CURRENCY_ID CURR_ID,");
            sb.Append("       FRTD3.QUOTED_RATE QUOTERATE,");
            sb.Append("       ROUND((SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK,");
            sb.Append("                                173,");
            sb.Append("                                TO_DATE('07/08/2011', DATEFORMAT))");
            sb.Append("               FROM DUAL),");
            sb.Append("             6) ROE,");
            sb.Append("       ROUND(ABS(FRTD3.QUOTED_RATE) *");
            sb.Append("             NVL(DECODE(FRT3.CREDIT, NULL, 1, 0, -1, 1, 1), 1) *");
            sb.Append("             (SELECT GET_EX_RATE(FRTD3.CURRENCY_MST_FK,");
            sb.Append("                                 173,");
            sb.Append("                                 TO_DATE('07/08/2011', DATEFORMAT))");
            sb.Append("                FROM DUAL),");
            sb.Append("             2) QUOTERATE1,");
            sb.Append("       DUMT.DIMENTION_ID,");
            sb.Append("       CNT.CONTAINER_TYPE_MST_ID CONT1");
            sb.Append("");
            sb.Append("     FROM QUOTATION_MST_TBL          MAIN3,");
            sb.Append("       QUOTATION_DTL_TBL  TRAN3,");
            sb.Append("       QUOTATION_FREIGHT_TRN FRTD3,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
            sb.Append("       CURRENCY_TYPE_MST_TBL      CURR3,");
            sb.Append("       DIMENTION_UNIT_MST_TBL     DUMT,");
            sb.Append("       CONTAINER_TYPE_MST_TBL     CNT");
            sb.Append("   WHERE MAIN3.QUOTATION_MST_PK = TRAN3.QUOTATION_MST_FK");
            sb.Append("   AND TRAN3.QUOTE_DTL_PK = FRTD3.QUOTATION_DTL_FK");
            sb.Append("   AND FRTD3.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK(+)");
            sb.Append("   AND TRAN3.BASIS = DUMT.DIMENTION_UNIT_MST_PK(+)");
            sb.Append("   AND FRTD3.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK(+)");
            sb.Append("   AND CNT.CONTAINER_TYPE_MST_PK = TRAN3.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND MAIN3.QUOTATION_MST_PK =" + QuotationPk);
            sb.Append("");
            sb.Append(" ORDER BY PREFERENCE");
            sb.Append("");
            try
            {
                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Other_s the charges.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet Other_Charges(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();

                strquery.Append("SELECT MAIN1.QUOTATION_MST_PK QUOTATION_SEA_PK,");
                strquery.Append("       fcl_lcl.QUOTE_DTL_PK QUOTE_TRN_SEA_PK,");
                strquery.Append("       FRT3.FREIGHT_ELEMENT_NAME,");
                strquery.Append("       CURR3.CURRENCY_ID,");
                strquery.Append("       QUOT_OTHER.AMOUNT, CTMT.CONTAINER_TYPE_MST_ID ");
                strquery.Append("  FROM QUOTATION_MST_TBL          MAIN1,");
                strquery.Append("       QUOTATION_DTL_TBL  FCL_LCL,");
                strquery.Append("       QUOTATION_OTHER_FREIGHT_TRN QUOT_OTHER,");
                strquery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3,");
                strquery.Append("       CURRENCY_TYPE_MST_TBL      CURR3, CONTAINER_TYPE_MST_TBL     CTMT ");
                strquery.Append(" WHERE FCL_LCL.QUOTATION_MST_FK = MAIN1.QUOTATION_MST_PK");
                strquery.Append("   AND QUOT_OTHER.QUOTATION_DTL_FK = FCL_LCL.QUOTE_DTL_PK");
                strquery.Append("   AND QUOT_OTHER.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK");
                strquery.Append("   AND QUOT_OTHER.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK AND CTMT.CONTAINER_TYPE_MST_PK = FCL_LCL.CONTAINER_TYPE_MST_FK ");
                strquery.Append("   AND MAIN1.QUOTATION_MST_PK =  " + QuotationPk);

                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Ports the GRP pol.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet PortGrpPOL(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();
                strquery.Append("SELECT DISTINCT CASE WHEN QT.PORT_GROUP = 1 THEN  PGM.PORT_GRP_NAME || ' - ' || substr(CONCATINATE_PORT_GROUP_POL(qt.QUOTATION_MST_pk),3,LENGTH(CONCATINATE_PORT_GROUP_POD(qt.QUOTATION_MST_pk))) ELSE NULL END PORT_GRP_CODE");
                strquery.Append("FROM QUOTATION_MST_TBL         QT,");
                strquery.Append("QUOTATION_DTL_TBL TRN,");
                strquery.Append("PORT_MST_TBL              POL,");
                strquery.Append("PORT_MST_TBL              POD,");
                strquery.Append("PORT_GRP_MST_TBL PGM ");
                strquery.Append("WHERE QT.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                strquery.Append("AND TRN.PORT_MST_POL_FK = POL.PORT_MST_PK");
                strquery.Append("AND TRN.PORT_MST_POD_FK = POD.PORT_MST_PK");
                strquery.Append("AND TRN.POL_GRP_FK= PGM.PORT_GRP_MST_PK(+)");
                strquery.Append("   AND QT.QUOTATION_MST_PK =  " + QuotationPk);
                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Ports the GRP pod.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet PortGrpPOD(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                StringBuilder strquery = new StringBuilder();
                strquery.Append("SELECT DISTINCT CASE WHEN QT.PORT_GROUP = 1 THEN  PGM.PORT_GRP_NAME || ' - ' || ");
                strquery.Append("ROWTOCOL('SELECT PMT.PORT_NAME FROM PORT_MST_TBL PMT WHERE PMT.PORT_MST_PK IN (SELECT DTL.PORT_MST_POD_FK FROM QUOTATION_DTL_TBL DTL WHERE DTL.POD_GRP_FK=' ||TRN.POD_GRP_FK ");
                strquery.Append(" || ' AND DTL.QUOTATION_MST_FK=' || " + QuotationPk + " || ')')  ELSE NULL END PORT_GRP_CODE ");
                strquery.Append("FROM QUOTATION_MST_TBL         QT,");
                strquery.Append("QUOTATION_DTL_TBL TRN,");
                strquery.Append("PORT_MST_TBL              POL,");
                strquery.Append("PORT_MST_TBL              POD,");
                strquery.Append("PORT_GRP_MST_TBL PGM ");
                strquery.Append("WHERE QT.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                strquery.Append("AND TRN.PORT_MST_POL_FK = POL.PORT_MST_PK");
                strquery.Append("AND TRN.PORT_MST_POD_FK = POD.PORT_MST_PK");
                strquery.Append("AND TRN.POD_GRP_FK = PGM.PORT_GRP_MST_PK(+)");
                strquery.Append("AND QT.QUOTATION_MST_PK =  " + QuotationPk);
                strquery.Append(" GROUP BY TRN.POD_GRP_FK,QT.PORT_GROUP,PGM.PORT_GRP_NAME ");
                return ObjWk.GetDataSet(strquery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch_Fcl_Lcl_Other_Charges"

        #region "Fetch Location"

        /// <summary>
        /// Fetches the location.
        /// </summary>
        /// <param name="Loc">The loc.</param>
        /// <returns></returns>
        public DataSet FetchLocation(long Loc)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder StrSqlBuilder = new StringBuilder();
            StrSqlBuilder.Append("  SELECT L.Office_Name CORPORATE_NAME,");
            StrSqlBuilder.Append("  COP.GST_NO,COP.COMPANY_REG_NO,COP.HOME_PAGE URL, ");
            StrSqlBuilder.Append("  L.LOCATION_ID , L.LOCATION_NAME, ");
            StrSqlBuilder.Append("  L.ADDRESS_LINE1,L.ADDRESS_LINE2,L.ADDRESS_LINE3,L.TELE_PHONE_NO,L.FAX_NO,L.E_MAIL_ID,");
            StrSqlBuilder.Append("  L.CITY,CMST.COUNTRY_NAME COUNTRY,L.ZIP, L.LOCATION_MST_PK");
            StrSqlBuilder.Append("  FROM CORPORATE_MST_TBL COP,LOCATION_MST_TBL L,COUNTRY_MST_TBL CMST");
            StrSqlBuilder.Append("  WHERE CMST.COUNTRY_MST_PK(+)=L.COUNTRY_MST_FK AND L.LOCATION_MST_PK = " + Loc + "");

            try
            {
                return ObjWk.GetDataSet(StrSqlBuilder.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Location"

        #region "Fetch Custumer "

        /// <summary>
        /// Fetch_s the custumer.
        /// </summary>
        /// <param name="CustPk">The customer pk.</param>
        /// <param name="CustId">The customer identifier.</param>
        /// <returns></returns>
        public DataSet Fetch_Custumer(int CustPk, string CustId = "")
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strQuery.Append("  ");
                strQuery.Append("         SELECT Q.CUSTOMER_NAME,");
                strQuery.Append("         Q.ADM_ADDRESS_1,");
                strQuery.Append("         case when Q.ADM_ADDRESS_2 is null then ' ' else Q.ADM_ADDRESS_2 end ADM_ADDRESS_2,");
                strQuery.Append("         case when Q.ADM_ADDRESS_3 is null then ' ' else Q.ADM_ADDRESS_3 end ADM_ADDRESS_3,");
                strQuery.Append("         case when Q.ADM_ZIP_CODE is null then ' ' else Q.ADM_ZIP_CODE end ADM_ZIP_CODE,");
                strQuery.Append("         case when Q.ADM_CITY is null then ' ' else Q.ADM_CITY end ADM_CITY,");
                strQuery.Append("         case when Q.COUNTRY_NAME is null then ' ' else Q.COUNTRY_NAME end COUNTRY_NAME");
                strQuery.Append("         FROM  (");
                strQuery.Append("  SELECT CUST.CUSTOMER_NAME,");
                strQuery.Append("         CC.ADM_ADDRESS_1,");
                strQuery.Append("         CC.ADM_ADDRESS_2,");
                strQuery.Append("         CC.ADM_ADDRESS_3,");
                strQuery.Append("         CC.ADM_ZIP_CODE,");
                strQuery.Append("         CC.ADM_CITY,");
                strQuery.Append("         CCC.COUNTRY_NAME");
                strQuery.Append("    FROM CUSTOMER_MST_TBL      CUST,");
                strQuery.Append("         CUSTOMER_CONTACT_DTLS CC,");
                strQuery.Append("         COUNTRY_MST_TBL       CCC");
                strQuery.Append("   WHERE CC.CUSTOMER_MST_FK = CUST.CUSTOMER_MST_PK");
                strQuery.Append("     AND CC.ADM_COUNTRY_MST_FK = CCC.COUNTRY_MST_PK");
                strQuery.Append("     AND CUST.CUSTOMER_MST_PK =" + CustPk);
                //  If CustId.Trim.Length > 0 Then strQuery.Append("     AND CUST.CUSTOMER_NAME = '" & CustId & "'")
                strQuery.Append("");
                strQuery.Append(" UNION ");
                strQuery.Append("");
                strQuery.Append("  SELECT CUST.CUSTOMER_NAME,");
                strQuery.Append("         CC.ADM_ADDRESS_1,");
                strQuery.Append("         CC.ADM_ADDRESS_2,");
                strQuery.Append("         CC.ADM_ADDRESS_3,");
                strQuery.Append("         CC.ADM_ZIP_CODE,");
                strQuery.Append("         CC.ADM_CITY,");
                strQuery.Append("         (select ccc.country_name from country_mst_tbl ccc, location_mst_tbl l ");
                strQuery.Append("         where l.country_mst_fk = ccc.country_mst_pk ");
                strQuery.Append("         and l.location_mst_pk = cc.adm_location_mst_fk)  country_name");
                strQuery.Append("    FROM TEMP_CUSTOMER_TBL      CUST,");
                strQuery.Append("         TEMP_CUSTOMER_CONTACT_DTLS CC");
                strQuery.Append("   WHERE CC.CUSTOMER_MST_FK = CUST.CUSTOMER_MST_PK");
                strQuery.Append("     AND CUST.CUSTOMER_MST_PK =" + CustPk);
                // If CustId.Trim.Length > 0 Then strQuery.Append("     AND CUST.CUSTOMER_NAME = '" & CustId & "'")
                strQuery.Append("     )Q");

                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Custumer "

        #region "Fetch Quotation Number"

        /// <summary>
        /// Fetches the quot nr.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public string FetchQuotNr(int QuotPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                strSQL = " SELECT Q.QUOTATION_REF_NO FROM QUOTATION_MST_TBL Q WHERE Q.QUOTATION_MST_PK = " + QuotPK;
                return objWF.ExecuteScaler(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the PRT group.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public string FetchPrtGroup(int QuotPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                strSQL = " SELECT NVL(Q.PORT_GROUP,0) PORT_GROUP FROM QUOTATION_MST_TBL Q WHERE Q.QUOTATION_MST_PK = " + QuotPK;
                return objWF.ExecuteScaler(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the approval DTL.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public DataSet FetchApprovalDtl(int QuotPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                StringBuilder sb = new StringBuilder(5000);
                sb.Append("SELECT U.USER_ID, TO_CHAR(Q.APP_DATE, DATEFORMAT) APP_DATE,Q.STATUS");
                sb.Append("  FROM QUOTATION_MST_TBL Q, USER_MST_TBL U");
                sb.Append(" WHERE Q.APP_BY = U.USER_MST_PK");
                sb.Append("   AND Q.QUOTATION_MST_PK = " + QuotPK);
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Quotation Number"

        #region "Fetch Local Charges Report "

        /// <summary>
        /// Main_s the local.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="quote_type">The quote_type.</param>
        /// <param name="Biz_Type">Type of the biz_.</param>
        /// <returns></returns>
        public DataSet Main_Local(string QuotationPk, int quote_type, int Biz_Type)
        {
            WorkFlow objWK = new WorkFlow();
            try
            {
                var _with53 = objWK.MyCommand.Parameters;
                _with53.Add("QUOT_PK_IN", QuotationPk).Direction = ParameterDirection.Input;
                _with53.Add("QUOT_TYPE_IN", quote_type).Direction = ParameterDirection.Input;
                _with53.Add("BIZ_TYPE_IN", Biz_Type).Direction = ParameterDirection.Input;
                _with53.Add("CURRENCY_MST_FK_IN", HttpContext.Current.Session["CURRENCY_MST_PK"]).Direction = ParameterDirection.Input;
                _with53.Add("CUR_QUOT", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                return objWK.GetDataSet("FETCH_LOCAL_CHARGE_PKG", "FETCH_LOCAL_CHARGE");
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Header_s the FCL_ LCL1.
        /// </summary>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        public DataSet Header_Fcl_Lcl1(string QuotationPk)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                // Dim strquery As New StringBuilder
                StringBuilder sb = new StringBuilder(5000);
                sb.Append("SELECT QUOTT.QUOT_GEN_AIR_TRN_PK Pk,");
                sb.Append("       '' Fk,");
                sb.Append("       AIR.AIRLINE_NAME OPER_NAME,");
                sb.Append("       COMM_GRP.COMMODITY_GROUP_CODE P_TYPE_ID,");
                sb.Append("       POL_P.PORT_NAME POL_ID,");
                sb.Append("       POD_P.PORT_NAME POD_ID,");
                sb.Append("       QUOTT.VALID_FROM VALID_FROM,");
                //  sb.Append("       QUOTT.VALID_TO VALID_TO,")
                sb.Append("       QUOT.HEADER_CONTENT HEADER,");
                sb.Append("       QUOT.FOOTER_CONTENT FOOTER,");
                sb.Append("       '' CNTR_ID,");
                sb.Append("       'AIR' CARGO_TYPE,");
                sb.Append("       ''  LCLBASIS,");
                sb.Append("       '' CARGO_MOVE_CODE,");
                sb.Append("       '' COMMODITY_GROUP_CODE,");
                sb.Append("       '' BOXES,");
                sb.Append("       '' WEIGHT,");
                sb.Append("       '' VOLUME");
                sb.Append("  FROM QUOTATION_AIR_TBL       QUOT,");
                sb.Append("       QUOT_GEN_TRN_AIR_TBL    QUOTT,");
                sb.Append("       AIRLINE_MST_TBL         AIR,");
                sb.Append("       COMMODITY_GROUP_MST_TBL COMM_GRP,");
                sb.Append("       PORT_MST_TBL            POL_P,");
                sb.Append("       PORT_MST_TBL            POD_P");
                sb.Append(" WHERE QUOT.QUOTATION_AIR_PK = QUOTT.QUOT_GEN_AIR_FK");
                sb.Append("   AND QUOTT.AIRLINE_MST_FK = AIR.AIRLINE_MST_PK(+)");
                sb.Append("   AND QUOT.COMMODITY_GROUP_MST_FK = COMM_GRP.COMMODITY_GROUP_PK");
                sb.Append("   AND QUOTT.PORT_MST_POL_FK = POL_P.PORT_MST_PK");
                sb.Append("   AND QUOTT.PORT_MST_POD_FK = POD_P.PORT_MST_PK");
                sb.Append("   and QUOT.QUOTATION_AIR_PK = " + QuotationPk);
                return ObjWk.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 15/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Local Charges Report "

        #region "Fetch Profitability data"

        /// <summary>
        /// Saves the profitability.
        /// </summary>
        /// <param name="DsProfitability">The ds profitability.</param>
        /// <param name="RefFK">The reference fk.</param>
        /// <param name="Biz_Type">Type of the biz_.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="RefFlag">The reference flag.</param>
        /// <returns></returns>
        public ArrayList SaveProfitability(DataSet DsProfitability, int RefFK, int Biz_Type, int CargoType, int RefFlag)
        {
            int RowCnt = 0;
            int ColCnt = 0;
            int ProfitabilityPK = 0;
            int RecAft = 0;
            int i = 0;
            string ProfPK_ToDel = "0";
            WorkFlow objWF = new WorkFlow();
            OracleTransaction TRAN = null;
            OracleCommand insCommand = new OracleCommand();
            OracleCommand updCommand = new OracleCommand();

            arrMessage.Clear();

            for (RowCnt = 0; RowCnt <= DsProfitability.Tables[0].Rows.Count - 1; RowCnt++)
            {
                for (ColCnt = 7; ColCnt <= DsProfitability.Tables[0].Columns.Count - 1; ColCnt++)
                {
                    if (DsProfitability.Tables[0].Columns[ColCnt].Caption.PadLeft(2) == "PK")
                    {
                        if (!string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2].ToString()))
                        {
                            if ((Convert.ToInt32(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2]) > 0))
                            {
                                if (!string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt].ToString()))
                                {
                                    ProfPK_ToDel = ProfPK_ToDel + ", " + DsProfitability.Tables[0].Rows[RowCnt][ColCnt];
                                }
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(ProfPK_ToDel))
            {
                objWF.ExecuteCommands("DELETE FROM QUOTATION_PROFITABILITY_TBL QFT WHERE QFT.QUOTATION_FK = " + RefFK + " AND QFT.REF_FLAG = " + RefFlag + " AND QFT.QUOTATION_PROFITABILITY_PK NOT IN (" + ProfPK_ToDel + ")");
            }

            objWF.OpenConnection();
            TRAN = objWF.MyConnection.BeginTransaction();

            try
            {
                for (RowCnt = 0; RowCnt <= DsProfitability.Tables[0].Rows.Count - 2; RowCnt++)
                {
                    for (ColCnt = 7; ColCnt <= DsProfitability.Tables[0].Columns.Count - 1; ColCnt++)
                    {
                        if (DsProfitability.Tables[0].Columns[ColCnt].Caption.PadLeft(2) == "PK")
                        {
                            if (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt].ToString()))
                            {
                                ProfitabilityPK = 0;
                            }
                            else
                            {
                                ProfitabilityPK = Convert.ToInt32((DsProfitability.Tables[0].Rows[RowCnt][ColCnt]));
                            }

                            if (!string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2].ToString()))
                            {
                                if (Convert.ToInt32(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2]) > 0)
                                {
                                    var _with54 = insCommand;
                                    insCommand.Parameters.Clear();
                                    _with54.Connection = objWF.MyConnection;
                                    _with54.CommandType = CommandType.StoredProcedure;
                                    _with54.CommandText = objWF.MyUserName + ".QUOTATION_PROFITABILITY_PKG.QUOTATION_PROFITABILITYRPT_INS";

                                    var _with55 = _with54.Parameters;
                                    _with55.Add("QUOTATION_FK_IN", RefFK).Direction = ParameterDirection.Input;
                                    _with55.Add("COST_ELEMENT_MST_FK_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["COST_ELEMENT_MST_PK"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["COST_ELEMENT_MST_PK"])).Direction = ParameterDirection.Input;
                                    _with55.Add("CURRENCY_TYPE_MST_FK_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["CURRENCY_MST_PK"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["CURRENCY_MST_PK"])).Direction = ParameterDirection.Input;
                                    if (CargoType == 1 | CargoType == -1)
                                    {
                                        _with55.Add("CONTAINER_TYPE_FK_IN", (DsProfitability.Tables[0].Columns[ColCnt + 1].Caption.PadRight(DsProfitability.Tables[0].Columns[ColCnt + 1].Caption.Length - 7))).Direction = ParameterDirection.Input;
                                    }
                                    else if (CargoType == 2)
                                    {
                                        _with55.Add("CONTAINER_TYPE_FK_IN", "").Direction = ParameterDirection.Input;
                                    }
                                    _with55.Add("PROFITABILITY_RATE_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2])).Direction = ParameterDirection.Input;
                                    _with55.Add("ROE_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["ROE"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["ROE"])).Direction = ParameterDirection.Input;
                                    _with55.Add("BIZ_TYPE_IN", Biz_Type).Direction = ParameterDirection.Input;
                                    _with55.Add("CARGO_TYPE_IN", CargoType).Direction = ParameterDirection.Input;
                                    _with55.Add("REF_FLAG_IN", RefFlag).Direction = ParameterDirection.Input;
                                    _with55.Add("VOLUME_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[DsProfitability.Tables[0].Rows.Count - 1][ColCnt + 2].ToString()) ? 1 : DsProfitability.Tables[0].Rows[DsProfitability.Tables[0].Rows.Count - 1][ColCnt + 2])).Direction = ParameterDirection.Input;
                                    _with55.Add("CREATED_BY_FK_IN", CREATED_BY).Direction = ParameterDirection.Input;
                                    _with55.Add("CONFIG_PK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                                    _with55.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;

                                    var _with56 = updCommand;
                                    updCommand.Parameters.Clear();
                                    _with56.Connection = objWF.MyConnection;
                                    _with56.CommandType = CommandType.StoredProcedure;
                                    _with56.CommandText = objWF.MyUserName + ".QUOTATION_PROFITABILITY_PKG.QUOTATION_PROFITABILITYRPT_UPD";

                                    var _with57 = _with56.Parameters;
                                    _with57.Add("QUOTATION_PROFITABILITY_PK_IN", ProfitabilityPK).Direction = ParameterDirection.Input;
                                    _with57.Add("QUOTATION_FK_IN", RefFK).Direction = ParameterDirection.Input;
                                    _with57.Add("COST_ELEMENT_MST_FK_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["COST_ELEMENT_MST_PK"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["COST_ELEMENT_MST_PK"])).Direction = ParameterDirection.Input;
                                    _with57.Add("CURRENCY_TYPE_MST_FK_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["CURRENCY_MST_PK"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["CURRENCY_MST_PK"])).Direction = ParameterDirection.Input;
                                    if (CargoType == 1 | CargoType == -1)
                                    {
                                        _with55.Add("CONTAINER_TYPE_FK_IN", (DsProfitability.Tables[0].Columns[ColCnt + 1].Caption.PadRight(DsProfitability.Tables[0].Columns[ColCnt + 1].Caption.Length - 7))).Direction = ParameterDirection.Input;
                                    }
                                    else if (CargoType == 2)
                                    {
                                        _with57.Add("CONTAINER_TYPE_FK_IN", "").Direction = ParameterDirection.Input;
                                    }
                                    _with55.Add("PROFITABILITY_RATE_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt][ColCnt + 2])).Direction = ParameterDirection.Input;
                                    _with55.Add("ROE_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[RowCnt]["ROE"].ToString()) ? "" : DsProfitability.Tables[0].Rows[RowCnt]["ROE"])).Direction = ParameterDirection.Input;
                                    _with57.Add("BIZ_TYPE_IN", Biz_Type).Direction = ParameterDirection.Input;
                                    _with57.Add("CARGO_TYPE_IN", CargoType).Direction = ParameterDirection.Input;
                                    _with57.Add("REF_FLAG_IN", RefFlag).Direction = ParameterDirection.Input;
                                    _with55.Add("VOLUME_IN", (string.IsNullOrEmpty(DsProfitability.Tables[0].Rows[DsProfitability.Tables[0].Rows.Count - 1][ColCnt + 2].ToString()) ? 1 : DsProfitability.Tables[0].Rows[DsProfitability.Tables[0].Rows.Count - 1][ColCnt + 2])).Direction = ParameterDirection.Input;
                                    _with57.Add("LAST_MODIFIED_BY_FK_IN", CREATED_BY).Direction = ParameterDirection.Input;
                                    _with57.Add("CONFIG_PK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                                    _with57.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;

                                    if (ProfitabilityPK <= 0)
                                    {
                                        var _with58 = objWF.MyDataAdapter;
                                        _with58.InsertCommand = insCommand;
                                        _with58.InsertCommand.Transaction = TRAN;
                                        RecAft = RecAft + _with58.InsertCommand.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        var _with59 = objWF.MyDataAdapter;
                                        _with59.UpdateCommand = updCommand;
                                        _with59.UpdateCommand.Transaction = TRAN;
                                        RecAft = RecAft + _with59.UpdateCommand.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                    }
                }

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    objWF.CloseConnection();
                }
                else
                {
                    TRAN.Commit();
                    if (RefFlag == 1)
                    {
                        objWF.ExecuteCommands(" UPDATE BOOKING_SEA_TBL BST SET BST.PROFITABILITY_FLAG = 1 " + " WHERE BST.BOOKING_SEA_PK = " + RefFK);
                    }
                    else if (RefFlag == 0)
                    {
                        objWF.ExecuteCommands(" UPDATE QUOTATION_MST_TBL QST SET QST.PROFITABILITY_FLAG = 1 " + " WHERE QST.QUOTATION_MST_PK = " + RefFK);
                    }
                    else if (RefFlag == 2)
                    {
                        objWF.ExecuteCommands(" UPDATE SRR_SEA_TBL SST SET SST.PROFITABILITY_FLAG = 1 " + " WHERE SST.SRR_SEA_PK = " + RefFK);
                        /// 3 - Quot Air
                    }
                    else if (RefFlag == 3)
                    {
                        objWF.ExecuteCommands(" UPDATE QUOTATION_MST_TBL SST SET SST.PROFITABILITY_FLAG = 1 " + " WHERE SST.QUOTATION_MST_PK = " + RefFK);
                        //' 4 - SRR Air
                    }
                    else if (RefFlag == 4)
                    {
                        objWF.ExecuteCommands(" UPDATE SRR_AIR_TBL SST SET SST.PROFITABILITY_FLAG = 1 " + " WHERE SST.SRR_AIR_PK = " + RefFK);
                        //' 5 - Booking Air
                    }
                    else if (RefFlag == 5)
                    {
                        objWF.ExecuteCommands(" UPDATE BOOKING_AIR_TBL SST SET SST.PROFITABILITY_FLAG = 1 " + " WHERE SST.BOOKING_AIR_PK = " + RefFK);
                    }
                    objWF.CloseConnection();
                    arrMessage.Add("saved");
                }

                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                throw oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetch_s the revenue.
        /// </summary>
        /// <param name="Quotationpk">The quotationpk.</param>
        /// <returns></returns>
        public DataSet Fetch_Revenue(int Quotationpk = 0)
        {
            //'fetching the estimated cost and revenue cost
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("   SELECT");
                sb.Append("");
                sb.Append("   (SELECT ROUND(SUM(NVL(FD.QUOTED_RATE*get_ex_rate(fd.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",main.quotation_date), 0)), 2)");
                sb.Append("    FROM QUOTATION_MST_TBL          MAIN,");
                sb.Append("         QUOTATION_DTL_TBL  TRN,");
                sb.Append("         QUOTATION_FREIGHT_TRN FD");
                sb.Append("  ");
                sb.Append("      WHERE MAIN.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                sb.Append("      AND TRN.QUOTE_DTL_PK = FD.QUOTATION_DTL_FK");
                sb.Append("      AND MAIN.QUOTATION_MST_PK =" + Quotationpk);
                sb.Append(" ");
                sb.Append("        ) ESTREVENUE ,ROUND((SELECT SUM(NVL(QPT.ROE, 0) * NVL(QPT.PROFITABILITY_RATE, 0))");
                sb.Append("         FROM QUOTATION_PROFITABILITY_TBL QPT");
                sb.Append("        WHERE QPT.QUOTATION_MST_FK=" + Quotationpk);
                sb.Append("        ),2) ESTCOST");
                sb.Append("");
                sb.Append("    FROM DUAL");

                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetch_s the record.
        /// </summary>
        /// <param name="Quotationpk">The quotationpk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet Fetch_Record(int Quotationpk = 0, int BizType = 0)
        {
            DataSet M_GridDs = null;
            DataSet GrdDs = null;
            DataSet M_Datset = null;
            DataSet M_GridDatset = null;
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);

            try
            {
                //'check if profitability already saved in QUOTATION_PROFITABILITY_TBL
                sb.Append("  SELECT ROWNUM");
                sb.Append("  FROM QUOTATION_PROFITABILITY_TBL QP");
                sb.Append("  WHERE 1=1");
                if (Quotationpk > 0)
                {
                    sb.Append("  and  QP.QUOTATION_MST_FK= " + Quotationpk);
                }
                else
                {
                    sb.Append("  and  QP.QUOTATION_MST_FK =-1");
                }
                GrdDs = objWF.GetDataSet(sb.ToString());

                //'check if record exhist in QUOTATION_PROFITABILITY_TBL
                if (GrdDs.Tables[0].Rows.Count > 0)
                {
                    //'fetch the data from QUOTATION_PROFITABILITY_TBL  and return
                    sb.Remove(0, sb.Length);
                    sb.Append("       SELECT ROWNUM SLNR,QP.QUOTATION_PROFITABILITY_PK PROFITABILITYPK,");
                    sb.Append("       QP.QUOTATION_MST_FK,");
                    sb.Append("       QP.COST_ELEMENT_MST_FK COSTELEMENTPK,");
                    sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                    sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                    sb.Append("       QP.CURRENCY_TYPE_MST_FK CURRENCYFK,");
                    sb.Append("       CTMT.CURRENCY_ID CURRENCYID,");
                    sb.Append("       ROUND(NVL(QP.PROFITABILITY_RATE, 0), 2) RATE,");
                    sb.Append("       ROUND(NVL(QP.ROE, 0), 6) ROE,");
                    sb.Append("       ROUND(NVL(QP.PROFITABILITY_RATE, 0) * NVL(QP.ROE, 0), 2) AMOUNT,QP.BIZ_TYPE BIZTYPE");
                    sb.Append("");
                    sb.Append("       FROM QUOTATION_PROFITABILITY_TBL QP,");
                    sb.Append("       COST_ELEMENT_MST_TBL        CMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL       CTMT");
                    sb.Append("");
                    sb.Append("   WHERE 1 = 1");
                    sb.Append("   AND QP.COST_ELEMENT_MST_FK = CMT.COST_ELEMENT_MST_PK");
                    sb.Append("   AND QP.CURRENCY_TYPE_MST_FK = CTMT.CURRENCY_MST_PK");
                    sb.Append("   AND QP.QUOTATION_MST_FK= " + Quotationpk);

                    M_GridDatset = objWF.GetDataSet(sb.ToString());
                    return M_GridDatset;
                    //' fetch the deafult operator cost from the operator master
                }
                else
                {
                    //'for the sea
                    if (BizType == 2)
                    {
                        //'find the tariff and spot  reference number from quotation
                        sb.Remove(0, sb.Length);
                        sb.Append("   SELECT QT.TRANS_REFERED_FROM, QT.TRANS_REF_NO,QST.CARGO_TYPE");
                        sb.Append("   FROM QUOTATION_DTL_TBL QT, QUOTATION_MST_TBL QST");
                        sb.Append("   WHERE QST.QUOTATION_MST_PK = QT.QUOTATION_MST_FK");
                        if (Quotationpk > 0)
                        {
                            sb.Append("   AND QT.QUOTATION_MST_FK= " + Quotationpk);
                        }
                        else
                        {
                            sb.Append("   AND 1=2");
                        }
                        M_GridDs = objWF.GetDataSet(sb.ToString());
                        if (M_GridDs.Tables[0].Rows.Count > 0)
                        {
                            M_Datset = GetOperatorCost(Convert.ToInt32(M_GridDs.Tables[0].Rows[0][0]), Convert.ToString(M_GridDs.Tables[0].Rows[0][1]), Convert.ToInt32(M_GridDs.Tables[0].Rows[0][2]), Quotationpk, BizType);
                        }
                        else
                        {
                            M_Datset = GetOperatorCost(0, "", 0, Quotationpk);
                        }
                        //'for the air cargo
                    }
                    else
                    {
                        sb.Remove(0, sb.Length);
                        sb.Append("     SELECT TRN.TRANS_REFERED_FROM, TRN.TRANS_REF_NO");
                        sb.Append("     FROM QUOTATION_MST_TBL MAIN, QUOTATION_DTL_TBL TRN");
                        sb.Append("     WHERE MAIN.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                        if (Quotationpk > 0)
                        {
                            sb.Append("   AND MAIN.QUOTATION_MST_PK= " + Quotationpk);
                        }
                        else
                        {
                            sb.Append("   AND 1=2");
                        }
                        M_GridDs = objWF.GetDataSet(sb.ToString());

                        if (M_GridDs.Tables[0].Rows.Count > 0)
                        {
                            M_Datset = GetOperatorCost(Convert.ToInt32(M_GridDs.Tables[0].Rows[0][0]), Convert.ToString(M_GridDs.Tables[0].Rows[0][1]), 0, Quotationpk);
                        }
                        else
                        {
                            M_Datset = GetOperatorCost(0, "", 0, Quotationpk);
                        }
                    }

                    return M_Datset;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Profitability data"

        /// <summary>
        /// Gets the operator cost.
        /// </summary>
        /// <param name="TRANS_REFERED_FROM">The tran s_ refere d_ from.</param>
        /// <param name="TRANS_REF_NO">The tran s_ re f_ no.</param>
        /// <param name="CARGO_TYPE">Type of the carg o_.</param>
        /// <param name="Quotationpk">The quotationpk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        private DataSet GetOperatorCost(int TRANS_REFERED_FROM = 0, string TRANS_REF_NO = "", int CARGO_TYPE = 0, int Quotationpk = 0, int BizType = 0)
        {
            try
            {
                StringBuilder sb = new StringBuilder(5000);
                WorkFlow objWF = new WorkFlow();
                DataSet DsOperatorCost = null;

                //'for the air cargo
                if (BizType == 1)
                {
                    //'spot rate based
                    if (TRANS_REFERED_FROM == 1)
                    {
                        sb.Append("       SELECT ROWNUM SLNR,");
                        sb.Append("       '' PROFITABILITYPK,");
                        sb.Append("       '" + Quotationpk + "' QUOTATION_MST_FK,");
                        sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                        sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                        sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                        sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                        sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCYID,");
                        sb.Append("       (SELECT SUM(NVL(BPNT.APPROVED_RATE, 0))");
                        sb.Append("          FROM RFQ_SPOT_RATE_AIR_TBL        MAIN,");
                        sb.Append("               RFQ_SPOT_AIR_TRN_FREIGHT_TBL TRAN,");
                        sb.Append("               RFQ_SPOT_AIR_BREAKPOINTS     BPNT");
                        sb.Append("        ");
                        sb.Append("         WHERE BPNT.RFQ_SPOT_AIR_FRT_FK = TRAN.RFQ_SPOT_TRN_FREIGHT_PK");
                        sb.Append("           AND MAIN.RFQ_SPOT_AIR_PK = TRAN.RFQ_SPOT_TRN_AIR_FK");
                        sb.Append("           AND MAIN.RFQ_REF_NO = '" + TRANS_REF_NO + "') RATE,");
                        sb.Append("       '1.000000' ROE,");
                        sb.Append("       ");
                        sb.Append("       (SELECT SUM(NVL(GET_EX_RATE(TRAN.CURRENCY_MST_FK, '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "', SYSDATE), 0) *");
                        sb.Append("                   NVL(BPNT.APPROVED_RATE, 0))");
                        sb.Append("          FROM RFQ_SPOT_RATE_AIR_TBL        MAIN,");
                        sb.Append("               RFQ_SPOT_AIR_TRN_FREIGHT_TBL TRAN,");
                        sb.Append("               RFQ_SPOT_AIR_BREAKPOINTS     BPNT");
                        sb.Append("        ");
                        sb.Append("         WHERE BPNT.RFQ_SPOT_AIR_FRT_FK = TRAN.RFQ_SPOT_TRN_FREIGHT_PK");
                        sb.Append("           AND MAIN.RFQ_SPOT_AIR_PK = TRAN.RFQ_SPOT_TRN_AIR_FK");
                        sb.Append("           AND MAIN.RFQ_REF_NO = '" + TRANS_REF_NO + "') AMOUNT,'1' BIZTYPE ");
                        sb.Append("    FROM COST_ELEMENT_MST_TBL CMT");
                        sb.Append("    WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                        //'tarif based
                    }
                    else if (TRANS_REFERED_FROM == 5)
                    {
                        sb.Append("       SELECT ROWNUM SLNR,");
                        sb.Append("       '' PROFITABILITYPK,");
                        sb.Append("       '" + Quotationpk + "' QUOTATION_MST_FK,");
                        sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                        sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                        sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                        sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                        sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCYID,");
                        sb.Append("       (SELECT SUM(NVL(SURCH.TARIFF_RATE, 0))");
                        sb.Append("          FROM TARIFF_MAIN_AIR_TBL      MAIN,");
                        sb.Append("               TARIFF_TRN_AIR_TBL       TRAN,");
                        sb.Append("               TARIFF_TRN_AIR_SURCHARGE SURCH");
                        sb.Append("        ");
                        sb.Append("         WHERE MAIN.TARIFF_MAIN_AIR_PK = TRAN.TARIFF_MAIN_AIR_FK");
                        sb.Append("           AND TRAN.TARIFF_TRN_AIR_PK = SURCH.TARIFF_TRN_AIR_FK");
                        sb.Append("           AND MAIN.TARIFF_REF_NO = '" + TRANS_REF_NO + "') RATE,");
                        sb.Append("       '1.000000' ROE,");
                        sb.Append("       ");
                        sb.Append("       (SELECT SUM(NVL(GET_EX_RATE(SURCH.CURRENCY_MST_FK, '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "', SYSDATE), 0) *");
                        sb.Append("                   NVL(SURCH.TARIFF_RATE, 0))");
                        sb.Append("          FROM TARIFF_MAIN_AIR_TBL      MAIN,");
                        sb.Append("               TARIFF_TRN_AIR_TBL       TRAN,");
                        sb.Append("               TARIFF_TRN_AIR_SURCHARGE SURCH");
                        sb.Append("        ");
                        sb.Append("         WHERE MAIN.TARIFF_MAIN_AIR_PK = TRAN.TARIFF_MAIN_AIR_FK");
                        sb.Append("           AND TRAN.TARIFF_TRN_AIR_PK = SURCH.TARIFF_TRN_AIR_FK");
                        sb.Append("           AND MAIN.TARIFF_REF_NO = '" + TRANS_REF_NO + "') AMOUNT,");
                        sb.Append("       '1' BIZTYPE");
                        sb.Append("");
                        sb.Append("  FROM COST_ELEMENT_MST_TBL CMT");
                        sb.Append(" WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                        sb.Append("");
                        sb.Append("");
                    }
                    else
                    {
                        sb.Append("       SELECT '' SLNR,");
                        sb.Append("       '' PROFITABILITYPK,");
                        sb.Append("       '' QUOTATION_MST_FK,");
                        sb.Append("       '' COSTELEMENTPK,");
                        sb.Append("       '' COSTELEMENTID,");
                        sb.Append("       '' COSTELEMENTDESC,");
                        sb.Append("       '' CURRENCYFK,");
                        sb.Append("       '' CURRENCYID,");
                        sb.Append("       '' RATE,");
                        sb.Append("       '' ROE,");
                        sb.Append("       '' AMOUNT,''BIZTYPE");
                        sb.Append("  FROM DUAL");
                        sb.Append("  WHERE 1 = 2");
                    }
                }
                else if (BizType == 2)
                {
                    //'for the sea cargo
                    //'spot rate based
                    if (TRANS_REFERED_FROM == 1)
                    {
                        //'for fcl cargo
                        if (CARGO_TYPE == 1)
                        {
                            sb.Append("       SELECT ROWNUM SLNR,");
                            sb.Append("       '' PROFITABILITYPK,");
                            sb.Append("       '" + Quotationpk + "' QUOTATION_MST_FK,");
                            sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                            sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                            sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCYID,");
                            sb.Append("       (SELECT SUM(NVL(CONT1.FCL_APP_RATE, 0)) QUOTERATE");
                            sb.Append("        ");
                            sb.Append("          FROM RFQ_SPOT_RATE_SEA_TBL     MAIN1,");
                            sb.Append("               RFQ_SPOT_TRN_SEA_FCL_LCL  TRAN1,");
                            sb.Append("               RFQ_SPOT_TRN_SEA_CONT_DET CONT1");
                            sb.Append("         WHERE MAIN1.RFQ_SPOT_SEA_PK = TRAN1.RFQ_SPOT_SEA_FK");
                            sb.Append("           AND CONT1.RFQ_SPOT_SEA_TRN_FK = TRAN1.RFQ_SPOT_SEA_TRN_PK");
                            sb.Append("           AND MAIN1.RFQ_REF_NO = '" + TRANS_REF_NO + "') RATE,");
                            sb.Append("       '1.00000' ROE,");
                            sb.Append("       (SELECT SUM(NVL(CONT1.FCL_APP_RATE, 0)*NVL(GET_EX_RATE(TRAN1.CURRENCY_MST_FK, '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "', SYSDATE), 0)) QUOTERATE");
                            sb.Append("        ");
                            sb.Append("          FROM RFQ_SPOT_RATE_SEA_TBL     MAIN1,");
                            sb.Append("               RFQ_SPOT_TRN_SEA_FCL_LCL  TRAN1,");
                            sb.Append("               RFQ_SPOT_TRN_SEA_CONT_DET CONT1");
                            sb.Append("         WHERE MAIN1.RFQ_SPOT_SEA_PK = TRAN1.RFQ_SPOT_SEA_FK");
                            sb.Append("           AND CONT1.RFQ_SPOT_SEA_TRN_FK = TRAN1.RFQ_SPOT_SEA_TRN_PK");
                            sb.Append("           AND MAIN1.RFQ_REF_NO = '" + TRANS_REF_NO + "') AMOUNT,");
                            sb.Append("         '2' BIZTYPE");
                            sb.Append("");
                            sb.Append("       FROM COST_ELEMENT_MST_TBL CMT");
                            sb.Append("       WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                            //'for lcl cargo
                        }
                        else
                        {
                            sb.Append("       SELECT ROWNUM SLNR,");
                            sb.Append("       '' PROFITABILITYPK,");
                            sb.Append("       '" + Quotationpk + "' QUOTATION_MST_FK,");
                            sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                            sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                            sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCYID,");
                            sb.Append("       (SELECT SUM(CASE");
                            sb.Append("                     WHEN (NVL(TRAN1.LCL_APPROVED_MIN_RATE, 0) =");
                            sb.Append("                          NVL(TRAN1.LCL_APPROVED_RATE, 0)) THEN");
                            sb.Append("                      NVL(TRAN1.LCL_APPROVED_MIN_RATE, 0)");
                            sb.Append("                   ");
                            sb.Append("                     ELSE");
                            sb.Append("                      NVL(TRAN1.LCL_APPROVED_RATE, 0)");
                            sb.Append("                   END)");
                            sb.Append("        ");
                            sb.Append("          FROM RFQ_SPOT_RATE_SEA_TBL MAIN1, RFQ_SPOT_TRN_SEA_FCL_LCL TRAN1");
                            sb.Append("         WHERE MAIN1.RFQ_SPOT_SEA_PK = TRAN1.RFQ_SPOT_SEA_FK");
                            sb.Append("           AND MAIN1.RFQ_REF_NO ='" + TRANS_REF_NO + "') RATE,");
                            sb.Append("       '1.00000' ROE,");
                            sb.Append("       (SELECT SUM(NVL(GET_EX_RATE(TRAN1.CURRENCY_MST_FK, '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "', SYSDATE), 0) *");
                            sb.Append("                   (CASE");
                            sb.Append("                      WHEN (NVL(TRAN1.LCL_APPROVED_MIN_RATE, 0) =");
                            sb.Append("                           NVL(TRAN1.LCL_APPROVED_RATE, 0)) THEN");
                            sb.Append("                       NVL(TRAN1.LCL_APPROVED_MIN_RATE, 0)");
                            sb.Append("                    ");
                            sb.Append("                      ELSE");
                            sb.Append("                       NVL(TRAN1.LCL_APPROVED_RATE, 0)");
                            sb.Append("                    END))");
                            sb.Append("        ");
                            sb.Append("          FROM RFQ_SPOT_RATE_SEA_TBL MAIN1, RFQ_SPOT_TRN_SEA_FCL_LCL TRAN1");
                            sb.Append("         WHERE MAIN1.RFQ_SPOT_SEA_PK = TRAN1.RFQ_SPOT_SEA_FK");
                            sb.Append("           AND MAIN1.RFQ_REF_NO = '" + TRANS_REF_NO + "') AMOUNT,");
                            sb.Append("       ");
                            sb.Append("       '2' BIZTYPE");
                            sb.Append("");
                            sb.Append("  FROM COST_ELEMENT_MST_TBL CMT");
                            sb.Append(" WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                            sb.Append("");
                            sb.Append("");
                        }
                        //'tariff base
                    }
                    else if (TRANS_REFERED_FROM == 5)
                    {
                        //'for lcl cargo
                        if (CARGO_TYPE == 2)
                        {
                            sb.Append("       SELECT  ROWNUM SLNR,'' PROFITABILITYPK,  '" + Quotationpk + "'QUOTATION_MST_FK,");
                            sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                            sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                            sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                            sb.Append("        '" + HttpContext.Current.Session["CURRENCY_ID"] + "'CURRENCYID,");
                            //'&Session("CURRENCY_ID")&'
                            sb.Append("       ROUND(NVL((SELECT SUM(CASE");
                            sb.Append("                              WHEN NVL(TT.LCL_TARIFF_RATE, 0) = 0 THEN");
                            sb.Append("                               CASE");
                            sb.Append("                                 WHEN NVL(TT.LCL_TARIFF_MIN_RATE, 0) = 0 THEN");
                            sb.Append("                                  CASE");
                            sb.Append("                                    WHEN NVL(TT.LCL_CURRENT_RATE, 0) = 0 THEN");
                            sb.Append("                                     ROUND(NVL(TT.LCL_CURRENT_MIN_RATE, 0), 2)");
                            sb.Append("                                    ELSE");
                            sb.Append("                                     ROUND(NVL(TT.LCL_CURRENT_RATE, 0), 2)");
                            sb.Append("                                  END");
                            sb.Append("                                 ELSE");
                            sb.Append("                                  ROUND(NVL(TT.LCL_TARIFF_MIN_RATE, 0), 2)");
                            sb.Append("                               END");
                            sb.Append("                              ELSE");
                            sb.Append("                               ROUND(NVL(TT.LCL_TARIFF_RATE, 0), 2)");
                            sb.Append("                            END)");
                            sb.Append("                 ");
                            sb.Append("                   FROM TARIFF_MAIN_SEA_TBL TM, TARIFF_TRN_SEA_FCL_LCL TT");
                            sb.Append("                  WHERE TM.TARIFF_MAIN_SEA_PK = TT.TARIFF_MAIN_SEA_FK");
                            sb.Append("                    AND TM.TARIFF_REF_NO ='" + TRANS_REF_NO + "'),");
                            sb.Append("                 0),");
                            sb.Append("             2) RATE,");
                            sb.Append("       '1.000000' ROE,");
                            sb.Append("       ROUND(NVL((SELECT SUM(CASE");
                            sb.Append("                              WHEN NVL(TT.LCL_TARIFF_RATE, 0) = 0 THEN");
                            sb.Append("                               CASE");
                            sb.Append("                                 WHEN NVL(TT.LCL_TARIFF_MIN_RATE, 0) = 0 THEN");
                            sb.Append("                                  CASE");
                            sb.Append("                                    WHEN NVL(TT.LCL_CURRENT_RATE, 0) = 0 THEN");
                            sb.Append("                                    ");
                            sb.Append("                                     ROUND(NVL(GET_EX_RATE(TT.CURRENCY_MST_FK,");
                            sb.Append("                                                           '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "',");
                            sb.Append("                                                           SYSDATE),");
                            sb.Append("                                               0) * NVL(TT.LCL_CURRENT_MIN_RATE, 0),");
                            sb.Append("                                           2)");
                            sb.Append("                                    ELSE");
                            sb.Append("                                    ");
                            sb.Append("                                     ROUND(NVL(GET_EX_RATE(TT.CURRENCY_MST_FK,");
                            sb.Append("                                                           '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "',");
                            sb.Append("                                                           SYSDATE),");
                            sb.Append("                                               0) * NVL(TT.LCL_CURRENT_RATE, 0),");
                            sb.Append("                                           2)");
                            sb.Append("                                  END");
                            sb.Append("                                 ELSE");
                            sb.Append("                                 ");
                            sb.Append("                                  ROUND(NVL(GET_EX_RATE(TT.CURRENCY_MST_FK,");
                            sb.Append("                                                        '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "',");
                            sb.Append("                                                        SYSDATE),");
                            sb.Append("                                            0) * NVL(TT.LCL_TARIFF_MIN_RATE, 0),");
                            sb.Append("                                        2)");
                            sb.Append("                               END");
                            sb.Append("                              ELSE");
                            sb.Append("                               ROUND(NVL(GET_EX_RATE(TT.CURRENCY_MST_FK,");
                            sb.Append("                                                     '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "',");
                            sb.Append("                                                     SYSDATE),");
                            sb.Append("                                         0) * NVL(TT.LCL_TARIFF_RATE, 0),");
                            sb.Append("                                     2)");
                            sb.Append("                            END)");
                            sb.Append("                 ");
                            sb.Append("                   FROM TARIFF_MAIN_SEA_TBL TM, TARIFF_TRN_SEA_FCL_LCL TT");
                            sb.Append("                  WHERE TM.TARIFF_MAIN_SEA_PK = TT.TARIFF_MAIN_SEA_FK");
                            sb.Append("                  AND TM.TARIFF_REF_NO ='" + TRANS_REF_NO + "'),");
                            sb.Append("                 0),");
                            sb.Append("             2) AMOUNT,'2' BIZTYPE");
                            sb.Append("");
                            sb.Append("   FROM COST_ELEMENT_MST_TBL CMT");
                            sb.Append("   WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                            //'for fcl type cargo
                        }
                        else
                        {
                            sb.Append("       SELECT ROWNUM SLNR,");
                            sb.Append("       '' PROFITABILITYPK,");
                            sb.Append("       '" + Quotationpk + "' QUOTATION_MST_FK,");
                            sb.Append("       CMT.COST_ELEMENT_MST_PK COSTELEMENTPK,");
                            sb.Append("       CMT.COST_ELEMENT_ID COSTELEMENTID,");
                            sb.Append("       CMT.COST_ELEMENT_NAME COSTELEMENTDESC,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "' CURRENCYFK,");
                            sb.Append("       '" + HttpContext.Current.Session["CURRENCY_ID"] + "' CURRENCYID,");
                            sb.Append("       ROUND((SELECT SUM(NVL(CONT.FCL_REQ_RATE, 0)) RATE");
                            sb.Append("               FROM TARIFF_TRN_SEA_CONT_DTL CONT,");
                            sb.Append("                    TARIFF_TRN_SEA_FCL_LCL  TRN,");
                            sb.Append("                    TARIFF_MAIN_SEA_TBL     MAIN");
                            sb.Append("              WHERE CONT.TARIFF_TRN_SEA_FK = TRN.TARIFF_TRN_SEA_PK");
                            sb.Append("                AND MAIN.TARIFF_MAIN_SEA_PK = TRN.TARIFF_MAIN_SEA_FK");
                            sb.Append("                AND MAIN.TARIFF_REF_NO = '" + TRANS_REF_NO + "'),");
                            sb.Append("             2) RATE,");
                            sb.Append("       '1.00000' ROE,");
                            sb.Append("       ");
                            sb.Append("       ROUND((SELECT SUM(NVL(GET_EX_RATE(TRN.CURRENCY_MST_FK, 173, SYSDATE),");
                            sb.Append("                            0) * NVL(CONT.FCL_REQ_RATE, 0)) AMOUNT");
                            sb.Append("               FROM TARIFF_TRN_SEA_CONT_DTL CONT,");
                            sb.Append("                    TARIFF_TRN_SEA_FCL_LCL  TRN,");
                            sb.Append("                    TARIFF_MAIN_SEA_TBL     MAIN");
                            sb.Append("              WHERE CONT.TARIFF_TRN_SEA_FK = TRN.TARIFF_TRN_SEA_PK");
                            sb.Append("                AND MAIN.TARIFF_MAIN_SEA_PK = TRN.TARIFF_MAIN_SEA_FK");
                            sb.Append("                AND MAIN.TARIFF_REF_NO = '" + TRANS_REF_NO + "'),");
                            sb.Append("             2) AMOUNT,");
                            sb.Append("       '2' BIZTYPE");
                            sb.Append("");
                            sb.Append("  FROM COST_ELEMENT_MST_TBL CMT");
                            sb.Append(" WHERE CMT.COST_ELEMENT_ID = 'OPC'");
                        }
                        //'if not from sl contract and spot rate
                    }
                    else
                    {
                        sb.Append("       SELECT '' SLNR,");
                        sb.Append("       '' PROFITABILITYPK,");
                        sb.Append("       '' QUOTATION_MST_FK,");
                        sb.Append("       '' COSTELEMENTPK,");
                        sb.Append("       '' COSTELEMENTID,");
                        sb.Append("       '' COSTELEMENTDESC,");
                        sb.Append("       '' CURRENCYFK,");
                        sb.Append("       '' CURRENCYID,");
                        sb.Append("       '' RATE,");
                        sb.Append("       '' ROE,");
                        sb.Append("       '' AMOUNT,''BIZTYPE");
                        sb.Append("  FROM DUAL");
                        sb.Append("  WHERE 1 = 2");
                    }

                    //'if bizness type=0
                }
                else
                {
                    sb.Append("       SELECT '' SLNR,");
                    sb.Append("       '' PROFITABILITYPK,");
                    sb.Append("       '' QUOTATION_MST_FK,");
                    sb.Append("       '' COSTELEMENTPK,");
                    sb.Append("       '' COSTELEMENTID,");
                    sb.Append("       '' COSTELEMENTDESC,");
                    sb.Append("       '' CURRENCYFK,");
                    sb.Append("       '' CURRENCYID,");
                    sb.Append("       '' RATE,");
                    sb.Append("       '' ROE,");
                    sb.Append("       '' AMOUNT,''BIZTYPE");
                    sb.Append("  FROM DUAL");
                    sb.Append("  WHERE 1 = 2");
                }

                DsOperatorCost = objWF.GetDataSet(sb.ToString());
                return DsOperatorCost;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region "PortGroup"

        /// <summary>
        /// Fetches from port group.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="PortGrpPK">The port GRP pk.</param>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet FetchFromPortGroup(int QuotPK = 0, int PortGrpPK = 0, string POLPK = "0", int BizType = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                //If QuotPK <> 0 Then
                //    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, T.POL_GRP_FK, PD.PORT_MST_PK, PD.PORT_ID, T.POD_GRP_FK, T.TARIFF_GRP_FK FROM QUOTATION_DTL_TBL T,PORT_MST_TBL P, PORT_MST_TBL PD WHERE T.PORT_MST_POL_FK = P.PORT_MST_PK AND T.PORT_MST_POD_FK = PD.PORT_MST_PK AND T.POL_GRP_FK = " & PortGrpPK)
                //    sb.Append(" AND T.QUOTATION_MST_FK =" & QuotPK & " ORDER BY T.POL_GRP_FK,T.POD_GRP_FK")
                //Else
                //    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POL_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" & PortGrpPK)
                //    sb.Append(" AND P.BUSINESS_TYPE = " & BizType & " AND P.ACTIVE_FLAG = 1 ")
                //    If POLPK <> "0" Then
                //        sb.Append(" AND PGT.PORT_MST_FK IN (" & POLPK & ") ")
                //    End If
                //End If
                //sb.Append("SELECT P.PORT_MST_PK, P.PORT_ID FROM PORT_MST_TBL P WHERE P.PORT_GRP_MST_FK=" & Quotationpk)
                //sb.Append("AND P.BUSINESS_TYPE=2 AND P.ACTIVE_FLAG=1")
                sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POL_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" + PortGrpPK);
                sb.Append(" AND P.BUSINESS_TYPE = " + BizType + " AND P.ACTIVE_FLAG = 1 ");
                if (POLPK != "0")
                {
                    sb.Append(" AND PGT.PORT_MST_FK IN (" + POLPK + ") ");
                }
                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches from port group only.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="PortGrpPK">The port GRP pk.</param>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet FetchFromPortGroupOnly(int QuotPK = 0, int PortGrpPK = 0, string POLPK = "0", int BizType = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                //If QuotPK <> 0 Then
                //    sb.Append(" SELECT DISTINCT T.POL_GRP_FK, '' PORT_ID, T.POL_GRP_FK, T.POD_GRP_FK, '' PORT_ID, T.POD_GRP_FK, T.TARIFF_GRP_FK FROM QUOTATION_DTL_TBL T WHERE T.POL_GRP_FK = " & PortGrpPK)
                //    sb.Append(" AND T.QUOTATION_MST_FK =" & QuotPK & " ORDER BY T.POL_GRP_FK,T.POD_GRP_FK")
                //Else
                //    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POL_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" & PortGrpPK)
                //    sb.Append(" AND P.BUSINESS_TYPE = " & BizType & " AND P.ACTIVE_FLAG = 1 ")
                //    If POLPK <> "0" Then
                //        sb.Append(" AND PGT.PORT_MST_FK IN (" & POLPK & ") ")
                //    End If
                //End If
                //sb.Append("SELECT P.PORT_MST_PK, P.PORT_ID FROM PORT_MST_TBL P WHERE P.PORT_GRP_MST_FK=" & Quotationpk)
                //sb.Append("AND P.BUSINESS_TYPE=2 AND P.ACTIVE_FLAG=1")
                sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POL_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" + PortGrpPK);
                sb.Append(" AND P.BUSINESS_TYPE = " + BizType + " AND P.ACTIVE_FLAG = 1 ");
                if (POLPK != "0")
                {
                    sb.Append(" AND PGT.PORT_MST_FK IN (" + POLPK + ") ");
                }
                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches to port group.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="PortGrpPK">The port GRP pk.</param>
        /// <param name="PODPK">The podpk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet FetchToPortGroup(int QuotPK = 0, int PortGrpPK = 0, string PODPK = "0", int BizType = 1)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                //If QuotPK <> 0 Then
                //    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, T.POD_GRP_FK FROM QUOTATION_DTL_TBL T, PORT_MST_TBL P WHERE T.PORT_MST_POD_FK = P.PORT_MST_PK AND T.POD_GRP_FK = " & PortGrpPK)
                //    sb.Append(" AND T.QUOTATION_MST_FK =" & QuotPK)
                //Else
                //    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POD_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" & PortGrpPK)
                //    sb.Append(" AND P.BUSINESS_TYPE =" & BizType & " AND P.ACTIVE_FLAG = 1")
                //    If PODPK <> "0" Then
                //        sb.Append(" AND PGT.PORT_MST_FK IN (" & PODPK & ") ")
                //    End If
                //End If
                //sb.Append("SELECT P.PORT_MST_PK, P.PORT_ID FROM PORT_MST_TBL P WHERE P.PORT_GRP_MST_FK=" & Quotationpk)
                //sb.Append("AND P.BUSINESS_TYPE=2 AND P.ACTIVE_FLAG=1")
                sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, PGT.PORT_GRP_MST_FK POD_GRP_FK FROM PORT_MST_TBL P, PORT_GRP_TRN_TBL PGT WHERE P.PORT_MST_PK = PGT.PORT_MST_FK AND PGT.PORT_GRP_MST_FK =" + PortGrpPK);
                sb.Append(" AND P.BUSINESS_TYPE =" + BizType + " AND P.ACTIVE_FLAG = 1");
                if (PODPK != "0")
                {
                    sb.Append(" AND PGT.PORT_MST_FK IN (" + PODPK + ") ");
                }
                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the tariff GRP.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="PortGrpPK">The port GRP pk.</param>
        /// <param name="TariffPK">The tariff pk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet FetchTariffGrp(int QuotPK = 0, int PortGrpPK = 0, string TariffPK = "0", string BizType = "0")
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                if (BizType == "Air")
                {
                    if (QuotPK != 0)
                    {
                        sb.Append("SELECT POL.PORT_MST_PK POL_PK,");
                        sb.Append("       POL.PORT_ID POL_ID,");
                        sb.Append("       POD.PORT_MST_PK POD_PK,");
                        sb.Append("       POD.PORT_ID POD_ID,");
                        sb.Append("       T.POL_GRP_FK,");
                        sb.Append("       T.POD_GRP_FK,T.TARIFF_GRP_FK");
                        sb.Append("  FROM QUOTATION_DTL_TBL T, PORT_MST_TBL POL, PORT_MST_TBL POD");
                        sb.Append(" WHERE T.PORT_MST_POL_FK = POL.PORT_MST_PK");
                        sb.Append("   AND T.PORT_MST_POD_FK = POD.PORT_MST_PK");
                        sb.Append("   AND T.QUOTE_DTL_PK = " + QuotPK);
                    }
                    else
                    {
                        sb.Append(" SELECT POL.PORT_MST_PK       POL_PK,");
                        sb.Append("       POL.PORT_ID           POL_ID,");
                        sb.Append("       POD.PORT_MST_PK       POD_PK,");
                        sb.Append("       POD.PORT_ID           POD_ID,");
                        sb.Append("       TGM.POL_GRP_MST_FK    POL_GRP_FK,");
                        sb.Append("       TGM.POD_GRP_MST_FK    POD_GRP_FK,");
                        sb.Append("       TGM.TARIFF_GRP_MST_PK");
                        sb.Append("  FROM PORT_MST_TBL       POL,");
                        sb.Append("       PORT_MST_TBL       POD,");
                        sb.Append("       TARIFF_GRP_TRN_TBL TGT,");
                        sb.Append("       TARIFF_GRP_MST_TBL TGM");
                        sb.Append(" WHERE TGM.TARIFF_GRP_MST_PK = TGT.TARIFF_GRP_MST_FK");
                        sb.Append("   AND POL.PORT_MST_PK = TGT.POL_MST_FK");
                        sb.Append("   AND POD.PORT_MST_PK = TGT.POD_MST_FK");
                        sb.Append("   AND TGM.TARIFF_GRP_MST_PK =" + TariffPK);
                        sb.Append("   AND POL.BUSINESS_TYPE = 1");
                        sb.Append("   AND POL.ACTIVE_FLAG = 1");
                    }
                }
                else
                {
                    sb.Append(" SELECT DISTINCT * FROM (");
                    sb.Append(" SELECT POL.PORT_MST_PK   POL_PK,");
                    sb.Append("       POL.PORT_ID       POL_ID,");
                    sb.Append("       POD.PORT_MST_PK   POD_PK,");
                    sb.Append("       POD.PORT_ID       POD_ID,");
                    sb.Append("       T.POL_GRP_FK      POL_GRP_FK,");
                    sb.Append("       T.PORT_MST_POD_FK POD_GRP_FK,");
                    sb.Append("       T.TARIFF_GRP_FK   TARIFF_GRP_MST_PK");
                    sb.Append("  FROM PORT_MST_TBL POL, PORT_MST_TBL POD, QUOTATION_DTL_TBL T");
                    sb.Append(" WHERE T.PORT_MST_POD_FK = POL.PORT_MST_PK");
                    sb.Append("   AND T.PORT_MST_POD_FK = POD.PORT_MST_PK");
                    sb.Append("   AND T.QUOTATION_MST_FK =" + QuotPK);
                    sb.Append("   UNION");
                    sb.Append(" SELECT POL.PORT_MST_PK       POL_PK,");
                    sb.Append("       POL.PORT_ID           POL_ID,");
                    sb.Append("       POD.PORT_MST_PK       POD_PK,");
                    sb.Append("       POD.PORT_ID           POD_ID,");
                    sb.Append("       TGM.POL_GRP_MST_FK    POL_GRP_FK,");
                    sb.Append("       TGM.POD_GRP_MST_FK    POD_GRP_FK,");
                    sb.Append("       TGM.TARIFF_GRP_MST_PK");
                    sb.Append("  FROM PORT_MST_TBL       POL,");
                    sb.Append("       PORT_MST_TBL       POD,");
                    sb.Append("       TARIFF_GRP_TRN_TBL TGT,");
                    sb.Append("       TARIFF_GRP_MST_TBL TGM");
                    sb.Append(" WHERE TGM.TARIFF_GRP_MST_PK = TGT.TARIFF_GRP_MST_FK");
                    sb.Append("   AND POL.PORT_MST_PK = TGT.POL_MST_FK");
                    sb.Append("   AND POD.PORT_MST_PK = TGT.POD_MST_FK");
                    sb.Append("   AND TGM.TARIFF_GRP_MST_PK =" + TariffPK);
                    sb.Append("   AND POL.BUSINESS_TYPE = 2");
                    sb.Append("   AND POL.ACTIVE_FLAG = 1");
                    sb.Append("   )");
                }

                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetches the tariff pod GRP.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="PortGrpPK">The port GRP pk.</param>
        /// <param name="TariffPK">The tariff pk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <returns></returns>
        public DataSet FetchTariffPODGrp(int QuotPK = 0, int PortGrpPK = 0, string TariffPK = "0", int BizType = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                if (QuotPK != 0)
                {
                    sb.Append(" SELECT P.PORT_MST_PK, P.PORT_ID, T.POD_GRP_FK, T.TARIFF_GRP_FK FROM QUOTATION_TRN_SEA_FCL_LCL T, PORT_MST_TBL P WHERE T.PORT_MST_POD_FK = P.PORT_MST_PK AND T.TARIFF_GRP_FK = " + TariffPK);
                    sb.Append(" AND T.QUOTATION_SEA_FK =" + QuotPK);
                }
                else
                {
                    sb.Append(" SELECT P.PORT_MST_PK,");
                    sb.Append("        P.PORT_ID,");
                    sb.Append("        TGM.POD_GRP_MST_FK POD_GRP_FK,");
                    sb.Append("        TGM.TARIFF_GRP_MST_PK");
                    sb.Append("  FROM PORT_MST_TBL P, TARIFF_GRP_TRN_TBL TGT, TARIFF_GRP_MST_TBL TGM");
                    sb.Append(" WHERE TGM.TARIFF_GRP_MST_PK = TGT.TARIFF_GRP_MST_FK");
                    sb.Append("   AND P.PORT_MST_PK = TGT.POD_MST_FK");
                    sb.Append("   AND TGM.TARIFF_GRP_MST_PK =" + TariffPK);
                    sb.Append("   AND P.BUSINESS_TYPE = " + BizType);
                    sb.Append("   AND P.ACTIVE_FLAG = 1");
                }

                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "PortGroup"

        /// <summary>
        /// Fetches the expanses.
        /// </summary>
        /// <param name="RefPK">The reference pk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="BaseCurPK">The base current pk.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="RefFlag">The reference flag.</param>
        /// <returns></returns>
        public DataSet FetchExpanses(int RefPK, int BizType, int BaseCurPK, int CargoType, int RefFlag)
        {
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();

                var _with60 = objWF.MyCommand.Parameters;
                _with60.Add("QUOTATION_FK_IN", RefPK).Direction = ParameterDirection.Input;
                _with60.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with60.Add("BASE_CURRENCY_MST_PK_IN", BaseCurPK).Direction = ParameterDirection.Input;
                _with60.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                /// Quotation Sea
                if (RefFlag == 0)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_EXPENSE_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_EXPENSE_LCL");
                    }
                    /// Booking
                }
                else if (RefFlag == 1)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_EXPENSE_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_EXPENSE_LCL");
                    }
                    /// SRR
                }
                else if (RefFlag == 2)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_EXPENSE_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_EXPENSE_LCL");
                    }
                    /// Quotation Air
                }
                else if (RefFlag == 3)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_EXPENSE_AIR");
                    /// SRR Air
                }
                else if (RefFlag == 4)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_EXPENSE_AIR");
                    /// Booking Air
                }
                else if (RefFlag == 5)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_EXPENSE_AIR");
                    ///' Quotation Air ( Specific )
                }
                else if (RefFlag == 6)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_EXPENSE_SPC_AIR");
                }
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the header.
        /// </summary>
        /// <param name="RefPK">The reference pk.</param>
        /// <param name="RefFlag">The reference flag.</param>
        /// <returns></returns>
        public DataSet FetchHeader(int RefPK, int RefFlag)
        {
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();

                var _with61 = objWF.MyCommand.Parameters;
                _with61.Add("QUOTATION_FK_IN", RefPK).Direction = ParameterDirection.Input;
                _with61.Add("REF_FLAG_IN", RefFlag).Direction = ParameterDirection.Input;
                _with61.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_HEADER");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }

        /// <summary>
        /// Fetches the income.
        /// </summary>
        /// <param name="RefPK">The reference pk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="BaseCurPK">The base current pk.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="RefFlag">The reference flag.</param>
        /// <returns></returns>
        public DataSet FetchIncome(int RefPK, int BizType, int BaseCurPK, int CargoType, int RefFlag)
        {
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();

                var _with62 = objWF.MyCommand.Parameters;
                _with62.Add("QUOTATION_FK_IN", RefPK).Direction = ParameterDirection.Input;
                _with62.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with62.Add("BASE_CURRENCY_MST_PK_IN", BaseCurPK).Direction = ParameterDirection.Input;
                _with62.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                ///' Quotation Sea
                if (RefFlag == 0)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_INCOME_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_INCOME_LCL");
                    }
                    ///' Booking
                }
                else if (RefFlag == 1)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_INCOME_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_INCOME_LCL");
                    }
                    ///' SRR
                }
                else if (RefFlag == 2)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_INCOME_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_INCOME_LCL");
                    }
                    ///' Quotation Air
                }
                else if (RefFlag == 3)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_INCOME_AIR");
                    ///' SRR Air
                }
                else if (RefFlag == 4)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_INCOME_AIR");
                    ///' Booking Air
                }
                else if (RefFlag == 5)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_INCOME_AIR");
                    ///' Quotation Air ( Specific )
                }
                else if (RefFlag == 6)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_INCOME_SPC_AIR");
                }
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the profit.
        /// </summary>
        /// <param name="RefPK">The reference pk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="RefFlag">The reference flag.</param>
        /// <returns></returns>
        public DataSet FetchProfit(int RefPK, int BizType, int CargoType, int RefFlag)
        {
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();

                var _with63 = objWF.MyCommand.Parameters;
                _with63.Add("QUOTATION_FK_IN", RefPK).Direction = ParameterDirection.Input;
                _with63.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with63.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                /// Quotation Sea
                if (RefFlag == 0)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_PROFIT_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_PROFIT_LCL");
                    }
                    /// Booking
                }
                else if (RefFlag == 1)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_PROFIT_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_PROFIT_LCL");
                    }
                    /// SRR
                }
                else if (RefFlag == 2)
                {
                    if (CargoType == 1)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_PROFIT_FCL");
                    }
                    else if (CargoType == 2)
                    {
                        return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_PROFIT_LCL");
                    }
                    /// Quotation Air
                }
                else if (RefFlag == 3)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_PROFIT_AIR");
                    /// SRR Air
                }
                else if (RefFlag == 4)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_SRR_PROFIT_AIR");
                    /// Booking Air
                }
                else if (RefFlag == 5)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_BKG_PROFIT_AIR");
                    ///' Quotation Air ( Specific )
                }
                else if (RefFlag == 6)
                {
                    return objWF.GetDataSet("FETCH_PROFITABILITY_PKG", "FETCH_QUOT_PROFIT_SPC_AIR");
                }
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the quot from.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        /// End
        public int FetchQuotFrom(int QuotPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                strSQL = " SELECT DISTINCT T.TRANS_REFERED_FROM FROM QUOTATION_DTL_TBL T WHERE T.QUOTATION_MST_FK = " + QuotPK;
                return Convert.ToInt32(objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the name of the pol.
        /// </summary>
        /// <param name="PolPK">The pol pk.</param>
        /// <returns></returns>
        public string GetPolName(string PolPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                strSQL = "  SELECT POL.PORT_NAME FROM PORT_MST_TBL POL WHERE POL.PORT_MST_PK= " + PolPK;
                return (objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the name of the pod.
        /// </summary>
        /// <param name="PolPK">The pol pk.</param>
        /// <returns></returns>
        public string GetPodName(string PolPK)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                strSQL = "  SELECT POL.PORT_NAME FROM PORT_MST_TBL POL WHERE POL.PORT_MST_PK= " + PolPK;
                return (objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Gets the quot dt.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public DateTime GetQuotDt(string QuotPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT Q.QUOTATION_DATE ");
            sb.Append("   FROM QUOTATION_MST_TBL Q");
            sb.Append("   WHERE Q.QUOTATION_MST_PK = " + QuotPK);
            try
            {
                return Convert.ToDateTime(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        /// <summary>
        /// Gets the quot amend st.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public int GetQuotAmendSt(string QuotPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT Q.AMEND_FLAG ");
            sb.Append("   FROM QUOTATION_MST_TBL Q");
            sb.Append("   WHERE Q.QUOTATION_MST_PK = " + QuotPK);
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        /// <summary>
        /// Gets the automatic quote.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public int GetAutoQuote(string QuotPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT Q.AUTO_CREATE ");
            sb.Append("   FROM QUOTATION_MST_TBL Q");
            sb.Append("   WHERE Q.QUOTATION_MST_PK = " + QuotPK);
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        /// <summary>
        /// Gets the aif charges.
        /// </summary>
        /// <returns></returns>
        public DataSet GetAIFCharges()
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT ROWTOCOL('SELECT F.FREIGHT_ELEMENT_MST_PK || F.CHARGE_BASIS ");
            sb.Append("   FROM FREIGHT_ELEMENT_MST_TBL F WHERE F.FREIGHT_ELEMENT_MST_PK IN (' || ");
            sb.Append("   NVL(FEMT.AIF_FREIGHT_FKS,0) || ')') FROM FREIGHT_ELEMENT_MST_TBL FEMT, PARAMETERS_TBL PT ");
            sb.Append("   WHERE FEMT.FREIGHT_ELEMENT_MST_PK = PT.FRT_AIF_FK ");
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        /// <summary>
        /// Gets the aif status.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <returns></returns>
        public DataSet GetAIFStatus(string QuotPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("   SELECT Q.AIF_FLAG FROM QUOTATION_MST_TBL Q WHERE Q.QUOTATION_MST_PK=" + QuotPK);
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        /// <summary>
        /// Fetches the imo code.
        /// </summary>
        /// <param name="ExpContPK">The exp cont pk.</param>
        /// <returns></returns>
        public DataSet FetchIMOCode(int ExpContPK)
        {
            //Add by Raghavendra
            WorkFlow objWF = new WorkFlow();
            string UNnr = null;
            //job_trn_sea_exp_spl_req()
            string strQuery = "SELECT CO.CO.IMDG_CLASS_CODE,CO.UN_NO,CO.PROPER_SHIPPING_NAME FROM  job_trn_sea_exp_spl_req co WHERE co.job_trn_sea_exp_cont_fk=" + ExpContPK;
            try
            {
                return objWF.GetDataSet(strQuery);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
            }
        }

        #region " Manual Query."

        /// <summary>
        /// Manuals the quote query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityPks">The commodity PKS.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="PostBackFlag">The post back flag.</param>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <returns></returns>
        private string ManualQuoteQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityPks = "", string ShipDate = "", int PostBackFlag = 0, int QuotationPk = 0)
        {
            try
            {
                StringBuilder sb = new StringBuilder(5000);
                int i = 0;

                if (QuotationPk > 0)
                {
                    if (string.IsNullOrEmpty(CommodityPks))
                    {
                        DataSet ds = null;
                        CommodityPks = "0";
                        WorkFlow objWF = new WorkFlow();
                        sb.Append(" SELECT TRN.COMMODITY_MST_FK");
                        sb.Append("  FROM QUOTATION_MST_TBL MAIN, QUOTATION_DTL_TBL TRN");
                        sb.Append(" WHERE MAIN.QUOTATION_MST_PK = " + QuotationPk + "");
                        sb.Append("   AND MAIN.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                        sb.Append("");
                        ds = objWF.GetDataSet(sb.ToString());
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
                            {
                                CommodityPks = CommodityPks + ',' + ds.Tables[0].Rows[i]["COMMODITY_MST_FK"];
                            }
                        }
                        sb.Remove(0, sb.Length);
                    }

                    //sb.Append(" SELECT DISTINCT QTS.QUOTE_DTL_PK PK,")
                    //sb.Append("                'Manual' AS TYPE,")
                    //sb.Append("                QTS.Trans_Ref_No REFNO,")
                    //sb.Append("                SYSDATE SHIP_DATE,")
                    //sb.Append("                QTS.OPERATOR_MST_FK OPER_PK,")
                    //sb.Append("                OMT.OPERATOR_ID OPER_ID,")
                    //sb.Append("                QTS.COMMODITY_MST_FK COMM_PK,")
                    //sb.Append("                CMT.COMMODITY_ID COMM_ID,")
                    //sb.Append("                QTS.PACK_TYPE_FK BASIS_PK,")
                    //sb.Append("                PCT.PACK_TYPE_ID PACK_TYPE,")
                    //sb.Append("                QTS.BASIS BASIS_PK,")
                    //sb.Append("                DMT.DIMENTION_ID BASIS_ID,")
                    //sb.Append("                QTS.EXPECTED_BOXES QUANTITY,")
                    //sb.Append("                QTS.EXPECTED_WEIGHT CARGO_WT,")
                    //sb.Append("                QTS.EXPECTED_VOLUME CARGO_VOL,")
                    //sb.Append("                '' CARGO_CALC,")
                    //sb.Append("                NULL ALL_IN_TARIFF,")
                    //sb.Append("                'false' SELECTED,")
                    //sb.Append("                QTS.BUYING_RATE OPERATOR_RATE,")
                    //sb.Append("                3 PRIORITYORDER,")
                    //sb.Append("                ROWNUM SLNO,")
                    //sb.Append("                QTSO.AMOUNT OTHER_CHARGE,")
                    //sb.Append("                '' OTH_DTL")
                    //sb.Append("")
                    //sb.Append("       FROM QUOTATION_MST_TBL         QST,")
                    //sb.Append("       QUOTATION_DTL_TBL QTS,")
                    //sb.Append("       ")
                    //sb.Append("       QUOTATION_OTHER_FREIGHT_TRN QTSO,")
                    //sb.Append("       OPERATOR_MST_TBL           OMT,")
                    //sb.Append("       DIMENTION_UNIT_MST_TBL     DMT,")
                    //sb.Append("       COMMODITY_MST_TBL          CMT,")
                    //sb.Append("       PACK_TYPE_MST_TBL          PCT")
                    //sb.Append("")
                    //sb.Append("   WHERE QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK(+)")
                    //sb.Append("   AND QTS.COMMODITY_MST_FK = CMT.COMMODITY_MST_PK")
                    //sb.Append("   AND QTS.PACK_TYPE_FK = PCT.PACK_TYPE_MST_PK(+)")
                    //sb.Append("   AND OMT.OPERATOR_MST_PK = QTS.OPERATOR_MST_FK")
                    //sb.Append("   AND QTS.BASIS = DMT.DIMENTION_UNIT_MST_PK")
                    //sb.Append("   AND QTS.QUOTE_DTL_PK = QTSO.QUOTATION_DTL_FK(+)")
                    //sb.Append("   AND QST.QUOTATION_MST_PK = " & QuotationPk & " ")

                    sb.Append(" SELECT Q.*,ROWNUM SLNR FROM (SELECT NULL AS PK,");
                    sb.Append("       'Manual' AS TYPE,");
                    sb.Append("       NULL AS REFNO,");
                    sb.Append("       SYSDATE SHIP_DATE,");
                    sb.Append("       NULL OPER_PK,");
                    sb.Append("       '' OPER_ID,");
                    sb.Append("       CMT.COMMODITY_MST_PK COMM_PK,");
                    sb.Append("       CMT.COMMODITY_ID COMM_ID,");
                    sb.Append("       0 PACK_PK,");
                    sb.Append("       '' PACK_TYPE,");
                    sb.Append("       NULL BASIS_PK,");
                    sb.Append("       '' BASIS_ID,");
                    sb.Append("       1 QUANTITY,");
                    sb.Append("       NULL CARGO_WT,");
                    sb.Append("       NULL CARGO_VOL,");
                    sb.Append("       '' CARGO_CALC,");
                    sb.Append("       NULL ALL_IN_TARIFF,");
                    sb.Append("       'false' SELECTED,");
                    sb.Append("       0 OPERATOR_RATE,");
                    sb.Append("       3 PRIORITYORDER,");
                    sb.Append("       ROWNUM SLNO,");
                    sb.Append("       NULL OTHER_CHARGE,");
                    sb.Append("       '' OTH_DTL,");
                    sb.Append("       0 TOTAL_RATE");
                    sb.Append("");
                    sb.Append("  FROM COMMODITY_MST_TBL CMT");
                    sb.Append("  WHERE CMT.COMMODITY_MST_PK IN ( " + CommodityPks + " )");
                    sb.Append("   AND CMT.COMMODITY_MST_PK NOT IN");
                    sb.Append("       (SELECT QTS.COMMODITY_MST_FK");
                    sb.Append("          FROM QUOTATION_MST_TBL          QST,");
                    sb.Append("               QUOTATION_DTL_TBL  QTS,");
                    sb.Append("               QUOTATION_OTHER_FREIGHT_TRN QTSO,");
                    sb.Append("               OPERATOR_MST_TBL           OMT,");
                    sb.Append("               DIMENTION_UNIT_MST_TBL     DMT,");
                    sb.Append("               COMMODITY_MST_TBL          CMT,");
                    sb.Append("               PACK_TYPE_MST_TBL          PCT");
                    sb.Append("          WHERE QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK(+)");
                    sb.Append("           AND QTS.COMMODITY_MST_FK = CMT.COMMODITY_MST_PK");
                    sb.Append("           AND QTS.PACK_TYPE_FK = PCT.PACK_TYPE_MST_PK(+)");
                    sb.Append("           AND OMT.OPERATOR_MST_PK(+) = QTS.CARRIER_MST_FK");
                    sb.Append("           AND QTS.BASIS = DMT.DIMENTION_UNIT_MST_PK");
                    sb.Append("           AND QTS.QUOTE_DTL_PK = QTSO.QUOTATION_DTL_FK(+)");
                    sb.Append("           AND QST.QUOTATION_MST_PK =  " + QuotationPk + ")");
                    sb.Append("");
                    sb.Append("  UNION");
                    sb.Append("  SELECT DISTINCT QTS.QUOTE_DTL_PK PK,");
                    sb.Append("                'Manual' AS TYPE,");
                    sb.Append("                QTS.TRANS_REF_NO REFNO,");
                    sb.Append("                SYSDATE SHIP_DATE,");
                    sb.Append("                QTS.CARRIER_MST_FK OPER_PK,");
                    sb.Append("                OMT.OPERATOR_ID OPER_ID,");
                    sb.Append("                QTS.COMMODITY_MST_FK COMM_PK,");
                    sb.Append("                CMT.COMMODITY_ID COMM_ID,");
                    sb.Append("                QTS.PACK_TYPE_FK BASIS_PK,");
                    sb.Append("                PCT.PACK_TYPE_ID PACK_TYPE,");
                    sb.Append("                QTS.BASIS BASIS_PK,");
                    sb.Append("                DMT.DIMENTION_ID BASIS_ID,");
                    sb.Append("                QTS.EXPECTED_BOXES QUANTITY,");
                    sb.Append("                QTS.EXPECTED_WEIGHT CARGO_WT,");
                    sb.Append("                QTS.EXPECTED_VOLUME CARGO_VOL,");
                    sb.Append("                '' CARGO_CALC,");
                    sb.Append("                NULL ALL_IN_TARIFF,");
                    sb.Append("                'false' SELECTED,");
                    sb.Append("                QTS.BUYING_RATE OPERATOR_RATE,");
                    sb.Append("                3 PRIORITYORDER,");
                    sb.Append("                ROWNUM SLNO,");
                    sb.Append("                QTSO.AMOUNT OTHER_CHARGE,");
                    sb.Append("                '' OTH_DTL,");
                    sb.Append("                QTS.BUYING_RATE TOTAL_RATE");
                    //sb.Append(" (SELECT (SUM(ROUND(F.RATE,2)) * (CASE")
                    //sb.Append("                                  WHEN DMT.DIMENTION_ID = 'W/M' THEN")
                    //sb.Append("                                   CASE")
                    //sb.Append("                                     WHEN QTS.EXPECTED_WEIGHT >")
                    //sb.Append("                                          QTS.EXPECTED_VOLUME THEN")
                    //sb.Append("                                      QTS.EXPECTED_WEIGHT")
                    //sb.Append("                                     ELSE")
                    //sb.Append("                                      QTS.EXPECTED_VOLUME")
                    //sb.Append("                                   END")
                    //sb.Append("                                  WHEN DMT.DIMENTION_ID = 'UNIT' THEN")
                    //sb.Append("                                   QTS.EXPECTED_BOXES")
                    //sb.Append("                                  WHEN DMT.DIMENTION_ID = 'MT' THEN")
                    //sb.Append("                                   QTS.EXPECTED_WEIGHT")
                    //sb.Append("                                  WHEN DMT.DIMENTION_ID = 'CBM' THEN")
                    //sb.Append("                                   QTS.EXPECTED_VOLUME")
                    //sb.Append("                                  ELSE")
                    //sb.Append("                                   QTS.EXPECTED_BOXES")
                    //sb.Append("                                END))")
                    //sb.Append("                           FROM QUOTATION_FREIGHT_TRN F")
                    //sb.Append("                          WHERE F.QUOTATION_DTL_FK = QTS.QUOTE_DTL_PK) TOTAL_RATE")
                    sb.Append("   FROM QUOTATION_MST_TBL          QST,");
                    sb.Append("       QUOTATION_DTL_TBL  QTS,");
                    sb.Append("       QUOTATION_OTHER_FREIGHT_TRN QTSO,");
                    sb.Append("       OPERATOR_MST_TBL           OMT,");
                    sb.Append("       DIMENTION_UNIT_MST_TBL     DMT,");
                    sb.Append("       COMMODITY_MST_TBL          CMT,");
                    sb.Append("       PACK_TYPE_MST_TBL          PCT");
                    sb.Append("   WHERE QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK(+)");
                    sb.Append("   AND QTS.COMMODITY_MST_FK = CMT.COMMODITY_MST_PK");
                    sb.Append("   AND QTS.PACK_TYPE_FK = PCT.PACK_TYPE_MST_PK(+)");
                    sb.Append("   AND OMT.OPERATOR_MST_PK(+)= QTS.CARRIER_MST_FK");
                    sb.Append("   AND QTS.BASIS = DMT.DIMENTION_UNIT_MST_PK");
                    sb.Append("   AND QTS.QUOTE_DTL_PK = QTSO.QUOTATION_DTL_FK(+)");
                    sb.Append("        AND QST.QUOTATION_MST_PK =  " + QuotationPk + "");
                    sb.Append(")Q");
                }
                else
                {
                    sb.Append("SELECT NULL AS PK,");
                    sb.Append("       'Manual' AS TYPE,");
                    sb.Append("       NULL AS REFNO,");
                    sb.Append("       SYSDATE SHIP_DATE,");
                    sb.Append("       NULL OPER_PK,");
                    sb.Append("       '' OPER_ID,");
                    sb.Append("       CMT.COMMODITY_MST_PK COMM_PK,");
                    sb.Append("       CMT.COMMODITY_ID COMM_ID,");
                    sb.Append("       0 PACK_PK,");
                    sb.Append("       '' PACK_TYPE,");
                    sb.Append("       NULL BASIS_PK,");
                    sb.Append("       '' BASIS_ID,");
                    sb.Append("       1 QUANTITY,");
                    sb.Append("       '' CARGO_WT,");
                    sb.Append("       '' CARGO_VOL,");
                    sb.Append("       '' CARGO_CALC,");
                    sb.Append("       NULL ALL_IN_TARIFF,");
                    sb.Append("       'false' SELECTED,");
                    sb.Append("       '0.00' OPERATOR_RATE,");
                    sb.Append("       3 PRIORITYORDER,");
                    sb.Append("       ROWNUM SLNO,");
                    sb.Append("       '' OTHER_CHARGE,");
                    sb.Append("       '' OTH_DTL,");
                    sb.Append("       '0.00' TOTAL_RATE,");
                    sb.Append("       ROWNUM SLNR");
                    sb.Append("  FROM COMMODITY_MST_TBL CMT");
                    sb.Append(" WHERE ");
                    if (string.IsNullOrEmpty(CommodityPks))
                    {
                        CommodityPks = " 0";
                    }

                    sb.Append("  CMT.COMMODITY_MST_PK IN ( " + CommodityPks + " )");
                    if (PostBackFlag == 0)
                    {
                        sb.Append(" AND 1=2 ");
                    }
                    else
                    {
                        sb.Append(" AND 1=1");
                    }
                }

                return sb.ToString();
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Manuals the quote freight query.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CommodityPks">The commodity PKS.</param>
        /// <param name="PostBackFlag">The post back flag.</param>
        /// <param name="QuotationPk">The quotation pk.</param>
        /// <param name="QuotStatus">The quot status.</param>
        /// <param name="PROCESS_TYPE">Type of the proces s_.</param>
        /// <returns></returns>
        private string ManualQuoteFreightQuery(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string CommodityPks = "", int PostBackFlag = 0, int QuotationPk = 0, int QuotStatus = 0, int PROCESS_TYPE = 0)
        {
            try
            {
                StringBuilder sb = new StringBuilder(5000);
                int i = 0;
                WorkFlow objWF = new WorkFlow();
                int QtStatus = 0;
                if (QuotationPk > 0)
                {
                    if (string.IsNullOrEmpty(CommodityPks))
                    {
                        DataSet ds = null;
                        CommodityPks = "0";
                        sb.Append(" SELECT TRN.COMMODITY_MST_FK");
                        sb.Append("  FROM QUOTATION_MST_TBL MAIN, QUOTATION_DTL_TBL TRN");
                        sb.Append(" WHERE MAIN.QUOTATION_MST_PK = " + QuotationPk + "");
                        sb.Append("   AND MAIN.QUOTATION_MST_PK = TRN.QUOTATION_MST_FK");
                        sb.Append("");
                        ds = objWF.GetDataSet(sb.ToString());
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
                            {
                                CommodityPks = CommodityPks + ',' + ds.Tables[0].Rows[i]["COMMODITY_MST_FK"];
                            }
                        }
                        sb.Remove(0, sb.Length);
                    }
                    //Added by Faheem
                    //Dim strStatus As String = "SELECT Q.STATUS FROM QUOTATION_MST_TBL Q WHERE Q.QUOTATION_MST_PK= " & QuotationPk
                    //QtStatus = CType(objWF.ExecuteScaler(strStatus), Int32)
                    //End
                    sb.Append(" SELECT QTS.TRANS_REF_NO REFNO,");
                    sb.Append("       QTS.BASIS BASIS_PK,");
                    sb.Append("       ('AYZ'|| '$$;' || OFEMT.CREDIT) COMMODITY,");
                    sb.Append("       QTSD.FREIGHT_ELEMENT_MST_FK FRT_PK,");
                    sb.Append("       OFEMT.FREIGHT_ELEMENT_ID FREIGHT_ELEMENT_ID,");
                    sb.Append("       DECODE(OFEMT.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit') CHARGE_BASIS,");
                    //sb.Append("      QTSD.CHECK_FOR_ALL_IN_RT SEL,")
                    sb.Append("       DECODE (QTSD.CHECK_FOR_ALL_IN_RT,1,'true',0,'false') SELECTED,");
                    sb.Append("       DECODE (QTSD.CHECK_ADVATOS,1,'true',0,'false') ADVATOS,");
                    //'for Advatos
                    sb.Append("       QTSD.CURRENCY_MST_FK CURR_PK,");
                    sb.Append("       OCUMT.CURRENCY_ID CURRENCY_ID,");
                    sb.Append("       OCUMT.CURRENCY_NAME CURRENCY_NAME,");
                    sb.Append("       QTSD.QUOTED_MIN_RATE QUOTE_MIN_RATE,");
                    sb.Append("       QTSD.QUOTED_RATE QUOTERATE,");
                    sb.Append("    ROUND(QTSD.ROE, 6) EXCHANGE_RATE,");
                    //sb.Append("        NVL(NVL(QTSD.ROE, 1) * NVL(QTSD.RATE, 0), 0) AMOUNT,")
                    //sb.Append(" NVL(NVL(QTSD.ROE, 1) * NVL(CASE")
                    sb.Append(" NVL(NVL(CASE");
                    sb.Append("                                     WHEN nvl(QTSD.QUOTED_MIN_RATE,0) > nvl(QTSD.QUOTED_RATE,0) THEN");
                    // sb.Append("                                      QTSD.QUOTED_MIN_RATE")
                    sb.Append("          (QTSD.QUOTED_MIN_RATE * NVL(DECODE(OFEMT.CREDIT, 0, -1, 1, 1), 1))");
                    sb.Append("                                     ELSE");
                    // sb.Append("                                      QTSD.QUOTED_RATE")
                    sb.Append("                                       (QTSD.QUOTED_RATE * NVL(DECODE(OFEMT.CREDIT,NULL,1, 0, -1, 1, 1), 1))");

                    sb.Append("                                   END,");
                    sb.Append("                                   0),");
                    sb.Append("            0) FINAL_RATE,");
                    sb.Append(" NVL(NVL(CASE");
                    sb.Append("                                     WHEN nvl(QTSD.QUOTED_MIN_RATE,0) > nvl(QTSD.QUOTED_RATE,0) THEN");
                    sb.Append("                                      QTSD.RATE");
                    sb.Append("                                     ELSE");
                    sb.Append("                                      QTSD.RATE");
                    sb.Append("                                   END,");
                    sb.Append("                                   0),");
                    sb.Append("            0) QUOTERATE1,");
                    //sb.Append("            0 FINAL_AMOUNT,")
                    sb.Append("       QTSD.QUOTION_FREIGHT_PK BASISPK,");

                    //'sb.Append("       QTSD.PYMT_TYPE,")
                    sb.Append("   CASE");
                    sb.Append("         WHEN QTSD.PYMT_TYPE = 1 THEN");
                    sb.Append("          'PrePaid'");
                    sb.Append("         WHEN QTSD.PYMT_TYPE = 2 THEN");
                    sb.Append("          'Collect'");
                    sb.Append("         ELSE");
                    sb.Append("          'Foreign'");
                    sb.Append("       END PYTPE,");

                    sb.Append("       QTS.COMMODITY_MST_FK COMM_PK");
                    sb.Append("   FROM QUOTATION_MST_TBL          QST,");
                    sb.Append("       QUOTATION_DTL_TBL  QTS,");
                    sb.Append("       QUOTATION_FREIGHT_TRN QTSD,");
                    sb.Append("       OPERATOR_MST_TBL           OMT,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL    OFEMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL      OCUMT");
                    sb.Append("    WHERE QST.QUOTATION_MST_PK(+) = QTS.QUOTATION_MST_FK");
                    sb.Append("   AND OMT.OPERATOR_MST_PK(+) = QTS.CARRIER_MST_FK AND QST.BIZ_TYPE= 2");
                    sb.Append("   AND QTS.QUOTE_DTL_PK = QTSD.QUOTATION_DTL_FK");
                    sb.Append("   AND QTSD.FREIGHT_ELEMENT_MST_FK(+) = OFEMT.FREIGHT_ELEMENT_MST_PK");
                    sb.Append("   AND QTSD.CURRENCY_MST_FK = OCUMT.CURRENCY_MST_PK");
                    sb.Append("   AND QST.QUOTATION_MST_PK= " + QuotationPk + " ");
                    if (QuotStatus != 2)
                    {
                        sb.Append("  UNION ");
                        sb.Append(" SELECT NULL AS REFNO,");
                        sb.Append("                NULL AS BASIS_PK,");
                        sb.Append("                (CMT.COMMODITY_NAME|| '$$;' || OFEMT.CREDIT) AS COMMODITY,");
                        sb.Append("                OFEMT.FREIGHT_ELEMENT_MST_PK FRT_PK,");
                        sb.Append("                OFEMT.FREIGHT_ELEMENT_ID,");
                        sb.Append("       DECODE(OFEMT.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit') CHARGE_BASIS,");
                        sb.Append("                NULL SELECTED,");
                        sb.Append("                NULL ADVATOS,");
                        sb.Append("                OCUMT.CURRENCY_MST_PK CURR_PK,");
                        sb.Append("                OCUMT.CURRENCY_ID,");
                        sb.Append("                ''CURRENCY_NAME,");
                        // sb.Append("                ''EXCHANGE_RATE,")
                        sb.Append("                null AS QUOTE_MIN_RATE,");
                        sb.Append("                null AS QUOTERATE,");
                        sb.Append("    1.000000 EXCHANGE_RATE,");
                        sb.Append("     0.00 FINAL_RATE,");
                        sb.Append("     0.00 QUOTERATE1,");
                        sb.Append("                NULL AS BASISPK,");
                        sb.Append("                'PrePaid' PYTPE,");
                        sb.Append("                CMT.COMMODITY_MST_PK COMM_PK");
                        sb.Append("   FROM    FREIGHT_ELEMENT_MST_TBL OFEMT,");
                        sb.Append("       CURRENCY_TYPE_MST_TBL   OCUMT,");
                        sb.Append("       COMMODITY_MST_TBL CMT");
                        sb.Append(" WHERE ");

                        sb.Append("   OFEMT.BUSINESS_TYPE IN (2, 3)");
                        sb.Append("   AND OCUMT.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"]);
                        sb.Append("   AND OFEMT.ACTIVE_FLAG = 1");
                        //'NOT IN
                        sb.Append(" AND  OFEMT.FREIGHT_ELEMENT_MST_PK NOT IN (SELECT  qtsD.Freight_Element_Mst_Fk ");

                        sb.Append("  FROM QUOTATION_MST_TBL          QST,");
                        sb.Append("       QUOTATION_DTL_TBL  QTS,");
                        sb.Append("       QUOTATION_FREIGHT_TRN QTSD");
                        sb.Append(" WHERE QST.QUOTATION_MST_PK(+) = QTS.QUOTATION_MST_FK");
                        sb.Append("   AND QTS.QUOTE_DTL_PK = QTSD.QUOTATION_DTL_FK(+)");
                        sb.Append("   AND QTS.Commodity_Mst_Fk=CMT.COMMODITY_MST_PK");
                        sb.Append("   AND QST.QUOTATION_MST_PK = " + QuotationPk + ") ");

                        sb.Append("   AND nvl(OFEMT.CHARGE_TYPE,0) <> 3 ");
                        if (string.IsNullOrEmpty(CommodityPks))
                        {
                            CommodityPks = " 0";
                        }
                        sb.Append("   AND CMT.COMMODITY_MST_PK IN (" + CommodityPks + ")");
                        sb.Append(" AND 1=1");
                    }
                }
                else
                {
                    sb.Append(" SELECT NULL AS REFNO,");
                    sb.Append("                NULL AS BASIS_PK,");
                    //'changed for cr/dr sb.Append("                CMT.COMMODITY_NAME AS COMMODITY,")
                    sb.Append(" (CMT.COMMODITY_NAME || '$$;' || OFEMT.CREDIT) AS COMMODITY,");
                    sb.Append("                OFEMT.FREIGHT_ELEMENT_MST_PK FRT_PK,");
                    sb.Append("                OFEMT.FREIGHT_ELEMENT_ID,");
                    sb.Append("       DECODE(OFEMT.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit') CHARGE_BASIS,");
                    sb.Append("                DECODE(0, 1, 'true', 'false') SELECTED,");
                    sb.Append("                DECODE(0, 1, 'true', 'false') ADVATOS,");
                    sb.Append("                OCUMT.CURRENCY_MST_PK CURR_PK,");
                    sb.Append("                OCUMT.CURRENCY_ID,");
                    sb.Append("                ''CURRENCY_NAME,");
                    sb.Append("                0.00 AS QUOTE_MIN_RATE,");
                    sb.Append("                0.00 AS QUOTERATE,");
                    sb.Append("                1.000000 EXCHANGE_RATE,");
                    sb.Append("                0.00 FINAL_RATE,");
                    sb.Append("                0.00 QUOTERATE1,");
                    sb.Append("                NULL AS BASISPK,");

                    sb.Append("   CASE");
                    sb.Append("         WHEN OFEMT.FREIGHT_ELEMENT_ID='THD' THEN");
                    sb.Append("          'Collect'");
                    sb.Append("        else ");
                    sb.Append("          'PrePaid'");
                    sb.Append("       END PYTPE,");

                    //'   sb.Append("                'PrePaid' AS PYTPE,")

                    sb.Append("                CMT.COMMODITY_MST_PK COMM_PK");
                    sb.Append("   FROM    FREIGHT_ELEMENT_MST_TBL OFEMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL   OCUMT,");
                    sb.Append("       COMMODITY_MST_TBL CMT");
                    sb.Append(" WHERE ");

                    sb.Append("   OFEMT.BUSINESS_TYPE IN (2, 3)");
                    sb.Append("   AND OCUMT.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"]);
                    sb.Append("   AND OFEMT.ACTIVE_FLAG = 1");
                    sb.Append("   AND nvl(OFEMT.CHARGE_TYPE,0) <> 3 ");
                    if (string.IsNullOrEmpty(CommodityPks))
                    {
                        CommodityPks = " 0";
                    }
                    sb.Append("   AND CMT.COMMODITY_MST_PK IN (" + CommodityPks + ")");
                    if (PostBackFlag == 0)
                    {
                        sb.Append(" AND 1=2 ");
                    }
                    else
                    {
                        sb.Append(" AND 1=1");
                    }
                    sb.Append("   ORDER BY OFEMT.preference");
                }

                return sb.ToString();
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " Manual Query."

        /// <summary>
        /// Fetch_s the header.
        /// </summary>
        /// <param name="Iquotationpk">The iquotationpk.</param>
        /// <returns></returns>
        public DataSet Fetch_Header(int Iquotationpk = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT DISTINCT CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN QTS.POL_GRP_FK ELSE QTS.Port_Mst_PoL_Fk END PORT_MST_POL_FK,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN (SELECT PGMT.PORT_GRP_ID FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK=QTS.POL_GRP_FK) ELSE POL.PORT_ID END PORT_ID,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN (SELECT PGMT.PORT_GRP_NAME FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK=QTS.POL_GRP_FK) ELSE POL.PORT_NAME END PORT_NAME,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK) ELSE TO_CHAR(QTS.Port_Mst_Pod_Fk) END podpk,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT PGMT.PORT_GRP_ID FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK IN (select DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK || ')') ELSE POD.PORT_ID END podid,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT PGMT.PORT_GRP_NAME FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK IN (select DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK || ')') ELSE POD.PORT_NAME END  podNAME,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.PORT_MST_POL_FK from quotation_dtl_tbl qdt where QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END POLPORTPK,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.PORT_MST_POD_FK from quotation_dtl_tbl qdt where QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END PODPORTPK,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT pmt.port_id from quotation_dtl_tbl qdt,port_mst_tbl pmt where qdt.port_mst_pol_fk=pmt.port_mst_pk and QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END POLPORTID,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT pmt.port_id from quotation_dtl_tbl qdt,port_mst_tbl pmt where qdt.PORT_MST_POD_FK=pmt.port_mst_pk and QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END PODPORTID,");
            sb.Append("       QST.CUSTOMER_MST_FK,");
            sb.Append("       CMT.CUSTOMER_ID,");
            sb.Append("       CMT.CUSTOMER_NAME,");
            sb.Append("       QST.CARGO_TYPE,");
            sb.Append("       QST.CUSTOMER_CATEGORY_MST_FK,");
            sb.Append("       QST.QUOTED_BY,");
            sb.Append("       QST.STATUS,");
            sb.Append("       QST.CREATED_DT,");
            sb.Append("       QST.QUOTATION_DATE,");
            sb.Append("       QST.EXPECTED_SHIPMENT_DT,");
            sb.Append("       QST.REMARKS,");
            sb.Append("       QST.CREDIT_LIMIT,");
            sb.Append("       QST.CREDIT_DAYS,");
            sb.Append("       QST.VALID_FOR,");
            sb.Append("       QST.CUST_TYPE,");
            sb.Append("       QST.PYMT_TYPE,");
            sb.Append("       QST.SHIPPING_TERMS_MST_PK,");
            sb.Append("       QST.CARGO_MOVE_FK,");
            sb.Append("       QST.BIZ_TYPE,");
            sb.Append("       QST.PROCESS_TYPE,");
            sb.Append("       QST.CARGO_TYPE,");
            sb.Append("       QST.CARGO_TYPE,QST.VERSION_NO,");
            sb.Append("       NVL(CU.CUSTOMER_MST_PK,0) THDFRTPAYER_PK,");
            sb.Append("       CU.CUSTOMER_ID THDFRTPAYER_ID,");
            sb.Append("       CU.CUSTOMER_NAME THDFRTPAYER_NAME,");
            sb.Append("       NVL(AGT.AGENT_MST_PK,0) AGENT_MST_PK,");
            sb.Append("       AGT.AGENT_ID,");
            sb.Append("       AGT.AGENT_NAME,");
            sb.Append("       NVL(QST.COLLECT_AGENT_FLAG,0) COLLECT_AGENT_FLAG,");
            ///Added By Sushama
            sb.Append("       QTS.PORT_MST_PLR_FK,");
            sb.Append("       QTS.PORT_MST_PFD_FK,");
            sb.Append("       QTS.TRANSPORTER_PLR_FK,");
            sb.Append("       QTS.TRANSPORTER_PFD_FK,QST.BIZ_TYPE ");
            ///END
            sb.Append("    FROM QUOTATION_MST_TBL         QST,");
            sb.Append("       QUOTATION_DTL_TBL QTS,");
            sb.Append("       CUSTOMER_MST_TBL          CMT,");
            sb.Append("       PORT_MST_TBL              POL,");
            sb.Append("       PORT_MST_TBL              POD,");
            sb.Append("       CUSTOMER_MST_TBL           CU,");
            sb.Append("       AGENT_MST_TBL              AGT,");
            sb.Append("       CUSTOMER_CATEGORY_MST_TBL CCMT");
            sb.Append("   WHERE QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK(+)");
            sb.Append("   AND POL.PORT_MST_PK = QTS.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = QTS.PORT_MST_POD_FK");
            sb.Append("   AND CMT.CUSTOMER_MST_PK = QST.CUSTOMER_MST_FK");
            sb.Append("   AND CU.CUSTOMER_MST_PK(+) = QST.THIRD_PARTY_FRTPAYER_FK");
            sb.Append("   AND AGT.AGENT_MST_PK(+) = QST.TARIFF_AGENT_MST_FK");
            sb.Append("   AND CCMT.CUSTOMER_CATEGORY_MST_PK = QST.CUSTOMER_CATEGORY_MST_FK");
            if (Iquotationpk > 0)
            {
                sb.Append("   AND QST.QUOTATION_MST_PK =  " + Iquotationpk + "");
            }

            try
            {
                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region "AIR Related all procedures and functions"

        #region " Supporting Methods "

        /// <summary>
        /// Gets or sets a value indicating whether [quot new record].
        /// </summary>
        /// <value>
        ///   <c>true</c> if [quot new record]; otherwise, <c>false</c>.
        /// </value>
        public bool quotNewRecord
        {
            get { return NewRecord; }
            set { NewRecord = value; }
        }

        #region " Enhance Search Function for Enquiry "

        /// <summary>
        /// Fetches the enquiry reference no air.
        /// </summary>
        /// <param name="strCond">The string cond.</param>
        /// <returns></returns>
        public string FetchEnquiryRefNoAir(string strCond)
        {
            WorkFlow objWF = new WorkFlow();
            OracleCommand SCM = new OracleCommand();
            string strReturn = null;
            Array arr = null;
            string strSERACH_IN = "";
            string QUOTEDATE = "";
            string strLOC_MST_IN = "";
            string CustPK = "";
            string strReq = null;
            arr = strCond.Split('~');
            strReq = Convert.ToString(arr.GetValue(0));
            strSERACH_IN = Convert.ToString(arr.GetValue(1));
            if (arr.Length > 2)
                QUOTEDATE = Convert.ToString(arr.GetValue(2));
            if (arr.Length > 3)
                strLOC_MST_IN = Convert.ToString(arr.GetValue(3));
            if (arr.Length > 4)
                CustPK = Convert.ToString(arr.GetValue(4));

            try
            {
                objWF.OpenConnection();
                SCM.Connection = objWF.MyConnection;
                SCM.CommandType = CommandType.StoredProcedure;
                SCM.CommandText = objWF.MyUserName + ".EN_BOOKING_PKG.GET_BOOKING_ENQUIRY_AIR";
                var _with64 = SCM.Parameters;
                _with64.Add("SEARCH_IN", ifDBNull(strSERACH_IN)).Direction = ParameterDirection.Input;
                _with64.Add("LOOKUP_VALUE_IN", strReq).Direction = ParameterDirection.Input;
                _with64.Add("QUOTEDATE_IN", QUOTEDATE).Direction = ParameterDirection.Input;
                _with64.Add("LogLoc_IN", ifDBNull(strLOC_MST_IN)).Direction = ParameterDirection.Input;
                _with64.Add("CUSTOMER_PK_IN", (string.IsNullOrEmpty(CustPK) ? "" : CustPK)).Direction = ParameterDirection.Input;
                _with64.Add("RETURN_VALUE", OracleDbType.Clob).Direction = ParameterDirection.Output;
                SCM.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                SCM.ExecuteNonQuery();
                OracleClob clob = null;
                clob = (OracleClob)SCM.Parameters["RETURN_VALUE"].Value;
                System.IO.StreamReader strReader = new System.IO.StreamReader(clob, Encoding.Unicode);
                strReturn = strReader.ReadToEnd();
                return strReturn.Trim();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                SCM.Connection.Close();
            }
        }

        #endregion " Enhance Search Function for Enquiry "

        /// <summary>
        /// Gets the div fac mw.
        /// </summary>
        /// <param name="Pk">The pk.</param>
        /// <returns></returns>
        public DataSet getDivFacMW(string Pk)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder strQuery = new StringBuilder();
            if ((Pk != null))
            {
                if (!string.IsNullOrEmpty(Pk))
                {
                    strQuery.Append("select distinct cargo_measurement, cargo_weight_in, cargo_division_fact ");
                    strQuery.Append("from QUOTATION_CARGO_CALC where ");
                    strQuery.Append("QUOTATION_DTL_FK in ");
                    strQuery.Append("(select mm.QUOTE_DTL_PK from QUOTATION_DTL_TBL mm where mm.quotation_mst_fk = " + Pk);
                    strQuery.Append(")");
                    return objWF.GetDataSet(strQuery.ToString());
                }
            }
            return null;
        }

        #region " Shadows Methods "

        /// <summary>
        /// Removes the database null.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <returns></returns>
        private new object removeDBNull(object col)
        {
            if (col == null)
            {
                return "";
            }
            else if (object.ReferenceEquals(col, ""))
            {
                return "";
            }
            return col;
        }

        /// <summary>
        /// Ifs the database null.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <returns></returns>
        private new object ifDBNull(object col)
        {
            if (col == null)
            {
                return "";
            }
            else if (object.ReferenceEquals(col, ""))
            {
                return "";
            }
            else if (Convert.ToString(col).Length == 0)
            {
                return "";
            }
            else
            {
                return col;
            }
        }

        /// <summary>
        /// Ifs the database zero.
        /// </summary>
        /// <param name="col">The col.</param>
        /// <param name="Zero">The zero.</param>
        /// <returns></returns>
        private new object ifDBZero(object col, Int16 Zero = 0)
        {
            if (Convert.ToInt32(col) == Zero)
            {
                return "";
            }
            else
            {
                return col;
            }
        }

        #endregion " Shadows Methods "

        #endregion " Supporting Methods "

        #region " Enum and SRC & BPNT function "

        #region " Break Point "

        /// <summary>
        ///
        /// </summary>
        private new enum BreakPoint
        {
            /// <summary>
            /// </summary>
            Kgs = 1,

            /// <summary>
            /// The uld
            /// </summary>
            ULD = 2
        }

        /// <summary>
        /// </summary>
        /// <param name="Btype">The btype.</param>
        /// <returns></returns>
        private new string BPNT(string Btype)
        {
            if (Btype == "1") { return "'BP'"; }
            if (Btype == "1") { return "'ULD'"; }
            return "";
        }

        /// <summary>
        /// Breaks the point enum.
        /// </summary>
        /// <param name="BrkPnt">The BRK PNT.</param>
        /// <returns></returns>
        private new BreakPoint BreakPointEnum(string BrkPnt)
        {
            if (BrkPnt == "1") { return BreakPoint.Kgs; }
            if (BrkPnt == "2") { return BreakPoint.ULD; }
            return new BreakPoint();
        }

        /// <summary>
        /// Gets or sets the base currency.
        /// </summary>
        /// <value>
        /// The base currency.
        /// </value>
        public string BaseCurrency
        {
            get { return baseCur; }
            set { baseCur = value; }
        }

        #endregion " Break Point "

        #region " Source Type "

        /// <summary>
        /// Gets the trans refer.
        /// </summary>
        /// <value>
        /// The trans refer.
        /// </value>
        public int TransRefer
        {
            get
            {
                //System.Web.UI.WebControls.RadioButtonList rbOptions = (System.Web.UI.WebControls.RadioButtonList)Options;
                bool _selected = false;
                //for (int _length = 0; _length <= rbOptions.Items.Count - 1; _length++)
                //{
                //    if (rbOptions.Items[_length].Selected)
                //    {
                //        _selected = true;
                //        //Return rbOptions.Items(_length).Value
                //    }
                //}
                //if (!_selected)
                //{
                //    return SourceType.DefaultValue;
                //}
                //if (rbOptions.Items[0].Selected)
                //{
                //    return SourceType.OperatorAirlineTariff;
                //}
                //else if (rbOptions.Items[1].Selected)
                //{
                //    return SourceType.SRR;
                //}
                //else if (rbOptions.Items[2].Selected)
                //{
                //    return SourceType.SpotRate;
                //}
                //else if (rbOptions.Items[3].Selected)
                //{
                //    return SourceType.CustomerContract;
                //}
                //else if (rbOptions.Items[4].Selected)
                //{
                //    return SourceType.Quotation;
                //}
                //else if (rbOptions.Items[5].Selected)
                //{
                //    return SourceType.GeneralTariff;
                //}
                //else if (rbOptions.Items[6].Selected)
                //{
                //    return SourceType.AgentTariff;
                //}
                //else if (rbOptions.Items[7].Selected)
                //{
                //    return SourceType.Manual;
                //}
                //else
                //{
                //    return SourceType.DefaultValue;
                //}
                return 0;
            }
        }

        /// <summary>
        /// Sources the enum.
        /// </summary>
        /// <param name="SType">Type of the s.</param>
        /// <returns></returns>
        public SourceType SourceEnum(string SType)
        {
            if (SType == "2") { return SourceType.CustomerContract; }
            if (SType == "1") { return SourceType.SpotRate; }
            if (SType == "3") { return SourceType.Quotation; }
            if (SType == "4") { return SourceType.Enquiry; }
            if (SType == "5") { return SourceType.OperatorAirlineTariff; }
            if (SType == "6") { return SourceType.GeneralTariff; }
            if (SType == "0") { return SourceType.DefaultValue; }
            if (SType == "7") { return SourceType.Manual; }
            if (SType == "8") { return SourceType.AgentTariff; }
            if (SType == "9") { return SourceType.SRR; }
            return SourceType.DefaultValue;
        }

        #endregion " Source Type "

        #region " Charge Basis "

        /// <summary>
        ///
        /// </summary>
        public enum ChargeBasis
        {
            /// <summary>
            /// The default
            /// </summary>
            Default = 0,

            /// <summary>
            /// The percentage
            /// </summary>
            Percentage = 1,

            /// <summary>
            /// The flat
            /// </summary>
            Flat = 2,

            /// <summary>
            /// </summary>
            KGs = 3
        }

        /// <summary>
        /// </summary>
        /// <param name="ChType">Type of the ch.</param>
        /// <returns></returns>
        public string CBCS(ChargeBasis ChType)
        {
            switch (ChType)
            {
                case ChargeBasis.Percentage:
                    return "'%'";

                case ChargeBasis.Flat:
                    return "'Flat'";

                case ChargeBasis.KGs:
                    return "'KGs'";

                default:
                    return "";
            }
        }

        /// <summary>
        /// CBCSs the enum.
        /// </summary>
        /// <param name="CBasis">The c basis.</param>
        /// <returns></returns>
        public ChargeBasis CBCSEnum(string CBasis)
        {
            if (CBasis == "1") { return ChargeBasis.Percentage; }
            if (CBasis == "2") { return ChargeBasis.Flat; }
            if (CBasis == "3") { return ChargeBasis.KGs; }
            return ChargeBasis.Default;
        }

        #endregion " Charge Basis "

        #region " Freight Type "

        /// <summary>
        ///
        /// </summary>
        public enum FreightType
        {
            /// <summary>
            /// The afc
            /// </summary>
            AFC = 1,

            /// <summary>
            /// The surcharge
            /// </summary>
            Surcharge = 2,

            /// <summary>
            /// The other charge
            /// </summary>
            OtherCharge = 0
        }

        /// <summary>
        /// Ftyps the specified f type.
        /// </summary>
        /// <param name="FType">Type of the f.</param>
        /// <returns></returns>
        public string FTYP(FreightType FType)
        {
            switch (FType)
            {
                case FreightType.AFC:
                    return "'AFC'";

                case FreightType.OtherCharge:
                    return "'OthChrg'";

                case FreightType.Surcharge:
                    return "'SurChrg'";

                default:
                    return "";
            }
        }

        /// <summary>
        /// fs the type enum.
        /// </summary>
        /// <param name="FType">Type of the f.</param>
        /// <returns></returns>
        public FreightType FTypeEnum(string FType)
        {
            if (FType == "1") { return FreightType.AFC; }
            if (FType == "0") { return FreightType.OtherCharge; }
            if (FType == "3") { return FreightType.Surcharge; }

            return new FreightType();
        }

        #endregion " Freight Type "

        #endregion " Enum and SRC & BPNT function "

        #region " Fetch UWG2 Entry grid. "

        #region " Enquiry Detail "

        // This function fetched the entry grid that can be from enquiry or existing Quotation
        // depending upon whether Quotation No has been provided or not.
        /// <summary>
        /// Gets the enq detail air.
        /// </summary>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="CustomerPK">The customer pk.</param>
        /// <param name="CustomerID">The customer identifier.</param>
        /// <param name="CustomerCategory">The customer category.</param>
        /// <param name="AgentPK">The agent pk.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="EnqDS">The enq ds.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="CalcDS">The calculate ds.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="Remarks">The remarks.</param>
        /// <param name="CargoMcode">The cargo mcode.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        private void GetEnqDetailAir(string EnqNo = "", string CustomerPK = "", string CustomerID = "", string CustomerCategory = "", string AgentPK = "", string AgentID = "", string CommodityGroup = "", string Sectors = "", DataSet EnqDS = null, string QuoteNo = "",
        int Version = 0, string QuotationStatus = null, DataTable OthDt = null, string CalcDS = null, string ValidFor = null, string QuoteDate = null, Int16 CustomerType = 0, string ShipDate = null, int CreditLimit = 0, int CreditDays = 0,
        int Remarks = 0, int CargoMcode = 0, int BaseCurrencyId = 0, int INCOTerms = 0, int PYMTType = 0, bool AmendFlg = false, int Group = 0, string OperPKs = "")
        {
            StringBuilder MasterQuery = new StringBuilder();
            StringBuilder FreightQuery = new StringBuilder();
            StringBuilder OthQuery = new StringBuilder();
            StringBuilder CargoQuery = new StringBuilder();
            StringBuilder TransactionPKs = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            Int16 RowCnt = default(Int16);
            try
            {
                if (!string.IsNullOrEmpty(QuoteNo))
                {
                    MasterQuery = GetQuoteQueryAir(QuoteNo, Version, QuotationStatus, ValidFor, QuoteDate, ShipDate, CreditDays, CreditLimit, Remarks, CargoMcode,
                    Convert.ToInt32(CommodityGroup), BaseCurrencyId, INCOTerms, PYMTType, Group);
                }
                else
                {
                    MasterQuery = GetEnquiryQueryAir(EnqNo);
                }

                EnqDS = objWF.GetDataSet(MasterQuery.ToString().Replace("  ", " "));
                TransactionPKs = GetAllKeys(EnqDS.Tables[0], 0);
                StringBuilder sbSectors = new StringBuilder();
                if (EnqDS.Tables[0].Rows.Count > 0)
                {
                    for (RowCnt = 0; RowCnt <= EnqDS.Tables[0].Rows.Count - 1; RowCnt++)
                    {
                        var _with65 = EnqDS.Tables[0].Rows[RowCnt];
                        sbSectors.Append("(" + _with65["POLFK"] + ',' + _with65["PODFK"] + "),");
                    }
                    Sectors = sbSectors.ToString().TrimEnd(',');
                }
                if (!string.IsNullOrEmpty(QuoteNo))
                {
                    FreightQuery = GetQuoteQueryFreightsAir(TransactionPKs.ToString(), Sectors, Group);
                    OthQuery = GetQuoteOthQueryAir(TransactionPKs.ToString());
                    CargoQuery = GetQuoteCargoQueryAir(TransactionPKs.ToString(), 2);
                }
                else
                {
                    FreightQuery = GetEnquiryQueryFreightsAir(TransactionPKs.ToString());
                    OthQuery = GetEnquiryOthQueryAir(TransactionPKs.ToString());
                }

                EnqDS.Tables.Add(objWF.GetDataTable(FreightQuery.ToString().Replace("  ", " ")));
                OthDt = objWF.GetDataTable(OthQuery.ToString().Replace("  ", " "));
                if (!string.IsNullOrEmpty(QuoteNo))
                {
                    CalcDS = objWF.GetDataSet(CargoQuery.ToString().Replace("  ", " ")).ToString();
                }

                DataRelation REL = null;

                REL = new DataRelation("EnqRelation", EnqDS.Tables[0].Columns["PK"], EnqDS.Tables[1].Columns["FK"]);
                EnqDS.Relations.Add(REL);

                if (EnqDS.Tables[0].Rows.Count > 0)
                {
                    CustomerPK = Convert.ToString(EnqDS.Tables[0].Rows[0]["CUSTOMER_PK"]);
                    CustomerCategory = Convert.ToString(EnqDS.Tables[0].Rows[0]["CUSTOMER_CATPK"]);
                    CommodityGroup = Convert.ToString(EnqDS.Tables[0].Rows[0]["COMM_GRPPK"]);
                    ShipDate = Convert.ToString(EnqDS.Tables[0].Rows[0]["SHIP_DATE"]);
                    CustomerType = Convert.ToInt16(getDefault(EnqDS.Tables[0].Rows[0]["CUST_TYPE"], 0));
                    if (CustomerType == 0)
                    {
                        CustomerID = objWF.ExecuteScaler(" Select CUSTOMER_ID from CUSTOMER_MST_TBL where CUSTOMER_MST_PK = " + CustomerPK);
                    }
                    else
                    {
                        CustomerID = objWF.ExecuteScaler(" Select CUSTOMER_ID from TEMP_CUSTOMER_TBL where CUSTOMER_MST_PK = " + CustomerPK);
                    }
                }
            }
            catch (Exception eX)
            {
                throw eX;
            }
        }

        #endregion " Enquiry Detail "

        #region " Enquiry Query For (EnqNo.) "

        // This is to fetch enquiry detail Header
        /// <summary>
        /// Gets the enquiry query air.
        /// </summary>
        /// <param name="EnquiryNo">The enquiry no.</param>
        /// <returns></returns>
        private StringBuilder GetEnquiryQueryAir(string EnquiryNo)
        {
            if (string.IsNullOrEmpty(EnquiryNo.Trim()))
                EnquiryNo = "-1";
            string slbPK = null;
            string slbID = null;
            string slbType = null;
            slbPK = "( select distinct AIRFREIGHT_SLABS_FK   " + "    from          ENQUIRY_TRN_AIR_FRT_DTLS eq1" + "   where          eq1.ENQUIRY_TRN_AIR_FK  = tran.ENQUIRY_TRN_AIR_PK " + "         and      eq1.AIRFREIGHT_SLABS_FK IS NOT NULL )";

            slbID = "( select distinct BREAKPOINT_ID   " + "    from          ENQUIRY_TRN_AIR_FRT_DTLS eq2, AIRFREIGHT_SLABS_TBL afs2" + "   where          eq2.ENQUIRY_TRN_AIR_FK  = tran.ENQUIRY_TRN_AIR_PK " + "         and      eq2.AIRFREIGHT_SLABS_FK = afs2.AIRFREIGHT_SLABS_TBL_PK " + "         and      eq2.AIRFREIGHT_SLABS_FK IS NOT NULL )";

            slbType = "( select distinct BREAKPOINT_TYPE   " + "    from          ENQUIRY_TRN_AIR_FRT_DTLS eq3, AIRFREIGHT_SLABS_TBL afs3" + "   where          eq3.ENQUIRY_TRN_AIR_FK  = tran.ENQUIRY_TRN_AIR_PK " + "         and      eq3.AIRFREIGHT_SLABS_FK = afs3.AIRFREIGHT_SLABS_TBL_PK " + "         and      eq3.AIRFREIGHT_SLABS_FK IS NOT NULL )";

            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                         ");
            sbSQL.Append("       tran.ENQUIRY_TRN_AIR_PK                      PK,            ");
            //0
            sbSQL.Append("       tran.ENQUIRY_MAIN_AIR_FK                     FK,            ");
            //1
            sbSQL.Append("    " + SourceType.Enquiry + "                      REF_TYPE,      ");
            //2
            sbSQL.Append("    " + SRC(SourceType.Enquiry) + "                 TYPE_ID,       ");
            //3
            sbSQL.Append("       main.ENQUIRY_REF_NO                          REF_NO,        ");
            //4
            sbSQL.Append("    TO_CHAR(tran.EXPECTED_SHIPMENT,'" + dateFormat + "') SHIP_DATE, ");
            //5
            sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
            //6
            sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
            //7
            sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
            //8
            sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
            //9
            sbSQL.Append("       tran.AIRLINE_MST_FK                          AIR_PK,        ");
            //10
            sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
            //11
            sbSQL.Append("       TO_CHAR(tran.COMMODITY_MST_FK)                       COMM_PK,       ");
            //12
            sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
            //13
            sbSQL.Append("    " + slbType + "                                 SLAB_TYPE_PK,  ");
            //14
            sbSQL.Append("       decode( " + slbType + ",   ");
            sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
            sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ");
            //15

            sbSQL.Append("       case when decode( " + slbType + ",   ");
            sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
            sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )  = 'BP' then ");
            sbSQL.Append("   tran.EXP_CHARGEABLE_WT else tran.QUANTITY  end   BOXES,         ");
            //16
            sbSQL.Append("   " + slbPK + "                                    SLAB,          ");
            //17
            sbSQL.Append("   " + slbID + "                                    SLAB_ID,       ");
            //18
            sbSQL.Append("       tran.EXP_CHARGEABLE_WT                       CH_WT,         ");
            //19
            sbSQL.Append("       tran.EXP_CHARGEABLE_WT                       FRT_WT,         ");
            //20
            sbSQL.Append("       tran.ALL_IN_TARIFF                           AI_TRF,        ");
            //21
            sbSQL.Append("       tran.ALL_IN_TARIFF                           AI_QT,         ");
            //22
            sbSQL.Append("       0                                            AIR_RT,        ");
            //23
            sbSQL.Append("       0                                            NET,           ");
            //24
            sbSQL.Append("       tran.TRANS_REF_NO                            REF_NO2,       ");
            //25
            sbSQL.Append("       tran.TRANS_REFERED_FROM                      TYPE2,         ");
            //26
            sbSQL.Append("       main.CUSTOMER_MST_FK                         CUSTOMER_PK,   ");
            //27
            sbSQL.Append("       main.CUSTOMER_CATEGORY_FK                    CUSTOMER_CATPK,");
            //28
            sbSQL.Append("       tran.COMMODITY_GROUP_FK                      COMM_GRPPK,    ");
            //29
            sbSQL.Append("       ''                                           OTH_DTL,       ");
            //30
            sbSQL.Append("       ''                                           OTH_BTN,       ");
            //31
            sbSQL.Append("       ''                                           CRG_BTN,       ");
            //32
            sbSQL.Append("       nvl(CUST_TYPE,1)                             CUST_TYPE      ");
            //33
            sbSQL.Append("   From ENQUIRY_BKG_AIR_TBL            main,                    ");
            sbSQL.Append("        ENQUIRY_TRN_AIR                tran,                    ");
            sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
            sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
            sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
            sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
            sbSQL.Append("   Where                                                        ");
            sbSQL.Append("       main.ENQUIRY_BKG_AIR_PK         =   tran.ENQUIRY_MAIN_AIR_FK ");
            sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
            sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
            sbSQL.Append("   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
            sbSQL.Append("   AND tran.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
            sbSQL.Append("   AND main.ENQUIRY_REF_NO    = '" + EnquiryNo + "'");

            return sbSQL;
        }

        #endregion " Enquiry Query For (EnqNo.) "

        #region " Enquiry Query For Freights (EnqNo.) "

        // Getting Enquiry Freight rows for selected enquiry raansactions
        /// <summary>
        /// Gets the enquiry query freights air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GetEnquiryQueryFreightsAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     trf.ENQUIRY_TRN_AIR_FRT_PK                PK,                  ");
            //0
            sbSQL.Append("     trf.ENQUIRY_TRN_AIR_FK                    FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     decode(trf.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED,    ");
            //4
            sbSQL.Append("     decode(trf.CHECK_ADVATOS,1,'true','false')  ADVATOS,           ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6 '5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7 '6
            sbSQL.Append("     0                                         MIN_AMOUNT,          ");
            //8 '7
            sbSQL.Append("     trf.BASIS_RATE                            BASIS_RATE,          ");
            //9 '8
            sbSQL.Append("     trf.TARIFF_RATE                           TARIFF_RATE,         ");
            //10 '9
            sbSQL.Append("     trf.TARIFF_RATE                           QUOTED_RATE,         ");
            //11 '10
            sbSQL.Append("     trf.CHARGE_BASIS                          CH_BASIS,            ");
            //12 '11
            sbSQL.Append("     decode(trf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            //13 '12
            sbSQL.Append("     nvl(frt.CHARGE_TYPE,2)                   FRT_TYPE,            ");
            //14 '13
            sbSQL.Append("     1                                         P_TYPE,              ");
            //15 '14
            sbSQL.Append("     'PrePaid'                                 P_TYPE_ID            ");
            //16 '15
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     ENQUIRY_TRN_AIR_FRT_DTLS       trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.ENQUIRY_TRN_AIR_FK      in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("   ORDER BY FRT.PREFERENCE ");
            return sbSQL;
        }

        /// <summary>
        /// Gets the enquiry oth query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GetEnquiryOthQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     otf.ENQUIRY_AIR_OTH_CHRG_PK               PK,                  ");
            sbSQL.Append("     otf.ENQUIRY_TRN_AIR_FK                    FK,                  ");
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            sbSQL.Append("     otf.BASIS_RATE                            BASIS_RATE,          ");
            sbSQL.Append("     otf.AMOUNT                                TARIFF_RATE,         ");
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     ENQUIRY_AIR_OTH_CHRG          otf                              ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.ENQUIRY_TRN_AIR_FK     in (" + ParentKeys + ")       ");

            return sbSQL;
        }

        #endregion " Enquiry Query For Freights (EnqNo.) "

        #region " Quotation Query For (QuotePk.) "

        /// <summary>
        /// Gets the quote query air.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CREDIT_DAYS">The credi t_ days.</param>
        /// <param name="CREDIT_Limit">The credi t_ limit.</param>
        /// <param name="Remarks">The remarks.</param>
        /// <param name="CargoMcode">The cargo mcode.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private StringBuilder GetQuoteQueryAir(string QuotationPK, long Version = 0, string QuotationStatus = null, string ValidFor = null, string QuoteDate = null, string ShipDate = null, int CREDIT_DAYS = 0, int CREDIT_Limit = 0, int Remarks = 0, int CargoMcode = 0,
        int CommodityGroup = 0, int BaseCurrencyId = 0, int INCOTerms = 0, int PYMTType = 0, int Group = 0)
        {
            RenderData(QuotationPK, Version, QuotationStatus, ValidFor, QuoteDate, ShipDate, CREDIT_DAYS, CREDIT_Limit, Remarks, CargoMcode,
            CommodityGroup, BaseCurrencyId, INCOTerms, PYMTType);
            string strType = null;
            strType = "decode(tran.TRANS_REFERED_FROM," + SourceType.SpotRate + ',' + SRC(SourceType.SpotRate) + ',' + SourceType.OperatorAirlineTariff + ',' + SRC(SourceType.OperatorAirlineTariff) + ',' + SourceType.CustomerContract + ',' + SRC(SourceType.CustomerContract) + ',' + SourceType.GeneralTariff + ',' + SRC(SourceType.GeneralTariff) + ',' + SourceType.Quotation + ',' + SRC(SourceType.Quotation) + ',' + SourceType.Manual + ',' + SRC(SourceType.Manual) + ',' + SourceType.AgentTariff + ',' + SRC(SourceType.AgentTariff) + ',' + SourceType.Enquiry + ',' + SRC(SourceType.Enquiry) + ',' + SRC(SourceType.DefaultValue) + ")";

            StringBuilder sbSQL = new StringBuilder();
            if (Group == 0)
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.QUOTE_DTL_PK                        PK,            ");
                //0
                sbSQL.Append("       tran.QUOTATION_MST_FK                        FK,            ");
                //1
                sbSQL.Append("       tran.TRANS_REFERED_FROM                      REF_TYPE,      ");
                //2
                sbSQL.Append("    " + strType + "                                 TYPE_ID,       ");
                //3>
                sbSQL.Append("       tran.TRANS_REF_NO                            REF_NO,        ");
                //4>
                sbSQL.Append("    TO_CHAR(main.EXPECTED_SHIPMENT_DT,'" + dateFormat + "') SHIP_DATE, ");
                //5>
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7>
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9>
                sbSQL.Append("       tran.CARRIER_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11>
                sbSQL.Append("       tran.COMMODITY_MST_FKS                       COMM_PK,       ");
                //12
                sbSQL.Append("       ROWTOCOL('SELECT CM.COMMODITY_NAME FROM COMMODITY_MST_TBL CM WHERE CM.COMMODITY_MST_PK IN(' ||");
                sbSQL.Append("                NVL(TRAN.COMMODITY_MST_FKS, 0) || ')') COMM_ID,");
                sbSQL.Append("       slb.BREAKPOINT_TYPE                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE,");
                sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
                sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ");
                //15>
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE," + BreakPoint.ULD);
                sbSQL.Append("      ,tran.QUANTITY,NULL)                          BOXES,         ");
                //16>
                sbSQL.Append("       tran.SLAB_FK                                 SLAB,          ");
                //17
                sbSQL.Append("       slb.BREAKPOINT_ID                            SLAB_ID,       ");
                //18>
                sbSQL.Append("       tran.CHARGEABLE_WEIGHT                       CH_WT,         ");
                //19>
                sbSQL.Append("       tran.FRT_WEIGHT                              FRT_WT,        ");
                //20>
                sbSQL.Append("       tran.ALL_IN_TARIFF                           AI_TRF,        ");
                //21>
                sbSQL.Append("       tran.ALL_IN_QUOTED_TARIFF                    AI_QT,         ");
                //22>
                sbSQL.Append("       nvl(tran.BUYING_RATE,0)                      AIR_RT,        ");
                //23
                sbSQL.Append("       0                                            NET,           ");
                //24
                sbSQL.Append("       tran.TRAN_REF_NO2                            REF_NO2,       ");
                //25
                sbSQL.Append("       tran.REF_TYPE2                               TYPE2,         ");
                //26
                sbSQL.Append("       main.CUSTOMER_MST_FK                         CUSTOMER_PK,   ");
                //27
                sbSQL.Append("       main.CUSTOMER_CATEGORY_MST_FK                CUSTOMER_CATPK,");
                //28
                sbSQL.Append("       main.commodity_group_mst_fk                  COMM_GRPPK,    ");
                //29
                sbSQL.Append("       ''                                            OTH_DTL,       ");
                //30
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //31>
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //32>
                sbSQL.Append("       nvl( CUST_TYPE,1)                            CUST_TYPE      ");
                //33
                sbSQL.Append("   From QUOTATION_MST_TBL              main,                    ");
                sbSQL.Append("        QUOTATION_DTL_TBL              tran,                    ");
                sbSQL.Append("        AIRFREIGHT_SLABS_TBL           slb,                     ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");

                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.QUOTATION_MST_PK           =   tran.QUOTATION_MST_FK    ");
                sbSQL.Append("   AND tran.SLAB_FK              =   slb.AIRFREIGHT_SLABS_TBL_PK(+) ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND tran.CARRIER_MST_FK             =   air.AIRLINE_MST_PK(+) AND main.BIZ_TYPE= 1    ");
                sbSQL.Append("   AND main.QUOTATION_MST_PK   = " + QuotationPK);
            }
            else
            {
                sbSQL.Append("    Select  distinct   ");
                //sbSQL.Append("       tran.QUOTE_DTL_PK                           PK,            " & vbCrLf) '0
                //sbSQL.Append("       tran.QUOTATION_MST_FK                        FK,            " & vbCrLf) '1
                sbSQL.Append("   (select qdt.QUOTE_DTL_PK  from  QUOTATION_DTL_TBL qdt where qdt.pol_grp_fk=tran.pol_grp_fk and qdt.pod_grp_fk=tran.pod_grp_fk and qdt.CARRIER_MST_FK=tran.CARRIER_MST_FK and rownum=1)  PK,");
                //0
                sbSQL.Append("       tran.QUOTATION_MST_FK                        FK,            ");
                //1
                sbSQL.Append("       tran.TRANS_REFERED_FROM                      REF_TYPE,      ");
                //2
                sbSQL.Append("    " + strType + "                                 TYPE_ID,       ");
                //3>
                sbSQL.Append("       tran.TRANS_REF_NO                            REF_NO,        ");
                //4>
                sbSQL.Append("    TO_CHAR(main.EXPECTED_SHIPMENT_DT,'" + dateFormat + "') SHIP_DATE, ");
                //5>
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                              POL_ID,        ");
                //7>
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9>
                sbSQL.Append("       tran.CARRIER_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11>
                sbSQL.Append("       tran.COMMODITY_MST_FKS                       COMM_PK,       ");
                //12
                sbSQL.Append("       ROWTOCOL('SELECT CM.COMMODITY_NAME FROM COMMODITY_MST_TBL CM WHERE CM.COMMODITY_MST_PK IN(' ||");
                sbSQL.Append("                NVL(TRAN.COMMODITY_MST_FKS, 0) || ')') COMM_ID,");
                sbSQL.Append("       slb.BREAKPOINT_TYPE                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE,");
                sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
                sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ");
                //15>
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE," + BreakPoint.ULD);
                sbSQL.Append("      ,tran.QUANTITY,NULL)                          BOXES,         ");
                //16>
                sbSQL.Append("       tran.SLAB_FK                                 SLAB,          ");
                //17
                sbSQL.Append("       slb.BREAKPOINT_ID                            SLAB_ID,       ");
                //18>
                sbSQL.Append("       tran.CHARGEABLE_WEIGHT                       CH_WT,         ");
                //19>
                sbSQL.Append("       tran.FRT_WEIGHT                              FRT_WT,        ");
                //20>
                sbSQL.Append("       tran.ALL_IN_TARIFF                           AI_TRF,        ");
                //21>
                sbSQL.Append("       tran.ALL_IN_QUOTED_TARIFF                    AI_QT,         ");
                //22>
                sbSQL.Append("       nvl(tran.BUYING_RATE,0)                      AIR_RT,        ");
                //23
                sbSQL.Append("       0                                            NET,           ");
                //24
                sbSQL.Append("       tran.TRAN_REF_NO2                            REF_NO2,       ");
                //25
                sbSQL.Append("       tran.REF_TYPE2                               TYPE2,         ");
                //26
                sbSQL.Append("       main.CUSTOMER_MST_FK                         CUSTOMER_PK,   ");
                //27
                sbSQL.Append("       main.CUSTOMER_CATEGORY_MST_FK                CUSTOMER_CATPK,");
                //28
                sbSQL.Append("       main.commodity_group_mst_fk                  COMM_GRPPK,    ");
                //29
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //30
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //31>
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //32>
                sbSQL.Append("       nvl( CUST_TYPE,1)                            CUST_TYPE      ");
                //33
                sbSQL.Append("   From QUOTATION_MST_TBL              main,                    ");
                sbSQL.Append("        QUOTATION_DTL_TBL              tran,                    ");
                sbSQL.Append("        AIRFREIGHT_SLABS_TBL           slb,                     ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.QUOTATION_MST_PK           =   tran.QUOTATION_MST_FK    ");
                sbSQL.Append("   AND tran.SLAB_FK              =   slb.AIRFREIGHT_SLABS_TBL_PK(+) ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND tran.CARRIER_MST_FK             =   air.AIRLINE_MST_PK(+) AND main.BIZ_TYPE= 1    ");
                sbSQL.Append("   AND main.QUOTATION_MST_PK   = " + QuotationPK);
            }
            return sbSQL;
        }

        /// <summary>
        /// Renders the data.
        /// </summary>
        /// <param name="QuotationPK">The quotation pk.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="CREDIT_DAYS">The credi t_ days.</param>
        /// <param name="CREDIT_Limit">The credi t_ limit.</param>
        /// <param name="Remarks">The remarks.</param>
        /// <param name="CargoMcode">The cargo mcode.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        private void RenderData(string QuotationPK, long Version = 0, string QuotationStatus = null, string ValidFor = null, string QuoteDate = null, string ShipDate = null, int CREDIT_DAYS = 0, int CREDIT_Limit = 0, int Remarks = 0, int CargoMcode = 0, int CommodityGroup = 0, int BaseCurrencyId = 0, int INCOTerms = 0, int PYMTType = 0)
        {
            string strSQL = null;
            DataTable scalerDT = null;
            if (!string.IsNullOrEmpty(Convert.ToString(QuotationPK).Trim()))
            {
                strSQL = " Select nvl(QUOTATION_MST_TBL.VERSION_NO, 0) VERSION_NO, nvl(STATUS,1), nvl(VALID_FOR,1), " + "        to_char(QUOTATION_DATE,'" + dateFormat + "'), " + "        to_char(EXPECTED_SHIPMENT_DT,'" + dateFormat + "') ," + "        CREDIT_DAYS, " + "        CREDIT_LIMIT,REMARKS,CARGO_MOVE_FK, COMMODITY_GROUP_MST_FK,curr.currency_mst_pk                               base_currency_fk,curr.currency_id, shipping_terms_mst_pk, pymt_type " + "  from  QUOTATION_MST_TBL,Currency_Type_Mst_Tbl curr " + " where curr.currency_mst_pk(+) = QUOTATION_MST_TBL.Base_Currency_Fk" + " and  QUOTATION_MST_PK = " + QuotationPK;

                scalerDT = (new WorkFlow()).GetDataTable(strSQL);

                if (scalerDT.Rows.Count > 0)
                {
                    Version = Convert.ToInt64(removeDBNull(scalerDT.Rows[0][0]));
                    //QuotationStatus = removeDBNull(scalerDT.Rows(0).Item(1))
                    ValidFor = Convert.ToString(removeDBNull(scalerDT.Rows[0][2]));
                    QuoteDate = Convert.ToString(removeDBNull(scalerDT.Rows[0][3]));
                    ShipDate = Convert.ToString(removeDBNull(scalerDT.Rows[0][4]));
                    CREDIT_DAYS = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][5]));
                    CREDIT_Limit = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][6]));
                    Remarks = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][7]));
                    CargoMcode = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][8]));
                    CommodityGroup = Convert.ToInt32(removeDBNull(scalerDT.Rows[0][9]));
                    BaseCurrencyId = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["currency_id"]));
                    INCOTerms = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["shipping_terms_mst_pk"]));
                    PYMTType = Convert.ToInt32(removeDBNull(scalerDT.Rows[0]["pymt_type"]));
                }
            }
            else
            {
                QuotationPK = "0";
            }
        }

        #endregion " Quotation Query For (QuotePk.) "

        #region " Quotation Query For Freights (QuotePk.) "

        // Quotation Freight detail
        /// <summary>
        /// Gets the quote query freights air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private StringBuilder GetQuoteQueryFreightsAir(string ParentKeys = "-1", string Sectors = "", int Group = 0)
        {
            StringBuilder sbSQL = new StringBuilder();
            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     trf.QUOTION_FREIGHT_PK                  PK,                  ");
            sbSQL.Append("     trf.QUOTATION_DTL_FK                      FK,                  ");
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            sbSQL.Append("     decode(trf.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED,    ");
            sbSQL.Append("     decode(trf.CHECK_ADVATOS,1,'true','false')  ADVATOS,           ");
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            sbSQL.Append("     0                                         MIN_AMOUNT,          ");
            sbSQL.Append("     trf.BASIS_RATE                            BASIS_RATE,          ");
            sbSQL.Append("     trf.TARIFF_RATE                           TARIFF_RATE,         ");
            sbSQL.Append("     trf.QUOTED_RATE                           QUOTED_RATE,         ");
            sbSQL.Append("     trf.CHARGE_BASIS                          CH_BASIS,            ");
            sbSQL.Append("     decode(trf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            sbSQL.Append("     trf.FREIGHT_TYPE                          FRT_TYPE,            ");
            sbSQL.Append("     trf.PYMT_TYPE                             P_TYPE,              ");
            sbSQL.Append("     decode(trf.PYMT_TYPE,1,'PrePaid', 2,'Collect', 3,'Foreign') P_TYPE_ID          ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     QUOTATION_FREIGHT_TRN     trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.QUOTATION_DTL_FK  in (" + ParentKeys + ")");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            return sbSQL;
        }

        /// <summary>
        /// Gets the quote oth query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GetQuoteOthQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     otf.QUOTATION_OTHER_FREIGHT_PK                  PK,                  ");
            sbSQL.Append("     otf.QUOTATION_DTL_FK                  FK,                  ");
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            sbSQL.Append("     otf.BASIS_RATE                            BASIS_RATE,          ");
            sbSQL.Append("     otf.AMOUNT                                TARIFF_RATE,         ");
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            sbSQL.Append("     FREIGHT_TYPE PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     QUOTATION_OTHER_FREIGHT_TRN     otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("    otf.QUOTATION_DTL_FK  in (" + ParentKeys + ")");

            return sbSQL;
        }

        /// <summary>
        /// Gets the quote cargo query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <param name="GridNo">The grid no.</param>
        /// <returns></returns>
        private StringBuilder GetQuoteCargoQueryAir(string ParentKeys = "-1", Int16 GridNo = 2)
        {
            StringBuilder sbSQL = new StringBuilder();
            sbSQL.Append("    Select                                                            ROWNUM                             SNo,                        CARGO_NOP                          NOP,                        CARGO_LENGTH                       Length,                     CARGO_WIDTH                        Width,                      CARGO_HEIGHT                       Height,                     CARGO_CUBE                         Cube,                       CARGO_VOLUME_WT                    VolWeight,                  CARGO_ACTUAL_WT                    ActWeight,                  CARGO_DENSITY                      Density,                " + GridNo + "                         PK,                         QUOTATION_DTL_FK               FK                       FROM                                                              QUOTATION_CARGO_CALC                                    WHERE                                                          QUOTATION_DTL_FK    in (" + ParentKeys + ")");

            return sbSQL;
        }

        #endregion " Quotation Query For Freights (QuotePk.) "

        #endregion " Fetch UWG2 Entry grid. "

        #region " Fetch UWG1 Option grid. "

        #region " Header Query "

        // These are similar queries to get Header grid from different sources

        #region " Spot Rate Query."

        /// <summary>
        /// Spots the rate query air.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <returns></returns>
        private StringBuilder SpotRateQueryAIR(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", string OperPKs = "")
        {
            StringBuilder sbSQL = new StringBuilder();
            sbSQL.Append("    Select                                                         ");
            sbSQL.Append("       tran.RFQ_SPOT_AIR_TRN_PK                     PK,            ");
            sbSQL.Append("       tran.RFQ_SPOT_AIR_FK                         FK,            ");
            sbSQL.Append("    " + SourceType.SpotRate + "                     REF_TYPE,      ");
            sbSQL.Append("    " + SRC(SourceType.SpotRate) + "                TYPE_ID,       ");
            sbSQL.Append("       main.RFQ_REF_NO                              REF_NO,        ");
            sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
            sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
            sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
            sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
            sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
            sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
            sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
            sbSQL.Append("       main.COMMODITY_MST_FK                        COMM_PK,       ");
            sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
            sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
            sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
            sbSQL.Append("       0                                            BOXES,         ");
            sbSQL.Append("       NULL                                         SLAB,          ");
            sbSQL.Append("       ''                                           SLAB_ID,       ");
            sbSQL.Append("       0                                            CH_WT,         ");
            sbSQL.Append("       0                                            FRT_WT,        ");
            sbSQL.Append("       0                                            AI_QT,         ");
            sbSQL.Append("       0                                            NET,           ");
            sbSQL.Append("       ''                                           OTH_DTL,       ");
            sbSQL.Append("       ''                                           OTH_BTN,       ");
            sbSQL.Append("       ''                                           CRG_BTN,       ");
            sbSQL.Append("       'false'                                      SELECTED       ");
            sbSQL.Append("   From RFQ_SPOT_RATE_AIR_TBL          main,                    ");
            sbSQL.Append("        RFQ_SPOT_TRN_AIR_TBL           tran,                    ");
            sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
            sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
            sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
            sbSQL.Append("        COMMODITY_GROUP_MST_TBL        CMGR,                    ");
            sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
            sbSQL.Append("   Where                                                        ");
            sbSQL.Append("       main.RFQ_SPOT_AIR_PK            =   tran.RFQ_SPOT_AIR_FK     ");
            sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
            sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
            sbSQL.Append("   AND main.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
            sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
            sbSQL.Append("   AND main.ACTIVE     =      1    AND     main.APPROVED   =     1  ");
            if (string.IsNullOrEmpty(OperPKs))
            {
                sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
            }
            else
            {
                sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,main.airline_mst_fk) in (" + Sectors + ")");
            }

            sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
            sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");

            if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
            {
                sbSQL.Append("  AND CMGR.COMMODITY_GROUP_PK = " + Convert.ToString(CommodityGroup));
                sbSQL.Append("  AND CMGR.COMMODITY_GROUP_PK = MAIN.COMMODITY_GROUP_FK ");
            }

            if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
            {
                sbSQL.Append("  AND ( main.CUSTOMER_MST_FK    = " + Convert.ToString(CustomerPk));
                sbSQL.Append("         or main.CUSTOMER_MST_FK  is NULL ) ");
            }

            return sbSQL;
        }

        #endregion " Spot Rate Query."

        #region " Airline Tariff Query."

        /// <summary>
        /// Airs the tariff query.
        /// </summary>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="isAgentTariff">if set to <c>true</c> [is agent tariff].</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        /// <returns></returns>
        private StringBuilder AirTariffQuery(string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "", bool isAgentTariff = false, int TariffAgentPk = 0)
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.TARIFF_TRN_AIR_PK                       PK,            ");
                //0
                sbSQL.Append("       tran.TARIFF_MAIN_AIR_FK                      FK,            ");
                //1
                sbSQL.Append("    " + (isAgentTariff ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "                REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC((isAgentTariff ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff)) + "           TYPE_ID,       ");
                //3
                sbSQL.Append("       main.TARIFF_REF_NO                           REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       NULL                                         COMM_PK,       ");
                //12
                sbSQL.Append("       ''                                           COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,         ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From TARIFF_MAIN_AIR_TBL            main,                    ");
                sbSQL.Append("        TARIFF_TRN_AIR_TBL             tran,                    ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air                      ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.TARIFF_MAIN_AIR_PK         =   tran.TARIFF_MAIN_AIR_FK  ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.ACTIVE                     =      1                     ");
                sbSQL.Append("   AND main.STATUS                     =      1                     ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,main.AIRLINE_MST_FK) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");
                if (isAgentTariff)
                {
                    sbSQL.Append("   AND main.TARIFF_TYPE                = 3 ");
                }
                else
                {
                    sbSQL.Append("   AND main.TARIFF_TYPE                = 1 ");
                }
                if (TariffAgentPk > 0)
                {
                    sbSQL.Append("   AND main.AGENT_MST_FK =  " + TariffAgentPk);
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND main.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }
            }
            else
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.TARIFF_TRN_AIR_PK                       PK,            ");
                //0
                sbSQL.Append("       tran.TARIFF_MAIN_AIR_FK                      FK,            ");
                //1
                sbSQL.Append("    " + (isAgentTariff ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff) + "                REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC((isAgentTariff ? SourceType.AgentTariff : SourceType.OperatorAirlineTariff)) + "           TYPE_ID,       ");
                //3
                sbSQL.Append("       main.TARIFF_REF_NO                           REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       NULL                                         COMM_PK,       ");
                //12
                sbSQL.Append("       ''                                           COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,        ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From TARIFF_MAIN_AIR_TBL            main,                    ");
                sbSQL.Append("        TARIFF_TRN_AIR_TBL             tran,                    ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air                      ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.TARIFF_MAIN_AIR_PK         =   tran.TARIFF_MAIN_AIR_FK  ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.ACTIVE                     =      1                     ");
                sbSQL.Append("   AND main.STATUS                     =      1                     ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk,main.AIRLINE_MST_FK) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");
                if (isAgentTariff)
                {
                    sbSQL.Append("   AND main.TARIFF_TYPE                = 3 ");
                }
                else
                {
                    sbSQL.Append("   AND main.TARIFF_TYPE                = 1 ");
                }
                if (TariffAgentPk > 0)
                {
                    sbSQL.Append("   AND main.AGENT_MST_FK =  " + TariffAgentPk);
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND main.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }
            }
            return sbSQL;
        }

        #endregion " Airline Tariff Query."

        #region " General Tariff Query."

        /// <summary>
        /// Gens the tariff query air.
        /// </summary>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Operpks">The operpks.</param>
        /// <returns></returns>
        private StringBuilder GenTariffQueryAir(string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string Operpks = "")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                sbSQL.Append("    Select   distinct                                            ");
                sbSQL.Append("       tran.TARIFF_TRN_AIR_PK                       PK,            ");
                //0
                sbSQL.Append("       tran.TARIFF_MAIN_AIR_FK                      FK,            ");
                //1
                sbSQL.Append("    " + SourceType.GeneralTariff + "                REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.GeneralTariff) + "           TYPE_ID,       ");
                //3
                sbSQL.Append("       main.TARIFF_REF_NO                           REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9
                if (string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("       NULL                                         AIR_PK,        ");
                    //10
                    sbSQL.Append("       ''                                           AIR_ID,        ");
                    //11
                }
                else
                {
                    sbSQL.Append("       amt.airline_mst_pk                           AIR_PK,        ");
                    //10
                    sbSQL.Append("       amt.airline_id                               AIR_ID,        ");
                    //11
                }
                sbSQL.Append("       NULL                                         COMM_PK,       ");
                //12
                sbSQL.Append("       ''                                           COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,         ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From TARIFF_MAIN_AIR_TBL            main,                    ");
                sbSQL.Append("        TARIFF_TRN_AIR_TBL             tran,                    ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                if (!string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("        airline_mst_tbl                   amt,                 ");
                }
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD                  ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.TARIFF_MAIN_AIR_PK         =   tran.TARIFF_MAIN_AIR_FK  ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND main.ACTIVE                     =      1                     ");
                sbSQL.Append("   AND main.STATUS                     =      1                     ");
                if (string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,amt.airline_mst_pk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");
                sbSQL.Append("   AND main.TARIFF_TYPE                = 2 ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND main.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }
            }
            else
            {
                sbSQL.Append("    Select   distinct                                            ");
                sbSQL.Append("       tran.TARIFF_TRN_AIR_PK                       PK,            ");
                //0
                sbSQL.Append("       tran.TARIFF_MAIN_AIR_FK                      FK,            ");
                //1
                sbSQL.Append("    " + SourceType.GeneralTariff + "                REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.GeneralTariff) + "           TYPE_ID,       ");
                //3
                sbSQL.Append("       main.TARIFF_REF_NO                           REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9
                if (string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("       NULL                                         AIR_PK,        ");
                    //10
                    sbSQL.Append("       ''                                           AIR_ID,        ");
                    //11
                }
                else
                {
                    sbSQL.Append("       amt.airline_mst_pk                           AIR_PK,        ");
                    //10
                    sbSQL.Append("       amt.airline_id                               AIR_ID,        ");
                    //11
                }
                sbSQL.Append("       NULL                                         COMM_PK,       ");
                //12
                sbSQL.Append("       ''                                           COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,         ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From TARIFF_MAIN_AIR_TBL            main,                    ");
                sbSQL.Append("        TARIFF_TRN_AIR_TBL             tran,                    ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                if (!string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("        airline_mst_tbl                   amt,                 ");
                }
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD                  ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.TARIFF_MAIN_AIR_PK         =   tran.TARIFF_MAIN_AIR_FK  ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND main.ACTIVE                     =      1                     ");
                sbSQL.Append("   AND main.STATUS                     =      1                     ");
                if (string.IsNullOrEmpty(Operpks))
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk,amt.airline_mst_pk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");
                sbSQL.Append("   AND main.TARIFF_TYPE                = 2 ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND main.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }
            }
            return sbSQL;
        }

        #endregion " General Tariff Query."

        #region " Customer Contract Query."

        /// <summary>
        /// Customers the cont query air.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private StringBuilder CustContQueryAir(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.CONT_CUST_TRN_AIR_PK                    PK,            ");
                //0
                sbSQL.Append("       tran.CONT_CUST_AIR_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.CustomerContract + "             REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.CustomerContract) + "        TYPE_ID,       ");
                //3
                sbSQL.Append("       main.CONT_REF_NO                             REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       main.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,        ");
                //20
                sbSQL.Append("       0                                            AI_QT,         ");
                //21
                sbSQL.Append("       0                                            NET,           ");
                //22
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //23
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //24
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //25>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //26>
                sbSQL.Append("   From CONT_CUST_AIR_TBL              main,                    ");
                sbSQL.Append("        CONT_CUST_TRN_AIR_TBL          tran,                    ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.CONT_CUST_AIR_PK           =   tran.CONT_CUST_AIR_FK    ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND main.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.CONT_APPROVED              =      2                     ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,main.airline_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    //sbSQL.Append("  AND cmdt.COMMODITY_GROUP_FK    = " & CStr(CommodityGroup) & vbCrLf)
                    sbSQL.Append("   AND MAIN.COMMODITY_GROUP_MST_FK    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK      = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null )");
                }
            }
            else
            {
                sbSQL.Append("    Select    distinct                                                     ");
                sbSQL.Append("       tran.CONT_CUST_TRN_AIR_PK                    PK,            ");
                //0
                sbSQL.Append("       tran.CONT_CUST_AIR_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.CustomerContract + "             REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.CustomerContract) + "        TYPE_ID,       ");
                //3
                sbSQL.Append("       main.CONT_REF_NO                             REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                         POL_ID,        ");
                //7
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       main.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,        ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From CONT_CUST_AIR_TBL              main,                    ");
                sbSQL.Append("        CONT_CUST_TRN_AIR_TBL          tran,                    ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.CONT_CUST_AIR_PK           =   tran.CONT_CUST_AIR_FK    ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND main.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.CONT_APPROVED              =      2                     ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk,main.airline_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    //sbSQL.Append("  AND cmdt.COMMODITY_GROUP_FK    = " & CStr(CommodityGroup) & vbCrLf)
                    sbSQL.Append("   AND MAIN.COMMODITY_GROUP_MST_FK    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK      = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null )");
                }
            }
            return sbSQL;
        }

        #endregion " Customer Contract Query."

        #region " Quote Query."

        /// <summary>
        /// Quotes the query air.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private StringBuilder QuoteQueryAir(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.QUOTE_DTL_PK                        PK,            ");
                //0
                sbSQL.Append("       tran.QUOTATION_MST_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.Quotation + "                    REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.Quotation) + "               TYPE_ID,       ");
                //3
                sbSQL.Append("       main.QUOTATION_REF_NO                        REF_NO,        ");
                //4
                sbSQL.Append("    TO_CHAR(main.EXPECTED_SHIPMENT_DT,'" + dateFormat + "') SHIP_DATE, ");
                //5
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9
                sbSQL.Append("       tran.CARRIER_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       tran.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("       slb.BREAKPOINT_TYPE                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE,");
                sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
                sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ");
                //15
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE," + BreakPoint.ULD);
                sbSQL.Append("      ,tran.QUANTITY,NULL)                          BOXES,         ");
                //16
                sbSQL.Append("       tran.SLAB_FK                                 SLAB,          ");
                //17
                sbSQL.Append("       slb.BREAKPOINT_ID                            SLAB_ID,       ");
                //18
                sbSQL.Append("       tran.CHARGEABLE_WEIGHT                       CH_WT,         ");
                //19
                sbSQL.Append("       tran.FRT_WEIGHT                       FRT_WT,         ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From QUOTATION_MST_TBL              main,                    ");
                sbSQL.Append("        QUOTATION_DTL_TBL              tran,                    ");
                sbSQL.Append("        AIRFREIGHT_SLABS_TBL           slb,                     ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.QUOTATION_MST_PK           =   tran.QUOTATION_MST_FK    ");
                sbSQL.Append("   AND tran.SLAB_FK              =   slb.AIRFREIGHT_SLABS_TBL_PK(+) ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND tran.CARRIER_MST_FK             =   air.AIRLINE_MST_PK(+) AND main.BIZ_TYPE = 1   ");
                sbSQL.Append("   AND main.STATUS                    in   (1, 2, 3, 4)             ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,tran.carrier_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append(" between main.QUOTATION_DATE AND (main.QUOTATION_DATE + main.VALID_FOR) ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND tran.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK    = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null ) ");
                }
            }
            else
            {
                sbSQL.Append("    Select  distinct                                                       ");
                sbSQL.Append("       tran.QUOTE_DTL_PK                        PK,            ");
                //0
                sbSQL.Append("       tran.QUOTATION_MST_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.Quotation + "                    REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.Quotation) + "               TYPE_ID,       ");
                //3
                sbSQL.Append("       main.QUOTATION_REF_NO                        REF_NO,        ");
                //4
                sbSQL.Append("    TO_CHAR(main.EXPECTED_SHIPMENT_DT,'" + dateFormat + "') SHIP_DATE, ");
                //5
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9
                sbSQL.Append("       tran.CARRIER_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       tran.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("       slb.BREAKPOINT_TYPE                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE,");
                sbSQL.Append("   " + BreakPoint.Kgs + ',' + BPNT(BreakPoint.Kgs.ToString()));
                sbSQL.Append("       ," + BPNT(BreakPoint.ULD.ToString()) + " )              SLAB_TYPE,     ");
                //15
                sbSQL.Append("       decode(slb.BREAKPOINT_TYPE," + BreakPoint.ULD);
                sbSQL.Append("      ,tran.QUANTITY,NULL)                          BOXES,         ");
                //16
                sbSQL.Append("       tran.SLAB_FK                                 SLAB,          ");
                //17
                sbSQL.Append("       slb.BREAKPOINT_ID                            SLAB_ID,       ");
                //18
                sbSQL.Append("       tran.CHARGEABLE_WEIGHT                       CH_WT,         ");
                //19
                sbSQL.Append("       tran.FRT_WEIGHT                       FRT_WT,         ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From QUOTATION_MST_TBL              main,                    ");
                sbSQL.Append("        QUOTATION_DTL_TBL              tran,                    ");
                sbSQL.Append("        AIRFREIGHT_SLABS_TBL           slb,                     ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.QUOTATION_MST_PK           =   tran.QUOTATION_MST_FK    ");
                sbSQL.Append("   AND tran.SLAB_FK              =   slb.AIRFREIGHT_SLABS_TBL_PK(+) ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND tran.CARRIER_MST_FK             =   air.AIRLINE_MST_PK(+) AND main.BIZ_TYPE = 1   ");
                sbSQL.Append("   AND main.STATUS                    in   (1, 2, 3, 4)             ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk,tran.carrier_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append(" between main.QUOTATION_DATE AND (main.QUOTATION_DATE + main.VALID_FOR) ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    sbSQL.Append("  AND tran.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK    = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null ) ");
                }
            }
            return sbSQL;
        }

        #endregion " Quote Query."

        #region " Manual Query."

        /// <summary>
        /// Manuals the query air.
        /// </summary>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <returns></returns>
        private StringBuilder ManualQueryAir(string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPKs = "")
        {
            StringBuilder strQuery = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                strQuery.Append(" Select                                               ");
                strQuery.Append("  ROWNUM                       PK,            ");
                strQuery.Append("   0                      FK,            ");
                strQuery.Append("                      7                REF_TYPE,      ");
                strQuery.Append("                     'Manual'           TYPE_ID,       ");
                strQuery.Append("       ''                           REF_NO,        ");
                strQuery.Append(" '' SHIP_DATE,     ");
                strQuery.Append("       PORTPOL.PORT_MST_PK                       POLFK,         ");
                strQuery.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                strQuery.Append("      PORTPOD.PORT_MST_PK                PODFK,         ");
                strQuery.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                if (string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("       NULL                                         AIR_PK,        ");
                    strQuery.Append("       ''                                           AIR_ID,        ");
                }
                else
                {
                    strQuery.Append("       amt.airline_mst_pk                           AIR_PK,        ");
                    strQuery.Append("       amt.airline_id                               AIR_ID,        ");
                }
                strQuery.Append("       ''                                           COMM_PK,       ");
                strQuery.Append("       ''                                           COMM_ID,       ");
                strQuery.Append("       1                          SLAB_TYPE_PK,  ");
                strQuery.Append("       'BP'                    SLAB_TYPE,     ");
                strQuery.Append("       0                                            BOXES,         ");
                strQuery.Append("       NULL                                         SLAB,          ");
                strQuery.Append("       ''                                           SLAB_ID,       ");
                strQuery.Append("       0                                            CH_WT,         ");
                strQuery.Append("       0                                            FRT_WT,        ");
                strQuery.Append("       0                                            AI_QT,         ");
                strQuery.Append("       0                                            NET,           ");
                strQuery.Append("       ''                                           OTH_DTL,       ");
                strQuery.Append("       ''                                           OTH_BTN,       ");
                strQuery.Append("       ''                                           CRG_BTN,       ");
                strQuery.Append("       'false'                                      SELECTED       ");
                strQuery.Append("   From          ");
                strQuery.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                if (!string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("        airline_mst_tbl                   amt,                 ");
                }
                strQuery.Append("        PORT_MST_TBL                   PORTPOD                  ");
                strQuery.Append("   Where                                                        ");
                if (string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("   (PORTPOL.PORT_MST_PK,PORTPOD.PORT_MST_PK) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append("   (PORTPOL.PORT_MST_PK,PORTPOD.PORT_MST_PK,amt.airline_mst_pk) in (" + Sectors + ")");
                }
            }
            else
            {
                strQuery.Append(" Select   distinct       ");
                strQuery.Append("  ROWNUM                       PK,            ");
                strQuery.Append("   0                      FK,            ");
                strQuery.Append("                      7                REF_TYPE,      ");
                strQuery.Append("                     'Manual'           TYPE_ID,       ");
                strQuery.Append("       ''                           REF_NO,        ");
                strQuery.Append(" '' SHIP_DATE,     ");
                strQuery.Append("       PORTPOL.port_grp_mst_pk                       POLFK,         ");
                strQuery.Append("       PORTPOL.port_grp_id                              POL_ID,        ");
                strQuery.Append("      PORTPOD.port_grp_mst_pk                PODFK,         ");
                strQuery.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                if (string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("       NULL                                         AIR_PK,        ");
                    strQuery.Append("       ''                                           AIR_ID,        ");
                }
                else
                {
                    strQuery.Append("       amt.airline_mst_pk                           AIR_PK,        ");
                    strQuery.Append("       amt.airline_id                               AIR_ID,        ");
                }
                strQuery.Append("       ''                                           COMM_PK,       ");
                strQuery.Append("       ''                                           COMM_ID,       ");
                strQuery.Append("       1                          SLAB_TYPE_PK,  ");
                strQuery.Append("       'BP'                    SLAB_TYPE,     ");
                strQuery.Append("       0                                            BOXES,         ");
                strQuery.Append("       NULL                                         SLAB,          ");
                strQuery.Append("       ''                                           SLAB_ID,       ");
                strQuery.Append("       0                                            CH_WT,         ");
                strQuery.Append("       0                                            FRT_WT,        ");
                strQuery.Append("       0                                            AI_QT,         ");
                strQuery.Append("       0                                            NET,           ");
                strQuery.Append("       ''                                           OTH_DTL,       ");
                strQuery.Append("       ''                                           OTH_BTN,       ");
                strQuery.Append("       ''                                           CRG_BTN,       ");
                strQuery.Append("       'false'                                      SELECTED       ");
                strQuery.Append("   From          ");
                strQuery.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                if (!string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("        airline_mst_tbl                   amt,                 ");
                }
                strQuery.Append("        port_grp_mst_tbl                   PORTPOD                  ");
                strQuery.Append("   Where                                                        ");
                if (string.IsNullOrEmpty(OperPKs))
                {
                    strQuery.Append("   (PORTPOL.port_grp_mst_pk,PORTPOD.port_grp_mst_pk) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append("   (PORTPOL.port_grp_mst_pk,PORTPOD.port_grp_mst_pk,amt.airline_mst_pk) in (" + Sectors + ")");
                }
            }

            return strQuery;
        }

        #endregion " Manual Query."

        #endregion " Header Query "

        #region " Freight Level Query "

        // These are to get freight details from different sources

        #region " Spot Rate Query "

        /// <summary>
        /// Spots the rate freight query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder SpotRateFreightQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     trf.RFQ_SPOT_TRN_FREIGHT_PK               PK,                  ");
            sbSQL.Append("     trf.RFQ_SPOT_TRN_AIR_FK                   FK,                  ");
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            sbSQL.Append("     'false'                                   SELECTED,            ");
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            sbSQL.Append("     trf.MIN_AMOUNT                            MIN_AMOUNT,          ");
            sbSQL.Append("     0                                         BASIS_RATE,          ");
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            sbSQL.Append("     3                                         CH_BASIS,            ");
            sbSQL.Append("  " + CBCS(ChargeBasis.KGs) + "                CH_BASIS_ID,         ");
            sbSQL.Append("  " + FreightType.AFC + "                      FRT_TYPE             ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     RFQ_SPOT_AIR_TRN_FREIGHT_TBL   trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.RFQ_SPOT_TRN_AIR_FK     in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            sbSQL.Append(" UNION ALL ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     srf.RFQ_SPOT_AIR_SURCHG_PK                PK,                  ");
            sbSQL.Append("     srf.RFQ_SPOT_AIR_TRN_FK                   FK,                  ");
            sbSQL.Append("     srf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            sbSQL.Append("     frt1.FREIGHT_ELEMENT_ID                   FRT_ID,              ");
            sbSQL.Append("     'false'                                   SELECTED,            ");
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            sbSQL.Append("     srf.CURRENCY_MST_FK                       CURR_FK,             ");
            sbSQL.Append("     cur1.CURRENCY_ID                          CURR_ID,             ");
            sbSQL.Append("     NULL                                      MIN_AMOUNT,          ");
            sbSQL.Append("     srf.APPROVED_RATE                         BASIS_RATE,          ");
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            sbSQL.Append("     srf.CHARGE_BASIS                          CH_BASIS,            ");
            sbSQL.Append("     decode(srf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            sbSQL.Append("  " + FreightType.Surcharge + "                FRT_TYPE             ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     RFQ_SPOT_AIR_SURCHARGE         srf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt1,                           ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur1                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           srf.RFQ_SPOT_AIR_TRN_FK     in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   srf.FREIGHT_ELEMENT_MST_FK  =  frt1.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   srf.CURRENCY_MST_FK         =  cur1.CURRENCY_MST_PK(+)     ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");

            return sbSQL;
        }

        /// <summary>
        /// Spots the rate oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder SpotRateOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     otf.RFQ_TRN_AIR_OTH_CHRG_PK               PK,                  ");
            //0
            sbSQL.Append("     otf.RFQ_SPOT_AIR_TRN_FK                   FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.APPROVED_RATE                         BASIS_RATE,          ");
            //4
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     RFQ_SPOT_AIR_OTH_CHRG          otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.RFQ_SPOT_AIR_TRN_FK     in (" + ParentKeys + ")      ");

            return sbSQL;
        }

        /// <summary>
        /// Gets the spot rate cargo query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GetSpotRateCargoQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                            ROWNUM                             SNo,                        CARGO_NOP                          NOP,                        CARGO_LENGTH                       Length,                     CARGO_WIDTH                        Width,                      CARGO_HEIGHT                       Height,                     CARGO_CUBE                         Cube,                       CARGO_VOLUME_WT                    VolWeight,                  CARGO_ACTUAL_WT                    ActWeight,                  CARGO_DENSITY                      Density,                    1                                  PK,                         RFQ_SPOT_AIR_TRN_FK                FK                       FROM                                                              RFQ_SPOT_AIR_CARGO_CALC                                     WHERE                                                             RFQ_SPOT_AIR_TRN_FK     in   (" + ParentKeys + ")      ");

            return sbSQL;
        }

        #endregion " Spot Rate Query "

        #region " Airline Tariff Query "

        /// <summary>
        /// Airs the tariff freight query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder AirTariffFreightQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     trf.TARIFF_TRN_FREIGHT_PK                 PK,                  ");
            //0
            sbSQL.Append("     trf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5'
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7'6
            sbSQL.Append("     trf.MIN_AMOUNT                            MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     0                                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     3                                         CH_BASIS,            ");
            //11'10
            sbSQL.Append("  " + CBCS(ChargeBasis.KGs) + "                CH_BASIS_ID,         ");
            //12'11
            sbSQL.Append("  " + FreightType.AFC + "                      FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_FREIGHT_TBL     trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.TARIFF_TRN_AIR_FK       in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            sbSQL.Append(" UNION ALL ");

            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     srf.TARIFF_AIR_SURCHARGE_PK               PK,                  ");
            //0
            sbSQL.Append("     srf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     srf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt1.FREIGHT_ELEMENT_ID                   FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                    SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5'
            sbSQL.Append("     srf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur1.CURRENCY_ID                          CURR_ID,             ");
            //7'6
            sbSQL.Append("     NULL                                      MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     srf.TARIFF_RATE                           BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     srf.CHARGE_BASIS                          CH_BASIS,            ");
            //11'10
            sbSQL.Append("     decode(srf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            //12'11
            sbSQL.Append("  " + FreightType.Surcharge + "                FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_SURCHARGE       srf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt1,                           ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur1                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           srf.TARIFF_TRN_AIR_FK       in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   srf.FREIGHT_ELEMENT_MST_FK  =  frt1.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   srf.CURRENCY_MST_FK         =  cur1.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");
            return sbSQL;
        }

        /// <summary>
        /// Airs the tariff oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder AirTariffOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     NULL                                      PK,                  ");
            //0
            sbSQL.Append("     otf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.TARIFF_RATE                           BASIS_RATE,          ");
            //4
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_OTH_CHRG         otf                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.TARIFF_TRN_AIR_FK     in (" + ParentKeys + ")        ");

            return sbSQL;
        }

        #endregion " Airline Tariff Query "

        #region " General Tariff Query "

        /// <summary>
        /// Gens the tariff freight query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GenTariffFreightQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     trf.TARIFF_TRN_FREIGHT_PK                 PK,                  ");
            //0
            sbSQL.Append("     trf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 '
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7'6
            sbSQL.Append("     trf.MIN_AMOUNT                            MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     0                                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     3                                         CH_BASIS,            ");
            //11'10
            sbSQL.Append("  " + CBCS(ChargeBasis.KGs) + "                CH_BASIS_ID,         ");
            //12'11
            sbSQL.Append("  " + FreightType.AFC + "                      FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_FREIGHT_TBL     trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.TARIFF_TRN_AIR_FK       in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            sbSQL.Append(" UNION ALL ");

            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     srf.TARIFF_AIR_SURCHARGE_PK               PK,                  ");
            //0
            sbSQL.Append("     srf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     srf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt1.FREIGHT_ELEMENT_ID                   FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 '
            sbSQL.Append("     srf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur1.CURRENCY_ID                          CURR_ID,             ");
            //7'6
            sbSQL.Append("     NULL                                      MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     srf.TARIFF_RATE                           BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     srf.CHARGE_BASIS                          CH_BASIS,            ");
            //11'10
            sbSQL.Append("     decode(srf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,   ");
            //12'11
            sbSQL.Append("  " + FreightType.Surcharge + "                FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_SURCHARGE       srf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt1,                           ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur1                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           srf.TARIFF_TRN_AIR_FK       in (" + ParentKeys + ")           ");
            sbSQL.Append("     and   srf.FREIGHT_ELEMENT_MST_FK  =  frt1.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   srf.CURRENCY_MST_FK         =  cur1.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");
            return sbSQL;
        }

        /// <summary>
        /// Gens the tariff oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder GenTariffOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     NULL                                      PK,                  ");
            //0
            sbSQL.Append("     otf.TARIFF_TRN_AIR_FK                     FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.TARIFF_RATE                           BASIS_RATE,          ");
            //4
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     TARIFF_TRN_AIR_OTH_CHRG         otf                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.TARIFF_TRN_AIR_FK     in (" + ParentKeys + ")        ");

            return sbSQL;
        }

        #endregion " General Tariff Query "

        #region " Customer Contract Query "

        /// <summary>
        /// Customers the cont freight query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder CustContFreightQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Min Amt, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type

            //CONT_CUST_AIR_FREIGHT_PK, CONT_CUST_TRN_AIR_FK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, MIN_AMOUNT
            //CONT_AIR_BREAKPTS_PK, CURRENT_RATE, APPROVED_RATE, AIRFREIGHT_SLABS_FK, CONT_CUST_AIR_FRT_FK

            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     trf.CONT_CUST_AIR_FREIGHT_PK              PK,                  ");
            //0
            sbSQL.Append("     trf.CONT_CUST_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7'6
            sbSQL.Append("     trf.MIN_AMOUNT                            MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     0                                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     3                                         CH_BASIS,            ");
            //11'10
            sbSQL.Append("  " + CBCS(ChargeBasis.KGs) + "                CH_BASIS_ID,         ");
            //12'11
            sbSQL.Append("  " + FreightType.AFC + "                      FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     CONT_CUST_AIR_FREIGHT_TBL      trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.CONT_CUST_TRN_AIR_FK    in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            sbSQL.Append(" UNION ALL ");

            //CONT_AIR_SURCHARGE_PK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, CONT_CUST_TRN_AIR_FK, CURRENT_RATE, APPROVED_RATE, CHARGE_BASIS

            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     srf.CONT_AIR_SURCHARGE_PK                 PK,                  ");
            //0
            sbSQL.Append("     srf.CONT_CUST_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     srf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt1.FREIGHT_ELEMENT_ID                   FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     srf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur1.CURRENCY_ID                          CURR_ID,             ");
            //7'6
            sbSQL.Append("     NULL                                      MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     srf.APPROVED_RATE                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     srf.CHARGE_BASIS                          CH_BASIS,            ");
            //11'10
            sbSQL.Append("     decode(srf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            //12'11
            sbSQL.Append("  " + FreightType.Surcharge + "                FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     CONT_CUST_AIR_SURCHARGE        srf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt1,                           ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur1                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           srf.CONT_CUST_TRN_AIR_FK    in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   srf.FREIGHT_ELEMENT_MST_FK  =  frt1.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   srf.CURRENCY_MST_FK         =  cur1.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");
            return sbSQL;
        }

        /// <summary>
        /// Customers the cont oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder CustContOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            //CONT_CUST_TRN_AIR_FK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, CURRENT_RATE, APPROVED_RATE, CHARGE_BASIS
            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     NULL                                      PK,                  ");
            //0
            sbSQL.Append("     otf.CONT_CUST_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.APPROVED_RATE                         BASIS_RATE,          ");
            //4
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     CONT_CUST_AIR_OTH_CHRG         otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.CONT_CUST_TRN_AIR_FK    in (" + ParentKeys + ")      ");

            return sbSQL;
        }

        #endregion " Customer Contract Query "

        #region " Quote Query "

        /// <summary>
        /// Quotes the freight query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder QuoteFreightQueryAir(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Min Amt, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type

            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     trf.QUOTION_FREIGHT_PK                  PK,                  ");
            //0
            sbSQL.Append("     trf.QUOTATION_DTL_FK                      FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7'6
            sbSQL.Append("     0                                         MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     trf.BASIS_RATE                            BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     trf.QUOTED_RATE                           TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     trf.CHARGE_BASIS                          CH_BASIS,            ");
            //11'10
            sbSQL.Append("     decode(trf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            //12'11
            sbSQL.Append("     trf.FREIGHT_TYPE                          FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     QUOTATION_FREIGHT_TRN     trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.QUOTATION_DTL_FK        in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");
            return sbSQL;
        }

        /// <summary>
        /// Quotes the oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder QuoteOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     otf.QUOTATION_OTHER_FREIGHT_PK                  PK,                  ");
            //0
            sbSQL.Append("     otf.QUOTATION_DTL_FK                  FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.BASIS_RATE                            BASIS_RATE,          ");
            //4
            sbSQL.Append("     otf.AMOUNT                                TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs')   CH_BASIS_ID,          ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     QUOTATION_OTHER_FREIGHT_TRN     otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.QUOTATION_DTL_FK   in (" + ParentKeys + ")       ");

            return sbSQL;
        }

        #endregion " Quote Query "

        #region " Manual Query "

        /// <summary>
        /// Manuals the freight query air.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <returns></returns>
        private StringBuilder ManualFreightQueryAir(string ParentKeys = "-1", bool AmendFlg = false)
        {
            StringBuilder strQuery = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Min Amt, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (AmendFlg == false)
            {
                strQuery.Append("    Select Q.* FROM (                                              ");
                strQuery.Append(" SELECT DISTINCT ROWNUM PK,");
                strQuery.Append("                 1 FK,");
                strQuery.Append("                 FREIGHT_ELEMENT_MST_PK FRT_FK,");
                strQuery.Append("                 FRT.FREIGHT_ELEMENT_ID FRT_ID,");
                strQuery.Append("                 'false' SELECTED,");
                strQuery.Append("                 'false' ADVATOS,");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("                 CUR.CURRENCY_MST_PK CURR_FK,");
                strQuery.Append("                 CUR.CURRENCY_ID CURR_ID,");
                strQuery.Append("                 0 MIN_AMOUNT,");
                strQuery.Append("                 0 BASIS_RATE,");
                strQuery.Append("                 0 TARIFF_RATE,");
                strQuery.Append("                 3 CH_BASIS,");
                strQuery.Append("                 'KGs' CH_BASIS_ID,");
                strQuery.Append("                 1 FRT_TYPE");
                strQuery.Append("   FROM                           ");
                strQuery.Append("         FREIGHT_ELEMENT_MST_TBL FRT,");
                strQuery.Append("        CURRENCY_TYPE_MST_TBL   CUR");
                strQuery.Append("  WHERE CUR.CURRENCY_MST_PK = " + BaseCurrency);
                strQuery.Append("    AND FRT.BUSINESS_TYPE IN (1, 3)");
                strQuery.Append("     AND FRT.CHARGE_BASIS <> 2");
                strQuery.Append("     AND FRT.ACTIVE_FLAG=1        ");
                strQuery.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
                strQuery.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
                strQuery.Append("     ORDER BY FRT.PREFERENCE       ");
            }
            else
            {
                strQuery.Append("  SELECT ROWNUM PK, R.* FROM(");
                strQuery.Append("  SELECT Q.* FROM (SELECT DISTINCT ");
                strQuery.Append("                        1 FK,");
                strQuery.Append("                        FREIGHT_ELEMENT_MST_PK FRT_FK,");
                strQuery.Append("                        FRT.FREIGHT_ELEMENT_ID FRT_ID,");
                strQuery.Append("                        'false' SELECTED,");
                strQuery.Append("                        'false' ADVATOS,");
                strQuery.Append("                        CUR.CURRENCY_MST_PK CURR_FK,");
                strQuery.Append("                        CUR.CURRENCY_ID CURR_ID,");
                strQuery.Append("                        0 MIN_AMOUNT,");
                strQuery.Append("                        0 BASIS_RATE,");
                strQuery.Append("                        0 TARIFF_RATE,");
                strQuery.Append("                        3 CH_BASIS,");
                strQuery.Append("                        'KGs' CH_BASIS_ID,");
                strQuery.Append("                        1 FRT_TYPE");
                strQuery.Append("          FROM FREIGHT_ELEMENT_MST_TBL FRT, CURRENCY_TYPE_MST_TBL CUR");
                strQuery.Append("         WHERE CUR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "");
                strQuery.Append("           AND FRT.BUSINESS_TYPE IN (1, 3)");
                strQuery.Append("           AND FRT.CHARGE_BASIS <> 2");
                strQuery.Append("           AND FRT.ACTIVE_FLAG = 1");
                strQuery.Append("           AND FRT.FREIGHT_ELEMENT_MST_PK NOT IN");
                strQuery.Append("               (SELECT TRF.FREIGHT_ELEMENT_MST_FK FRT_FK");
                strQuery.Append("                  FROM QUOTATION_FREIGHT_TRN TRF,");
                strQuery.Append("                       FREIGHT_ELEMENT_MST_TBL    FRT,");
                strQuery.Append("                       CURRENCY_TYPE_MST_TBL      CUR");
                strQuery.Append("                 WHERE TRF.QUOTATION_DTL_FK IN (" + ParentKeys + ")");
                strQuery.Append("                   AND TRF.FREIGHT_ELEMENT_MST_FK =");
                strQuery.Append("                       FRT.FREIGHT_ELEMENT_MST_PK(+)");
                strQuery.Append("                   AND TRF.CURRENCY_MST_FK = CUR.CURRENCY_MST_PK(+))) Q,");
                strQuery.Append("       FREIGHT_ELEMENT_MST_TBL FRT");
                strQuery.Append("  WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK");
                strQuery.Append("  UNION ");
                strQuery.Append("  SELECT DISTINCT ");
                strQuery.Append("                1 FK,");
                strQuery.Append("                TRF.FREIGHT_ELEMENT_MST_FK FRT_FK,");
                strQuery.Append("                FRT.FREIGHT_ELEMENT_ID FRT_ID,");
                strQuery.Append("                DECODE(TRF.CHECK_FOR_ALL_IN_RT, 1, 'true', 'false') SELECTED,");
                strQuery.Append("                DECODE(TRF.CHECK_ADVATOS, 1, 'true', 'false') ADVATOS,");
                strQuery.Append("                TRF.CURRENCY_MST_FK CURR_FK,");
                strQuery.Append("                CUR.CURRENCY_ID CURR_ID,");
                strQuery.Append("                TRF.BASIS_RATE MIN_AMOUNT,");
                strQuery.Append("                TRF.BASIS_RATE BASIS_RATE,");
                strQuery.Append("                TRF.TARIFF_RATE TARIFF_RATE,");
                strQuery.Append("                TRF.CHARGE_BASIS CH_BASIS,");
                strQuery.Append("                DECODE(TRF.CHARGE_BASIS, 1, '%', 2, 'Flat', 'KGs') CH_BASIS_ID,");
                strQuery.Append("                1 FRT_TYPE");
                strQuery.Append("  FROM QUOTATION_FREIGHT_TRN TRF,");
                strQuery.Append("       QUOTATION_DTL_TBL          TRAN,");
                strQuery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT,");
                strQuery.Append("       CURRENCY_TYPE_MST_TBL      CUR");
                strQuery.Append(" WHERE TRF.QUOTATION_DTL_FK IN (" + ParentKeys + ")");
                strQuery.Append("   AND TRAN.QUOTE_DTL_PK = TRF.QUOTATION_DTL_FK");
                strQuery.Append("   AND TRF.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK(+)");
                strQuery.Append("   AND TRF.CURRENCY_MST_FK = CUR.CURRENCY_MST_PK(+)");
                strQuery.Append("   ) R");
            }
            return strQuery;
        }

        /// <summary>
        /// Manuals the oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder ManualOthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();

            sbSQL.Append(" SELECT -1 PK,");
            sbSQL.Append("        -1 FK,");
            sbSQL.Append("        FRT.FREIGHT_ELEMENT_MST_PK FRT_FK,");
            sbSQL.Append("        CUR.CURRENCY_MST_PK CURR_FK,");
            sbSQL.Append("        '' BASIS_RATE,");
            sbSQL.Append("        '' TARIFF_RATE,");
            sbSQL.Append("        2 CH_BASIS,");
            sbSQL.Append("        DECODE(FRT.CHARGE_BASIS, 1, '%', 2, 'Flat', 'KGs') CH_BASIS_ID,");
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("   FROM FREIGHT_ELEMENT_MST_TBL FRT, CURRENCY_TYPE_MST_TBL CUR");
            sbSQL.Append("  WHERE CUR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"]);
            sbSQL.Append("    AND FRT.BUSINESS_TYPE IN (1, 3)");
            sbSQL.Append("    AND FRT.CHARGE_BASIS = 2");
            sbSQL.Append("    AND FRT.ACTIVE_FLAG = 1");
            sbSQL.Append("  ORDER BY FREIGHT_ELEMENT_ID");
            return sbSQL;
        }

        /// <summary>
        /// Manuals the freight table air.
        /// </summary>
        /// <param name="dt">The dt.</param>
        /// <param name="strPks">The string PKS.</param>
        /// <returns></returns>
        private DataTable ManualFreightTableAir(DataTable dt, string strPks)
        {
            DataRow dr = null;
            DataTable frtDt = new DataTable();
            int pkCount = 0;
            int drCount = 0;
            frtDt.Columns.Add("PK");
            frtDt.Columns["PK"].DataType = dt.Columns["PK"].DataType;
            frtDt.Columns.Add("FK");
            frtDt.Columns["FK"].DataType = dt.Columns["FK"].DataType;
            frtDt.Columns.Add("FRT_FK");
            frtDt.Columns.Add("FRT_ID");
            frtDt.Columns.Add("SELECTED");
            frtDt.Columns.Add("ADVATOS");
            frtDt.Columns.Add("CURR_FK");
            frtDt.Columns.Add("CURR_ID");
            frtDt.Columns.Add("MIN_AMOUNT");
            frtDt.Columns.Add("BASIS_RATE");
            frtDt.Columns.Add("TARIFF_RATE");
            frtDt.Columns.Add("CH_BASIS");
            frtDt.Columns.Add("CH_BASIS_ID");
            frtDt.Columns.Add("FRT_TYPE");
            string[] strPksArr = strPks.ToString().Split(',');
            if (strPksArr.Length == 2)
                return dt;
            if (strPksArr.Length > 2)
            {
                for (pkCount = 1; pkCount <= strPksArr.Length - 1; pkCount++)
                {
                    for (drCount = 0; drCount <= dt.Rows.Count - 1; drCount++)
                    {
                        dr = frtDt.NewRow();
                        dr[0] = drCount + (dt.Rows.Count * (pkCount - 1));
                        dr[1] = strPksArr[pkCount];
                        dr[2] = dt.Rows[drCount][2];
                        dr[3] = dt.Rows[drCount][3];
                        dr[4] = dt.Rows[drCount][4];
                        dr[5] = dt.Rows[drCount][5];
                        dr[6] = dt.Rows[drCount][6];
                        dr[7] = dt.Rows[drCount][7];
                        dr[8] = dt.Rows[drCount][8];
                        dr[9] = dt.Rows[drCount][9];
                        dr[10] = dt.Rows[drCount][10];
                        dr[11] = dt.Rows[drCount][11];
                        dr[12] = dt.Rows[drCount][12];
                        dr[13] = dt.Rows[drCount][13];
                        frtDt.Rows.Add(dr);
                    }
                }
            }
            return frtDt;
        }

        #endregion " Manual Query "

        #endregion " Freight Level Query "

        #endregion " Fetch UWG1 Option grid. "

        #region " Main Fetch Query "

        /// <summary>
        /// Fetches the one air.
        /// </summary>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="EnqDS">The enq ds.</param>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="CustID">The customer identifier.</param>
        /// <param name="CustCategory">The customer category.</param>
        /// <param name="AgentNo">The agent no.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="Options">The options.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="EnqOthDt">The enq oth dt.</param>
        /// <param name="CalcDS">The calculate ds.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="Remarks">The remarks.</param>
        /// <param name="CargoMcode">The cargo mcode.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="Group">The group.</param>
        /// <param name="ShippingLinePKs">The shipping line p ks.</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        public void FetchOneAir(DataSet GridDS = null, DataSet EnqDS = null, string EnqNo = "", string QuoteNo = "", string CustNo = "", string CustID = "", string CustCategory = "", string AgentNo = "", string AgentID = "", string Sectors = "",
        string CommodityGroup = "", string ShipDate = "", string QuoteDate = "", string Options = null, int Version = 0, string QuotationStatus = null, DataTable OthDt = null, DataTable EnqOthDt = null, DataSet CalcDS = null, object ValidFor = null,
        Int16 CustomerType = 0, int CreditDays = 0, int CreditLimit = 0, int Remarks = 0, int CargoMcode = 0, int BaseCurrencyId = 0, int INCOTerms = 0, int PYMTType = 0, bool AmendFlg = false, int Group = 0,
        string ShippingLinePKs = "", int TariffAgentPk = 0)
        {
            DataRow DR = null;
            DataTable ExChTable = null;
            //System.Web.UI.WebControls.RadioButtonList rbOptions = (System.Web.UI.WebControls.RadioButtonList)Options;
            decimal Amount = default(decimal);

            try
            {
                if (string.IsNullOrEmpty(EnqNo) & string.IsNullOrEmpty(QuoteNo))
                {
                    Array Arr = null;
                    Arr = Convert.ToString(Sectors).Split('~');
                    Sectors = Cls_SRRAirContract.MakePortPairString(Arr.GetValue(0).ToString(), Arr.GetValue(1).ToString(), ShippingLinePKs);
                }
                CalcDS = null;
                GetEnqDetailAir(EnqNo, CustNo, CustID, CustCategory, AgentNo, AgentID, CommodityGroup, Sectors, EnqDS, QuoteNo,
                Version, QuotationStatus, EnqOthDt, CalcDS.ToString(), ValidFor.ToString(), QuoteDate, CustomerType, ShipDate, CreditDays, CreditLimit,
                Remarks, CargoMcode, BaseCurrencyId, INCOTerms, PYMTType, AmendFlg, Group, ShippingLinePKs);

                foreach (DataRow DR_loopVariable in EnqDS.Tables[0].Rows)
                {
                    DR = DR_loopVariable;
                    DR["OTH_DTL"] = Cls_FlatRateFreights.GetOTHstring(EnqOthDt, 2, 3, 6, 4, 1, DR["PK"].ToString(), Convert.ToDecimal(getDefault(DR["CH_WT"], 0)), Amount, ExChTable,
                    8);
                    DR["OTH_BTN"] = Amount;
                }

                StringBuilder MasterQuery = new StringBuilder();
                StringBuilder FreightQuery = new StringBuilder();
                StringBuilder OthQuery = new StringBuilder();
                StringBuilder CargoQuery = new StringBuilder();
                StringBuilder TransactionPKs = new StringBuilder();
                WorkFlow objWF = new WorkFlow();

                if (!string.IsNullOrEmpty(Convert.ToString(QuoteNo).Trim()))
                {
                    OthDt = EnqOthDt;
                    if (AmendFlg == true)
                    {
                        //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Manual).Selected = true;
                        TransactionPKs = GetAllKeys(EnqDS.Tables[0], 0);
                    }
                    else
                    {
                        return;
                    }
                }

                if (AmendFlg == false)
                {
                    //if (rbOptions.Items.FindByValue(SourceType.SpotRate).Selected)
                    //{
                    //    MasterQuery = SpotRateQueryAIR(CustNo, Sectors, CommodityGroup, ShipDate, ShippingLinePKs);
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.CustomerContract).Selected)
                    //{
                    //    MasterQuery = CustContQueryAir(CustNo, Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.Quotation).Selected)
                    //{
                    //    MasterQuery = QuoteQueryAir(CustNo, Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                    //{
                    //    if (rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                    //    {
                    //        MasterQuery = AirTariffQuery(Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs, true, TariffAgentPk);
                    //    }
                    //    else
                    //    {
                    //        MasterQuery = AirTariffQuery(Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //    }
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.GeneralTariff).Selected)
                    //{
                    //    MasterQuery = GenTariffQueryAir(Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.SRR).Selected)
                    //{
                    //    MasterQuery = SRRQueryAir(CustNo, Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //}
                    //else if (rbOptions.Items.FindByValue(SourceType.Manual).Selected)
                    //{
                    //    MasterQuery = ManualQueryAir(Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                    //}
                }
                else
                {
                    MasterQuery = ManualQueryAir(Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs);
                }
                GridDS = objWF.GetDataSet(MasterQuery.ToString());
                //if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    foreach (DataRow DR_loopVariable in GridDS.Tables[0].Rows)
                //    {
                //        DR = DR_loopVariable;
                //        if (DR["SLAB_TYPE_PK"] == BreakPoint.ULD)
                //        {
                //            DR["SLAB_TYPE_PK"] = DR["SLAB"];
                //            DR["SLAB_TYPE"] = DR["SLAB_ID"];
                //        }
                //    }
                //}
                //if (AmendFlg == false)
                //{
                //    TransactionPKs = GetAllKeys(GridDS.Tables[0], 0);
                //    if (rbOptions.Items.FindByValue(SourceType.SpotRate).Selected)
                //    {
                //        FreightQuery = SpotRateFreightQueryAir(TransactionPKs.ToString());
                //        OthQuery = SpotRateOthQuery(TransactionPKs.ToString());
                //        CargoQuery = GetSpotRateCargoQueryAir(TransactionPKs.ToString());
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.CustomerContract).Selected)
                //    {
                //        FreightQuery = CustContFreightQuery(TransactionPKs.ToString());
                //        OthQuery = CustContOthQuery(TransactionPKs.ToString());
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.Quotation).Selected)
                //    {
                //        FreightQuery = QuoteFreightQueryAir(TransactionPKs.ToString());
                //        OthQuery = QuoteOthQuery(TransactionPKs.ToString());
                //        CargoQuery = GetQuoteCargoQueryAir(TransactionPKs.ToString(), 1);
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                //    {
                //        FreightQuery = AirTariffFreightQuery(TransactionPKs.ToString());
                //        OthQuery = AirTariffOthQuery(TransactionPKs.ToString());
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.GeneralTariff).Selected)
                //    {
                //        FreightQuery = GenTariffFreightQueryAir(TransactionPKs.ToString());
                //        OthQuery = GenTariffOthQuery(TransactionPKs.ToString());
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.SRR).Selected)
                //    {
                //        FreightQuery = SRRFreightQuery(TransactionPKs.ToString());
                //        OthQuery = SRROthQuery(TransactionPKs.ToString());
                //    }
                //    else if (rbOptions.Items.FindByValue(SourceType.Manual).Selected)
                //    {
                //        FreightQuery = ManualFreightQueryAir(TransactionPKs.ToString(), AmendFlg);
                //        OthQuery = ManualOthQuery(getDefault(TransactionPKs.ToString(), 0));
                //    }
                //    if (rbOptions.Items.FindByValue(SourceType.Manual).Selected)
                //    {
                //        GridDS.Tables.Add(ManualFreightTableAir(objWF.GetDataTable(FreightQuery.ToString().Replace("  ", " ")), TransactionPKs.ToString()));
                //    }
                //    else
                //    {
                //        GridDS.Tables.Add(objWF.GetDataTable(FreightQuery.ToString().Replace("  ", " ")));
                //    }
                //}
                //else
                //{
                //    FreightQuery = ManualFreightQueryAir(TransactionPKs.ToString(), AmendFlg);
                //    OthQuery = ManualOthQuery(getDefault(TransactionPKs.ToString(), 0));
                //    GridDS.Tables.Add(ManualFreightTableAir(objWF.GetDataTable(FreightQuery.ToString().Replace("  ", " ")), TransactionPKs.ToString()));
                //}
                OthDt = objWF.GetDataTable(OthQuery.ToString().Replace("  ", " "));
                if (CargoQuery.Length > 0)
                {
                    if ((CalcDS != null))
                    {
                        if (CalcDS.Tables[0].Rows.Count > 0)
                        {
                            DataTable tempDT = null;
                            DataRow tempDR = null;
                            Int16 ColCnt = default(Int16);
                            tempDT = objWF.GetDataTable(CargoQuery.ToString().Replace("  ", " "));
                            foreach (DataRow tempDR_loopVariable in tempDT.Rows)
                            {
                                tempDR = tempDR_loopVariable;
                                DR = CalcDS.Tables[0].NewRow();
                                for (ColCnt = 0; ColCnt <= CalcDS.Tables[0].Columns.Count - 1; ColCnt++)
                                {
                                    DR[ColCnt] = tempDR[ColCnt];
                                }
                                CalcDS.Tables[0].Rows.Add(DR);
                            }
                        }
                        else
                        {
                            CalcDS = objWF.GetDataSet(CargoQuery.ToString().Replace("  ", " "));
                        }
                    }
                    else
                    {
                        CalcDS = objWF.GetDataSet(CargoQuery.ToString().Replace("  ", " "));
                    }
                }

                try
                {
                    DataRelation REL = null;
                    REL = new DataRelation("RFQRelation", GridDS.Tables[0].Columns["PK"], GridDS.Tables[1].Columns["FK"]);
                    GridDS.Relations.Add(REL);
                    foreach (DataRow DR_loopVariable in GridDS.Tables[0].Rows)
                    {
                        DR = DR_loopVariable;
                        DR["OTH_DTL"] = Cls_FlatRateFreights.GetOTHstring(OthDt, 2, 3, 6, 4, 1, DR["PK"].ToString(), Convert.ToDecimal(DR["CH_WT"]), Amount, ExChTable);
                        DR["OTH_BTN"] = Amount;
                    }
                }
                catch (Exception eX)
                {
                    throw eX;
                }
            }
            catch (Exception eX)
            {
                throw eX;
            }
        }

        // Function to get All Pks of parent Table
        /// <summary>
        /// Gets all keys.
        /// </summary>
        /// <param name="DT">The dt.</param>
        /// <param name="ColNum">The col number.</param>
        /// <returns></returns>
        private StringBuilder GetAllKeys(DataTable DT, Int16 ColNum)
        {
            StringBuilder functionReturnValue = null;
            functionReturnValue = new StringBuilder();
            functionReturnValue.Append("-1");
            DataRow DR = null;
            try
            {
                foreach (DataRow DR_loopVariable in DT.Rows)
                {
                    DR = DR_loopVariable;
                    functionReturnValue.Append(',' + Convert.ToString(DR[ColNum]).Trim());
                }
            }
            catch (System.Exception eX)
            {
                functionReturnValue.Remove(0, functionReturnValue.Length - 1);
            }
            return functionReturnValue;
        }

        /// <summary>
        /// Slabs the types.
        /// </summary>
        /// <returns></returns>
        public DataTable SlabTypes()
        {
            string strSQL = null;
            strSQL = " Select 'BP'              SLAB_TYPE,  1                           PK from dual " + " union " + " Select BREAKPOINT_ID     SLAB_TYPE,  AIRFREIGHT_SLABS_TBL_PK     PK " + " from    AIRFREIGHT_SLABS_TBL " + " where   BREAKPOINT_TYPE = 2 " + "   and   ACTIVE_FLAG = 1 ";
            return (new WorkFlow()).GetDataTable(strSQL);
        }

        #endregion " Main Fetch Query "

        #region " Show Rates Queries. "

        /// <summary>
        /// Gets the rates.
        /// </summary>
        /// <param name="DS">The ds.</param>
        /// <returns></returns>
        public bool GetRates(DataSet DS)
        {
            WorkFlow objWF = new WorkFlow();
            OracleDataReader oDR = null;
            DataRow DR = null;
            DataRow pDR = null;
            StringBuilder RateQuery = new StringBuilder();
            decimal ApprovedRate = default(decimal);
            decimal MinAmount = default(decimal);
            BreakPoint SlabType = default(BreakPoint);
            string ChargeableWt = null;
            string SlabPk = null;
            string FrtTrnFk = null;
            string SlabID = null;
            try
            {
                foreach (DataRow DR_loopVariable in DS.Tables[1].Rows)
                {
                    DR = DR_loopVariable;
                    if ((FreightType)(DR["FRT_TYPE"]) == FreightType.AFC)
                    {
                        foreach (DataRow pDR_loopVariable in DS.Tables[0].Rows)
                        {
                            pDR = pDR_loopVariable;
                            if (pDR["PK"] == DR["FK"] & getDefault(pDR["SELECTED"], "false") == "true")
                            {
                                if ((SourceType)pDR["REF_TYPE"] != SourceType.Quotation)
                                {
                                    if (Convert.ToInt32(pDR["SLAB_TYPE_PK"]) == 1)
                                    {
                                        SlabType = BreakPoint.Kgs;
                                    }
                                    else
                                    {
                                        SlabType = BreakPoint.ULD;
                                    }
                                    ChargeableWt = pDR["CH_WT"].ToString();
                                    SlabPk = getDefault(pDR["SLAB"], 0).ToString();
                                    FrtTrnFk = DR["PK"].ToString();
                                    switch ((SourceType)pDR["REF_TYPE"])
                                    {
                                        case SourceType.SpotRate:
                                            RateQuery.Append(" Select bp.APPROVED_RATE, trf.MIN_AMOUNT, ");
                                            RateQuery.Append("        afc.AIRFREIGHT_SLABS_TBL_PK, afc.BREAKPOINT_ID ");
                                            RateQuery.Append(" from ");
                                            RateQuery.Append("       RFQ_SPOT_AIR_BREAKPOINTS bp,   AIRFREIGHT_SLABS_TBL afc, ");
                                            RateQuery.Append("       RFQ_SPOT_AIR_TRN_FREIGHT_TBL trf ");
                                            RateQuery.Append(" Where ");
                                            RateQuery.Append("        bp.AIRFREIGHT_SLABS_TBL_FK    =      afc.AIRFREIGHT_SLABS_TBL_PK");
                                            RateQuery.Append("   and  bp.RFQ_SPOT_AIR_FRT_FK        =      trf.RFQ_SPOT_TRN_FREIGHT_PK");
                                            RateQuery.Append("   and  trf.RFQ_SPOT_TRN_FREIGHT_PK   =   " + FrtTrnFk);
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append("   and  afc.BREAKPOINT_RANGE      = ");
                                                RateQuery.Append("     ( Select Max(BREAKPOINT_RANGE) ");
                                                RateQuery.Append("         from AIRFREIGHT_SLABS_TBL, RFQ_SPOT_AIR_BREAKPOINTS ");
                                                RateQuery.Append("         where BREAKPOINT_RANGE  <= " + ChargeableWt);
                                                RateQuery.Append("           and AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK ");
                                                RateQuery.Append("           and RFQ_SPOT_AIR_FRT_FK     = " + FrtTrnFk);
                                                RateQuery.Append("     ) ");
                                            }
                                            else
                                            {
                                                RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = " + SlabPk);
                                            }
                                            RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            break;

                                        case SourceType.CustomerContract:
                                            RateQuery.Append(" Select bp.APPROVED_RATE,            trf.MIN_AMOUNT, ");
                                            RateQuery.Append("        afc.AIRFREIGHT_SLABS_TBL_PK, afc.BREAKPOINT_ID ");
                                            RateQuery.Append(" from ");
                                            RateQuery.Append("       CONT_CUST_AIR_BREAKPOINTS bp,  AIRFREIGHT_SLABS_TBL afc,");
                                            RateQuery.Append("       CONT_CUST_AIR_FREIGHT_TBL trf ");
                                            RateQuery.Append(" Where ");
                                            RateQuery.Append("        bp.AIRFREIGHT_SLABS_FK        =   afc.AIRFREIGHT_SLABS_TBL_PK");
                                            RateQuery.Append("   and  bp.CONT_CUST_AIR_FRT_FK       =   trf.CONT_CUST_AIR_FREIGHT_PK");
                                            RateQuery.Append("   and  bp.CONT_CUST_AIR_FRT_FK       =   " + FrtTrnFk);
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append("   and  afc.BREAKPOINT_RANGE      = ");
                                                RateQuery.Append("     ( Select Max(BREAKPOINT_RANGE) ");
                                                RateQuery.Append("         from AIRFREIGHT_SLABS_TBL, CONT_CUST_AIR_BREAKPOINTS ");
                                                RateQuery.Append("         where BREAKPOINT_RANGE  <= " + ChargeableWt);
                                                RateQuery.Append("           and AIRFREIGHT_SLABS_FK     = AIRFREIGHT_SLABS_TBL_PK ");
                                                RateQuery.Append("           and CONT_CUST_AIR_FRT_FK    = " + FrtTrnFk);
                                                RateQuery.Append("     ) ");
                                            }
                                            else
                                            {
                                                RateQuery.Append("   and bp.AIRFREIGHT_SLABS_FK    = " + SlabPk);
                                            }
                                            RateQuery.Append("   and bp.AIRFREIGHT_SLABS_FK = afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            break;

                                        case SourceType.OperatorAirlineTariff:
                                            RateQuery.Append(" Select bp.TARIFF_RATE,              trf.MIN_AMOUNT, ");
                                            RateQuery.Append("        afc.AIRFREIGHT_SLABS_TBL_PK, afc.BREAKPOINT_ID ");
                                            RateQuery.Append(" from ");
                                            RateQuery.Append("       TARIFF_AIR_BREAKPOINTS bp,     AIRFREIGHT_SLABS_TBL afc,");
                                            RateQuery.Append("       TARIFF_TRN_AIR_FREIGHT_TBL trf ");
                                            RateQuery.Append(" Where ");
                                            RateQuery.Append("        bp.AIRFREIGHT_SLABS_TBL_FK    =      afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            RateQuery.Append("   and  bp.TARIFF_TRN_FREIGHT_FK      =      trf.TARIFF_TRN_FREIGHT_PK ");
                                            RateQuery.Append("   and  trf.TARIFF_TRN_FREIGHT_PK     =   " + FrtTrnFk);
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append("   and  afc.BREAKPOINT_RANGE      = ");
                                                RateQuery.Append("     ( Select Max(BREAKPOINT_RANGE) ");
                                                RateQuery.Append("         from AIRFREIGHT_SLABS_TBL, TARIFF_AIR_BREAKPOINTS ");
                                                RateQuery.Append("         where BREAKPOINT_RANGE  <= " + ChargeableWt);
                                                RateQuery.Append("           and AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK ");
                                                RateQuery.Append("           and TARIFF_TRN_FREIGHT_FK   = " + FrtTrnFk);
                                                RateQuery.Append("     ) ");
                                            }
                                            else
                                            {
                                                RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = " + SlabPk);
                                            }
                                            RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            break;

                                        case SourceType.AgentTariff:
                                            RateQuery.Append(" Select bp.TARIFF_RATE,              trf.MIN_AMOUNT, ");
                                            RateQuery.Append("        afc.AIRFREIGHT_SLABS_TBL_PK, afc.BREAKPOINT_ID ");
                                            RateQuery.Append(" from ");
                                            RateQuery.Append("       TARIFF_AIR_BREAKPOINTS bp,     AIRFREIGHT_SLABS_TBL afc,");
                                            RateQuery.Append("       TARIFF_TRN_AIR_FREIGHT_TBL trf ");
                                            RateQuery.Append(" Where ");
                                            RateQuery.Append("        bp.AIRFREIGHT_SLABS_TBL_FK    =      afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            RateQuery.Append("   and  bp.TARIFF_TRN_FREIGHT_FK      =      trf.TARIFF_TRN_FREIGHT_PK ");
                                            RateQuery.Append("   and  trf.TARIFF_TRN_FREIGHT_PK     =   " + FrtTrnFk);
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append("   and  afc.BREAKPOINT_RANGE      = ");
                                                RateQuery.Append("     ( Select Max(BREAKPOINT_RANGE) ");
                                                RateQuery.Append("         from AIRFREIGHT_SLABS_TBL, TARIFF_AIR_BREAKPOINTS ");
                                                RateQuery.Append("         where BREAKPOINT_RANGE  <= " + ChargeableWt);
                                                RateQuery.Append("           and AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK ");
                                                RateQuery.Append("           and TARIFF_TRN_FREIGHT_FK   = " + FrtTrnFk);
                                                RateQuery.Append("     ) ");
                                            }
                                            else
                                            {
                                                RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = " + SlabPk);
                                            }
                                            RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            break;

                                        case SourceType.GeneralTariff:
                                            RateQuery.Append(" Select bp.TARIFF_RATE,              trf.MIN_AMOUNT, ");
                                            RateQuery.Append("        afc.AIRFREIGHT_SLABS_TBL_PK, afc.BREAKPOINT_ID ");
                                            RateQuery.Append(" from ");
                                            RateQuery.Append("       TARIFF_AIR_BREAKPOINTS bp,     AIRFREIGHT_SLABS_TBL afc,");
                                            RateQuery.Append("       TARIFF_TRN_AIR_FREIGHT_TBL trf ");
                                            RateQuery.Append(" Where ");
                                            RateQuery.Append("        bp.AIRFREIGHT_SLABS_TBL_FK    =      afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            RateQuery.Append("   and  bp.TARIFF_TRN_FREIGHT_FK      =      trf.TARIFF_TRN_FREIGHT_PK ");
                                            RateQuery.Append("   and  trf.TARIFF_TRN_FREIGHT_PK     =   " + FrtTrnFk);
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append("   and  afc.BREAKPOINT_RANGE      = ");
                                                RateQuery.Append("     ( Select Max(BREAKPOINT_RANGE) ");
                                                RateQuery.Append("         from AIRFREIGHT_SLABS_TBL, TARIFF_AIR_BREAKPOINTS ");
                                                RateQuery.Append("         where BREAKPOINT_RANGE  <= " + ChargeableWt);
                                                RateQuery.Append("           and AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK ");
                                                RateQuery.Append("           and TARIFF_TRN_FREIGHT_FK   = " + FrtTrnFk);
                                                RateQuery.Append("     ) ");
                                            }
                                            else
                                            {
                                                RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = " + SlabPk);
                                            }
                                            RateQuery.Append("   and bp.AIRFREIGHT_SLABS_TBL_FK = afc.AIRFREIGHT_SLABS_TBL_PK ");
                                            break;

                                        case SourceType.Manual:
                                            RateQuery.Append("SELECT '' TARIFF_RATE,");
                                            RateQuery.Append("       '' MIN_AMOUNT,");
                                            RateQuery.Append("       AFC.AIRFREIGHT_SLABS_TBL_PK,");
                                            RateQuery.Append("       AFC.BREAKPOINT_ID");
                                            RateQuery.Append("  FROM AIRFREIGHT_SLABS_TBL AFC");
                                            if (SlabType == BreakPoint.Kgs)
                                            {
                                                RateQuery.Append(" WHERE AFC.BREAKPOINT_RANGE =");
                                                RateQuery.Append("       (SELECT MAX(AF.BREAKPOINT_RANGE)");
                                                RateQuery.Append("          FROM AIRFREIGHT_SLABS_TBL AF");
                                                RateQuery.Append("         WHERE AF.BREAKPOINT_RANGE <= " + ChargeableWt + ")");
                                            }
                                            else
                                            {
                                                RateQuery.Append(" WHERE AFC.AIRFREIGHT_SLABS_TBL_PK =" + SlabPk);
                                            }
                                            break;
                                    }

                                    oDR = objWF.GetDataReader(RateQuery.ToString().Replace("  ", " "));
                                    RateQuery.Remove(0, RateQuery.Length);
                                    while (oDR.Read())
                                    {
                                        ApprovedRate = Convert.ToDecimal(getDefault(oDR[0], 0));
                                        MinAmount = Convert.ToDecimal(getDefault(oDR[1], 0));
                                        SlabPk = Convert.ToString(getDefault(oDR[2], 0));
                                        SlabID = Convert.ToString(getDefault(oDR[3], 0));
                                    }
                                    if ((SourceType)pDR["REF_TYPE"] != SourceType.Manual)
                                    {
                                        DR["BASIS_RATE"] = getDefault(ApprovedRate, "");
                                        DR["MIN_AMOUNT"] = getDefault(MinAmount, "");
                                    }
                                    pDR["SLAB"] = getDefault(SlabPk, "");
                                    pDR["SLAB_ID"] = getDefault(SlabID, "");
                                }
                            }
                        }
                    }
                }
                return true;
            }
            catch (Exception eX)
            {
                return false;
            }
        }

        #endregion " Show Rates Queries. "

        #region " Get Amount and All in Freight "

        #region " Logical Flow "

        // This is basically to compute the Tariff Rate from given Basis Rate and Quantity
        // The Calculation will varry according to ChargeBasis Flat, KGs and Percentage

        #endregion " Logical Flow "

        /// <summary>
        /// Gets the amount value.
        /// </summary>
        /// <param name="DS">The ds.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="ExchRateDT">The exch rate dt.</param>
        /// <returns></returns>
        public object GetAmountValue(DataSet DS, DataTable OthDt, DataTable ExchRateDT = null)
        {
            Int16 RowCnt = default(Int16);
            Int16 cRowCnt = default(Int16);
            DataRow DR = null;
            DataRow DRc = null;
            DataRow crDR = null;
            if (ExchRateDT == null)
            {
                ExchRateDT = FetchCurrAndExchange().Tables[0];
            }
            decimal ExchangeRate = 1;

            BreakPoint SlabType = default(BreakPoint);
            int Boxes = 0;
            long SlabFk = 0;
            decimal ChargeableWt = default(decimal);
            decimal AllInQuote = default(decimal);
            decimal NetValue = default(decimal);
            decimal OthAmount = default(decimal);

            long Currency = 0;
            decimal MinAmount = default(decimal);
            decimal TrfRate = default(decimal);
            decimal BasisRate = default(decimal);
            ChargeBasis ChrgBasis = default(ChargeBasis);
            FreightType FrtType = default(FreightType);

            foreach (DataRow DR_loopVariable in DS.Tables[0].Rows)
            {
                DR = DR_loopVariable;
                if (getDefault(DR["SELECTED"], "false") == "true")
                {
                    if (Convert.ToInt32(DR["SLAB_TYPE_PK"]) == 1)
                    {
                        SlabType = BreakPoint.Kgs;
                    }
                    else
                    {
                        SlabType = BreakPoint.ULD;
                    }
                    Boxes = Convert.ToInt32(getDefault(DR["BOXES"], 0));
                    SlabFk = Convert.ToInt64(getDefault(DR["SLAB"], 0));
                    ChargeableWt = Convert.ToDecimal(getDefault(DR["FRT_WT"], 0));
                    AllInQuote = Convert.ToDecimal(getDefault(DR["AI_QT"], 0));
                    NetValue = Convert.ToDecimal(getDefault(DR["NET"], 0));
                    AllInQuote = 0;
                    BasisRate = 0;
                    OthAmount = 0;

                    foreach (DataRow DRc_loopVariable in DS.Tables[1].Rows)
                    {
                        DRc = DRc_loopVariable;
                        if (DRc["FK"] == DR["PK"])
                        {
                            FrtType = (FreightType)DRc["FRT_TYPE"];
                            if (FrtType == FreightType.AFC && SlabType == BreakPoint.ULD)
                            {
                                DRc["CH_BASIS"] = 2;
                                DRc["CH_BASIS_ID"] = "Flat";
                            }
                            else
                            {
                                if (DRc["CH_BASIS_ID"] != "Flat")
                                {
                                    DRc["CH_BASIS"] = 3;
                                    DRc["CH_BASIS_ID"] = "KGs";
                                }
                            }
                            Currency = Convert.ToInt64(DRc["CURR_FK"]);
                            MinAmount = Convert.ToDecimal(getDefault(DRc["MIN_AMOUNT"], 0));
                            BasisRate = Convert.ToDecimal(getDefault(DRc["BASIS_RATE"], 0));
                            ChrgBasis = (ChargeBasis)Convert.ToDecimal(getDefault(DRc["CH_BASIS"], 2));
                            if (ChrgBasis == ChargeBasis.Flat)
                            {
                                TrfRate = BasisRate;
                            }
                            else if (ChrgBasis == ChargeBasis.Percentage)
                            {
                                if (FrtType == FreightType.AFC)
                                {
                                    if (SlabType == BreakPoint.Kgs)
                                    {
                                        TrfRate = BasisRate * ChargeableWt;
                                    }
                                    else
                                    {
                                        TrfRate = BasisRate * Boxes;
                                    }
                                }
                                else
                                {
                                    DataRow AfcDR = null;
                                    TrfRate = 0;
                                    foreach (DataRow AfcDR_loopVariable in DS.Tables[1].Rows)
                                    {
                                        AfcDR = AfcDR_loopVariable;
                                        if (AfcDR["FK"] == DR["PK"] && (FreightType)AfcDR["FRT_TYPE"] == FreightType.AFC)
                                        {
                                            if ((ChargeBasis)AfcDR["CH_BASIS"] == ChargeBasis.Flat && (ChrgBasis == ChargeBasis.Flat))
                                            {
                                                TrfRate += Convert.ToDecimal(Convert.ToDecimal(getDefault(AfcDR["BASIS_RATE"], 0)) * Convert.ToDecimal(getDefault(Boxes, 1)));
                                            }
                                            else
                                            {
                                                TrfRate += Convert.ToDecimal(Convert.ToDecimal(getDefault(AfcDR["BASIS_RATE"], 0)) * Convert.ToDecimal(getDefault(ChargeableWt, 1)));
                                            }
                                        }
                                    }
                                    TrfRate = TrfRate * BasisRate / 100;
                                }
                            }
                            else if (ChrgBasis == ChargeBasis.KGs)
                            {
                                TrfRate = BasisRate * ChargeableWt;
                            }

                            if (TrfRate < MinAmount)
                            {
                                TrfRate = MinAmount;
                                if (FrtType == FreightType.AFC)
                                {
                                    DRc["CH_BASIS"] = ChargeBasis.Flat;
                                    DRc["CH_BASIS_ID"] = "Flat";
                                }
                            }
                            DRc["TARIFF_RATE"] = TrfRate;
                            foreach (DataRow crDR_loopVariable in ExchRateDT.Rows)
                            {
                                crDR = crDR_loopVariable;
                                if (Convert.ToInt64(crDR["CURRENCY_MST_PK"]) == Currency)
                                    break; // TODO: might not be correct. Was : Exit For
                            }
                            ExchangeRate = Convert.ToDecimal(getDefault(crDR["EXCHANGE_RATE"], 1));

                            AllInQuote += TrfRate * ExchangeRate;
                        }
                    }
                    //OthAmount = Cls_FlatRateFreights.UpdateOTHFreights(OthDt, getDefault(DR["OTH_DTL"], ""), 2, 3, 6, 4, 1, getDefault(DR["PK"], "0"), getDefault(ChargeableWt, 1), ExchRateDT);
                    if (OthAmount != -1)
                        DR["OTH_BTN"] = OthAmount;
                    DR["AI_QT"] = AllInQuote;
                }
            }
            return new object();
        }

        #endregion " Get Amount and All in Freight "

        #region " Save Other Freight and Cargo Info "

        #region " Other Freight Elemenmts "

        /// <summary>
        /// Saves the other freights.
        /// </summary>
        /// <param name="pDR">The p dr.</param>
        /// <param name="OthDT">The oth dt.</param>
        /// <param name="TrnPKValue">The TRN pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <returns></returns>
        private ArrayList SaveOtherFreights(DataRow pDR, DataTable OthDT, long TrnPKValue, OracleCommand SCM, string UserName)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            long FreightPk = 0;
            decimal ChargeableWt = default(decimal);
            decimal BasisRate = default(decimal);
            decimal TrfRate = default(decimal);
            ChargeBasis CharBas = default(ChargeBasis);
            arrMessage.Clear();
            try
            {
                var _with66 = SCM;
                for (nRowCnt = 0; nRowCnt <= OthDT.Rows.Count - 1; nRowCnt++)
                {
                    _with66.CommandType = CommandType.StoredProcedure;
                    _with66.CommandText = UserName + ".QUOTATION_AIR_TBL_PKG.QUOTATION_AIR_OTH_FRT_INS";
                    DR = OthDT.Rows[nRowCnt];
                    CharBas = (ChargeBasis)DR["CH_BASIS"];
                    ChargeableWt = Convert.ToDecimal(getDefault(pDR["CH_WT"], 0));
                    BasisRate = Convert.ToDecimal(getDefault(DR["BASIS_RATE"], 0));
                    if (CharBas == ChargeBasis.Flat)
                    {
                        TrfRate = BasisRate;
                    }
                    else
                    {
                        TrfRate = BasisRate * ChargeableWt;
                    }
                    DR["TARIFF_RATE"] = TrfRate;
                    if (DR["FK"] == pDR["PK"])
                    {
                        var _with67 = _with66.Parameters;
                        _with67.Clear();
                        _with67.Add("QUOTE_TRN_AIR_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                        _with67.Add("FREIGHT_ELEMENT_MST_FK_IN", DR["FRT_FK"]).Direction = ParameterDirection.Input;
                        _with67.Add("CURRENCY_MST_FK_IN", DR["CURR_FK"]).Direction = ParameterDirection.Input;
                        _with67.Add("AMOUNT_IN", getDefault(DR["TARIFF_RATE"], 0)).Direction = ParameterDirection.Input;
                        _with67.Add("FREIGHT_TYPE_IN", getDefault(DR["PYMT_TYPE"], 0)).Direction = ParameterDirection.Input;
                        _with67.Add("CHARGE_BASIS_IN", DR["CH_BASIS"]).Direction = ParameterDirection.Input;
                        _with67.Add("BASIS_RATE_IN", getDefault(DR["BASIS_RATE"], 0)).Direction = ParameterDirection.Input;
                        _with67.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        _with66.ExecuteNonQuery();
                        FreightPk = Convert.ToInt64(_with66.Parameters["RETURN_VALUE"].Value);
                    }
                }

                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Other Freight Elemenmts "

        #region " Cargo Information "

        /// <summary>
        /// Saves the cargo information.
        /// </summary>
        /// <param name="pDR">The p dr.</param>
        /// <param name="CalcDT">The calculate dt.</param>
        /// <param name="TrnPKValue">The TRN pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="Measure">The measure.</param>
        /// <param name="Wt">The wt.</param>
        /// <param name="DivFac">The div fac.</param>
        /// <returns></returns>
        private ArrayList SaveCargoInfo(DataRow pDR, DataTable CalcDT, long TrnPKValue, OracleCommand SCM, string UserName, string Measure, string Wt, string DivFac)
        {
            Int32 nRowCnt = default(Int32);
            DataRow DR = null;
            long CargoPk = 0;
            arrMessage.Clear();
            try
            {
                if ((CalcDT != null))
                {
                    var _with68 = SCM;
                    for (nRowCnt = 0; nRowCnt <= CalcDT.Rows.Count - 1; nRowCnt++)
                    {
                        _with68.CommandType = CommandType.StoredProcedure;
                        _with68.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_CARGO_CALC_INS";
                        DR = CalcDT.Rows[nRowCnt];
                        //If DR.Item("FK") = pDR.Item("PK") And DR.Item("PK") = 2 Then
                        var _with69 = _with68.Parameters;
                        _with69.Clear();

                        _with69.Add("QUOTATION_DTL_FK_IN", TrnPKValue).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_NOP_IN", getDefault(DR["NOP"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_LENGTH_IN", getDefault(DR["LENGTH"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_WIDTH_IN", getDefault(DR["WIDTH"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_HEIGHT_IN", getDefault(DR["HEIGHT"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_CUBE_IN", getDefault(DR["CUBE"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_VOLUME_WT_IN", getDefault(DR["VolWeight"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_ACTUAL_WT_IN", getDefault(DR["ActWeight"], 0)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_DENSITY_IN", getDefault(DR["Density"], 0)).Direction = ParameterDirection.Input;

                        _with69.Add("CARGO_MEASURE_IN", (string.IsNullOrEmpty(Measure) ? "0" : Measure)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_WT_IN", (string.IsNullOrEmpty(Wt) ? "0" : Wt)).Direction = ParameterDirection.Input;
                        _with69.Add("CARGO_DIVFAC_IN", (string.IsNullOrEmpty(DivFac) ? "0" : DivFac)).Direction = ParameterDirection.Input;

                        _with69.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        _with68.ExecuteNonQuery();
                        CargoPk = Convert.ToInt64(_with68.Parameters["RETURN_VALUE"].Value);
                        //End If
                    }
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Cargo Information "

        #endregion " Save Other Freight and Cargo Info "

        #region " Quotation Printing - Export AIR LCL "

        /// <summary>
        /// Fetches the quotation air main.
        /// </summary>
        /// <param name="Qpk">The QPK.</param>
        /// <returns></returns>
        public DataSet FetchQuotationAirMain(Int32 Qpk)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            Strsql = "  SELECT QAT.QUOTATION_MST_PK QPK,";
            Strsql += "QAT.QUOTATION_REF_NO QREFNO,";
            Strsql += "CMST.CUSTOMER_NAME CUSTOMERNAME,";
            Strsql += "CDTLS.ADM_CONTACT_PERSON CONTACTPERSON,";
            Strsql += "CDTLS.ADM_FAX_NO FAXNO,";
            Strsql += "CGMST.COMMODITY_GROUP_DESC COMMODITY,";
            Strsql += "QACC.CARGO_NOP NUMBEROFPIECES,";
            Strsql += "QACC.CARGO_VOLUME_WT VOLUME_WEIGHT,";
            Strsql += "QTA.CHARGEABLE_WEIGHT,";
            Strsql += "QAT.header_content,";
            Strsql += "QAT.footer_content,QAT.remarks,";
            Strsql += "QACC.CARGO_ACTUAL_WT WEIGHT,";
            Strsql += "QACC.CARGO_CUBE VOLUME,";
            Strsql += "COLPLC.PLACE_CODE COLLECTIONPOINTCODE,";
            Strsql += "POL.PORT_NAME COLLECTIONPOINTNAME,";
            Strsql += "CMD.CARGO_MOVE_CODE DESTINATIONCODE,";
            Strsql += "POD.PORT_NAME  DESTINATIONNAME,";
            Strsql += "FREMST.FREIGHT_ELEMENT_NAME FREIGHTNAME,";
            Strsql += "CTMST.CURRENCY_ID CURRENCYID,";
            Strsql += "QTAFD.QUOTED_RATE TOTAL,";
            Strsql += "QTAFD.BASIS_RATE BASISRATE,";
            Strsql += "DECODE(QTAFD.CHARGE_BASIS,1,'%',2,'Flat Rate',3,'Kg') CHARGEBASIS,";
            Strsql += "QAT.VALID_FOR VALID_FOR";
            Strsql += "FROM QUOTATION_MST_TBL     QAT,";
            Strsql += "QUOTATION_DTL_TBL     QTA,";
            Strsql += "QUOTATION_CARGO_CALC QACC,";
            Strsql += "QUOTATION_FREIGHT_TRN QTAFD,";
            Strsql += "CUSTOMER_MST_TBL      CMST,";
            Strsql += "CUSTOMER_CONTACT_DTLS CDTLS,";
            Strsql += "PLACE_MST_TBL         COLPLC,";
            Strsql += "PLACE_MST_TBL         DELPLC,";
            Strsql += "FREIGHT_ELEMENT_MST_TBL FREMST,";
            Strsql += "CURRENCY_TYPE_MST_TBL CTMST,";
            Strsql += "COMMODITY_GROUP_MST_TBL CGMST,";
            Strsql += "PORT_MST_TBL POL,";
            Strsql += "PORT_MST_TBL POD,";
            Strsql += "CARGO_MOVE_MST_TBL CMD";
            Strsql += "WHERE CMST.CUSTOMER_MST_PK(+) = QAT.CUSTOMER_MST_FK";
            Strsql += "AND CDTLS.CUSTOMER_MST_FK(+) = CMST.CUSTOMER_MST_PK";
            Strsql += "AND QTA.QUOTATION_MST_FK(+) = QAT.QUOTATION_MST_PK";
            Strsql += "AND COLPLC.PLACE_PK(+) = QAT.COL_PLACE_MST_FK";
            Strsql += "AND DELPLC.PLACE_PK(+) = QAT.DEL_PLACE_MST_FK";
            Strsql += "AND QTAFD.QUOTATION_DTL_FK(+)=QTA.QUOTE_DTL_PK";
            Strsql += "AND QAT.QUOTATION_MST_PK=QTA.QUOTATION_MST_FK(+)";
            Strsql += "AND FREMST.FREIGHT_ELEMENT_MST_PK(+)=QTAFD.FREIGHT_ELEMENT_MST_FK";
            Strsql += "AND CTMST.CURRENCY_MST_PK(+)=QTAFD.CURRENCY_MST_FK";
            Strsql += "AND CGMST.COMMODITY_GROUP_PK(+)=QTA.COMMODITY_GROUP_FK ";
            Strsql += "AND QTA.QUOTE_DTL_PK=QACC.QUOTATION_DTL_FK(+)";
            Strsql += "AND QTA.PORT_MST_POL_FK=POL.PORT_MST_PK(+) ";
            Strsql += "AND QTA.PORT_MST_POD_FK=POD.PORT_MST_PK(+) ";
            Strsql += "AND QAT.Cargo_Move_Fk=CMD.CARGO_MOVE_PK(+) ";
            Strsql += "AND QAT.QUOTATION_MST_PK=" + Qpk;
            Strsql += "ORDER BY QTAFD.FREIGHT_ELEMENT_MST_FK";
            try
            {
                return Objwk.GetDataSet(Strsql);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the other freight elements.
        /// </summary>
        /// <param name="Qpk">The QPK.</param>
        /// <returns></returns>
        public DataSet FetchOtherFreightElements(Int32 Qpk)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            Strsql = "SELECT QAT.QUOTATION_MST_PK QPK,";
            Strsql += "QAT.QUOTATION_REF_NO QREFNO,";
            Strsql += "OTHERFRE.FREIGHT_ELEMENT_NAME OTHERFRENAME,";
            Strsql += "OTHERCUR.CURRENCY_ID OTHERCURID,";

            Strsql += "QAOC.AMOUNT OTHERAMOUNT,";
            Strsql += "QAOC.BASIS_RATE OTHERBASISRATE,";
            Strsql += "DECODE(QAOC.CHARGE_BASIS,1,'%',2,'FlatRate',3,'Kgs',4,'Unit') OTHERCHARGE";

            Strsql += "FROM QUOTATION_MST_TBL     QAT,";
            Strsql += "QUOTATION_DTL_TBL     QTA,";
            Strsql += "QUOTATION_OTHER_FREIGHT_TRN QAOC,";
            Strsql += "FREIGHT_ELEMENT_MST_TBL OTHERFRE,";
            Strsql += "CURRENCY_TYPE_MST_TBL OTHERCUR";
            Strsql += "WHERE QTA.QUOTATION_MST_FK(+) = QAT.QUOTATION_MST_PK";
            Strsql += "AND QAOC.QUOTATION_DTL_FK(+)=QTA.QUOTE_DTL_PK";
            Strsql += "AND QAOC.FREIGHT_ELEMENT_MST_FK=OTHERFRE.FREIGHT_ELEMENT_MST_PK(+)";
            Strsql += "AND QAOC.CURRENCY_MST_FK=OTHERCUR.CURRENCY_MST_PK(+)";
            Strsql += "AND QAT.QUOTATION_MST_PK=" + Qpk;
            try
            {
                return Objwk.GetDataSet(Strsql);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
            return new DataSet();
        }

        /// <summary>
        /// Fetches the quotation air fright.
        /// </summary>
        /// <param name="Qpk">The QPK.</param>
        /// <returns></returns>
        public DataSet FetchQuotationAirFright(Int32 Qpk)
        {
            string Strsql = null;
            WorkFlow ObjWk = new WorkFlow();
            Strsql = " SELECT QA.QUOTATION_MST_PK,QA.QUOTATION_REF_NO,FE.FREIGHT_ELEMENT_NAME AS DESCRPTION,";
            Strsql += " CC.CURRENCY_ID,QFA.QUOTED_RATE AS AMOUNT,DU.DIMENTION_ID AS COMMENTS,QA.SPECIAL_INSTRUCTIONS";
            Strsql += " FROM QUOTATION_MST_TBL QA,QUOTATION_DTL_TBL QAA,QUOTATION_FREIGHT_TRN QFA,FREIGHT_ELEMENT_MST_TBL FE,";
            Strsql += " CURRENCY_TYPE_MST_TBL CC,DIMENTION_UNIT_MST_TBL DU";

            Strsql += " WHERE QA.QUOTATION_MST_PK=" + Qpk;
            Strsql += " AND QA.QUOTATION_MST_PK=QAA.QUOTATION_MST_FK";
            Strsql += " AND QAA.QUOTE_DTL_PK=QFA.QUOTATION_DTL_FK";
            Strsql += " AND CC.CURRENCY_MST_PK(+)=QFA.CURRENCY_MST_FK";
            Strsql += " AND DU.DIMENTION_UNIT_MST_PK(+)=FE.UOM_MST_FK";
            Strsql += " AND DU.DIMENTION_UNIT_MST_PK(+)=FE.UOM_MST_FK";
            Strsql += " AND FE.FREIGHT_ELEMENT_MST_PK=QFA.FREIGHT_ELEMENT_MST_FK";
            try
            {
                return ObjWk.GetDataSet(Strsql);
            }
            catch (Exception ex)
            {
            }
            return new DataSet();
        }

        #endregion " Quotation Printing - Export AIR LCL "

        #region "Fetch UWG3 grid genral type "

        /// <summary>
        /// Getgenrateds from.
        /// </summary>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="Options">The options.</param>
        private void GetgenratedFrom(string QuoteNo = "", string Options = null)
        {
            int SrcType = 0;
            WorkFlow objWF = new WorkFlow();
            SrcType = Convert.ToInt32(objWF.ExecuteScaler(" SELECT QT.TRANS_REFERED_FROM FROM QUOTATION_DTL_TBL QT WHERE QT.QUOTATION_MST_FK= " + QuoteNo));
            if ((SourceType)SrcType == SourceType.SpotRate)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SpotRate).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.CustomerContract)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.CustomerContract).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.Quotation)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Quotation).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.OperatorAirlineTariff)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.OperatorAirlineTariff).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.GeneralTariff)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.GeneralTariff).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.AgentTariff)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.AgentTariff).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.SRR)
            {
                //((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SRR).Selected = true;
            }
            else if ((SourceType)SrcType == SourceType.DefaultValue)
            {
            }
        }

        /// <summary>
        /// Headerqueries the specified group.
        /// </summary>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private StringBuilder Headerquery(int Group = 0)
        {
            StringBuilder strQuery = new StringBuilder();
            if (Group == 1 | Group == 2)
            {
                strQuery.Append("SELECT DISTINCT TRAN.QUOTATION_MST_FK PK,");
                strQuery.Append("       TRAN.QUOTATION_MST_FK     FK,");
                strQuery.Append("       TRAN.TRANS_REFERED_FROM  REF_TYPE,");
                strQuery.Append("       TRAN.POL_GRP_FK          POLFK,");
                strQuery.Append("       PGL.PORT_GRP_ID          POL_ID,");
                strQuery.Append("       TRAN.POD_GRP_FK          PODFK,");
                //
                strQuery.Append("       PGD.PORT_GRP_ID          POD_ID,");
                strQuery.Append("       TRAN.CARRIER_MST_FK   AIR_PK,");
                strQuery.Append("       AIR.AIRLINE_ID        AIR_ID,");
                strQuery.Append("       TRAN.COMMODITY_MST_FK COMM_PK,");
                strQuery.Append("       CMDT.COMMODITY_ID     COMM_ID,");
                strQuery.Append("       MAIN.CUSTOMER_MST_FK CUSTOMER_PK,");
                strQuery.Append("       MAIN.CUSTOMER_CATEGORY_MST_FK CUSTOMER_CATPK,");
                strQuery.Append("       TO_CHAR(tran.VALID_TO, dateFormat )  SHIP_DATE,");
                strQuery.Append("       MAIN.COMMODITY_GROUP_MST_FK COMM_GRPPK,");
                strQuery.Append("       NVL(CUST_TYPE, 1) CUST_TYPE");
                strQuery.Append("  FROM QUOTATION_MST_TBL    MAIN,");
                strQuery.Append("       QUOTATION_DTL_TBL TRAN,");
                strQuery.Append("       PORT_GRP_MST_TBL  PGL,");
                strQuery.Append("       PORT_GRP_MST_TBL  PGD,");
                strQuery.Append("       AIRLINE_MST_TBL   AIR,");
                strQuery.Append("       COMMODITY_MST_TBL CMDT");
                strQuery.Append(" WHERE MAIN.QUOTATION_MST_PK = TRAN.QUOTATION_MST_FK");
                strQuery.Append("   AND TRAN.POL_GRP_FK = PGL.PORT_GRP_MST_PK");
                strQuery.Append("   AND TRAN.POD_GRP_FK = PGD.PORT_GRP_MST_PK");
                strQuery.Append("   AND TRAN.COMMODITY_MST_FK = CMDT.COMMODITY_MST_PK(+)");
                strQuery.Append("   AND TRAN.CARRIER_MST_FK = AIR.AIRLINE_MST_PK(+) AND MAIN.BIZ_TYPE = 1 ");
                strQuery.Append("   AND MAIN.QUOTATION_MST_PK = ");
            }
            else
            {
                strQuery.Append("SELECT TRAN.QUOTE_DTL_PK PK,");
                strQuery.Append("       TRAN.QUOTATION_MST_FK     FK,");
                strQuery.Append("       TRAN.TRANS_REFERED_FROM  REF_TYPE,");
                strQuery.Append("       TRAN.PORT_MST_POL_FK  POLFK,");
                strQuery.Append("       PORTPOL.PORT_ID       POL_ID,");
                strQuery.Append("       TRAN.PORT_MST_POD_FK  PODFK,");
                //
                strQuery.Append("       PORTPOD.PORT_ID       POD_ID,");
                strQuery.Append("       TRAN.CARRIER_MST_FK   AIR_PK,");
                strQuery.Append("       AIR.AIRLINE_ID        AIR_ID,");
                strQuery.Append("       TRAN.COMMODITY_MST_FKS COMM_PK,");
                strQuery.Append("       ROWTOCOL('SELECT CM.COMMODITY_NAME FROM COMMODITY_MST_TBL CM WHERE CM.COMMODITY_MST_PK IN(' ||");
                strQuery.Append("                NVL(TRAN.COMMODITY_MST_FKS, 0) || ')') COMM_ID,");
                strQuery.Append("       MAIN.CUSTOMER_MST_FK CUSTOMER_PK,");
                strQuery.Append("       MAIN.CUSTOMER_CATEGORY_MST_FK CUSTOMER_CATPK,");
                strQuery.Append("       TO_CHAR(tran.VALID_TO, dateFormat )  SHIP_DATE,");
                strQuery.Append("       MAIN.COMMODITY_GROUP_MST_FK COMM_GRPPK,");
                strQuery.Append("       NVL(CUST_TYPE, 1) CUST_TYPE");
                strQuery.Append("  FROM QUOTATION_MST_TBL    MAIN,");
                strQuery.Append("       QUOTATION_DTL_TBL TRAN,");
                strQuery.Append("       PORT_MST_TBL      PORTPOL,");
                strQuery.Append("       PORT_MST_TBL      PORTPOD,");
                strQuery.Append("       AIRLINE_MST_TBL   AIR,");
                strQuery.Append("       COMMODITY_MST_TBL CMDT");
                strQuery.Append(" WHERE MAIN.QUOTATION_MST_PK = TRAN.QUOTATION_MST_FK");
                strQuery.Append("      AND TRAN.PORT_MST_POL_FK = PORTPOL.PORT_MST_PK");
                strQuery.Append("   AND TRAN.PORT_MST_POD_FK = PORTPOD.PORT_MST_PK");
                strQuery.Append("   AND TRAN.COMMODITY_MST_FK = CMDT.COMMODITY_MST_PK(+)");
                strQuery.Append("   AND TRAN.CARRIER_MST_FK = AIR.AIRLINE_MST_PK(+) AND MAIN.BIZ_TYPE = 1");
                strQuery.Append("   AND MAIN.QUOTATION_MST_PK = ");
            }
            return strQuery;
        }

        /// <summary>
        /// Fetches the general.
        /// </summary>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="EnqDS">The enq ds.</param>
        /// <param name="EnqNo">The enq no.</param>
        /// <param name="QuoteNo">The quote no.</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="CustID">The customer identifier.</param>
        /// <param name="CustCategory">The customer category.</param>
        /// <param name="AgentNo">The agent no.</param>
        /// <param name="AgentID">The agent identifier.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="QuoteDate">The quote date.</param>
        /// <param name="Options">The options.</param>
        /// <param name="Version">The version.</param>
        /// <param name="QuotationStatus">The quotation status.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="EnqOthDt">The enq oth dt.</param>
        /// <param name="CalcDS">The calculate ds.</param>
        /// <param name="ValidFor">The valid for.</param>
        /// <param name="CustomerType">Type of the customer.</param>
        /// <param name="CreditDays">The credit days.</param>
        /// <param name="CreditLimit">The credit limit.</param>
        /// <param name="Remarks">The remarks.</param>
        /// <param name="CargoMcode">The cargo mcode.</param>
        /// <param name="BaseCurrencyId">The base currency identifier.</param>
        /// <param name="INCOTerms">The inco terms.</param>
        /// <param name="PYMTType">Type of the pymt.</param>
        /// <param name="Group">The group.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="ShippingLinePKs">The shipping line p ks.</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        public void FetchGeneral(DataSet GridDS = null, DataSet EnqDS = null, string EnqNo = "", string QuoteNo = "", string CustNo = "", string CustID = "", string CustCategory = "", string AgentNo = "", string AgentID = "", string Sectors = "",
        string CommodityGroup = "", string ShipDate = "", string QuoteDate = "", string Options = null, int Version = 0, object QuotationStatus = null, DataTable OthDt = null, DataTable EnqOthDt = null, DataSet CalcDS = null, string ValidFor = null,
        Int16 CustomerType = 0, int CreditDays = 0, int CreditLimit = 0, int Remarks = 0, int CargoMcode = 0, int BaseCurrencyId = 0, int INCOTerms = 0, int PYMTType = 0, int Group = 0, bool AmendFlg = false,
        string ShippingLinePKs = "", int TariffAgentPk = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder MasterQueryQuot = new StringBuilder();
            string strSQL = null;
            string strSQL1 = null;
            Array Arr = null;
            string Polpk = null;
            string Podpk = null;
            DataSet DSMain = null;
            DataTable DTMain = null;
            DSMain = GridDS.Clone();
            if (!string.IsNullOrEmpty(QuoteNo))
            {
                quotNewRecord = false;
                EnqDS = new DataSet();
                //CType(Options, System.Web.UI.WebControls.RadioButtonList).Items(4).Selected = True
                MasterQueryQuot = Headerquery(Group);
                RenderData(QuoteNo, Version, Convert.ToString(QuotationStatus), ValidFor, QuoteDate, ShipDate, CreditDays, CreditLimit, Remarks, CargoMcode,
                 Convert.ToInt32(CommodityGroup), BaseCurrencyId, INCOTerms, PYMTType);
                EnqDS = objWF.GetDataSet(MasterQueryQuot.Append(QuoteNo).ToString());
                if (EnqDS.Tables[0].Rows.Count > 0)
                {
                    //Sectors = Sectors.ToString.TrimEnd(',')
                    if (!string.IsNullOrEmpty(Sectors))
                    {
                        Arr = Convert.ToString(Sectors).Split('~');
                        Sectors = Cls_SRRAirContract.MakePortPairString(Convert.ToString(Arr.GetValue(0)), Convert.ToString(Arr.GetValue(1)), ShippingLinePKs);
                    }
                    CustNo = Convert.ToString(getDefault(EnqDS.Tables[0].Rows[0]["CUSTOMER_PK"], 0));
                    CustCategory = Convert.ToString(getDefault(EnqDS.Tables[0].Rows[0]["CUSTOMER_CATPK"], 0));
                    CommodityGroup = Convert.ToString(getDefault(EnqDS.Tables[0].Rows[0]["COMM_GRPPK"], 0));
                    Polpk = Convert.ToString(getDefault(EnqDS.Tables[0].Rows[0]["POLFK"], 0));
                    Podpk = Convert.ToString(getDefault(EnqDS.Tables[0].Rows[0]["PODFK"], 0));

                    CustomerType = Convert.ToInt16(getDefault(EnqDS.Tables[0].Rows[0]["CUST_TYPE"], 0));
                    if (CustomerType == 0)
                    {
                        CustID = objWF.ExecuteScaler(" Select CUSTOMER_NAME from CUSTOMER_MST_TBL where CUSTOMER_MST_PK = " + CustNo);
                    }
                    else
                    {
                        CustID = objWF.ExecuteScaler(" Select CUSTOMER_NAME from TEMP_CUSTOMER_TBL where CUSTOMER_MST_PK = " + CustNo);
                    }
                }
                strSQL = QueryQuot(CustNo, Sectors, CommodityGroup, ShipDate, QuoteNo, Group);
            }
            else
            {
                quotNewRecord = true;
                Arr = Convert.ToString(Sectors).Split('~');
                Sectors = Cls_SRRAirContract.MakePortPairString(Convert.ToString(Arr.GetValue(0)), Convert.ToString(Arr.GetValue(1)), ShippingLinePKs);
                strSQL = MasterQuery(Options, CustNo, Sectors, CommodityGroup, ShipDate, Group, ShippingLinePKs, TariffAgentPk);
            }

            string ContainerPKs = null;
            StringBuilder GroupTransactionPKs = new StringBuilder();
            bool NewRecord = true;
            string TrnPk = null;
            DataTable ChildDt = null;
            objWF.MyCommand.Parameters.Clear();
            ChildDt = objWF.GetDataTable(strSQL);

            if (Group == 1 | Group == 2)
            {
                if (!string.IsNullOrEmpty(QuoteNo))
                {
                    GroupTransactionPKs.Append(" SELECT ROWTOCOL('SELECT QDT.QUOTE_DTL_PK FROM QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL QDT");
                    GroupTransactionPKs.Append(" WHERE QMT.QUOTATION_MST_PK = QDT.QUOTATION_MST_FK");
                    GroupTransactionPKs.Append(" AND QMT.QUOTATION_MST_PK=" + QuoteNo + "') FROM DUAL ");
                    TrnPk = objWF.ExecuteScaler(GroupTransactionPKs.ToString());
                }
                else
                {
                    TrnPk = GetAllKeys(ChildDt, 18).ToString();
                    // ChildDt.Rows(0).Item(1)
                }
            }
            else
            {
                TrnPk = GetAllKeys(ChildDt, 18).ToString();
                // ChildDt.Rows(0).Item(1)
            }
            if ((TrnPk == null))
            {
                TrnPk = "0";
            }
            if (AmendFlg == true)
            {
                strSQL = Convert.ToString(GetGridDetails(TrnPk, Polpk, Podpk, Group));
            }
            else
            {
                strSQL = TrnQuery(Options, TrnPk, Group);
            }
            if (Group == 0)
            {
                DataTable KGFrtDt = null;
                KGFrtDt = objWF.GetDataTable(strSQL);
                string KGFreights = null;
                KGFreights = getStrFreights(KGFrtDt);
                AddColumns(ChildDt, KGFreights);
                // KGFreights Columns
                TransferKGFreightsData(ChildDt, KGFrtDt, AmendFlg);
                //    KGFreights Data in ChildDt now..
            }
            ChildDt.Columns.Add("OthChrg");
            ChildDt.Columns.Add("OTHDTL");
            strSQL = OthQuery(Options, TrnPk);
            OthDt = objWF.GetDataTable(strSQL);

            if (AmendFlg == true)
            {
                strSQL = Convert.ToString(FetchFrtQuery(TrnPk, Polpk, Podpk, Group));
                strSQL1 = FrtQuery(Options, TrnPk);
            }
            else
            {
                strSQL = FrtQuery(Options, TrnPk, Group, Sectors, ShippingLinePKs);
            }

            DataTable GRFrtDt = null;
            DataTable GRFrtDt1 = null;
            if (AmendFlg == true)
            {
                GRFrtDt1 = objWF.GetDataTable(strSQL1);
            }
            GRFrtDt = objWF.GetDataTable(strSQL);
            string FreightPks = "-1,";
            Int16 rCount = default(Int16);

            GroupTransactionPKs.Clear();
            if (Group == 1 | Group == 2)
            {
                if (!string.IsNullOrEmpty(QuoteNo))
                {
                    GroupTransactionPKs.Append(" SELECT ROWTOCOL('SELECT QDT.QUOTE_DTL_PK FROM QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL QDT, QUOTATION_FREIGHT_TRN QFT ");
                    GroupTransactionPKs.Append(" WHERE QMT.QUOTATION_MST_PK=QDT.QUOTATION_MST_FK AND QDT.QUOTE_DTL_PK=QFT.QUOTATION_DTL_FK  ");
                    GroupTransactionPKs.Append(" AND QMT.QUOTATION_MST_PK=" + QuoteNo + "') FROM DUAL ");
                    FreightPks = objWF.ExecuteScaler(GroupTransactionPKs.ToString());
                }
                else
                {
                    if (AmendFlg == true)
                    {
                        for (rCount = 0; rCount <= GRFrtDt1.Rows.Count - 1; rCount++)
                        {
                            FreightPks += Convert.ToString(GRFrtDt1.Rows[rCount]["FREIGHT_PK"]) + ',';
                        }
                    }
                    else
                    {
                        for (rCount = 0; rCount <= GRFrtDt.Rows.Count - 1; rCount++)
                        {
                            FreightPks += Convert.ToString(GRFrtDt.Rows[rCount]["FREIGHT_PK"]) + ',';
                        }
                    }
                    FreightPks = FreightPks.TrimEnd(',');
                }
            }
            else
            {
                if (AmendFlg == true)
                {
                    for (rCount = 0; rCount <= GRFrtDt1.Rows.Count - 1; rCount++)
                    {
                        FreightPks += Convert.ToString(GRFrtDt1.Rows[rCount]["FREIGHT_PK"]) + ',';
                    }
                }
                else
                {
                    for (rCount = 0; rCount <= GRFrtDt.Rows.Count - 1; rCount++)
                    {
                        FreightPks += Convert.ToString(GRFrtDt.Rows[rCount]["FREIGHT_PK"]) + ',';
                    }
                }
                FreightPks = FreightPks.TrimEnd(',');
            }
            if ((FreightPks == null))
            {
                FreightPks = "0";
            }
            if (AmendFlg == true)
            {
                strSQL = Convert.ToString(GetSlabDetails(FreightPks, Polpk, Podpk, Group));
            }
            else
            {
                strSQL = SlabQuery(Options, FreightPks, Group);
            }

            DataTable SlbDt = null;
            SlbDt = objWF.GetDataTable(strSQL);
            string AirSlabs = null;
            AirSlabs = getStrSlabs(SlbDt);
            AddColumns(GRFrtDt, AirSlabs);
            TransferSlabsData(GRFrtDt, SlbDt, AmendFlg, Group);
            //

            GridDS.Tables.Add(ChildDt);
            GridDS.Tables.Add(GRFrtDt);
            if (Group == 1 | Group == 2)
            {
                if (GridDS.Tables[1].Columns.Count > 0)
                {
                    if (!GridDS.Tables[1].Columns.Contains("POL_GRP_FK"))
                    {
                        GridDS.Tables[1].Columns.Add("POL_GRP_FK");
                        GridDS.Tables[1].Columns.Add("POD_GRP_FK");
                        GridDS.Tables[1].Columns.Add("TARIFF_GRP_FK");
                    }
                }
            }
            if (!string.IsNullOrEmpty(QuoteNo))
            {
                GetgenratedFrom(QuoteNo, Options);
            }
            if (Group == 1 | Group == 2)
            {
                if (AmendFlg == true)
                {
                    DataRelation rel = new DataRelation("rl_POL_POD", new DataColumn[] {
                        GridDS.Tables[0].Columns["PORT_MST_POL_FK"],
                        GridDS.Tables[0].Columns["PORT_MST_POD_FK"]
                    }, new DataColumn[] {
                        GridDS.Tables[1].Columns["POL_GRP_FK"],
                        GridDS.Tables[1].Columns["POD_GRP_FK"]
                    });
                    GridDS.Relations.Add(rel);
                }
                else
                {
                    DataRelation REL = new DataRelation("RFQRelation", new DataColumn[] {
                        GridDS.Tables[0].Columns["PORT_MST_POL_FK"],
                        GridDS.Tables[0].Columns["PORT_MST_POD_FK"],
                        GridDS.Tables[0].Columns["AIRLINE_MST_PK"]
                    }, new DataColumn[] {
                        GridDS.Tables[1].Columns["POL_GRP_FK"],
                        GridDS.Tables[1].Columns["POD_GRP_FK"],
                        GridDS.Tables[1].Columns["AIRLINE_MST_PK"]
                    });

                    GridDS.Relations.Add(REL);
                }
            }
            else
            {
                if (AmendFlg == true)
                {
                    DataRelation rel = new DataRelation("rl_POL_POD", new DataColumn[] {
                        GridDS.Tables[0].Columns["PORT_MST_POL_FK"],
                        GridDS.Tables[0].Columns["PORT_MST_POD_FK"],
                        GridDS.Tables[0].Columns["AIRLINE_MST_PK"]
                    }, new DataColumn[] {
                        GridDS.Tables[1].Columns["POL_PK"],
                        GridDS.Tables[1].Columns["POD_PK"],
                        GridDS.Tables[1].Columns["AIRLINE_MST_PK"]
                    });
                    GridDS.Relations.Add(rel);
                }
                else
                {
                    DataRelation REL = new DataRelation("RFQRelation", new DataColumn[] { GridDS.Tables[0].Columns["PK"] }, new DataColumn[] { GridDS.Tables[1].Columns["FK"] });

                    GridDS.Relations.Add(REL);
                }
            }
            GridDS.Relations[0].Nested = true;
        }

        /// <summary>
        /// Masters the query.
        /// </summary>
        /// <param name="Options">The options.</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        /// <returns></returns>
        private string MasterQuery(object Options = null, string CustNo = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "", int TariffAgentPk = 0)
        {
            string strSQL = null;
            System.Web.UI.WebControls.RadioButtonList rbOptions = (System.Web.UI.WebControls.RadioButtonList)Options;
            if (quotNewRecord != false)
            {
                //SPOT RATE
                //if (rbOptions.Items.FindByValue(SourceType.SpotRate).Selected)
                //{
                //    strSQL = QuerySpotRate(CustNo, Sectors, CommodityGroup, ShipDate);
                //    //.Items(1).Selected Then 'CUSTOMER CONTRACT
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.CustomerContract).Selected)
                //{
                //    strSQL = QueryContCust(CustNo, Sectors, CommodityGroup, ShipDate, OperPks, Group);
                //    //Items(2).Selected Then 'QUOTATION
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    strSQL = QueryQuot(CustNo, Sectors, CommodityGroup, ShipDate, OperPks);
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                //{
                //    //Items(3).Selected Then 'SL/AIRLINE TARIFF
                //    if (rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                //    {
                //        strSQL = QueryAirTariff(3, Sectors, CommodityGroup, ShipDate, Group, OperPks, TariffAgentPk);
                //    }
                //    else
                //    {
                //        strSQL = QueryAirTariff(1, Sectors, CommodityGroup, ShipDate, Group, OperPks);
                //    }

                //    //Items(4).Selected Then 'GENERAL TARIFF
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.GeneralTariff).Selected)
                //{
                //    strSQL = QueryAirTariff(2, Sectors, CommodityGroup, ShipDate, Group, OperPks);
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.SRR).Selected)
                //{
                //    strSQL = QuerySRR(CustNo, Sectors, CommodityGroup, ShipDate, OperPks, Group);
                //}
            }
            else
            {
                strSQL = QueryQuot(CustNo, Sectors, CommodityGroup, ShipDate);
            }

            return strSQL;
        }

        /// <summary>
        /// TRNs the query.
        /// </summary>
        /// <param name="Options">The options.</param>
        /// <param name="trnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string TrnQuery(object Options = null, string trnPk = "0", int Group = 0)
        {
            string strSQL = null;
            System.Web.UI.WebControls.RadioButtonList rbOptions = (System.Web.UI.WebControls.RadioButtonList)Options;
            if (quotNewRecord != false)
            {
                //SPOT RATE
                //if (rbOptions.Items.FindByValue(SourceType.SpotRate).Selected)
                //{
                //    strSQL = QueryTrnSpotRate(trnPk);
                //    //.Items(1).Selected Then 'CUSTOMER CONTRACT
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.CustomerContract).Selected)
                //{
                //    strSQL = QueryTrnContCust(trnPk);
                //    //Items(2).Selected Then 'QUOTATION
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    strSQL = QueryTrnQuot(trnPk);
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | rbOptions.Items.FindByValue(SourceType.AgentTariff).Selected)
                //{
                //    //Items(3).Selected Then 'SL/AIRLINE TARIFF
                //    strSQL = QueryTrnAirTariff(trnPk, Group);

                //    //Items(4).Selected Then 'GENERAL TARIFF
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.GeneralTariff).Selected)
                //{
                //    strSQL = QueryTrnAirTariff(trnPk, Group);
                //}
                //else if (rbOptions.Items.FindByValue(SourceType.SRR).Selected)
                //{
                //    strSQL = QueryTrnSRR(trnPk);
                //}
            }
            else
            {
                strSQL = QueryTrnQuot(trnPk);
            }

            return strSQL;
        }

        /// <summary>
        /// Othes the query.
        /// </summary>
        /// <param name="Options">The options.</param>
        /// <param name="trnPk">The TRN pk.</param>
        /// <returns></returns>
        private string OthQuery(object Options = null, string trnPk = "0")
        {
            string strSQL = null;
            if (quotNewRecord != false)
            {
                //if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SpotRate).Selected)
                //{
                //    strSQL = SpotRateOthQuery(trnPk).ToString();
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.CustomerContract).Selected)
                //{
                //    strSQL = CustContOthQuery(trnPk).ToString();
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    strSQL = QueryTrnOthQuot(trnPk);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | ((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.AgentTariff).Selected)
                //{
                //    strSQL = AirTariffOthQuery(trnPk).ToString();
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.GeneralTariff).Selected)
                //{
                //    strSQL = GenTariffOthQuery(trnPk).ToString();
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SRR).Selected)
                //{
                //    strSQL = SRROthQuery(trnPk).ToString();
                //}
            }
            else
            {
                strSQL = QueryTrnOthQuot(trnPk);
            }
            return strSQL;
        }

        /// <summary>
        /// FRTs the query.
        /// </summary>
        /// <param name="Options">The options.</param>
        /// <param name="trnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Sector">The sector.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string FrtQuery(object Options = null, string trnPk = "0", int Group = 0, string Sector = "", string OperPks = "")
        {
            string strSQL = null;
            if (quotNewRecord != false)
            {
                //if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SpotRate).Selected)
                //{
                //    strSQL = QueryTrnFRTSpotRate(trnPk);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.CustomerContract).Selected)
                //{
                //    strSQL = QueryTrnFRTContCust(trnPk, Group, Sector, OperPks);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    strSQL = QueryTrnFRTQuot(trnPk, Group, Sector, OperPks);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | ((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.AgentTariff).Selected)
                //{
                //    strSQL = QueryTrnFRTAirTariff(trnPk, Group, Sector, OperPks);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.GeneralTariff).Selected)
                //{
                //    strSQL = QueryTrnFRTAirTariff(trnPk, Group, Sector, OperPks);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SRR).Selected)
                //{
                //    strSQL = QueryTrnFRTSRR(trnPk, Group, Sector, OperPks);
                //}
            }
            else
            {
                strSQL = QueryTrnFRTQuot(trnPk, Group, Sector, OperPks);
            }
            return strSQL;
        }

        /// <summary>
        /// Slabs the query.
        /// </summary>
        /// <param name="Options">The options.</param>
        /// <param name="trnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string SlabQuery(object Options = null, string trnPk = "0", int Group = 0)
        {
            string strSQL = null;
            if (quotNewRecord != false)
            {
                //if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SpotRate).Selected)
                //{
                //    strSQL = QueryTrnSlabSpotRate(trnPk);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.CustomerContract).Selected)
                //{
                //    strSQL = QueryTrnSlabContCust(trnPk, Group);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.Quotation).Selected)
                //{
                //    strSQL = QueryTrnSlabQuot(trnPk, Group);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.OperatorAirlineTariff).Selected | ((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.AgentTariff).Selected)
                //{
                //    strSQL = QueryTrnSlabAirTariff(trnPk, Group);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.GeneralTariff).Selected)
                //{
                //    strSQL = QueryTrnSlabAirTariff(trnPk, Group);
                //}
                //else if (((System.Web.UI.WebControls.RadioButtonList)Options).Items.FindByValue(SourceType.SRR).Selected)
                //{
                //    strSQL = QueryTrnSlabSRR(trnPk, Group);
                //}
            }
            else
            {
                strSQL = QueryTrnSlabQuot(trnPk, Group);
            }
            return strSQL;
        }

        #region "Manual"

        /// <summary>
        /// Fetches the manual HDR.
        /// </summary>
        /// <param name="strPolPk">The string pol pk.</param>
        /// <param name="strPodPk">The string pod pk.</param>
        /// <param name="Mode">The mode.</param>
        /// <param name="IsAirlineTariff">if set to <c>true</c> [is airline tariff].</param>
        /// <param name="lngAirlinePk">The LNG airline pk.</param>
        /// <param name="ChargeBasis">The charge basis.</param>
        /// <param name="AirSuchargeToolTip">The air sucharge tool tip.</param>
        /// <param name="strFDate">The string f date.</param>
        /// <param name="strTDate">The string t date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        /// This function return datatable for parent grid depending upon airline and avialable
        /// Air Surcharges also this fuction changes behaviour accoing to constructor called.
        private DataTable FetchManualHDR(string strPolPk, string strPodPk, string Mode, bool IsAirlineTariff, long lngAirlinePk, string ChargeBasis, string AirSuchargeToolTip, string strFDate = "", string strTDate = "", int Group = 0,
        string OperPks = "")
        {
            StringBuilder strQuery = new StringBuilder();
            string str = null;
            string strCondition = null;
            string strNewModeCondition = null;
            WorkFlow objWF = new WorkFlow();
            cls_AirlineTariffEntry objAirLineTariff = new cls_AirlineTariffEntry(1, 2, false);
            // Private Const _AirLine_Tariff_Cols As Integer = 7
            DataTable dtMain = null;
            DataTable dtKgs = null;
            int intdtMain_Arr_RowCnt = 0;
            int intdtMainColCnt = 0;
            int intdtKgsRowCnt = 0;
            int Static_Col = 0;
            string[] arrPolPk = null;
            string[] arrPodPk = null;

            ChargeBasis = "";
            AirSuchargeToolTip = "";
            //Spliting the POL and POD Pk's
            arrPolPk = strPolPk.Split(Convert.ToChar(','));
            arrPodPk = strPodPk.Split(Convert.ToChar(','));

            if (Group == 1 | Group == 2)
            {
                if (!(Mode == "EDIT"))
                {
                    strNewModeCondition = " AND PGL.BIZ_TYPE  = 1";
                    strNewModeCondition += "AND PGD.BIZ_TYPE  = 1";
                }

                if (string.IsNullOrEmpty(OperPks))
                {
                    strCondition = " (PGL.PORT_GRP_MST_PK IN (" + strPolPk + " )AND PGD.PORT_GRP_MST_PK IN (" + strPodPk + " )) ";
                }
                else
                {
                    strCondition = " (PGL.PORT_GRP_MST_PK IN (" + strPolPk + " )AND PGD.PORT_GRP_MST_PK IN (" + strPodPk + " )) ";
                    strCondition += " AND AMT.AIRLINE_MST_PK IN (" + OperPks + " ) ";
                }
                strQuery.Append(" SELECT '' REF_NO,");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append("       '' AIRLINE,");
                }
                else
                {
                    strQuery.Append("       AMT.AIRLINE_ID AIRLINE,");
                }

                strQuery.Append("       PGL.PORT_GRP_MST_PK AS \"PORT_MST_POL_FK\',');");
                strQuery.Append("       PGL.PORT_GRP_ID AS \"AOO\',');");
                strQuery.Append("       PGL.PORT_GRP_NAME AS \"PolName\',');");
                strQuery.Append("       PGD.PORT_GRP_MST_PK AS \"PORT_MST_POD_FK\',');");
                strQuery.Append("       PGD.PORT_GRP_ID AS \"AOD\',');");
                strQuery.Append("       PGD.PORT_GRP_NAME AS \"PodName\',');");
                strQuery.Append("       SYSDATE AS \"VALID_FROM\',');");
                strQuery.Append("       '' AS \"VALID_TO\',');");
                strQuery.Append("       '' COMMODITY_MST_FK,");
                strQuery.Append("       '' COMMODITY_NAME,");
                strQuery.Append("       0 VOLUME_IN_CBM,");
                strQuery.Append("       0 PACK_COUNT,");
                strQuery.Append("       0 CHARGEABLE_WEIGHT,");
                strQuery.Append("       0 VOLUME_WEIGHT,");
                strQuery.Append("       0 DENSITY,");
                strQuery.Append("       0 FK,");
                strQuery.Append("       0 PK,");

                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append("       0 AIRLINE_MST_PK ");
                    strQuery.Append("  FROM PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD");
                }
                else
                {
                    strQuery.Append("       AMT.AIRLINE_MST_PK AIRLINE_MST_PK ");
                    strQuery.Append("  FROM PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD, AIRLINE_MST_TBL AMT");
                }

                strQuery.Append(" WHERE (1 = 1)");
                strQuery.Append("   AND (" + strCondition + ")");
                strQuery.Append(strNewModeCondition);
                strQuery.Append(" GROUP BY PGL.PORT_GRP_MST_PK,");
                strQuery.Append("          PGL.PORT_GRP_ID,");
                strQuery.Append("          PGD.PORT_GRP_ID,");
                strQuery.Append("          PGD.PORT_GRP_MST_PK,");
                strQuery.Append("          PGL.PORT_GRP_NAME,");

                if (string.IsNullOrEmpty(OperPks))
                {
                }
                else
                {
                    strQuery.Append("    AMT.AIRLINE_MST_PK, AMT.AIRLINE_ID,      ");
                }
                strQuery.Append("          PGD.PORT_GRP_NAME");
                strQuery.Append("HAVING PGL.PORT_GRP_ID <> PGD.PORT_GRP_ID");
                strQuery.Append(" ORDER BY PGL.PORT_GRP_ID, PGD.PORT_GRP_ID");
            }
            else
            {
                //Making condition as the record should have only selected POL and POD
                //POL and POD are on the same position in the array so nth element of arrPolPk and of arrPodPk
                //is the selected sector.
                for (intdtMain_Arr_RowCnt = 0; intdtMain_Arr_RowCnt <= arrPolPk.Length - 1; intdtMain_Arr_RowCnt++)
                {
                    if (string.IsNullOrEmpty(strCondition))
                    {
                        if (arrPodPk.Length > 0)
                        {
                            strCondition = " (POL.PORT_MST_PK =" + arrPolPk[intdtMain_Arr_RowCnt] + " AND POD.PORT_MST_PK =" + arrPodPk[intdtMain_Arr_RowCnt] + ")";
                        }
                        else
                        {
                            strCondition = " (POL.PORT_MST_PK =" + arrPolPk[intdtMain_Arr_RowCnt] + ")";
                        }
                    }
                    else
                    {
                        if (arrPodPk.Length > 0)
                        {
                            strCondition += " OR (POL.PORT_MST_PK =" + arrPolPk[intdtMain_Arr_RowCnt] + " AND POD.PORT_MST_PK =" + arrPodPk[intdtMain_Arr_RowCnt] + ")";
                        }
                        else
                        {
                            strCondition += " OR (POL.PORT_MST_PK =" + arrPolPk[intdtMain_Arr_RowCnt] + ")";
                        }
                    }
                }

                if (!(Mode == "EDIT"))
                {
                    strNewModeCondition = " AND POL.BUSINESS_TYPE = 1";
                    //BUSINESS_TYPE = 1 :- Is the business type for Air
                    strNewModeCondition += " AND POD.BUSINESS_TYPE = 1";
                    //BUSINESS_TYPE = 1 :- Is the business type for Air
                }

                //Making query with the condition added
                //str = str.Empty & " SELECT 0 AS TRANPK,POL.PORT_MST_PK AS ""POLPK"",POL.PORT_ID AS ""AOO"','
                //str &= vbCrLf & " POD.PORT_MST_PK AS ""PODPK"",POD.PORT_ID AS ""AOD"','
                //str &= vbCrLf & " '" & strFDate & "' AS ""Valid From"",'" & strTDate & "' AS ""Valid To"""
                //str &= vbCrLf & " FROM PORT_MST_TBL POL, PORT_MST_TBL POD"
                //str &= vbCrLf & " WHERE (1=1)"
                //str &= vbCrLf & " AND ("
                //str &= vbCrLf & strCondition & ")"
                //str &= vbCrLf & strNewModeCondition
                //str &= vbCrLf & " GROUP BY POL.PORT_MST_PK,POL.PORT_ID,POD.PORT_ID,POD.PORT_MST_PK"
                //str &= vbCrLf & " HAVING POL.PORT_ID<>POD.PORT_ID"
                //str &= vbCrLf & " ORDER BY POL.PORT_ID"

                strQuery.Append("SELECT '' REF_NO,");
                strQuery.Append("       '' AIRLINE,");
                strQuery.Append("       POL.PORT_MST_PK AS \"PORT_MST_POL_FK\',');");

                strQuery.Append("       POL.PORT_ID AS \"AOO\',');");

                strQuery.Append("       POL.PORT_NAME AS \"PolName\',');");

                strQuery.Append("       POD.PORT_MST_PK AS \"PORT_MST_POD_FK\',');");

                strQuery.Append("       POD.PORT_ID AS \"AOD\',');");

                strQuery.Append("       POD.PORT_NAME AS \"PodName\',');");

                strQuery.Append("       SYSDATE AS \"VALID_FROM\',');");

                strQuery.Append("       '' AS \"VALID_TO\',');");

                strQuery.Append("       '' COMMODITY_MST_FK,");
                strQuery.Append("       '' COMMODITY_NAME,");
                strQuery.Append("       0 VOLUME_IN_CBM,");
                strQuery.Append("       0 PACK_COUNT,");
                strQuery.Append("       0 CHARGEABLE_WEIGHT,");
                strQuery.Append("       0 VOLUME_WEIGHT,");
                strQuery.Append("       0 DENSITY,");
                strQuery.Append("       0 FK,");
                strQuery.Append("       0 PK,");
                strQuery.Append("       0 AIRLINE_MST_PK ");
                strQuery.Append("  FROM PORT_MST_TBL POL, PORT_MST_TBL POD");
                strQuery.Append(" WHERE (1 = 1)");
                strQuery.Append("   AND (" + strCondition + ")");
                strQuery.Append(strNewModeCondition);
                strQuery.Append(" GROUP BY POL.PORT_MST_PK,");
                strQuery.Append("          POL.PORT_ID,");
                strQuery.Append("          POD.PORT_ID,");
                strQuery.Append("          POD.PORT_MST_PK,");
                strQuery.Append("          POL.PORT_NAME,");
                strQuery.Append("          POD.PORT_NAME");
                strQuery.Append("HAVING POL.PORT_ID <> POD.PORT_ID");
                strQuery.Append(" ORDER BY POL.PORT_ID, POD.PORT_ID");
            }

            try
            {
                dtMain = objWF.GetDataTable(strQuery.ToString());
                dtMain.TableName = "0";
                //If _Static_Col > 7 Then
                //    dtMain.Columns.Add("Expected_Wt")
                //    dtMain.Columns.Add("Expected_Vol")
                //End If

                dtKgs = objAirLineTariff.FetchKgFreight(Mode, IsAirlineTariff, lngAirlinePk);
                //For intdtKgsRowCnt = 0 To dtKgs.Rows.Count - 1
                //    'Current Rate
                //    dtMain.Columns.Add(dtKgs.Rows(intdtKgsRowCnt).Item("FREIGHT_ELEMENT_MST_PK").ToString, GetType(Decimal))
                //    'Tariff Rate
                //    dtMain.Columns.Add(dtKgs.Rows(intdtKgsRowCnt).Item("FREIGHT_ELEMENT_ID").ToString, GetType(Decimal))
                //    dtMain.Columns.Add(dtKgs.Rows(intdtKgsRowCnt).Item("FREIGHT_ELEMENT_NAME").ToString & '~' & dtKgs.Rows(intdtKgsRowCnt).Item("CHARGE_BASIS").ToString, GetType(Decimal))
                //    'Charge Basis
                //    ChargeBasis &= dtKgs.Rows(intdtKgsRowCnt).Item("CHARGE_BASIS").ToString & ','
                //    'Air Surcharge Tool tip
                //    AirSuchargeToolTip &= dtKgs.Rows(intdtKgsRowCnt).Item("FREIGHT_ELEMENT_NAME").ToString & ','
                //Next

                dtMain.Columns.Add("OthChrg");
                dtMain.Columns.Add("OTHDTL");

                intdtMainColCnt = dtMain.Columns.Count - 3;

                for (intdtMain_Arr_RowCnt = 0; intdtMain_Arr_RowCnt <= dtMain.Rows.Count - 1; intdtMain_Arr_RowCnt++)
                {
                    //Static_Col = _Static_Col
                    //While Static_Col <= intdtMainColCnt

                    for (intdtKgsRowCnt = 0; intdtKgsRowCnt <= dtKgs.Rows.Count - 1; intdtKgsRowCnt++)
                    {
                        if (dtMain.Columns[Static_Col].ColumnName == dtKgs.Rows[intdtKgsRowCnt]["FREIGHT_ELEMENT_MST_PK"].ToString())
                        {
                            dtMain.Rows[intdtMain_Arr_RowCnt][Static_Col] = dtKgs.Rows[intdtKgsRowCnt]["BASIS_VALUE"].ToString();

                            dtMain.Rows[intdtMain_Arr_RowCnt][Static_Col + 1] = dtKgs.Rows[intdtKgsRowCnt]["BASIS_VALUE"].ToString();
                            dtMain.Rows[intdtMain_Arr_RowCnt][Static_Col + 2] = dtKgs.Rows[intdtKgsRowCnt]["BASIS_VALUE"].ToString();
                            break; // TODO: might not be correct. Was : Exit For
                        }
                    }
                    //For loop for Rows in dtKgs

                    //Static_Col = Static_Col + _Col_Incr
                    //End While
                }
                //For loop for Rows in dtMain

                ChargeBasis = ChargeBasis.TrimEnd(Convert.ToChar(','));
                AirSuchargeToolTip = AirSuchargeToolTip.TrimEnd(Convert.ToChar(','));

                return dtMain;
            }
            catch (OracleException SQLEX)
            {
                throw SQLEX;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Creates the grid.
        /// </summary>
        /// <param name="strPolPk">The string pol pk.</param>
        /// <param name="strPodPk">The string pod pk.</param>
        /// <param name="strCondition">The string condition.</param>
        /// <param name="GridDS">The grid ds.</param>
        /// <param name="OthDt">The oth dt.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        public void CreateGrid(string strPolPk, string strPodPk, Int16 strCondition = 0, DataSet GridDS = null, DataTable OthDt = null, int Group = 0, string OperPks = "")
        {
            try
            {
                cls_AirlineTariffEntry objAirLineTariff = new cls_AirlineTariffEntry(1, 2, false);

                //Getting the header for Band(0) for New Mode
                GridDS.Tables.Add(FetchManualHDR(strPolPk, strPodPk, "NEW", false, 0, "", "", "", "", Group,
                OperPks));

                //Getting the header for Band(1) for New Mode
                GridDS.Tables.Add(FetchManualFreight(strPolPk, strPodPk, "NEW", Group, OperPks));

                //Creating relations between POL,POD of main header and POL,POD of child header
                DataRelation rel = new DataRelation("rl_POL_POD", new DataColumn[] {
                    GridDS.Tables[0].Columns["PORT_MST_POL_FK"],
                    GridDS.Tables[0].Columns["PORT_MST_POD_FK"],
                    GridDS.Tables[0].Columns["AIRLINE_MST_PK"]
                }, new DataColumn[] {
                    GridDS.Tables[1].Columns["POLPK"],
                    GridDS.Tables[1].Columns["PODPK"],
                    GridDS.Tables[1].Columns["AIRLINE_MST_PK"]
                });
                GridDS.Relations.Clear();
                GridDS.Relations.Add(rel);

                WorkFlow objWF = new WorkFlow();
                OthDt = objWF.GetDataTable(ManualOthQuery().ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Queries the TRN oth manual.
        /// </summary>
        /// <returns></returns>
        private string QueryTrnOthManual()
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("SELECT 0 FK,");
            strQuery.Append("           FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
            strQuery.Append("           FREIGHT_ELEMENT_ID,");
            strQuery.Append("           FREIGHT_ELEMENT_NAME,");
            strQuery.Append("           CURRENCY_MST_PK CURRENCY_MST_FK,");
            strQuery.Append("           CURRENCY_ID,");
            strQuery.Append("           CURRENCY_NAME,");
            strQuery.Append(" NVL(APPROVED_RATE,0)               CURRENT_RATE,");
            strQuery.Append(" NVL(APPROVED_RATE,0)               REQUEST_RATE,");
            strQuery.Append(" NVL(APPROVED_RATE,0)               APPROVED_RATE");
            strQuery.Append("            CHARGE_BASIS");
            strQuery.Append("      FROM FREIGHT_ELEMENT_MST_TBL, CURRENCY_TYPE_MST_TBL");
            strQuery.Append("     WHERE");
            strQuery.Append("     FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
            strQuery.Append("     AND CURRENCY_MST_PK =" + HttpContext.Current.Session["CURRENCY_MST_PK"]);
            strQuery.Append("     AND NVL(CHARGE_TYPE, 3) = 3");
            strQuery.Append("     AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3)");
            strQuery.Append("     ORDER BY FREIGHT_ELEMENT_ID");

            return strQuery.ToString();
        }

        /// <summary>
        /// Fetches the manual freight.
        /// </summary>
        /// <param name="strPolPk">The string pol pk.</param>
        /// <param name="strPodPk">The string pod pk.</param>
        /// <param name="Mode">The mode.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        /// This function return datatable for child grid. It contains Freight form Freight Table
        /// having freight type of "Freight" and Air Freight Slabs defined with default values.
        public DataTable FetchManualFreight(string strPolPk, string strPodPk, string Mode, int Group = 0, string OperPks = "")
        {
            StringBuilder str = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            DataTable dtMain = null;
            DataTable dtSlabs = null;
            cls_AirlineTariffEntry objAirLineTariff = new cls_AirlineTariffEntry(1, 2, false);

            int i = 0;
            string[] arrPolPk = null;
            string[] arrPodPk = null;
            string strCondition = null;
            string strNewModeCondition = null;
            //Spliting the POL and POD Pk's
            arrPolPk = strPolPk.Split(Convert.ToChar(','));
            arrPodPk = strPodPk.Split(Convert.ToChar(','));

            if (Group == 1 | Group == 2)
            {
                if (string.IsNullOrEmpty(OperPks))
                {
                    strCondition = " (PGL.PORT_GRP_MST_PK IN (" + strPolPk + " )AND PGD.PORT_GRP_MST_PK IN (" + strPodPk + " )) ";
                }
                else
                {
                    strCondition = " (PGL.PORT_GRP_MST_PK IN (" + strPolPk + " )AND PGD.PORT_GRP_MST_PK IN (" + strPodPk + " )) ";
                    strCondition += " AND AMT.AIRLINE_MST_PK IN (" + OperPks + " )  ";
                }

                strNewModeCondition = " AND PGL.BIZ_TYPE = 1";
                strNewModeCondition += " AND PGD.BIZ_TYPE = 1";
                strNewModeCondition += " AND FMT.ACTIVE_FLAG = 1";
                strNewModeCondition += " AND FMT.CHARGE_TYPE <> 3 ";
                strNewModeCondition += " AND FMT.BUSINESS_TYPE IN (1,3)";
                strNewModeCondition += " AND FMT.BY_DEFAULT=1";

                str.Append(" SELECT POLPK, PODPK, FREIGHT_ELEMENT_MST_FK, FrtEle AS \"Frt. Ele.\", FREIGHT_ELEMENT_NAME,CURRENCY_MST_FK, Curr  AS \"Curr.\", AIRLINE_MST_PK,SELECTED,ADVATOS, MIN_AMOUNT FROM ");
                str.Append(" (SELECT PGL.PORT_GRP_MST_PK \"POLPK\", PGD.PORT_GRP_MST_PK \"PODPK\", ");
                str.Append(" FMT.FREIGHT_ELEMENT_MST_PK  FREIGHT_ELEMENT_MST_FK ,FMT.FREIGHT_ELEMENT_ID FrtEle, FREIGHT_ELEMENT_NAME, ");
                str.Append(" CURR.CURRENCY_MST_PK CURRENCY_MST_FK ,CURR.CURRENCY_ID AS Curr, ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    str.Append(" 0 AIRLINE_MST_PK, 'false' SELECTED, 'false' ADVATOS ,0.00 AS MIN_AMOUNT ");
                }
                else
                {
                    str.Append("  AMT.AIRLINE_MST_PK, 'false' SELECTED, 'false' ADVATOS ,0.00 AS MIN_AMOUNT ");
                }

                str.Append(" FROM FREIGHT_ELEMENT_MST_TBL FMT, PORT_GRP_MST_TBL PGL, PORT_GRP_MST_TBL PGD,");
                if (string.IsNullOrEmpty(OperPks))
                {
                    str.Append(" CURRENCY_TYPE_MST_TBL CURR ");
                }
                else
                {
                    str.Append(" CURRENCY_TYPE_MST_TBL CURR, AIRLINE_MST_TBL         AMT ");
                }

                str.Append(" WHERE (1=1)");
                str.Append(" AND (");
                str.Append(strCondition + ")");
                str.Append(strNewModeCondition);
                str.Append(" AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"]);
                if (string.IsNullOrEmpty(OperPks))
                {
                    str.Append(" GROUP BY PGL.PORT_GRP_MST_PK,PGL.PORT_GRP_ID,PGD.PORT_GRP_MST_PK,PGD.PORT_GRP_ID,");
                }
                else
                {
                    str.Append(" GROUP BY PGL.PORT_GRP_MST_PK,PGL.PORT_GRP_ID,PGD.PORT_GRP_MST_PK,PGD.PORT_GRP_ID, AMT.AIRLINE_MST_PK, ");
                }

                str.Append(" FMT.FREIGHT_ELEMENT_MST_PK,FMT.FREIGHT_ELEMENT_ID,");
                str.Append(" CURR.CURRENCY_MST_PK,CURR.CURRENCY_ID,CURRENCY_NAME,FREIGHT_ELEMENT_NAME,FMT.PREFERENCE");
                str.Append(" HAVING PGL.PORT_GRP_ID <> PGD.PORT_GRP_ID");
                if (string.IsNullOrEmpty(OperPks))
                {
                    str.Append(" ORDER BY PGL.PORT_GRP_ID, PGD.PORT_GRP_ID,FMT.PREFERENCE) ");
                }
                else
                {
                    str.Append(" ORDER BY PGL.PORT_GRP_ID, PGD.PORT_GRP_ID,AMT.AIRLINE_MST_PK,FMT.PREFERENCE) ");
                }
            }
            else
            {
                //Making condition as the record should have only selected POL and POD
                //POL and POD are on the same position in the array so nth element of arrPolPk and of arrPodPk
                //is the selected sector.
                for (i = 0; i <= arrPolPk.Length - 1; i++)
                {
                    if (string.IsNullOrEmpty(strCondition))
                    {
                        strCondition = " (POL.PORT_MST_PK =" + Convert.ToString(arrPolPk[i]) + " AND POD.PORT_MST_PK =" + arrPodPk[i].ToString() + ")";
                    }
                    else
                    {
                        strCondition += " OR (POL.PORT_MST_PK =" + arrPolPk[i].ToString() + " AND POD.PORT_MST_PK =" + arrPodPk[i].ToString() + ")";
                    }
                }
                strNewModeCondition = " AND POL.BUSINESS_TYPE = 1";
                //BUSINESS_TYPE = 1 :- Is the business type for Air
                strNewModeCondition += " AND POD.BUSINESS_TYPE = 1";
                //BUSINESS_TYPE = 1 :- Is the business type for Air
                strNewModeCondition += " AND FMT.ACTIVE_FLAG = 1";
                strNewModeCondition += " AND FMT.CHARGE_TYPE <> 3";
                strNewModeCondition += " AND FMT.BUSINESS_TYPE IN (1,3)";
                strNewModeCondition += " AND FMT.BY_DEFAULT=1";
                //Making query with the condition added
                //modified by thiyagarajan on 2/12/08 for location based curr. task
                str.Append(" SELECT POL.PORT_MST_PK \"POLPK\",POD.PORT_MST_PK \"PODPK\", ");
                str.Append(" FMT.FREIGHT_ELEMENT_MST_PK  FREIGHT_ELEMENT_MST_FK ,FMT.FREIGHT_ELEMENT_ID AS \"Frt. Ele.\", FREIGHT_ELEMENT_NAME, ");
                str.Append(" CURR.CURRENCY_MST_PK CURRENCY_MST_FK ,CURR.CURRENCY_ID AS \"Curr.\",0 AIRLINE_MST_PK, ");
                str.Append("  'false' SELECTED, 'false' ADVATOS ,0.00 AS MIN_AMOUNT");
                str.Append(" FROM FREIGHT_ELEMENT_MST_TBL FMT, PORT_MST_TBL POL, PORT_MST_TBL POD,");
                str.Append(" CURRENCY_TYPE_MST_TBL CURR ");
                str.Append(" WHERE (1=1)");
                str.Append(" AND (");
                str.Append(strCondition + ")");
                str.Append(strNewModeCondition);
                str.Append(" AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"]);
                str.Append(" GROUP BY POL.PORT_MST_PK,POL.PORT_ID,POD.PORT_MST_PK,POD.PORT_ID,");
                str.Append(" FMT.FREIGHT_ELEMENT_MST_PK,FMT.FREIGHT_ELEMENT_ID,");
                str.Append(" CURR.CURRENCY_MST_PK,CURR.CURRENCY_ID,CURRENCY_NAME,FREIGHT_ELEMENT_NAME,FMT.PREFERENCE ");
                str.Append(" HAVING POL.PORT_ID<>POD.PORT_ID");
                str.Append(" ORDER BY POL.PORT_ID, POD.PORT_ID,FMT.PREFERENCE");
            }

            try
            {
                dtMain = objWF.GetDataTable(str.ToString());
                dtMain.TableName = "1";
                dtSlabs = objAirLineTariff.FetchAirFreightSlabs(Mode);
                for (i = 0; i <= dtSlabs.Rows.Count - 1; i++)
                {
                    //Current Rate
                    dtMain.Columns.Add(dtSlabs.Rows[i][0].ToString(), typeof(decimal));
                    //Tariff Rate
                    dtMain.Columns.Add(dtSlabs.Rows[i][1].ToString(), typeof(decimal));
                    dtMain.Columns.Add(dtSlabs.Rows[i][1].ToString() + "BP");
                }
                return dtMain;
            }
            catch (OracleException SQLEX)
            {
                throw SQLEX;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Manual"

        #region "SpotRate"

        /// <summary>
        /// Queries the spot rate.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <returns></returns>
        private string QuerySpotRate(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            string strSQL = null;
            strSQL = "   Select                                                                MAST.RFQ_REF_NO REF_NO,                                              AIR.AIRLINE_ID AIRLINE,                                         main.PORT_MST_POL_FK,                                              PORTPOL.PORT_ID                             PORTPOL_ID,            PORTPOL.PORT_NAME                           PORTPOL_NAME,          main.PORT_MST_POD_FK,                                              PORTPOD.PORT_ID                             PORTPOD_ID,            PORTPOD.PORT_NAME                           PORTPOD_NAME,          to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM,         to_Char(main.VALID_TO, '" + dateFormat + "')   VALID_TO,           COMMODITY_MST_FK,                                                       COMMODITY_NAME,                                                      VOLUME_IN_CBM,                                                     PACK_COUNT,                                                        CHARGEABLE_WEIGHT,                                                 VOLUME_WEIGHT,                                                     DENSITY,                                                            main.RFQ_SPOT_AIR_FK   FK,                                              main.RFQ_SPOT_AIR_TRN_PK                          PK,AIRLINE_MST_PK        from  RFQ_SPOT_RATE_AIR_TBL MAST,                                RFQ_SPOT_TRN_AIR_TBL main,                                         PORT_MST_TBL PORTPOL,                                              PORT_MST_TBL PORTPOD,                                                AIRLINE_MST_TBL AIR,                                                      COMMODITY_MST_TBL COM                                                       where  MAST.RFQ_SPOT_AIR_PK  =  MAIN.RFQ_SPOT_AIR_FK                AND AIR.AIRLINE_MST_PK = MAST.AIRLINE_MST_FK                AND PORT_MST_POL_FK         =   PORTPOL.PORT_MST_PK                AND PORT_MST_POD_FK         =   PORTPOD.PORT_MST_PK                 AND COM.COMMODITY_MST_PK(+)= MAST.COMMODITY_MST_FK            AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) in (" + Sectors + ")   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)            between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT)       AND MAST.ACTIVE     =      1    AND     MAST.APPROVED   =     1  ";
            if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
            {
                strSQL += "  AND MAST.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup);
            }

            if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
            {
                strSQL += "  AND (MAST.CUSTOMER_MST_FK    = " + Convert.ToString(CustomerPk) + "   OR MAST.CUSTOMER_MST_FK  is NULL      OR   MAST.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK      FROM AFFILIATE_CUSTOMER_DTLS A, RFQ_SPOT_RATE_AIR_TBL CT , CUSTOMER_MST_TBL C     WHERE A.REFERENCE_MST_FK = CT.RFQ_SPOT_AIR_PK      AND A.CUST_MST_FK       =  " + Convert.ToString(CustomerPk) + "     AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))  ";
            }

            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            return strSQL;
        }

        /// <summary>
        /// Queries the TRN spot rate.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnSpotRate(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            string strSQL = null;
            strSQL = "    Select                                                               RFQ_SPOT_AIR_TRN_FK   FK,                                               tran.FREIGHT_ELEMENT_MST_FK,                                       FREIGHT_ELEMENT_ID,                                                FREIGHT_ELEMENT_NAME,                                              tran.CURRENCY_MST_FK,                                              CURRENCY_ID,                                                       RFQ.AIRLINE_MST_FK AS AIRLINE_MST_PK,                              'false' SELECTED,                                                  'false' ADVATOS,                                                  APPROVED_RATE CURRENT_RATE,                                        APPROVED_RATE REQUEST_RATE,                                         APPROVED_RATE,                                                     tran.CHARGE_BASIS                                                 from                                                                RFQ_SPOT_TRN_AIR_TBL        main,                                  RFQ_SPOT_AIR_SURCHARGE      tran,                                  FREIGHT_ELEMENT_MST_TBL, RFQ_SPOT_RATE_AIR_TBL RFQ,                CURRENCY_TYPE_MST_TBL                                             where                                                                       RFQ_SPOT_AIR_TRN_FK    IN( " + TrnPk + " )                     AND     main.RFQ_SPOT_AIR_TRN_PK = tran.RFQ_SPOT_AIR_TRN_FK        AND     FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK            AND     FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1                    AND     CURRENCY_MST_FK        = CURRENCY_MST_PK                   AND     CHARGE_TYPE <> 3                                           AND     FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)              AND      MAIN.RFQ_SPOT_AIR_FK=RFQ.RFQ_SPOT_AIR_PK                 Order By PREFERENCE";
            //FREIGHT_ELEMENT_ID                                  "
            //"       AND     CHARGE_BASIS = 3                                    " & vbCrLf & _

            //FREIGHT_TYPE = 2

            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            return strSQL;
        }

        /// <summary>
        /// Queries the TRN oth spot rate.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnOthSpotRate(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            string strSQL = null;
            strSQL = "    Select                                                               RFQ_SPOT_AIR_TRN_FK FK,                                               tran.FREIGHT_ELEMENT_MST_FK,                                       FREIGHT_ELEMENT_ID,                                                FREIGHT_ELEMENT_NAME,                                              tran.CURRENCY_MST_FK,                                              CURRENCY_ID,                                                       CURRENCY_NAME,                                                    APPROVED_RATE  CURRENT_RATE,                                                     APPROVED_RATE REQUEST_RATE,                                                      APPROVED_RATE,                                                     tran.CHARGE_BASIS                                                 from                                                                RFQ_SPOT_TRN_AIR_TBL        main,                                  RFQ_SPOT_AIR_OTH_CHRG       tran,                                  FREIGHT_ELEMENT_MST_TBL,                                           CURRENCY_TYPE_MST_TBL                                             where                                                                       RFQ_SPOT_AIR_TRN_FK   IN( " + TrnPk + " )                  AND     main.RFQ_SPOT_AIR_TRN_PK = tran.RFQ_SPOT_AIR_TRN_FK        AND     FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK            AND     FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1                    AND     CURRENCY_MST_FK        = CURRENCY_MST_PK                   AND     nvl(CHARGE_TYPE,3) = 3                                    AND     FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)             Order By PREFERENCE";
            //FREIGHT_ELEMENT_ID                                  "
            //"       AND     CHARGE_BASIS = 2                                    " & vbCrLf & _

            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            return strSQL;
        }

        /// <summary>
        /// Queries the TRN FRT spot rate.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnFRTSpotRate(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            string strSQL = null;
            strSQL = "    Select                                                               RFQ_SPOT_TRN_FREIGHT_PK FREIGHT_PK,                                  RFQ_SPOT_TRN_AIR_FK FK,                                             FREIGHT_ELEMENT_MST_FK,                                            FREIGHT_ELEMENT_ID,                                                FREIGHT_ELEMENT_NAME,                                              tran.CURRENCY_MST_FK,                                              CURRENCY_ID,                                                       CURRENCY_NAME,                                                     'false' SELECTED,                                                  'false' ADVATOS,                                                   MIN_AMOUNT                                                        from                                                                RFQ_SPOT_AIR_TRN_FREIGHT_TBL                tran,                  FREIGHT_ELEMENT_MST_TBL,                                           CURRENCY_TYPE_MST_TBL                                             where                                                                       RFQ_SPOT_TRN_AIR_FK   IN( " + TrnPk + " )               AND     FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK            AND     FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1                    AND     CURRENCY_MST_FK             = CURRENCY_MST_PK              AND     CHARGE_TYPE <> 3                                           AND     FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)             Order By PREFERENCE                                  ";

            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            return strSQL;
        }

        /// <summary>
        /// Queries the TRN slab spot rate.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <returns></returns>
        private string QueryTrnSlabSpotRate(string FreightPks)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            string strSQL = null;
            strSQL = "    Select                                                               main.rfq_spot_air_trn_pk FK,                                               tran.FREIGHT_ELEMENT_MST_FK,                                       AIRFREIGHT_SLABS_TBL_PK,                                           BREAKPOINT_ID,                                                     BREAKPOINT_DESC,                                                  APPROVED_RATE CURRENT_RATE,                                                     APPROVED_RATE REQUEST_RATE,                                                     APPROVED_RATE                                                     from                                                                RFQ_SPOT_AIR_TRN_FREIGHT_TBL        tran, rfq_spot_trn_air_tbl main,        RFQ_SPOT_AIR_BREAKPOINTS            bpnt,                          AIRFREIGHT_SLABS_TBL                                              where main.rfq_spot_air_trn_pk=tran.RFQ_SPOT_TRN_AIR_FK and              tran.rfq_spot_trn_freight_pk in (" + FreightPks + ")              AND  bpnt.RFQ_SPOT_AIR_FRT_FK  = tran.RFQ_SPOT_TRN_FREIGHT_PK          AND  AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG  = 1                             AND  bpnt.AIRFREIGHT_SLABS_TBL_FK  = AIRFREIGHT_SLABS_TBL_PK           Order By FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID ";

            strSQL = strSQL.Replace("   ", " ");
            strSQL = strSQL.Replace("  ", " ");
            return strSQL;
        }

        #endregion "SpotRate"

        #region "Customer contract"

        /// <summary>
        /// Queries the cont customer.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryContCust(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", string OperPks = "", int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append(" Select  distinct        ");
                strQuery.Append("  MAST.CONT_REF_NO REF_NO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  main.PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.PORT_ID      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.PORT_NAME     PORTPOL_NAME, ");
                strQuery.Append("  main.PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.PORT_ID      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.PORT_NAME     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  COMMODITY_MST_FK,        ");
                strQuery.Append("  COMMODITY_NAME,         ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_IN_CBM,        ");
                strQuery.Append("  0 PACK_COUNT,         ");
                strQuery.Append("  EXPECTED_WEIGHT CHARGEABLE_WEIGHT,       ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_WEIGHT,        ");
                strQuery.Append("  0 DENSITY,          ");
                strQuery.Append("  main.CONT_CUST_AIR_FK FK,       ");
                strQuery.Append("  MAIN.cont_cust_trn_air_pk PK,nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK  ");
                strQuery.Append(" from CONT_CUST_AIR_TBL  MAST,     ");
                strQuery.Append("  CONT_CUST_TRN_AIR_TBL main,      ");
                strQuery.Append("  PORT_MST_TBL PORTPOL,       ");
                strQuery.Append("  PORT_MST_TBL PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR,        ");
                strQuery.Append("   COMMODITY_MST_TBL COM       ");
                strQuery.Append(" where MAST.CONT_CUST_AIR_PK = MAIN.CONT_CUST_AIR_FK ");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND PORT_MST_POL_FK  = PORTPOL.PORT_MST_PK  ");
                strQuery.Append("  AND PORT_MST_POD_FK  = PORTPOD.PORT_MST_PK  ");
                strQuery.Append("        AND COM.COMMODITY_MST_PK(+)= MAST.COMMODITY_MST_FK         ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK,MAST.AIRLINE_MST_FK) in (" + Sectors + ")");
                }

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.CONT_APPROVED              =      2   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.Commodity_Group_Mst_Fk =" + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                    strQuery.Append("  or MAST.CUSTOMER_MST_FK is NULL  ");
                    strQuery.Append(" OR   MAST.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK ");
                    strQuery.Append(" FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_AIR_TBL CT , CUSTOMER_MST_TBL C ");
                    strQuery.Append(" WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_AIR_PK ");
                    strQuery.Append("  AND A.CUST_MST_FK       =  " + CustomerPk + " ");
                    strQuery.Append("  AND A.CUST_MST_FK=C.CUSTOMER_MST_PK )) ");
                }
            }
            else
            {
                strQuery.Append(" Select  distinct        ");
                strQuery.Append("  MAST.CONT_REF_NO REFNO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  main.pol_grp_fk as PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.port_grp_id      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.port_grp_name     PORTPOL_NAME, ");
                strQuery.Append("  main.pod_grp_fk PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.port_grp_id      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.port_grp_name     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  COMMODITY_MST_FK,        ");
                strQuery.Append("  COMMODITY_NAME,         ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_IN_CBM,        ");
                strQuery.Append("  0 PACK_COUNT,         ");
                strQuery.Append("  EXPECTED_WEIGHT CHARGEABLE_WEIGHT,       ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_WEIGHT,        ");
                strQuery.Append("  0 DENSITY,          ");
                strQuery.Append("  main.CONT_CUST_AIR_FK FK,       ");
                strQuery.Append("  MAIN.CONT_CUST_AIR_FK PK,nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK  ");
                strQuery.Append(" from CONT_CUST_AIR_TBL  MAST,     ");
                strQuery.Append("  CONT_CUST_TRN_AIR_TBL main,      ");
                strQuery.Append("  port_grp_mst_tbl PORTPOL,       ");
                strQuery.Append("  port_grp_mst_tbl PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR,        ");
                strQuery.Append("   COMMODITY_MST_TBL COM       ");
                strQuery.Append(" where MAST.CONT_CUST_AIR_PK = MAIN.CONT_CUST_AIR_FK ");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND pol_grp_fk  = PORTPOL.port_grp_mst_pk  ");
                strQuery.Append("  AND pod_grp_fk  = PORTPOD.port_grp_mst_pk  ");
                strQuery.Append("        AND COM.COMMODITY_MST_PK(+)= MAST.COMMODITY_MST_FK         ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.pol_grp_fk,MAIN.pod_grp_fk) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.pol_grp_fk,MAIN.pod_grp_fk,MAST.AIRLINE_MST_FK) in (" + Sectors + ")");
                }

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.CONT_APPROVED              =      2   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.Commodity_Group_Mst_Fk =" + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                    strQuery.Append("  OR MAST.CUSTOMER_MST_FK is NULL  ");
                    strQuery.Append(" OR   MAST.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK ");
                    strQuery.Append(" FROM AFFILIATE_CUSTOMER_DTLS A, CONT_CUST_AIR_TBL CT , CUSTOMER_MST_TBL C ");
                    strQuery.Append(" WHERE A.REFERENCE_MST_FK = CT.CONT_CUST_AIR_PK ");
                    strQuery.Append("  AND A.CUST_MST_FK       =  " + CustomerPk + " ");
                    strQuery.Append("  AND A.CUST_MST_FK=C.CUSTOMER_MST_PK )) ");
                }
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN cont customer.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnContCust(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("Select          ");
            strQuery.Append("  CONT_CUST_TRN_AIR_FK  FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,        ");
            strQuery.Append("  MAIN.AIRLINE_MST_FK AS AIRLINE_MST_PK,");
            strQuery.Append("  'false' SELECTED, ");
            strQuery.Append("  'false' ADVATOS,   ");
            //'Added Koteshwari for Advatos Column PTSID-JUN18
            strQuery.Append("  APPROVED_RATE CURRENT_RATE,         ");
            strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
            strQuery.Append("  APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append(" from          ");
            strQuery.Append("  CONT_CUST_AIR_TBL MAIN,CONT_CUST_TRN_AIR_TBL DTL,");
            strQuery.Append("  CONT_CUST_AIR_SURCHARGE tran,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("  CONT_CUST_TRN_AIR_FK IN( " + TrnPk + " )   ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append("  AND  MAIN.CONT_CUST_AIR_PK=DTL.CONT_CUST_AIR_FK  ");
            strQuery.Append("  AND  DTL.CONT_CUST_TRN_AIR_PK=TRAN.CONT_CUST_TRN_AIR_Fk  ");
            strQuery.Append(" Order By PREFERENCE ");
            //FREIGHT_ELEMENT_ID
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN oth cont customer.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnOthContCust(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("Select          ");
            strQuery.Append("  cont_cust_trn_air_fk FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,        ");
            strQuery.Append("  CURRENCY_NAME,        ");
            strQuery.Append("  APPROVED_RATE CURRENT_RATE,         ");
            strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
            strQuery.Append("  APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append(" from          ");
            strQuery.Append("  --RFQ_SPOT_TRN_AIR_TBL  main,     ");
            strQuery.Append("  CONT_CUST_AIR_OTH_CHRG  tran,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("   cont_cust_trn_air_fk IN( " + TrnPk + " )   ");
            strQuery.Append("  --AND  main.RFQ_SPOT_AIR_TRN_PK = tran.RFQ_SPOT_AIR_TRN_FK ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("  AND  nvl(CHARGE_TYPE,3) = 3      ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append(" Order By FREIGHT_ELEMENT_ID    ");
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN FRT cont customer.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Sector">The sector.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string QueryTrnFRTContCust(string TrnPk, int Group = 0, string Sector = "", string OperPks = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  CONT_CUST_AIR_FREIGHT_PK FREIGHT_PK,      ");
                strQuery.Append("  CONT_CUST_TRN_AIR_FK FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  CURRENCY_NAME,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  CONT_CUST_AIR_FREIGHT_TBL   TRAN,cont_cust_trn_air_tbl dtl,cont_cust_air_tbl main,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("    dtl.cont_cust_trn_air_pk IN(" + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3) AND  dtl.cont_cust_trn_air_pk=tran.cont_cust_trn_air_fk and dtl.cont_cust_air_fk=main.cont_cust_air_pk ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND (dtl.port_mst_pol_fk,dtl.port_mst_pod_fk) in (" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND (dtl.port_mst_pol_fk,dtl.port_mst_pod_fk,main.airline_mst_fk) in (" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE ");
            }
            else
            {
                strQuery.Append("SELECT Q.POL_GRP_FK,Q.POD_GRP_FK,");
                //strQuery.Append("  Q.CONT_CUST_AIR_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  Q.CONT_CUST_TRN_AIR_FK FK,       " & vbCrLf)
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  q.FREIGHT_PK,       ");
                strQuery.Append("  Q.CURRENCY_MST_FK,       ");
                strQuery.Append("  Q.CURRENCY_ID,        ");
                strQuery.Append("  Q.airline_mst_pk,        ");
                strQuery.Append("  Q.SELECTED, ");
                strQuery.Append("  Q.ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  Q.MIN_AMOUNT   FROM (      ");
                strQuery.Append("SELECT DISTINCT DTL.POL_GRP_FK,DTL.POD_GRP_FK,");
                strQuery.Append("(SELECT trn.cont_cust_trn_air_pk from  cont_cust_trn_air_tbl trn where trn.pol_grp_fk=dtl.pol_grp_fk and trn.pod_grp_fk=dtl.pod_grp_fk and trn.cont_cust_air_fk in (" + TrnPk + ") and  rownum=1) as   FREIGHT_PK,");
                //strQuery.Append("  CONT_CUST_AIR_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  CONT_CUST_TRN_AIR_FK FK,       " & vbCrLf)
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  nvl(main.airline_mst_fk,0) as airline_mst_pk,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT,PREFERENCE         ");
                strQuery.Append(" FROM    cont_cust_air_tbl main,cont_cust_trn_air_tbl dtl, ");
                strQuery.Append("  CONT_CUST_AIR_FREIGHT_TBL   TRAN,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   dtl.cont_cust_air_fk IN(" + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  ");
                strQuery.Append("  AND  main.cont_cust_air_pk=dtl.cont_cust_air_fk  ");
                strQuery.Append("  AND  dtl.cont_cust_trn_air_pk=tran.cont_cust_trn_air_fk  ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND (dtl.pol_grp_fk,dtl.pod_grp_fk) in (" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND (dtl.pol_grp_fk,dtl.pod_grp_fk,main.airline_mst_fk) in (" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE)Q ");
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN slab cont customer.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryTrnSlabContCust(string FreightPks, int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  DTL.cont_cust_trn_air_pk FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append(" APPROVED_RATE CURRENT_RATE,         ");
                strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
                strQuery.Append("  APPROVED_RATE         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  CONT_CUST_AIR_FREIGHT_TBL  TRAN,CONT_CUST_TRN_AIR_TBL DTL, ");
                strQuery.Append("  CONT_CUST_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  tran.CONT_CUST_AIR_FREIGHT_PK IN (" + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.CONT_CUST_AIR_FRT_FK = TRAN.CONT_CUST_AIR_FREIGHT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  and dtl.cont_cust_trn_air_pk= tran.cont_cust_trn_air_fk");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID ");
            }
            else
            {
                strQuery.Append("SELECT  Q.POL_GRP_FK,Q.POD_GRP_FK,");
                strQuery.Append("  Q.FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  Q.AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  Q.BREAKPOINT_ID,        ");
                strQuery.Append("  Q.BREAKPOINT_DESC,        ");
                strQuery.Append("  Q.CURRENT_RATE,         ");
                strQuery.Append("  Q.REQUEST_RATE,         ");
                strQuery.Append("  Q.APPROVED_RATE FROM(        ");
                strQuery.Append("SELECT  DISTINCT DTL.POL_GRP_FK,DTL.POD_GRP_FK,");
                strQuery.Append("  CONT_CUST_TRN_AIR_FK FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append(" APPROVED_RATE CURRENT_RATE,         ");
                strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
                strQuery.Append("  APPROVED_RATE,BREAKPOINT_RANGE        ");
                strQuery.Append(" FROM   CONT_CUST_TRN_AIR_TBL DTL,       ");
                strQuery.Append("  CONT_CUST_AIR_FREIGHT_TBL  TRAN,    ");
                strQuery.Append("  CONT_CUST_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  dtl.cont_cust_trn_air_pk IN (" + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.CONT_CUST_AIR_FRT_FK = TRAN.CONT_CUST_AIR_FREIGHT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  and dtl.cont_cust_trn_air_pk= tran.cont_cust_trn_air_fk");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID)Q ");
            }
            return strQuery.ToString();
            //
        }

        #endregion "Customer contract"

        #region "Airline Tariff"

        /// <summary>
        /// Queries the air tariff.
        /// </summary>
        /// <param name="tariffType">Type of the tariff.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="TariffAgentPk">The tariff agent pk.</param>
        /// <returns></returns>
        private string QueryAirTariff(string tariffType = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "", int TariffAgentPk = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();

            if (Group == 1 | Group == 2)
            {
                strQuery.Append("Select   distinct       ");
                strQuery.Append("  MAST.TARIFF_REF_NO REF_NO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  MAIN.POL_GRP_FK PORT_MST_POL_FK,       ");
                strQuery.Append("  PGL.PORT_GRP_ID      PORTPOL_ID,  ");
                strQuery.Append("  PGL.PORT_GRP_NAME     PORTPOL_NAME, ");
                strQuery.Append("  MAIN.POD_GRP_FK PORT_MST_POD_FK,       ");
                strQuery.Append("  PGD.PORT_GRP_ID      PORTPOD_ID,  ");
                strQuery.Append("  PGD.PORT_GRP_NAME     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  0 COMMODITY_MST_FK,        ");
                strQuery.Append(" '' COMMODITY_NAME,         ");
                strQuery.Append("   0 VOLUME_IN_CBM,        ");
                strQuery.Append("   0 PACK_COUNT,         ");
                strQuery.Append("   0 CHARGEABLE_WEIGHT,       ");
                strQuery.Append("   0 VOLUME_WEIGHT,        ");
                strQuery.Append("   0 DENSITY,");
                strQuery.Append("  main.TARIFF_MAIN_AIR_FK FK,       ");
                strQuery.Append("  MAIN.TARIFF_MAIN_AIR_FK PK, nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK     ");
                strQuery.Append(" from tariff_main_air_tbl  MAST,     ");
                strQuery.Append("  tariff_trn_air_tbl main,      ");
                strQuery.Append("  PORT_GRP_MST_TBL    PGL,      ");
                strQuery.Append("  PORT_GRP_MST_TBL    PGD,      ");
                strQuery.Append("  AIRLINE_MST_TBL AIR        ");
                strQuery.Append(" where MAST.TARIFF_MAIN_AIR_PK = MAIN.TARIFF_MAIN_AIR_FK");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND MAIN.POL_GRP_FK = PGL.PORT_GRP_MST_PK(+) ");
                strQuery.Append("  AND MAIN.POD_GRP_FK = PGD.PORT_GRP_MST_PK(+)  ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.POL_GRP_FK, MAIN.POD_GRP_FK) IN (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.POL_GRP_FK, MAIN.POD_GRP_FK, MAST.AIRLINE_MST_FK) IN (" + Sectors + ")");
                }

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAST.VALID_FROM and nvl(MAST.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.ACTIVE                     =      1   ");
                strQuery.Append("  AND MAST.STATUS                     =      1   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.COMMODITY_GROUP_FK =" + Convert.ToString(CommodityGroup));
                }
                if (TariffAgentPk > 0)
                {
                    strQuery.Append(" AND MAST.AGENT_MST_FK =" + TariffAgentPk);
                }
                strQuery.Append(" AND MAST.TARIFF_TYPE= " + Convert.ToString(tariffType));
            }
            else
            {
                strQuery.Append("Select   distinct       ");
                strQuery.Append("  MAST.TARIFF_REF_NO REF_NO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  main.PORT_MST_POL_FK PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.PORT_ID      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.PORT_NAME     PORTPOL_NAME, ");
                strQuery.Append("  main.PORT_MST_POD_FK PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.PORT_ID      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.PORT_NAME     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  0 COMMODITY_MST_FK,        ");
                strQuery.Append(" '' COMMODITY_NAME,         ");
                strQuery.Append("   0 VOLUME_IN_CBM,        ");
                strQuery.Append("   0 PACK_COUNT,         ");
                strQuery.Append("   0 CHARGEABLE_WEIGHT,       ");
                strQuery.Append("   0 VOLUME_WEIGHT,        ");
                strQuery.Append("   0 DENSITY,");
                strQuery.Append("  main.TARIFF_MAIN_AIR_FK FK,       ");
                strQuery.Append("  MAIN.TARIFF_TRN_AIR_PK  PK,nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK     ");
                strQuery.Append(" from tariff_main_air_tbl  MAST,     ");
                strQuery.Append("  tariff_trn_air_tbl main,      ");
                strQuery.Append("  PORT_MST_TBL PORTPOL,       ");
                strQuery.Append("  PORT_MST_TBL PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR        ");
                strQuery.Append(" where MAST.TARIFF_MAIN_AIR_PK = MAIN.TARIFF_MAIN_AIR_FK");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND PORT_MST_POL_FK  = PORTPOL.PORT_MST_PK  ");
                strQuery.Append("  AND PORT_MST_POD_FK  = PORTPOD.PORT_MST_PK  ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) IN (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK, MAST.AIRLINE_MST_FK) IN (" + Sectors + ")");
                }
                //strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) in (" & Sectors & ")" & vbCrLf)

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAST.VALID_FROM and nvl(MAST.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.ACTIVE                     =      1   ");
                strQuery.Append("  AND MAST.STATUS                     =      1   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.COMMODITY_GROUP_FK =" + Convert.ToString(CommodityGroup));
                }
                if (TariffAgentPk > 0)
                {
                    strQuery.Append(" AND MAST.AGENT_MST_FK =" + TariffAgentPk);
                }
                strQuery.Append(" AND MAST.TARIFF_TYPE= " + Convert.ToString(tariffType));

                //If CStr(CustomerPk) <> "" Then
                //    strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " & CStr(CustomerPk) & vbCrLf)
                //    strQuery.Append("  or MAST.CUSTOMER_MST_FK is NULL ) " & vbCrLf)
                //End If
            }

            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN air tariff.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryTrnAirTariff(string TrnPk, int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();

            if (Group == 1 | Group == 2)
            {
                strQuery.Append(" Select          ");
                strQuery.Append("  tran.tariff_trn_air_fk FK,       ");
                strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  tran.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,main.airline_mst_fk as airline_mst_pk, ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS,   ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append(" tran.tariff_rate CURRENT_RATE,         ");
                strQuery.Append("  tran.tariff_rate REQUEST_RATE,         ");
                strQuery.Append("  tran.tariff_rate APPROVED_RATE,        ");
                strQuery.Append("  tran.CHARGE_BASIS  ");
                strQuery.Append(" from          ");
                strQuery.Append("  --RFQ_SPOT_TRN_AIR_TBL  main,     ");
                strQuery.Append("  tariff_trn_air_surcharge tran, tariff_main_air_tbl main,tariff_trn_air_tbl trn,");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" where          ");
                strQuery.Append("  tran.tariff_trn_air_fk IN( " + TrnPk + " )   ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
                strQuery.Append("  and main.tariff_main_air_pk=trn.tariff_main_air_fk  ");
                strQuery.Append("  and trn.tariff_trn_air_pk=tran.tariff_trn_air_fk  ");
                strQuery.Append(" Order By PREFERENCE ");
                //FREIGHT_ELEMENT_ID
            }
            else
            {
                strQuery.Append(" Select          ");
                strQuery.Append("   tran.tariff_trn_air_fk FK,       ");
                strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  tran.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,main.airline_mst_fk as airline_mst_pk,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS,   ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  tran.tariff_rate CURRENT_RATE,         ");
                strQuery.Append("  tran.tariff_rate REQUEST_RATE,         ");
                strQuery.Append("  tran.tariff_rate APPROVED_RATE,        ");
                strQuery.Append("  tran.CHARGE_BASIS        ");
                strQuery.Append(" from          ");
                strQuery.Append("  --RFQ_SPOT_TRN_AIR_TBL  main,     ");
                strQuery.Append("  tariff_trn_air_surcharge tran,tariff_main_air_tbl main,tariff_trn_air_tbl trn,");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" where          ");
                strQuery.Append("  tran.tariff_trn_air_fk IN( " + TrnPk + " )   ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
                strQuery.Append("  and main.tariff_main_air_pk=trn.tariff_main_air_fk  ");
                strQuery.Append("  and trn.tariff_trn_air_pk=tran.tariff_trn_air_fk  ");
                strQuery.Append(" Order By PREFERENCE ");
                //FREIGHT_ELEMENT_ID
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN oth air tariff.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnOthAirTariff(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" Select          ");
            strQuery.Append("  tran.tariff_trn_air_fk FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,        ");
            strQuery.Append("  CURRENCY_NAME,        ");
            strQuery.Append("  tran.tariff_rate CURRENT_RATE,         ");
            strQuery.Append("  tran.tariff_rate REQUEST_RATE,         ");
            strQuery.Append("  tran.tariff_rate APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append("  from          ");
            strQuery.Append("  tariff_trn_air_oth_chrg  tran,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("   tran.tariff_trn_air_fk IN(" + TrnPk + " )   ");
            strQuery.Append("   AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("   AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("   AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("   AND  nvl(CHARGE_TYPE,3) = 3      ");
            strQuery.Append("   AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append(" Order By FREIGHT_ELEMENT_ID");

            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN FRT air tariff.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Sector">The sector.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string QueryTrnFRTAirTariff(string TrnPk, int Group = 0, string Sector = "", string OperPks = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append(" SELECT          ");
                strQuery.Append("  TARIFF_TRN_FREIGHT_PK FREIGHT_PK,      ");
                strQuery.Append("  tran.tariff_trn_air_fk FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  CURRENCY_NAME,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  tariff_trn_air_freight_tbl   TRAN,tariff_trn_air_tbl main ,tariff_main_air_tbl airmain,  ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   main.tariff_trn_air_pk IN( " + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  ");
                strQuery.Append("  AND  main.tariff_trn_air_pk= tran.tariff_trn_air_fk and main.tariff_main_air_fk=airmain.tariff_main_air_pk  ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND  (main.PORT_MST_POL_FK,main.PORT_MST_POD_FK) in (  " + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND  (main.PORT_MST_POL_FK,main.PORT_MST_POD_FK,airmain.airline_mst_fk) in (  " + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE ");
                //FREIGHT_ELEMENT_ID
            }
            else
            {
                strQuery.Append(" SELECT Q.POL_GRP_FK,Q.POD_GRP_FK ,");
                //strQuery.Append("  Q.TARIFF_TRN_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  Q.FK,       " & vbCrLf)
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  Q.FREIGHT_PK,       ");
                strQuery.Append("  Q.CURRENCY_MST_FK,       ");
                strQuery.Append("  Q.CURRENCY_ID,        ");
                strQuery.Append("  Q.airline_mst_pk,        ");
                strQuery.Append("  Q.SELECTED, ");
                strQuery.Append("  Q.ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  Q.MIN_AMOUNT   FROM(      ");
                strQuery.Append(" SELECT DISTINCT dtl.POL_GRP_FK,dtl.POD_GRP_FK ,");
                strQuery.Append("(SELECT trn.tariff_trn_air_pk from  tariff_trn_air_tbl trn where trn.pol_grp_fk=dtl.pol_grp_fk and trn.pod_grp_fk=dtl.pod_grp_fk and trn.tariff_main_air_fk in ( " + TrnPk + ") and rownum=1) as  FREIGHT_PK,");
                //strQuery.Append("  TARIFF_TRN_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  tran.tariff_trn_air_fk FK,       " & vbCrLf)
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  nvl(main.airline_mst_fk,0) as airline_mst_pk,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT,PREFERENCE         ");
                strQuery.Append(" FROM  tariff_main_air_tbl main, tariff_trn_air_tbl dtl,");
                strQuery.Append("  tariff_trn_air_freight_tbl   TRAN,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   dtl.tariff_main_air_fk IN( " + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  ");
                strQuery.Append("  AND  dtl.tariff_trn_air_pk=TRAN.TARIFF_TRN_AIR_FK  and main.tariff_main_air_pk =dtl.tariff_main_air_fk ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND  (dtl.pol_grp_fk,dtl.pod_grp_fk) in (  " + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND  (dtl.pol_grp_fk,dtl.pod_grp_fk,main.airline_mst_fk) in (  " + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE)Q ");
                //FREIGHT_ELEMENT_ID
            }

            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN slab air tariff.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryTrnSlabAirTariff(string FreightPks, int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  main.tariff_trn_air_pk FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append("  bpnt.tariff_rate CURRENT_RATE,         ");
                strQuery.Append("  bpnt.tariff_rate REQUEST_RATE,         ");
                strQuery.Append(" bpnt.tariff_rate APPROVED_RATE         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  tariff_trn_air_freight_tbl  TRAN,    ");
                strQuery.Append("  tariff_air_breakpoints  BPNT,tariff_trn_air_tbl         main,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  tran.TARIFF_TRN_FREIGHT_PK IN ( " + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.TARIFF_TRN_FREIGHT_FK = TRAN.TARIFF_TRN_FREIGHT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_TBL_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  AND main.tariff_trn_air_pk = TRAN.TARIFF_TRN_AIR_FK ");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID ");
            }
            else
            {
                strQuery.Append("SELECT DISTINCT MAIN.POL_GRP_FK, MAIN.POD_GRP_FK,         ");
                strQuery.Append("  tran.tariff_trn_air_fk FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append("  bpnt.tariff_rate CURRENT_RATE,         ");
                strQuery.Append("  bpnt.tariff_rate REQUEST_RATE,         ");
                strQuery.Append(" bpnt.tariff_rate APPROVED_RATE,BREAKPOINT_RANGE         ");
                strQuery.Append(" FROM   tariff_trn_air_tbl         main,");
                strQuery.Append("  tariff_trn_air_freight_tbl  TRAN,    ");
                strQuery.Append("  tariff_air_breakpoints  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  main.TARIFF_TRN_AIR_PK IN ( " + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.TARIFF_TRN_FREIGHT_FK = TRAN.TARIFF_TRN_FREIGHT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_TBL_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  AND main.tariff_trn_air_pk = TRAN.TARIFF_TRN_AIR_FK ");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID ");
            }
            return strQuery.ToString();
            //
        }

        #endregion "Airline Tariff"

        #region "Quotation fetch"

        /// <summary>
        /// Queries the quot.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="strPk">The string pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string QueryQuot(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", string strPk = "", int Group = 0, string OperPks = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();

            if (Group == 1 | Group == 2)
            {
                strQuery.Append("Select          ");
                if (strPk.Trim().Length > 0)
                {
                    strQuery.Append(" DISTINCT MAIN.TRANS_REF_NO REF_NO, ");
                }
                else
                {
                    strQuery.Append(" DISTINCT MAST.QUOTATION_REF_NO REF_NO,       ");
                }
                //strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      " & vbCrLf)
                strQuery.Append("  AIR.AIRLINE_NAME AIRLINE,      ");
                strQuery.Append("  MAIN.POL_GRP_FK PORT_MST_POL_FK,       ");
                strQuery.Append("  PGL.PORT_GRP_ID PORTPOL_ID,  ");
                strQuery.Append("  PGL.PORT_GRP_NAME PORTPOL_NAME, ");
                strQuery.Append("  MAIN.POD_GRP_FK PORT_MST_POD_FK,  ");
                strQuery.Append("  PGD.PORT_GRP_ID PORTPOD_ID, ");
                strQuery.Append("  PGD.PORT_GRP_NAME PORTPOD_NAME,");
                strQuery.Append("  TO_CHAR(MAIN.VALID_FROM, '" + dateFormat + "') VALID_FROM,");
                strQuery.Append("  TO_CHAR(MAIN.VALID_TO, '" + dateFormat + "') VALID_TO,");
                strQuery.Append("   MAIN.COMMODITY_MST_FKS COMMODITY_MST_FK,        ");
                //10
                strQuery.Append("   COM.COMMODITY_NAME ,         ");
                //11
                strQuery.Append("   0 VOLUME_IN_CBM,        ");
                //12
                strQuery.Append("   0 PACK_COUNT,         ");
                //13
                strQuery.Append("   0 CHARGEABLE_WEIGHT,       ");
                //14
                strQuery.Append("   0 VOLUME_WEIGHT,        ");
                //15
                strQuery.Append("   0 DENSITY,");
                //16
                strQuery.Append("  MAIN.QUOTATION_MST_FK FK,       ");
                //17
                strQuery.Append("  MAIN.QUOTATION_MST_FK  PK,");
                //18
                strQuery.Append("  NVL(AIRLINE_MST_PK,0) AIRLINE_MST_PK     ");
                //19
                strQuery.Append(" FROM QUOTATION_MST_TBL  MAST,     ");
                strQuery.Append("  QUOTATION_DTL_TBL MAIN,      ");
                strQuery.Append("  PORT_GRP_MST_TBL     PGL,     ");
                strQuery.Append("  PORT_GRP_MST_TBL     PGD,    ");
                strQuery.Append("  AIRLINE_MST_TBL AIR ,");
                strQuery.Append("  COMMODITY_MST_TBL COM       ");
                strQuery.Append(" WHERE MAST.QUOTATION_MST_PK = MAIN.QUOTATION_MST_FK");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAIN.CARRIER_MST_FK AND MAST.BIZ_TYPE= 1 ");
                strQuery.Append("  AND MAIN.POL_GRP_FK = PGL.PORT_GRP_MST_PK ");
                strQuery.Append("  AND MAIN.POD_GRP_FK = PGD.PORT_GRP_MST_PK  ");
                //AND COM.COMMODITY_MST_PK(+)=MAIN.COMMODITY_MST_FK
                strQuery.Append("  AND COM.COMMODITY_MST_PK(+)=MAIN.COMMODITY_MST_FK   ");
                //
                if (strPk.Trim().Length > 0)
                {
                    strQuery.Append(" AND MAIN.QUOTATION_MST_FK = " + strPk);
                }
                else
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append(" AND (MAIN.POL_GRP_FK,MAIN.POD_GRP_FK) in (" + Sectors + ")");
                    }
                    else
                    {
                        strQuery.Append(" AND (MAIN.POL_GRP_FK,MAIN.POD_GRP_FK,MAIN.CARRIER_MST_FK) in (" + Sectors + ")");
                    }

                    strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                    strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT)");
                    strQuery.Append("  AND MAST.Quotation_Type          =      0   ");
                    strQuery.Append("  AND MAST.STATUS          =      2   ");

                    if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                    {
                        strQuery.Append(" AND MAST.Commodity_Group_Mst_Fk =" + Convert.ToString(CommodityGroup));
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                    {
                        strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                        strQuery.Append("  or MAST.CUSTOMER_MST_FK is NULL ) ");
                    }
                }
                strQuery.Append("  ORDER BY MAIN.POL_GRP_FK, MAIN.POD_GRP_FK ");
            }
            else
            {
                strQuery.Append("Select          ");
                if (strPk.Trim().Length > 0)
                {
                    strQuery.Append(" MAIN.TRANS_REF_NO REF_NO, ");
                }
                else
                {
                    strQuery.Append("  MAST.QUOTATION_REF_NO REF_NO,       ");
                }
                //strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      " & vbCrLf)
                strQuery.Append("  AIR.AIRLINE_NAME AIRLINE,      ");
                strQuery.Append("  main.PORT_MST_POL_FK PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.PORT_ID      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.PORT_NAME     PORTPOL_NAME,");
                strQuery.Append("  main.PORT_MST_POD_FK PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.PORT_ID      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.PORT_NAME     PORTPOD_NAME,");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM,");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO,");
                strQuery.Append("   MAIN.COMMODITY_MST_FKS COMMODITY_MST_FK,        ");
                //10
                // strQuery.Append("   COM.COMMODITY_NAME ,         " & vbCrLf) '11
                strQuery.Append("       ROWTOCOL('SELECT CM.COMMODITY_NAME FROM COMMODITY_MST_TBL CM WHERE CM.COMMODITY_MST_PK IN(' ||");
                strQuery.Append("                NVL(MAIN.COMMODITY_MST_FKS, 0) || ')') COMMODITY_NAME,");
                strQuery.Append("   0 VOLUME_IN_CBM,        ");
                //12
                strQuery.Append("   0 PACK_COUNT,         ");
                //13
                strQuery.Append("   0 CHARGEABLE_WEIGHT,       ");
                //14
                strQuery.Append("   0 VOLUME_WEIGHT,        ");
                //15
                strQuery.Append("   0 DENSITY,");
                //16
                strQuery.Append("  MAIN.QUOTATION_MST_FK FK,       ");
                //17
                strQuery.Append("  MAIN.QUOTE_DTL_PK  PK,");
                //18
                strQuery.Append("  NVL(AIRLINE_MST_PK,0)AIRLINE_MST_PK     ");
                //19
                strQuery.Append(" from QUOTATION_MST_TBL  MAST,     ");
                strQuery.Append("  QUOTATION_DTL_TBL main,      ");
                strQuery.Append("  PORT_MST_TBL PORTPOL,       ");
                strQuery.Append("  PORT_MST_TBL PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR ,");
                strQuery.Append("  COMMODITY_MST_TBL COM       ");
                strQuery.Append(" where MAST.QUOTATION_MST_PK = MAIN.QUOTATION_MST_FK");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAIN.CARRIER_MST_FK AND MAST.BIZ_TYPE =1  ");
                strQuery.Append("  AND PORT_MST_POL_FK  = PORTPOL.PORT_MST_PK  ");
                strQuery.Append("  AND PORT_MST_POD_FK  = PORTPOD.PORT_MST_PK  ");
                //AND COM.COMMODITY_MST_PK(+)=MAIN.COMMODITY_MST_FK
                strQuery.Append("  AND COM.COMMODITY_MST_PK(+)=MAIN.COMMODITY_MST_FK   ");
                //
                if (strPk.Trim().Length > 0)
                {
                    strQuery.Append(" AND MAIN.QUOTATION_MST_FK = " + strPk);
                }
                else
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) in (" + Sectors + ")");
                    strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                    strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT)");
                    strQuery.Append("  AND MAST.Quotation_Type          =      0   ");
                    strQuery.Append("  AND MAST.STATUS          =      2   ");

                    if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                    {
                        strQuery.Append(" AND MAST.Commodity_Group_Mst_Fk =" + Convert.ToString(CommodityGroup));
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                    {
                        strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                        strQuery.Append("  or MAST.CUSTOMER_MST_FK is NULL ) ");
                    }
                }
            }

            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN quot.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnQuot(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("Select          ");
            strQuery.Append("   tran.QUOTATION_DTL_FK FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,qdt.carrier_mst_fk as airline_mst_pk,  ");
            strQuery.Append("  'false' SELECTED, ");
            strQuery.Append("  'false' ADVATOS,   ");
            //'Added Koteshwari for Advatos Column PTSID-JUN18
            strQuery.Append(" APPROVED_RATE CURRENT_RATE,         ");
            strQuery.Append(" APPROVED_RATE REQUEST_RATE,         ");
            strQuery.Append("   APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append(" from          ");
            strQuery.Append("  --RFQ_SPOT_TRN_AIR_TBL  main,     ");
            strQuery.Append("  QUOTATION_FREIGHT_TRN tran,quotation_mst_tbl qmt,quotation_dtl_tbl qdt,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("  tran.QUOTATION_DTL_FK IN(" + TrnPk + " )   ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("  AND  CHARGE_TYPE <> 3   AND nvl(tran.Freight_Type,0) <> 2    ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append("  AND  qmt.quotation_mst_pk=qdt.quotation_mst_fk  ");
            strQuery.Append("  AND  qdt.quote_dtl_pk=tran.QUOTATION_DTL_FK  ");
            strQuery.Append(" Order By PREFERENCE ");
            //FREIGHT_ELEMENT_ID

            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN oth quot.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnOthQuot(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            StringBuilder sbSQL = new StringBuilder();
            //strQuery.Append("Select          " & vbCrLf)
            //strQuery.Append("  tran.QUOTATION_DTL_FK FK,       " & vbCrLf)
            //strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      " & vbCrLf)
            //strQuery.Append("  FREIGHT_ELEMENT_ID,        " & vbCrLf)
            //strQuery.Append("  FREIGHT_ELEMENT_NAME,       " & vbCrLf)
            //strQuery.Append("  tran.CURRENCY_MST_FK,       " & vbCrLf)
            //strQuery.Append("  CURRENCY_ID,        " & vbCrLf)
            //strQuery.Append("  CURRENCY_NAME,        " & vbCrLf)
            //strQuery.Append(" APPROVED_RATE CURRENT_RATE,         " & vbCrLf)
            //strQuery.Append("  APPROVED_RATE REQUEST_RATE,         " & vbCrLf)
            //strQuery.Append("   APPROVED_RATE,        " & vbCrLf)
            //strQuery.Append("  tran.CHARGE_BASIS        " & vbCrLf)
            //strQuery.Append(" from          " & vbCrLf)
            //strQuery.Append("  QUOTATION_OTHER_FREIGHT_TRN  tran,     " & vbCrLf)
            //strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      " & vbCrLf)
            //strQuery.Append("  CURRENCY_TYPE_MST_TBL       " & vbCrLf)
            //strQuery.Append(" where          " & vbCrLf)
            //strQuery.Append("    tran.QUOTATION_DTL_FK IN(" & TrnPk & " )   " & vbCrLf)
            //strQuery.Append("   AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  " & vbCrLf)
            //strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   " & vbCrLf)
            //strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  " & vbCrLf)
            //strQuery.Append("  AND  nvl(FREIGHT_TYPE,0) = 0      " & vbCrLf)
            //strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  " & vbCrLf)
            //strQuery.Append(" Order By FREIGHT_ELEMENT_ID" & vbCrLf)
            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     otf.QUOTATION_OTHER_FREIGHT_PK                  PK,                  ");
            //0
            sbSQL.Append("     otf.QUOTATION_DTL_FK                  FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.BASIS_RATE                            BASIS_RATE,          ");
            //4
            sbSQL.Append("     otf.AMOUNT                                TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs')   CH_BASIS_ID,          ");
            //7
            sbSQL.Append("      FREIGHT_TYPE PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     QUOTATION_OTHER_FREIGHT_TRN     otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.QUOTATION_DTL_FK   in (" + TrnPk + ")       ");
            return sbSQL.ToString();

            //Return strQuery.ToString
        }

        /// <summary>
        /// Queries the TRN FRT quot.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Sector">The sector.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string QueryTrnFRTQuot(string TrnPk, int Group = 0, string Sector = "", string OperPks = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 1 | Group == 2)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  Q.POL_GRP_FK,      ");
                strQuery.Append("  Q.POD_GRP_FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_ID ,        ");
                strQuery.Append("  Q.FREIGHT_PK,       ");
                strQuery.Append("  Q.CURRENCY_MST_FK,       ");
                strQuery.Append("  Q.CURRENCY_ID,        ");
                strQuery.Append("  Q.airline_mst_pk,        ");
                strQuery.Append("  Q.SELECTED, ");
                strQuery.Append("  Q.ADVATOS,  ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  Q.QUOTED_MIN_RATE FROM ( ");
                strQuery.Append("  SELECT          ");
                strQuery.Append("  DISTINCT QDT.POL_GRP_FK POL_GRP_FK,      ");
                strQuery.Append("  (SELECT trn.QUOTE_DTL_PK from  QUOTATION_DTL_TBL trn where trn.pol_grp_fk=qdt.pol_grp_fk and trn.pod_grp_fk=qdt.pod_grp_fk and nvl(trn.CARRIER_MST_FK,0)=nvl(qdt.CARRIER_MST_FK,0) and trn.quote_dtl_pk in(" + TrnPk + ")  and rownum=1) as FREIGHT_PK,");
                strQuery.Append("  QDT.POD_GRP_FK POD_GRP_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK ,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID ,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  nvl(QDT.carrier_mst_fk,0) as airline_mst_pk,        ");
                strQuery.Append("  decode(TRAN.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED, ");
                strQuery.Append("  decode(TRAN.CHECK_ADVATOS,1,'true','false')  ADVATOS,  ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  QUOTED_MIN_RATE,PREFERENCE   ");
                strQuery.Append("  FROM     QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL QDT,     ");
                strQuery.Append("  QUOTATION_FREIGHT_TRN   TRAN,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL ,  AIRLINE_MST_TBL         AMT    ");
                strQuery.Append(" WHERE           ");
                strQuery.Append("   TRAN.QUOTATION_DTL_FK IN( " + TrnPk + "  )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1 AND QDT.CARRIER_MST_FK=AMT.AIRLINE_MST_PK(+)  ");
                strQuery.Append("  AND QMT.QUOTATION_MST_PK=QDT.QUOTATION_MST_FK AND QDT.QUOTE_DTL_PK= TRAN.QUOTATION_DTL_FK ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3    AND  nvl(tran.Freight_Type,0)  <> 2 ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND  (QDT.pol_grp_fk,QDT.pod_grp_fk) IN(" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND  (QDT.pol_grp_fk,QDT.pod_grp_fk,qdt.carrier_mst_fk) IN(" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE)Q   ");
            }
            else
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  TRAN.QUOTION_FREIGHT_PK FREIGHT_PK,      ");
                strQuery.Append("  tran.QUOTATION_DTL_FK FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK ,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID ,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  CURRENCY_NAME,        ");
                strQuery.Append("  decode(TRAN.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED, ");
                strQuery.Append("  decode(TRAN.CHECK_ADVATOS,1,'true','false')  ADVATOS,  ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  QUOTED_MIN_RATE   ");
                strQuery.Append("  FROM          ");
                strQuery.Append("  QUOTATION_FREIGHT_TRN   TRAN, QUOTATION_DTL_TBL QDT,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   TRAN.QUOTATION_DTL_FK IN( " + TrnPk + "  )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3    AND  nvl(tran.Freight_Type,0)  <> 2 ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  AND QDT.QUOTE_DTL_PK= TRAN.QUOTATION_DTL_FK ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND  (QDT.port_mst_pol_fk,QDT.port_mst_pod_fk) IN(" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND  (QDT.port_mst_pol_fk,QDT.port_mst_pod_fk,qdt.carrier_mst_fk) IN(" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE   ");
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN slab quot.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryTrnSlabQuot(string FreightPks, int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 1 | Group == 2)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  DISTINCT QMT.QUOTATION_MST_PK FK,       ");
                strQuery.Append("  QDT.POL_GRP_FK,QDT.POD_GRP_FK, ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append("   NVL(BPNT.APPROVED_RATE,0)               CURRENT_RATE,         ");
                strQuery.Append("   NVL(BPNT.APPROVED_RATE,0)               REQUEST_RATE,        ");
                strQuery.Append("  NVL(BPNT.APPROVED_RATE,0)               APPROVED_RATE, BREAKPOINT_RANGE        ");
                strQuery.Append(" FROM     QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL QDT,     ");
                strQuery.Append("  QUOTATION_FREIGHT_TRN  TRAN,    ");
                strQuery.Append("  QUOTE_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   qdt.quote_dtl_pk IN ( " + FreightPks + " )  ");
                strQuery.Append("  AND BPNT.QUOT_GEN_AIR_FRT_FK = TRAN.QUOTION_FREIGHT_PK");
                strQuery.Append("  AND QMT.QUOTATION_MST_PK=QDT.QUOTATION_MST_FK AND QDT.QUOTE_DTL_PK=TRAN.QUOTATION_DTL_FK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1  AND  nvl(tran.Freight_Type,0)  <> 2  ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_TBL_FK= AIRFREIGHT_SLABS_TBL_PK");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID");
                strQuery.Append("");
            }
            else
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  QDT.quote_dtl_pk FK,     ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append("   NVL(BPNT.APPROVED_RATE,0)               CURRENT_RATE,         ");
                strQuery.Append("   NVL(BPNT.APPROVED_RATE,0)               REQUEST_RATE,        ");
                strQuery.Append("  NVL(BPNT.APPROVED_RATE,0)               APPROVED_RATE        ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  QUOTATION_FREIGHT_TRN  TRAN,QUOTATION_MST_TBL QMT, QUOTATION_DTL_TBL QDT,    ");
                strQuery.Append("  QUOTE_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   tran.quotion_freight_pk IN ( " + FreightPks + " )  ");
                strQuery.Append("  AND BPNT.QUOT_GEN_AIR_FRT_FK = TRAN.QUOTION_FREIGHT_PK");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1  AND  nvl(tran.Freight_Type,0)  <> 2  ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_TBL_FK= AIRFREIGHT_SLABS_TBL_PK");
                strQuery.Append("  AND QMT.QUOTATION_MST_PK=QDT.QUOTATION_MST_FK AND QDT.QUOTE_DTL_PK=TRAN.QUOTATION_DTL_FK ");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID");
                strQuery.Append("");
            }
            return strQuery.ToString();
            //
        }

        #endregion "Quotation fetch"

        #region " Transfer Data [ Slabs ] "

        //RFQ_SPOT_AIR_FRT_FK, RFQ_SPOT_TRN_FREIGHT_PK
        /// <summary>
        /// Transfers the slabs data.
        /// </summary>
        /// <param name="GridDt">The grid dt.</param>
        /// <param name="SlabDt">The slab dt.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        /// <param name="Group">The group.</param>
        private void TransferSlabsData(DataTable GridDt, DataTable SlabDt, bool AmendFlg = false, int Group = 0)
        {
            Int16 GRowCnt = default(Int16);
            Int16 SRowCnt = default(Int16);
            Int16 ColCnt = default(Int16);
            string frtpk = null;
            string Fk = null;
            string polpk = null;
            string podpk = null;
            DataRow DRChild = null;
            if (Group == 1 | Group == 2)
            {
                if (AmendFlg == false)
                {
                    for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                    {
                        frtpk = Convert.ToString(GridDt.Rows[GRowCnt]["FREIGHT_ELEMENT_MST_FK"]);
                        polpk = Convert.ToString(GridDt.Rows[GRowCnt]["POL_GRP_FK"]);
                        podpk = Convert.ToString(GridDt.Rows[GRowCnt]["POD_GRP_FK"]);
                        for (SRowCnt = 0; SRowCnt <= SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POL_GRP_FK=" + polpk + "and POD_GRP_FK=" + podpk).Length - 1; SRowCnt++)
                        {
                            DRChild = SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POL_GRP_FK=" + polpk + "and POD_GRP_FK=" + podpk)[SRowCnt];
                            for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                            {
                                if (Convert.ToString(DRChild["AIRFREIGHT_SLABS_TBL_PK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                                {
                                    GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                                    //Exit For
                                }
                            }
                        }
                    }
                }
                else
                {
                    for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                    {
                        frtpk = GridDt.Rows[GRowCnt]["FREIGHT_ELEMENT_MST_FK"].ToString();
                        polpk = GridDt.Rows[GRowCnt]["POL_GRP_FK"].ToString();
                        podpk = GridDt.Rows[GRowCnt]["POD_GRP_FK"].ToString();
                        for (SRowCnt = 0; SRowCnt <= SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POL_GRP_FK=" + polpk + "and POD_GRP_FK=" + podpk).Length - 1; SRowCnt++)
                        {
                            DRChild = SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POL_GRP_FK=" + polpk + "and POD_GRP_FK=" + podpk)[SRowCnt];
                            for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                            {
                                if (Convert.ToString(DRChild["AIRFREIGHT_SLABS_TBL_PK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                                {
                                    GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                                    //Exit For
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (AmendFlg == false)
                {
                    for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                    {
                        frtpk = GridDt.Rows[GRowCnt]["FREIGHT_ELEMENT_MST_FK"].ToString();
                        Fk = GridDt.Rows[GRowCnt]["FK"].ToString();
                        for (SRowCnt = 0; SRowCnt <= SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and FK=" + Fk).Length - 1; SRowCnt++)
                        {
                            DRChild = SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and FK=" + Fk)[SRowCnt];
                            for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                            {
                                if (Convert.ToString(DRChild["AIRFREIGHT_SLABS_TBL_PK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                                {
                                    GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                                    //Exit For
                                }
                            }
                        }
                    }
                }
                else
                {
                    for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                    {
                        frtpk = GridDt.Rows[GRowCnt]["FREIGHT_ELEMENT_MST_FK"].ToString();
                        polpk = GridDt.Rows[GRowCnt]["POL_PK"].ToString();
                        podpk = GridDt.Rows[GRowCnt]["POD_PK"].ToString();
                        for (SRowCnt = 0; SRowCnt <= SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POLPK=" + polpk + "and PODPK=" + podpk).Length - 1; SRowCnt++)
                        {
                            DRChild = SlabDt.Select("FREIGHT_ELEMENT_MST_FK = " + frtpk + "and POLPK=" + polpk + "and PODPK=" + podpk)[SRowCnt];
                            for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                            {
                                if (Convert.ToString(DRChild["AIRFREIGHT_SLABS_TBL_PK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                                {
                                    GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                    GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                                    //Exit For
                                }
                            }
                        }
                    }
                }
            }
            //For SRowCnt = 0 To SlabDt.Rows.Count - 1
            //    frtpk = SlabDt.Rows(SRowCnt).Item("FREIGHT_ELEMENT_MST_FK")
            //    fk =
            //    For GRowCnt = 0 To GridDt.Rows.Count - 1
            //        If GridDt.Rows(GRowCnt).Item("FREIGHT_ELEMENT_MST_FK") = frtpk Then
            //            For ColCnt = 0 To GridDt.Columns.Count - 1
            //                If CStr(SlabDt.Rows(SRowCnt).Item("AIRFREIGHT_SLABS_TBL_PK")) = CStr(GridDt.Columns(ColCnt).Caption) Then
            //                    GridDt.Rows(GRowCnt).Item(ColCnt) = SlabDt.Rows(SRowCnt).Item("CURRENT_RATE")
            //                    GridDt.Rows(GRowCnt).Item(ColCnt + 1) = SlabDt.Rows(SRowCnt).Item("REQUEST_RATE")
            //                    GridDt.Rows(GRowCnt).Item(ColCnt + 2) = SlabDt.Rows(SRowCnt).Item("APPROVED_RATE")
            //                    'Exit For
            //                End If
            //            Next ColCnt
            //            ' Exit For
            //        End If
            //    Next GRowCnt
            //Next SRowCnt
        }

        #endregion " Transfer Data [ Slabs ] "

        #region " Getting Slabs "

        /// <summary>
        /// Gets the string slabs.
        /// </summary>
        /// <param name="DT">The dt.</param>
        /// <returns></returns>
        private string getStrSlabs(DataTable DT)
        {
            Int16 RowCnt = default(Int16);
            Int16 ln = default(Int16);
            StringBuilder strBuilder = new StringBuilder();
            string frpk = "-1";
            string slpk = "-1";
            if (DT.Rows.Count > 0)
            {
                frpk = Convert.ToString(DT.Rows[0]["FREIGHT_ELEMENT_MST_FK"]);
            }
            strBuilder.Append("");
            for (RowCnt = 0; RowCnt <= DT.Rows.Count - 1; RowCnt++)
            {
                if (frpk != Convert.ToString(DT.Rows[RowCnt]["FREIGHT_ELEMENT_MST_FK"]))
                    break; // TODO: might not be correct. Was : Exit For
                if (slpk != Convert.ToString(DT.Rows[RowCnt]["AIRFREIGHT_SLABS_TBL_PK"]))
                {
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["AIRFREIGHT_SLABS_TBL_PK"])).Trim() + ',');
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["BREAKPOINT_ID"])).Trim() + ',');
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["BREAKPOINT_DESC"])).Trim() + ".,");
                    slpk = Convert.ToString(DT.Rows[RowCnt]["AIRFREIGHT_SLABS_TBL_PK"]);
                }
            }
            if (DT.Rows.Count > 0)
                strBuilder.Remove(strBuilder.Length - 1, 1);
            return strBuilder.ToString();
        }

        #endregion " Getting Slabs "

        #region " Getting Freights "

        /// <summary>
        /// Gets the string freights.
        /// </summary>
        /// <param name="DT">The dt.</param>
        /// <returns></returns>
        private string getStrFreights(DataTable DT)
        {
            bool WithBasis = false;
            Int16 RowCnt = default(Int16);
            Int16 ln = default(Int16);
            StringBuilder strBuilder = new StringBuilder();
            if (DT.Columns.Contains("CHARGE_BASIS"))
            {
                WithBasis = true;
            }
            string strChBasis = "";
            string intChBasis = "";
            string frpk = "-1";
            strBuilder.Append("");
            if (DT.Rows.Count > 0)
            {
                frpk = "-1";
            }
            for (RowCnt = 0; RowCnt <= DT.Rows.Count - 1; RowCnt++)
            {
                if (DT.Rows[RowCnt]["FREIGHT_ELEMENT_MST_FK"] != frpk)
                {
                    if (WithBasis)
                    {
                        if ((string.IsNullOrEmpty(DT.Rows[RowCnt]["CHARGE_BASIS"].ToString()) ? 0 : Convert.ToInt32(DT.Rows[RowCnt]["CHARGE_BASIS"])) == 1)
                        {
                            strChBasis = "(%)";
                        }
                        else if ((string.IsNullOrEmpty(DT.Rows[RowCnt]["CHARGE_BASIS"].ToString()) ? 0 : Convert.ToInt32(DT.Rows[RowCnt]["CHARGE_BASIS"])) == 2)
                        {
                            strChBasis = "(Flat)";
                        }
                        else if ((string.IsNullOrEmpty(DT.Rows[RowCnt]["CHARGE_BASIS"].ToString()) ? 0 : Convert.ToInt32(DT.Rows[RowCnt]["CHARGE_BASIS"])) == 3)
                        {
                            strChBasis = "(Kgs)";
                        }
                        else
                        {
                            strChBasis = "(--)";
                        }
                        intChBasis = '~' + Convert.ToString((string.IsNullOrEmpty(DT.Rows[RowCnt]["CHARGE_BASIS"].ToString()) ? 0 : DT.Rows[RowCnt]["CHARGE_BASIS"]));
                    }
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["FREIGHT_ELEMENT_MST_FK"])).Trim() + ',');
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["FREIGHT_ELEMENT_ID"])).Trim() + strChBasis + ',');
                    strBuilder.Append(Convert.ToString(removeDBNull(DT.Rows[RowCnt]["FREIGHT_ELEMENT_NAME"])).Trim() + intChBasis + ',');
                    frpk = DT.Rows[RowCnt]["FREIGHT_ELEMENT_MST_FK"].ToString();
                }
            }
            if (DT.Rows.Count > 0)
                strBuilder.Remove(strBuilder.Length - 1, 1);
            return strBuilder.ToString();
        }

        #endregion " Getting Freights "

        #region " Column Add "

        /// <summary>
        /// Adds the columns.
        /// </summary>
        /// <param name="DT">The dt.</param>
        /// <param name="FRTs">The fr ts.</param>
        private void AddColumns(DataTable DT, string FRTs)
        {
            Array CHeads = null;
            string hed = null;
            CHeads = FRTs.Split(',');
            int RwCnt = 0;
            RwCnt = DT.Rows.Count;
            Int16 i = default(Int16);
            if (RwCnt > 0)
            {
                //For i = 0 To (CHeads.Length) / RwCnt - 3 Step 3
                //    DT.Columns.Add(CStr(CHeads(i)), GetType(Decimal))
                //    DT.Columns.Add(CStr(CHeads(i + 1)), GetType(Decimal))
                //    DT.Columns.Add(CStr(CHeads(i + 2)), GetType(Decimal))
                //Next
                for (i = 0; i <= CHeads.Length - 3; i += 3)
                {
                    DT.Columns.Add(Convert.ToString(CHeads.GetValue(i)), typeof(decimal));
                    DT.Columns.Add(Convert.ToString(CHeads.GetValue(i + 1)), typeof(decimal));
                    DT.Columns.Add(Convert.ToString(CHeads.GetValue(i + 2)), typeof(decimal));
                }
            }
            //For i = 0 To CHeads.Length - 3 Step 3
            //    DT.Columns.Add(CStr(CHeads(i)), GetType(Decimal))
            //    DT.Columns.Add(CStr(CHeads(i + 1)), GetType(Decimal))
            //    DT.Columns.Add(CStr(CHeads(i + 2)), GetType(Decimal))
            //Next
        }

        #endregion " Column Add "

        #region " Transfer Data [ Kg Freights ] "

        /// <summary>
        /// Transfers the kg freights data.
        /// </summary>
        /// <param name="GridDt">The grid dt.</param>
        /// <param name="FrtDt">The FRT dt.</param>
        /// <param name="AmendFlg">if set to <c>true</c> [amend FLG].</param>
        private void TransferKGFreightsData(DataTable GridDt, DataTable FrtDt, bool AmendFlg = false)
        {
            Int16 RowCnt = default(Int16);
            Int16 ColCnt = default(Int16);
            Int16 GRowCnt = default(Int16);
            Int16 SRowCnt = default(Int16);
            string frtpk = null;
            string Fk = null;
            string polpk = null;
            string podpk = null;
            DataRow DRChild = null;
            if (AmendFlg == false)
            {
                for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                {
                    Fk = GridDt.Rows[GRowCnt]["PK"].ToString();
                    for (SRowCnt = 0; SRowCnt <= FrtDt.Select("FK=" + Fk).Length - 1; SRowCnt++)
                    {
                        DRChild = FrtDt.Select("FK=" + Fk)[SRowCnt];
                        for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                        {
                            if (Convert.ToString(DRChild["FREIGHT_ELEMENT_MST_FK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                            {
                                GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                            }
                        }
                    }
                }
                //'
            }
            else
            {
                for (GRowCnt = 0; GRowCnt <= GridDt.Rows.Count - 1; GRowCnt++)
                {
                    polpk = GridDt.Rows[GRowCnt]["PORT_MST_POL_FK"].ToString();
                    podpk = GridDt.Rows[GRowCnt]["PORT_MST_POD_FK"].ToString();
                    for (SRowCnt = 0; SRowCnt <= FrtDt.Select("POL_PK=" + polpk + "and POD_PK=" + podpk).Length - 1; SRowCnt++)
                    {
                        DRChild = FrtDt.Select("POL_PK=" + polpk + "and POD_PK=" + podpk)[SRowCnt];
                        for (ColCnt = 0; ColCnt <= GridDt.Columns.Count - 1; ColCnt++)
                        {
                            if (Convert.ToString(DRChild["FREIGHT_ELEMENT_MST_FK"]) == Convert.ToString(GridDt.Columns[ColCnt].Caption))
                            {
                                GridDt.Rows[GRowCnt][ColCnt] = DRChild["CURRENT_RATE"];
                                GridDt.Rows[GRowCnt][ColCnt + 1] = DRChild["REQUEST_RATE"];
                                GridDt.Rows[GRowCnt][ColCnt + 2] = DRChild["APPROVED_RATE"];
                            }
                        }
                    }
                }
            }
        }

        #endregion " Transfer Data [ Kg Freights ] "

        #region "Save General"

        #region " Other Charge Save "

        #region " Logical Flow "

        // This is a simple call to OtherCharge procedure for IU operation
        // Here the one difference is that we have two Pk Values
        // PkValue and gTranPk
        // The PkValue is the returned value from Transcation and
        // the gTranPk is the Value stored in grid
        // these two values will be same while doing Update Operation
        // but in case of Insert this will differ
        // gTranPk is being used to filter relevent rows to save and
        // PkValue is used as Foreign Key for transaction table in the Save Operation.

        #endregion " Logical Flow "

        /// <summary>
        /// Saves the oth charge.
        /// </summary>
        /// <param name="DT">The dt.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="gTranPk">The g tran pk.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="BaseCurrency">The base currency.</param>
        /// <returns></returns>
        private ArrayList SaveOthCharge(DataTable DT, long PkValue, long gTranPk, OracleCommand SCM, string UserName, long BaseCurrency)
        {
            Int16 nRowCnt = default(Int16);
            long TranPk = 0;
            arrMessage.Clear();
            Int16 delFlage = default(Int16);
            delFlage = 1;
            try
            {
                var _with70 = SCM;
                _with70.CommandType = CommandType.StoredProcedure;
                for (nRowCnt = 0; nRowCnt <= DT.Rows.Count - 1; nRowCnt++)
                {
                    if (Convert.ToInt64(DT.Rows[nRowCnt][1]) == gTranPk)
                    {
                        _with70.CommandText = UserName + ".QUOTATION_GEN_AIR_TBL_PKG.QUOTATION_TRN_AIR_OTH_CHRG_UPD";
                        var _with71 = _with70.Parameters;
                        _with71.Clear();
                        //QUOT_GEN_AIR_TRN_FK_IN()
                        //FREIGHT_ELEMENT_MST_FK_IN()
                        //CHARGE_BASIS_IN()
                        //APPROVED_RATE_IN()
                        //CURRENCY_MST_FK_IN()
                        //RETURN_VALUE()
                        _with71.Clear();
                        //DEL_FLAG()
                        _with71.Add("DEL_FLAG", delFlage);
                        //QUOTATION_TRN_AIR_FK_IN()
                        _with71.Add("QUOTATION_TRN_AIR_FK_IN", PkValue);
                        //FREIGHT_ELEMENT_MST_FK_IN()
                        _with71.Add("FREIGHT_ELEMENT_MST_FK_IN", Convert.ToInt64(DT.Rows[nRowCnt]["FRT_FK"]));
                        //CURRENCY_MST_FK_IN()
                        _with71.Add("CURRENCY_MST_FK_IN", DT.Rows[nRowCnt]["CURR_FK"]);
                        //CHARGE_BASIS_IN()
                        _with71.Add("CHARGE_BASIS_IN", DT.Rows[nRowCnt]["CH_BASIS"]);
                        //BASIS_RATE_IN()
                        _with71.Add("BASIS_RATE_IN", getDefault(DT.Rows[nRowCnt]["BASIS_RATE"], 0));
                        //AMOUNT_IN()
                        _with71.Add("AMOUNT_IN", getDefault(DT.Rows[nRowCnt]["TARIFF_RATE"], 0));
                        _with71.Add("FREIGHT_TYPE_IN", getDefault(DT.Rows[nRowCnt]["PYMT_TYPE"], 1));
                        //RETURN_VALUE()
                        _with71.Add("RETURN_VALUE", OracleDbType.Varchar2, 20, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        //.Add("QUOT_GEN_AIR_TRN_FK_IN", _
                        //        PkValue _
                        //        ).Direction = ParameterDirection.Input

                        //.Add("FREIGHT_ELEMENT_MST_FK_IN", _
                        //        CLng(DT.Rows(nRowCnt).Item("FREIGHT_ELEMENT_MST_FK")) _
                        //        ).Direction = ParameterDirection.Input

                        //.Add("CURRENCY_MST_FK_IN", _
                        //        DT.Rows(nRowCnt).Item("CURRENCY_MST_FK") _
                        //        ).Direction = ParameterDirection.Input

                        //.Add("APPROVED_RATE_IN", _
                        //        DT.Rows(nRowCnt).Item("APPROVED_RATE") _
                        //        ).Direction = ParameterDirection.Input

                        //.Add("CHARGE_BASIS_IN", _
                        //        DT.Rows(nRowCnt).Item("CHARGE_BASIS") _
                        //        ).Direction = ParameterDirection.Input

                        //.Add("RETURN_VALUE", _
                        //            OracleDbType.Number, 10, _
                        //            "RETURN_VALUE").Direction = ParameterDirection.Output
                        _with70.ExecuteNonQuery();
                        //TranPk = CLng(.Parameters["RETURN_VALUE").Value)
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }
                    delFlage += 1;
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Other Charge Save "

        #region " Surcharge Save Kg "

        #region " Logical Flow "

        // This is for IU in Surcharge Table
        // It is simply performing IU for corresponding transaction
        // the surcharge information is available in the same row where the Transaction is in the DataTable
        // so in this procedure we loop through the columns and saves the transactions accordingly.
        // The surcharge columns are dynamically built columns.

        #endregion " Logical Flow "

        /// <summary>
        /// Saves the surcharge.
        /// </summary>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="nRowCnt">The n row count.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="BaseCurrency">The base currency.</param>
        /// <returns></returns>
        public ArrayList SaveSurcharge(DataSet Gridds, Int16 nRowCnt, long PkValue, OracleCommand SCM, string UserName, long BaseCurrency)
        {
            Int16 nColCnt = default(Int16);
            long TranPk = 0;
            string chargeBasis = null;
            arrMessage.Clear();
            try
            {
                var _with72 = SCM;
                _with72.CommandType = CommandType.StoredProcedure;
                for (nColCnt = 20; nColCnt <= Gridds.Tables[0].Columns.Count - 6; nColCnt += 3)
                {
                    _with72.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTATION_FREIGHT_TRN_INS";
                    var _with73 = _with72.Parameters;
                    _with73.Clear();
                    _with73.Add("QUOTATION_DTL_FK_IN", PkValue).Direction = ParameterDirection.Input;
                    _with73.Add("FREIGHT_ELEMENT_MST_FK_IN", Convert.ToInt64(Gridds.Tables[0].Columns[nColCnt].Caption)).Direction = ParameterDirection.Input;
                    _with73.Add("CHECK_FOR_ALL_IN_RT_IN", "").Direction = ParameterDirection.Input;
                    _with73.Add("CURRENCY_MST_FK_IN", BaseCurrency).Direction = ParameterDirection.Input;
                    _with73.Add("TARIFF_RATE_IN", 0).Direction = ParameterDirection.Input;
                    _with73.Add("QUOTED_RATE_IN", 0).Direction = ParameterDirection.Input;
                    _with73.Add("APPROVED_RATE_IN", Gridds.Tables[0].Rows[nRowCnt][nColCnt + 1]).Direction = ParameterDirection.Input;
                    _with73.Add("FREIGHT_TYPE_IN", 2).Direction = ParameterDirection.Input;
                    chargeBasis = Gridds.Tables[0].Columns[nColCnt + 2].Caption;
                    chargeBasis = chargeBasis.Substring(chargeBasis.Length - 1, 1);
                    _with73.Add("CHARGE_BASIS_IN", (!string.IsNullOrEmpty(chargeBasis) ? 0 : Convert.ToInt64(chargeBasis))).Direction = ParameterDirection.Input;
                    _with73.Add("PYMT_TYPE_IN", "").Direction = ParameterDirection.Input;
                    _with73.Add("SURCHARGE_IN", 1).Direction = ParameterDirection.Input;
                    _with73.Add("CHECK_ADVATOS_IN", "").Direction = ParameterDirection.Input;
                    //'Added By Koteshwari
                    _with73.Add("QUOTED_MIN_RATE_IN", "").Direction = ParameterDirection.Input;
                    _with73.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                    _with73.Add("ROE_IN", 1).Direction = ParameterDirection.Input;
                    _with73.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    /// For Air END
                    _with72.ExecuteNonQuery();
                    TranPk = Convert.ToInt64(_with72.Parameters["RETURN_VALUE"].Value);
                    if (arrMessage.Count > 0)
                    {
                        if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                        {
                            arrMessage.Add("All data saved successfully");
                        }
                        else
                        {
                            return arrMessage;
                        }
                    }
                }

                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Surcharge Save Kg "

        #region " Freight Transaction Save "

        #region " Logical Flow "

        //
        //
        //
        //

        #endregion " Logical Flow "

        /// <summary>
        /// Saves the FRT tran.
        /// </summary>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="RowNo">The row no.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <returns></returns>
        public ArrayList SaveFrtTran(DataSet Gridds, Int16 RowNo, long PkValue, OracleCommand SCM, string UserName)
        {
            Int32 nRowCnt = default(Int32);
            long TranPk = 0;
            arrMessage.Clear();
            try
            {
                var _with74 = SCM;
                _with74.CommandType = CommandType.StoredProcedure;
                for (nRowCnt = 0; nRowCnt <= Gridds.Tables[1].Rows.Count - 1; nRowCnt++)
                {
                    //If ((Gridds.Tables(0).Rows(RowNo).Item("PORT_MST_POL_FK") = Gridds.Tables(1).Rows(nRowCnt).Item("POLPK")) And (Gridds.Tables(0).Rows(RowNo).Item("PORT_MST_POD_FK") = Gridds.Tables(1).Rows(nRowCnt).Item("PODPK"))) Then
                    if (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" | Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "1")
                    {
                        _with74.CommandText = UserName + ".QUOTATION_GEN_AIR_TBL_PKG.QUOT_AIR_TRN_FREIGHT_TBL_INS";
                        var _with75 = _with74.Parameters;
                        _with75.Clear();
                        //QUOT_GEN_AIR_TRN_FK_IN()
                        _with75.Add("QUOT_GEN_AIR_TRN_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        // PkValue Can also be provided
                        //FREIGHT_ELEMENT_MST_FK_IN()
                        _with75.Add("FREIGHT_ELEMENT_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["FREIGHT_ELEMENT_MST_FK"]).Direction = ParameterDirection.Input;
                        //CURRENCY_MST_FK_IN()
                        _with75.Add("CURRENCY_MST_FK_IN", Gridds.Tables[1].Rows[nRowCnt]["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                        //MIN_AMOUNT_IN()
                        //.Add("MIN_AMOUNT_IN", _
                        //        Gridds.Tables(1).Rows(nRowCnt).Item("MIN_AMOUNT") _
                        //        ).Direction = ParameterDirection.Input
                        _with75.Add("MIN_AMOUNT_IN", (string.IsNullOrEmpty(Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"].ToString()) ? 0 : Gridds.Tables[1].Rows[nRowCnt]["MIN_AMOUNT"])).Direction = ParameterDirection.Input;
                        //'Added Koteshwari for Advatos  PTSID-JUN18
                        _with75.Add("CHECK_FOR_ALL_IN_RT_IN", (Gridds.Tables[1].Rows[nRowCnt]["SELECTED"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                        _with75.Add("CHECK_ADVATOS_IN", (Gridds.Tables[1].Rows[nRowCnt]["ADVATOS"] == "true" ? 1 : 0)).Direction = ParameterDirection.Input;
                        //'End
                        //RETURN_VALUE()
                        _with75.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;

                        _with74.ExecuteNonQuery();

                        TranPk = Convert.ToInt64(_with74.Parameters["RETURN_VALUE"].Value);
                        arrMessage = SaveSlabs(Gridds, Convert.ToInt16(nRowCnt), TranPk, SCM, UserName);
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }
                    //End If
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Freight Transaction Save "

        #region " Slabs Save "

        #region " Logical Flow "

        //
        //

        #endregion " Logical Flow "

        /// <summary>
        /// Saves the slabs.
        /// </summary>
        /// <param name="Gridds">The gridds.</param>
        /// <param name="nRowCnt">The n row count.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <param name="SCM">The SCM.</param>
        /// <param name="UserName">Name of the user.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        public ArrayList SaveSlabs(DataSet Gridds, Int16 nRowCnt, long PkValue, OracleCommand SCM, string UserName, int Group = 0)
        {
            Int32 nColCnt = default(Int32);
            long TranPk = 0;
            arrMessage.Clear();
            try
            {
                var _with76 = SCM;
                _with76.CommandType = CommandType.StoredProcedure;
                //For nColCnt = 9 To Gridds.Tables(1).Columns.Count - 3 Step 3
                if (Group == 1 | Group == 2)
                {
                    for (nColCnt = 11; nColCnt <= Gridds.Tables[1].Columns.Count - 6; nColCnt += 3)
                    {
                        _with76.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTE_AIR_BREAKPOINTS_INS";
                        var _with77 = _with76.Parameters;
                        _with77.Clear();
                        _with77.Add("QUOT_GEN_AIR_FRT_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        _with77.Add("AIRFREIGHT_SLABS_TBL_FK_IN", Convert.ToInt64(Gridds.Tables[1].Columns[nColCnt].Caption)).Direction = ParameterDirection.Input;
                        _with77.Add("APPROVED_RATE_IN", Gridds.Tables[1].Rows[nRowCnt][nColCnt]).Direction = ParameterDirection.Input;
                        _with77.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        _with76.ExecuteNonQuery();
                        TranPk = Convert.ToInt64(_with76.Parameters["RETURN_VALUE"].Value);
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }
                }
                else
                {
                    for (nColCnt = 11; nColCnt <= Gridds.Tables[1].Columns.Count - 3; nColCnt += 3)
                    {
                        _with76.CommandText = UserName + ".QUOTATION_MST_TBL_PKG.QUOTE_AIR_BREAKPOINTS_INS";
                        var _with78 = _with76.Parameters;
                        _with78.Clear();
                        _with78.Add("QUOT_GEN_AIR_FRT_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        _with78.Add("AIRFREIGHT_SLABS_TBL_FK_IN", Convert.ToInt64(Gridds.Tables[1].Columns[nColCnt].Caption)).Direction = ParameterDirection.Input;
                        _with78.Add("APPROVED_RATE_IN", Gridds.Tables[1].Rows[nRowCnt][nColCnt]).Direction = ParameterDirection.Input;
                        _with78.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        _with76.ExecuteNonQuery();
                        TranPk = Convert.ToInt64(_with76.Parameters["RETURN_VALUE"].Value);
                        if (arrMessage.Count > 0)
                        {
                            if (string.Compare(arrMessage[0].ToString(), "saved") > 0)
                            {
                                arrMessage.Add("All data saved successfully");
                            }
                            else
                            {
                                return arrMessage;
                            }
                        }
                    }
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
                return arrMessage;
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
                return arrMessage;
            }
        }

        #endregion " Slabs Save "

        #endregion "Save General"

        #endregion "Fetch UWG3 grid genral type "

        #region "Fetch Header "

        /// <summary>
        /// Fetch_s the main_ header.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet Fetch_Main_Header(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("SELECT          ");
            strquery.Append("  AIR.AIRLINE_NAME AIRLINE,");
            strquery.Append("  COMM_GRP.COMMODITY_GROUP_CODE COMMODITY_G,");
            strquery.Append("  QUOTT.VALID_FROM VALID_FROM,");
            strquery.Append("  QUOTT.VALID_TO VALID_TO,");
            strquery.Append("  POL_P.PORT_NAME POL,");
            strquery.Append("  POD_P.PORT_NAME POD,");
            strquery.Append("  QUOTT.QUOTE_DTL_PK QUOT_TRN_PK,");
            strquery.Append("  QUOT.HEADER_CONTENT HEADER,");
            strquery.Append("  QUOT.FOOTER_CONTENT FOOTER,");

            strquery.Append("  (SELECT E.EMPLOYEE_NAME SALESREP ");
            strquery.Append("  FROM quotation_mst_tbl B, EMPLOYEE_MST_TBL E");
            strquery.Append(" WHERE B.executive_mst_fk = E.EMPLOYEE_MST_PK ");
            strquery.Append("     AND b.quotation_mst_pk=" + QuotPk);
            strquery.Append("             ) ");
            strquery.Append(" as Salesexecutive");

            strquery.Append(" FROM          ");
            strquery.Append("  QUOTATION_MST_TBL QUOT,   ");
            strquery.Append("  QUOTATION_DTL_TBL QUOTT,            ");
            strquery.Append("  AIRLINE_MST_TBL AIR,      ");
            strquery.Append("  COMMODITY_GROUP_MST_TBL COMM_GRP,");
            strquery.Append("  PORT_MST_TBL POL_P,");
            strquery.Append("  PORT_MST_TBL POD_P");
            strquery.Append(" WHERE          ");
            strquery.Append("  QUOT.QUOTATION_MST_PK = QUOTT.QUOTATION_MST_FK");
            strquery.Append("  AND QUOTT.CARRIER_MST_FK = AIR.AIRLINE_MST_PK(+) AND QUOT.BIZ_TYPE = 1 ");
            strquery.Append("  AND QUOT.COMMODITY_GROUP_MST_FK = COMM_GRP.COMMODITY_GROUP_PK");
            strquery.Append("  AND QUOTT.PORT_MST_POL_FK = POL_P.PORT_MST_PK");
            strquery.Append("  AND QUOTT.PORT_MST_POD_FK = POD_P.PORT_MST_PK");
            strquery.Append("  and QUOT.QUOTATION_MST_PK =" + QuotPk);
            return ObjWk.GetDataSet(strquery.ToString());
        }

        #endregion "Fetch Header "

        #region "Fetch Freight Elements "

        /// <summary>
        /// Freights the element.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet FreightElement(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("SELECT          ");
            strquery.Append("  QUOTT.QUOTE_DTL_PK QUOT_TRN_PK,");
            strquery.Append("  FRT.FREIGHT_ELEMENT_NAME FRT_NAME,");
            strquery.Append("  CURR.CURRENCY_ID CURR_NAME,");
            strquery.Append("   decode(TRAN.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED,    ");
            strquery.Append("   decode(TRAN.CHECK_ADVATOS,1,'true','false')  ADVATOS,");
            strquery.Append("  TRAN.QUOTED_MIN_RATE MIN_AMT,");
            strquery.Append("  ASLAB.BREAKPOINT_ID,");
            strquery.Append("  BREAK.APPROVED_RATE B_RATE,");
            strquery.Append("  ASLAB.SEQUENCE_NO, ");
            strquery.Append("  DECODE(TRAN.PYMT_TYPE, 2, 'C', 'P') PYMT_TYPE, FRT.PREFERENCE ");
            strquery.Append(" FROM          ");
            strquery.Append("  QUOTATION_MST_TBL QUOT,   ");
            strquery.Append("  QUOTATION_DTL_TBL QUOTT,            ");
            strquery.Append("  QUOTATION_FREIGHT_TRN   TRAN,   ");
            strquery.Append("  QUOTE_AIR_BREAKPOINTS BREAK,");
            strquery.Append("  FREIGHT_ELEMENT_MST_TBL FRT,      ");
            strquery.Append("  CURRENCY_TYPE_MST_TBL CURR,");
            strquery.Append("  AIRFREIGHT_SLABS_TBL ASLAB");
            strquery.Append(" WHERE          ");
            strquery.Append("  QUOT.QUOTATION_MST_PK = QUOTT.QUOTATION_MST_FK");
            strquery.Append("  AND QUOTT.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
            strquery.Append("  AND tran.QUOTION_FREIGHT_PK = break.quot_gen_air_frt_fk");
            strquery.Append("  AND  TRAN.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK");
            strquery.Append("  AND  TRAN.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
            strquery.Append("  AND BREAK.AIRFREIGHT_SLABS_TBL_FK = ASLAB.AIRFREIGHT_SLABS_TBL_PK");
            strquery.Append("  and break.approved_rate>0");
            strquery.Append("  and QUOT.QUOTATION_MST_PK = " + QuotPk);
            strquery.Append("   ORDER BY ASLAB.SEQUENCE_NO ");
            return ObjWk.GetDataSet(strquery.ToString());
        }

        #endregion "Fetch Freight Elements "

        #region "Fetch Vatos Freight Elements "

        /// <summary>
        /// Vatoses the freight element.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet VatosFreightElement(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("SELECT          ");
            strquery.Append("  QUOTT.QUOTE_DTL_PK QUOT_TRN_PK,");
            strquery.Append("  FRT.FREIGHT_ELEMENT_NAME FRT_NAME,");
            strquery.Append("  CURR.CURRENCY_ID CURR_NAME,");
            strquery.Append("   decode(TRAN.CHECK_FOR_ALL_IN_RT,1,'true','false')  SELECTED,    ");
            strquery.Append("   decode(TRAN.CHECK_ADVATOS,1,'true','false')  ADVATOS,");
            strquery.Append("  TRAN.QUOTED_MIN_RATE MIN_AMT,");
            strquery.Append("  ASLAB.BREAKPOINT_ID,");
            strquery.Append("  BREAK.APPROVED_RATE B_RATE");
            strquery.Append(" FROM          ");
            strquery.Append("  QUOTATION_MST_TBL QUOT,   ");
            strquery.Append("  QUOTATION_DTL_TBL QUOTT,            ");
            strquery.Append("  QUOTATION_FREIGHT_TRN   TRAN,   ");
            strquery.Append("  QUOTE_AIR_BREAKPOINTS BREAK,");
            strquery.Append("  FREIGHT_ELEMENT_MST_TBL FRT,      ");
            strquery.Append("  CURRENCY_TYPE_MST_TBL CURR,");
            strquery.Append("  AIRFREIGHT_SLABS_TBL ASLAB");
            strquery.Append(" WHERE          ");
            strquery.Append("  QUOT.QUOTATION_MST_PK = QUOTT.QUOTATION_MST_FK");
            strquery.Append("  AND QUOTT.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
            strquery.Append("  AND tran.QUOTION_FREIGHT_PK = break.quot_gen_air_frt_fk");
            strquery.Append("  AND  TRAN.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK");
            strquery.Append("  AND  TRAN.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
            strquery.Append("  AND BREAK.AIRFREIGHT_SLABS_TBL_FK = ASLAB.AIRFREIGHT_SLABS_TBL_PK");
            strquery.Append("  and break.approved_rate>0");
            strquery.Append("  AND TRAN.CHECK_ADVATOS = 1");
            strquery.Append("  and QUOT.QUOTATION_MST_PK = " + QuotPk);
            strquery.Append("  order by B_RATE asc ");
            return ObjWk.GetDataSet(strquery.ToString());
        }

        #endregion "Fetch Vatos Freight Elements "

        #region "Fetch Surcharges"

        /// <summary>
        /// Surchargeses the specified quot pk.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet Surcharges(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("SELECT          ");
            strquery.Append("  QUOTT.QUOTE_DTL_PK QUOT_TRN_PK,");
            strquery.Append("  FRT.FREIGHT_ELEMENT_NAME FRT_NAME,");
            strquery.Append("  CURR.CURRENCY_ID CURR_NAME,");
            strquery.Append("  SURCHARG.APPROVED_RATE CHARGE,");
            strquery.Append("  decode(SURCHARG.CHARGE_BASIS, 1, '%', 2, 'Flat', 'KGs') CH_BASIS_ID ");
            strquery.Append(" FROM          ");
            strquery.Append("  QUOTATION_MST_TBL QUOT,   ");
            strquery.Append("  QUOTATION_DTL_TBL QUOTT,     ");
            strquery.Append("  QUOTATION_FREIGHT_TRN SURCHARG,");
            strquery.Append("  FREIGHT_ELEMENT_MST_TBL FRT,");
            strquery.Append("  CURRENCY_TYPE_MST_TBL CURR      ");
            strquery.Append(" WHERE          ");
            strquery.Append("  QUOT.QUOTATION_MST_PK = QUOTT.QUOTATION_MST_FK");
            strquery.Append("  AND QUOTT.QUOTE_DTL_PK = SURCHARG.QUOTATION_DTL_FK");
            strquery.Append("  AND SURCHARG.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK  ");
            strquery.Append("  AND SURCHARG.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
            strquery.Append("  AND SURCHARG.APPROVED_RATE>0");
            strquery.Append("  and QUOT.QUOTATION_MST_PK =" + QuotPk);

            return ObjWk.GetDataSet(strquery.ToString());
        }

        /// <summary>
        /// Gens the other charges.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet GenOtherCharges(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("Select QUOT.QUOTATION_MST_PK ,");
            strquery.Append("  QTR.QUOTE_DTL_PK FK,");
            //by thiyagarajan
            strquery.Append("  FRT.FREIGHT_ELEMENT_NAME FRT_NAME,");
            strquery.Append("  CURR.CURRENCY_ID CURR_NAME,");
            strquery.Append("  otf.BASIS_RATE BASIS_RATE,");
            strquery.Append("  otf.AMOUNT TARIFF_RATE,");
            strquery.Append(" otf.CHARGE_BASIS CH_BASIS,");
            strquery.Append("  decode(otf.CHARGE_BASIS, 1, '%', 2, 'Flat', 'KGs') CH_BASIS_ID ");
            strquery.Append("  from QUOTATION_OTHER_FREIGHT_TRN otf,");
            strquery.Append("  FREIGHT_ELEMENT_MST_TBL FRT,");
            strquery.Append("  CURRENCY_TYPE_MST_TBL CURR,");
            strquery.Append("  QUOTATION_MST_TBL QUOT,");
            strquery.Append(" QUOTATION_DTL_TBL QTR  ");
            strquery.Append("  where OTF.QUOTATION_DTL_FK = QTR.QUOTE_DTL_PK");
            strquery.Append("  AND OTF.FREIGHT_ELEMENT_MST_FK=FRT.FREIGHT_ELEMENT_MST_PK(+)");
            strquery.Append("  AND OTF.CURRENCY_MST_FK= CURR.CURRENCY_MST_PK(+) ");
            strquery.Append("  AND QTR.QUOTATION_MST_FK = QUOT.QUOTATION_MST_PK");
            strquery.Append("  and QUOT.QUOTATION_MST_PK =" + QuotPk);

            return ObjWk.GetDataSet(strquery.ToString());
        }

        #endregion "Fetch Surcharges"

        #region "Fetch Other Charges"

        /// <summary>
        /// Others the charges.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet OtherCharges(string QuotPk)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strquery = new StringBuilder();

            strquery.Append("SELECT          ");
            strquery.Append("  QUOTT.QUOTE_DTL_PK QUOT_TRN_PK,");
            strquery.Append("  FRT.FREIGHT_ELEMENT_NAME FRT_NAME,");
            strquery.Append("  CURR.CURRENCY_NAME CURR_NAME,");
            strquery.Append("  OTH.AMOUNT CHARGE,");
            strquery.Append("  OTH.CHARGE_BASIS BASIS");
            strquery.Append(" FROM          ");
            strquery.Append("  QUOTATION_MST_TBL QUOT,   ");
            strquery.Append("  QUOTATION_DTL_TBL QUOTT,     ");
            strquery.Append("  QUOTATION_OTHER_FREIGHT_TRN OTH,");
            strquery.Append("  FREIGHT_ELEMENT_MST_TBL FRT,");
            strquery.Append("  CURRENCY_TYPE_MST_TBL CURR      ");
            strquery.Append(" WHERE          ");
            strquery.Append("  QUOT.QUOTATION_MST_PK = QUOTT.QUOTATION_MST_FK");
            strquery.Append("  AND QUOTT.QUOTE_DTL_PK = OTH.QUOTATION_DTL_FK");
            strquery.Append("  AND OTH.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK  ");
            strquery.Append("  AND OTH.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
            strquery.Append("  AND OTH.AMOUNT>0");
            strquery.Append("  and QUOT.QUOTATION_MST_PK = " + QuotPk);

            return ObjWk.GetDataSet(strquery.ToString());
        }

        #endregion "Fetch Other Charges"

        #region "Fetch Header"

        /// <summary>
        /// Fetch_s the specific_header.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet Fetch_Specific_header(string QuotPk)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strQuery.Append("SELECT MAIN.QUOTATION_MST_PK QUOTATION_AIR_PK,");
                strQuery.Append("       TRAN.QUOTE_DTL_PK QUOTE_TRN_AIR_PK,");
                strQuery.Append("       PORTPOL.PORT_NAME POL_ID,");
                strQuery.Append("       PORTPOD.PORT_NAME POD_ID,");
                strQuery.Append("       AIR.AIRLINE_NAME AIR_ID,");
                strQuery.Append("       CMDTGRP.COMMODITY_GROUP_CODE COMM_ID,");
                strQuery.Append("       DECODE(SLB.BREAKPOINT_TYPE, 1, 'BP', 'ULD') SLAB_TYPE,");
                strQuery.Append("   MAIN.HEADER_CONTENT  HEADER,");
                strQuery.Append("   MAIN.FOOTER_CONTENT  FOOTER,");
                strQuery.Append("       TRAN.CHARGEABLE_WEIGHT CH_WT,");
                strQuery.Append("       DECODE(MAIN.PYMT_TYPE, 1, 'PREPAID', 2, 'COLLECT', 3,'FOREIGN') P_TYPE_ID,");
                strQuery.Append("       TRAN.FRT_WEIGHT FRT_WT ,");

                strQuery.Append("  (SELECT E.EMPLOYEE_NAME SALESREP ");
                strQuery.Append("  FROM quotation_mst_tbl B, EMPLOYEE_MST_TBL E");
                strQuery.Append(" WHERE B.executive_mst_fk = E.EMPLOYEE_MST_PK ");
                strQuery.Append("     AND b.quotation_mst_pk=" + QuotPk);
                strQuery.Append("             ) ");
                strQuery.Append(" as Salesexecutive");

                strQuery.Append("  FROM QUOTATION_MST_TBL    MAIN,");
                strQuery.Append("       QUOTATION_DTL_TBL    TRAN,");
                strQuery.Append("       AIRFREIGHT_SLABS_TBL SLB,");
                strQuery.Append("       PORT_MST_TBL         PORTPOL,");
                strQuery.Append("       PORT_MST_TBL         PORTPOD,");
                strQuery.Append("       AIRLINE_MST_TBL      AIR,");
                strQuery.Append("       COMMODITY_MST_TBL    CMDT,");
                strQuery.Append("       COMMODITY_GROUP_MST_TBL CMDTGRP");
                strQuery.Append(" WHERE MAIN.QUOTATION_MST_PK = TRAN.QUOTATION_MST_FK");
                strQuery.Append("   AND TRAN.SLAB_FK = SLB.AIRFREIGHT_SLABS_TBL_PK(+)");
                strQuery.Append("   AND TRAN.PORT_MST_POL_FK = PORTPOL.PORT_MST_PK");
                strQuery.Append("   AND TRAN.PORT_MST_POD_FK = PORTPOD.PORT_MST_PK");
                strQuery.Append("   AND TRAN.COMMODITY_MST_FK = CMDT.COMMODITY_MST_PK(+)");
                strQuery.Append("   AND TRAN.CARRIER_MST_FK = AIR.AIRLINE_MST_PK(+) AND MAIN.BIZ_TYPE= 1 ");
                strQuery.Append("   AND  MAIN.COMMODITY_GROUP_MST_FK=CMDTGRP.COMMODITY_GROUP_PK(+)");
                strQuery.Append("   AND MAIN.QUOTATION_MST_PK = " + QuotPk);

                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Header"

        #region "Fetch Frieght Elements "

        /// <summary>
        /// Fetch_s the freight_ specific.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <param name="BaseCurPk">The base current pk.</param>
        /// <param name="QuotationDate">The quotation date.</param>
        /// <returns></returns>
        public DataSet Fetch_Freight_Specific(string QuotPk, int BaseCurPk, string QuotationDate)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            try
            {
                strQuery.Append("  SELECT qta.QUOTATION_MST_FK PK,");
                strQuery.Append("         Qta.QUOTE_DTL_PK fk,");
                strQuery.Append("         FRT.FREIGHT_ELEMENT_ID FRT_ID,");
                strQuery.Append("         CUR.CURRENCY_ID CURR_ID,");
                strQuery.Append("         TRF.BASIS_RATE BASIS_RATE,");
                strQuery.Append("         TRF.TARIFF_RATE TARIFF_RATE,");
                strQuery.Append("         ROUND((SELECT GET_EX_RATE( TRF.CURRENCY_MST_FK, " + BaseCurPk + ",TO_DATE('" + QuotationDate + "',DATEFORMAT )) FROM DUAL),6) ROE,");
                strQuery.Append("         ROUND(TRF.QUOTED_RATE * (SELECT GET_EX_RATE(TRF.CURRENCY_MST_FK, " + BaseCurPk + ",TO_DATE('" + QuotationDate + "', DATEFORMAT))FROM DUAL),0) QUOTED_RATE,");
                strQuery.Append("         DECODE(TRF.CHARGE_BASIS, 1, '%', 2, 'FLAT', 'KGS') CH_BASIS_ID, ");
                strQuery.Append("         DECODE(TRF.PYMT_TYPE, 2, 'C', 'P') PYMT_TYPE ");
                strQuery.Append("    FROM QUOTATION_MST_TBL          QAT,");
                strQuery.Append("         QUOTATION_DTL_TBL          QTA    ,");
                strQuery.Append("         QUOTATION_FREIGHT_TRN TRF,");
                strQuery.Append("         FREIGHT_ELEMENT_MST_TBL    FRT,");
                strQuery.Append("         CURRENCY_TYPE_MST_TBL      CUR");
                strQuery.Append("   WHERE QTA.QUOTATION_MST_FK = QAT.QUOTATION_MST_PK");
                strQuery.Append("     AND TRF.QUOTATION_DTL_FK = QTA.QUOTE_DTL_PK");
                strQuery.Append("     AND TRF.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK(+)");
                strQuery.Append("     AND TRF.CURRENCY_MST_FK = CUR.CURRENCY_MST_PK(+)");
                strQuery.Append("     AND QAT.QUOTATION_MST_PK = " + QuotPk);
                strQuery.Append("     ORDER BY FRT.PREFERENCE ");

                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Frieght Elements "

        #region "Cargo Details "

        /// <summary>
        /// Fetch_s the cargo_ details.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet Fetch_Cargo_Details(string QuotPk)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                //strQuery.Append("" & vbCrLf)
                //strQuery.Append(" SELECT                                                    " & vbCrLf)
                //strQuery.Append("        CARGO_LENGTH                       LENGTH,             " & vbCrLf)
                //strQuery.Append("        CARGO_WIDTH                        WIDTH,              " & vbCrLf)
                //strQuery.Append("        CARGO_HEIGHT                       HEIGHT,             " & vbCrLf)
                //strQuery.Append("        CARGO_CUBE                         CUBE,               " & vbCrLf)
                //strQuery.Append("        CARGO_VOLUME_WT                    VOLWEIGHT,          " & vbCrLf)
                //strQuery.Append("        CARGO_ACTUAL_WT                    ACTWEIGHT,          " & vbCrLf)
                //strQuery.Append("        CARGO_DENSITY                      DENSITY,            " & vbCrLf)
                //strQuery.Append("        QUOT.QUOTATION_MST_PK               FK                  " & vbCrLf)
                //strQuery.Append("     FROM                                                      " & vbCrLf)
                //strQuery.Append("        QUOTATION_CARGO_CALC QACC,     " & vbCrLf)
                //strQuery.Append("        QUOTATION_MST_TBL QUOT, " & vbCrLf)
                //strQuery.Append("        QUOTATION_DTL_TBL QTR                          " & vbCrLf)
                //strQuery.Append("     WHERE  QTR.QUOTATION_MST_FK=QUOT.QUOTATION_MST_PK       " & vbCrLf)
                //strQuery.Append("     AND QACC.QUOTATION_DTL_FK=QTR.QUOTE_DTL_PK" & vbCrLf)
                //strQuery.Append("     AND QUOT.QUOTATION_MST_PK=" & QuotPk)
                //'  strQuery.Append("     AND QAT.QUOTATION_MST_PK = " & QuotPk)
                //strQuery.Append("" & vbCrLf)

                strQuery.Append("");
                strQuery.Append(" SELECT       ");
                strQuery.Append("        Qtr.Quote_dtl_Pk                    PK,                                               ");
                strQuery.Append("        QACC.CARGO_MEASUREMENT                 DIMENSION,");
                strQuery.Append("        QACC.CARGO_LENGTH                       LENGTH,             ");
                strQuery.Append("        QACC.CARGO_WIDTH                        WIDTH,              ");
                strQuery.Append("        QACC.CARGO_HEIGHT                       HEIGHT,             ");
                strQuery.Append("        QACC.CARGO_CUBE                         CUBE,               ");
                strQuery.Append("        QACC.CARGO_VOLUME_WT                    VOLWEIGHT,          ");
                strQuery.Append("        QACC.CARGO_ACTUAL_WT                    ACTWEIGHT,          ");
                strQuery.Append("        QACC.CARGO_NOP                          NOOFPIECES ");
                strQuery.Append("   FROM                                                      ");
                strQuery.Append("        QUOTATION_CARGO_CALC QACC,     ");
                strQuery.Append("        QUOTATION_MST_TBL QUOT, ");
                strQuery.Append("        QUOTATION_DTL_TBL QTR                          ");
                strQuery.Append("     WHERE  QTR.QUOTATION_MST_FK=QUOT.QUOTATION_MST_PK       ");
                strQuery.Append("     AND QACC.QUOTATION_DTL_FK=QTR.QUOTE_DTL_PK");
                strQuery.Append("     AND QUOT.QUOTATION_MST_PK=" + QuotPk);
                strQuery.Append("        ");

                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Cargo Details "

        #region "Fetch Other Charges"

        /// <summary>
        /// Fetch_s the other_ charges_ specific.
        /// </summary>
        /// <param name="QuotPk">The quot pk.</param>
        /// <returns></returns>
        public DataSet Fetch_Other_Charges_Specific(string QuotPk)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                //strQuery.Append("" & vbCrLf)
                //strQuery.Append("  SELECT OTF.QUOTATION_OTHER_FREIGHT_PK PK," & vbCrLf)
                //strQuery.Append("          QUOT.QUOTATION_MST_PK  FK," & vbCrLf)
                //strQuery.Append("         OTF.FREIGHT_ELEMENT_MST_FK FRT_FK," & vbCrLf)
                //strQuery.Append("         OTF.CURRENCY_MST_FK CURR_FK," & vbCrLf)
                //strQuery.Append("         OTF.BASIS_RATE BASIS_RATE," & vbCrLf)
                //strQuery.Append("         OTF.AMOUNT TARIFF_RATE," & vbCrLf)
                //strQuery.Append("         OTF.CHARGE_BASIS CH_BASIS," & vbCrLf)
                //strQuery.Append("         DECODE(OTF.CHARGE_BASIS, 1, '%', 2, 'FLAT', 'KGS') CH_BASIS_ID," & vbCrLf)
                //strQuery.Append("         FREIGHT_TYPE PYMT_TYPE" & vbCrLf)
                //strQuery.Append("    FROM QUOTATION_OTHER_FREIGHT_TRN OTF," & vbCrLf)
                //strQuery.Append("         QUOTATION_MST_TBL          QUOT," & vbCrLf)
                //strQuery.Append("         QUOTATION_DTL_TBL          QTR" & vbCrLf)
                //strQuery.Append("   WHERE QTR.QUOTATION_MST_FK = QUOT.QUOTATION_MST_PK" & vbCrLf)
                //strQuery.Append("     AND OTF.QUOTATION_DTL_FK = QTR.QUOTE_DTL_PK" & vbCrLf)
                //strQuery.Append("     AND QUOT.QUOTATION_MST_PK = " & QuotPk)
                strQuery.Append("SELECT QUOT.QUOTATION_MST_PK QUOTATION_AIR_PK,");
                //strQuery.Append("         OTF.QUOTATION_DTL_FK FG," & vbCrLf) ' by thiyagarajan
                strQuery.Append("         QTR.QUOTE_DTL_PK FG,");
                strQuery.Append("         FMT.FREIGHT_ELEMENT_NAME FRT_FK,");
                strQuery.Append("         CTMT.CURRENCY_ID CURR_FK,");
                strQuery.Append("         OTF.BASIS_RATE BASIS_RATE,");
                //strQuery.Append("          QTR.Chargeable_Weight," & vbCrLf)
                strQuery.Append("         OTF.AMOUNT TARIFF_RATE,");
                strQuery.Append("         DECODE(OTF.CHARGE_BASIS, 1, '%', 2, 'FLAT', 'KGS') CH_BASIS_ID,");
                strQuery.Append("          (AMOUNT  * QTR.Chargeable_Weight)RATE");
                strQuery.Append("   FROM  QUOTATION_OTHER_FREIGHT_TRN OTF,");
                strQuery.Append("         QUOTATION_MST_TBL          QUOT,");

                strQuery.Append("         QUOTATION_DTL_TBL          QTR,");
                strQuery.Append("         FREIGHT_ELEMENT_MST_TBL   FMT,");
                strQuery.Append("         CURRENCY_TYPE_MST_TBL   CTMT");
                strQuery.Append("   WHERE QTR.QUOTATION_MST_FK = QUOT.QUOTATION_MST_PK");
                strQuery.Append("     AND OTF.QUOTATION_DTL_FK = QTR.QUOTE_DTL_PK");
                strQuery.Append("     AND OTF.FREIGHT_ELEMENT_MST_FK=FMT.FREIGHT_ELEMENT_MST_PK(+)");
                strQuery.Append("     AND OTF.CURRENCY_MST_FK= CTMT.CURRENCY_MST_PK(+)");
                strQuery.Append("     AND QUOT.QUOTATION_MST_PK = " + QuotPk);

                //strQuery.Append("SELECT MAIN1.QUOTATION_SEA_PK," & vbCrLf)
                //strQuery.Append("       fcl_lcl.quote_trn_sea_pk," & vbCrLf)
                //strQuery.Append("       FRT3.FREIGHT_ELEMENT_NAME," & vbCrLf)
                //strQuery.Append("       CURR3.CURRENCY_ID," & vbCrLf)
                //strQuery.Append("       QUOT_OTHER.AMOUNT" & vbCrLf)
                //strQuery.Append("  FROM QUOTATION_SEA_TBL          MAIN1," & vbCrLf)
                //strQuery.Append("       QUOTATION_TRN_SEA_FCL_LCL  FCL_LCL," & vbCrLf)
                //strQuery.Append("       QUOTATION_TRN_SEA_OTH_CHRG QUOT_OTHER," & vbCrLf)
                //strQuery.Append("       FREIGHT_ELEMENT_MST_TBL    FRT3," & vbCrLf)
                //strQuery.Append("       CURRENCY_TYPE_MST_TBL      CURR3" & vbCrLf)
                //strQuery.Append(" WHERE FCL_LCL.QUOTATION_SEA_FK = MAIN1.QUOTATION_SEA_PK" & vbCrLf)
                //strQuery.Append("   AND QUOT_OTHER.QUOTATION_TRN_SEA_FK = FCL_LCL.QUOTE_TRN_SEA_PK" & vbCrLf)
                //strQuery.Append("   AND QUOT_OTHER.FREIGHT_ELEMENT_MST_FK = FRT3.FREIGHT_ELEMENT_MST_PK" & vbCrLf)
                //strQuery.Append("   AND QUOT_OTHER.CURRENCY_MST_FK = CURR3.CURRENCY_MST_PK" & vbCrLf)
                //strQuery.Append("   AND MAIN1.QUOTATION_SEA_PK = " & QuotPk)

                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Other Charges"

        #region "Get type and Fetch Pay Type"

        /// <summary>
        /// Get_s the type.
        /// </summary>
        /// <param name="pk">The pk.</param>
        /// <returns></returns>
        public int get_TYPE(string pk)
        {
            StringBuilder strQuery = new StringBuilder();
            OracleDataReader dr = null;
            try
            {
                strQuery.Append("SELECT quotation_type");
                strQuery.Append("FROM QUOTATION_MST_TBL AIR");
                strQuery.Append("WHERE AIR.QUOTATION_MST_PK =");
                strQuery.Append(pk);
                dr = (new WorkFlow()).GetDataReader(strQuery.ToString());
                while (dr.Read())
                {
                    return Convert.ToInt32(dr[0]);
                }
            }
            catch (Exception ex)
            {
                return 0;
            }
            finally
            {
                dr.Close();
            }
            return 0;
        }

        #endregion "Get type and Fetch Pay Type"

        #region "Get QuotFrom"

        /// <summary>
        /// Fetches the quot from.
        /// </summary>
        /// <param name="QuotPK">The quot pk.</param>
        /// <param name="QuoType">if set to <c>true</c> [quo type].</param>
        /// <returns></returns>
        public int FetchQuotFrom(int QuotPK, bool QuoType)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                if (QuoType == true)
                {
                    strSQL = " SELECT DISTINCT NVL(T.TRANS_REFERED_FROM,'7') FROM QUOTATION_DTL_TBL T WHERE T.QUOTATION_MST_FK = " + QuotPK;
                }
                else
                {
                    strSQL = "  SELECT DISTINCT nvl(QA.TRANS_REFERED_FROM,'7')  FROM QUOTATION_DTL_TBL QA WHERE QA.QUOTATION_MST_FK = " + QuotPK;
                }

                return Convert.ToInt32(objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Get QuotFrom"

        #region "Get Freight Details"

        /// <summary>
        /// Fetches the FRT query.
        /// </summary>
        /// <param name="trnPk">The TRN pk.</param>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="PODPK">The podpk.</param>
        /// <param name="group">The group.</param>
        /// <returns></returns>
        public object FetchFrtQuery(string trnPk = "0", string POLPK = "0", string PODPK = "0", int @group = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            if (@group == 0)
            {
                sb.Append("SELECT DISTINCT QTRN.PORT_MST_POL_FK POL_PK,");
                sb.Append("       QTRN.PORT_MST_POD_FK POD_PK,");
                sb.Append("       FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FREIGHT_ELEMENT_ID,");
                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       TRAN.CURRENCY_MST_FK,");
                sb.Append("       CURRENCY_ID,");
                sb.Append("       nvl(QTRN.carrier_mst_fk,0) as AIRLINE_MST_PK,");
                sb.Append("       DECODE(TRAN.CHECK_FOR_ALL_IN_RT, 1, 'true', 'false') SELECTED,");
                sb.Append("       DECODE(TRAN.CHECK_ADVATOS, 1, 'true', 'false') ADVATOS,");
                sb.Append("       QUOTED_MIN_RATE");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("       QUOTATION_DTL_TBL     QTRN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3)");
                sb.Append("  UNION");
                sb.Append("  SELECT DISTINCT POL.PORT_MST_PK POL_PK,");
                sb.Append("       POD.PORT_MST_PK POD_PK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_ID AS \"Frt. Ele.\',');");

                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       CURR.CURRENCY_MST_PK CURRENCY_MST_FK,");
                sb.Append("       CURR.CURRENCY_ID AS \"Curr.\',');");

                sb.Append("       amt.airline_mst_pk AS AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       0.00 AS MIN_AMOUNT");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,AIRLINE_MST_TBL         AMT");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.PORT_MST_PK IN( " + POLPK + ") AND POD.PORT_MST_PK IN( " + PODPK + ")))");
                sb.Append("   AND POL.BUSINESS_TYPE = 1");
                sb.Append("   AND POD.BUSINESS_TYPE = 1");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1");
                sb.Append("   AND FMT.CHARGE_TYPE <> 3");
                sb.Append("   AND FMT.BUSINESS_TYPE IN (1, 3)");
                sb.Append("   AND FMT.BY_DEFAULT = 1");
                sb.Append("   AND CURR.CURRENCY_MST_PK =" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "");
                sb.Append("AND FMT.FREIGHT_ELEMENT_MST_PK NOT IN");
                sb.Append("       (SELECT DISTINCT FREIGHT_ELEMENT_MST_FK");
                sb.Append("          FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("               QUOTATION_DTL_TBL     QTRN,");
                sb.Append("               FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("               CURRENCY_TYPE_MST_TBL");
                sb.Append("         WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("           AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("           AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("           AND CHARGE_TYPE <> 3");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append(" and amt.airline_mst_pk in ");
                sb.Append("       (SELECT DISTINCT QTRN.carrier_mst_fk");
                sb.Append("          FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("               QUOTATION_DTL_TBL     QTRN,");
                sb.Append("               FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("               CURRENCY_TYPE_MST_TBL");
                sb.Append("         WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("           AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("           AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("           AND CHARGE_TYPE <> 3");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append("   GROUP BY POL.PORT_MST_PK,");
                sb.Append("          POL.PORT_ID,");
                sb.Append("          POD.PORT_MST_PK,");
                sb.Append("          POD.PORT_ID,");
                sb.Append("          FMT.FREIGHT_ELEMENT_MST_PK,");
                sb.Append("          FMT.FREIGHT_ELEMENT_ID,");
                sb.Append("          CURR.CURRENCY_MST_PK,");
                sb.Append("          CURR.CURRENCY_ID,");
                sb.Append("          CURRENCY_NAME, AIRLINE_MST_PK,");
                sb.Append("          FREIGHT_ELEMENT_NAME");
                sb.Append("   HAVING POL.PORT_ID <> POD.PORT_ID");
                sb.Append("  ORDER BY FREIGHT_ELEMENT_ID");
            }
            else
            {
                sb.Append("SELECT DISTINCT QTRN.POL_GRP_FK,");
                sb.Append("       QTRN.POD_GRP_FK,");
                sb.Append("       FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FREIGHT_ELEMENT_ID,");
                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       TRAN.CURRENCY_MST_FK,");
                sb.Append("       CURRENCY_ID,");
                sb.Append("       nvl(QTRN.carrier_mst_fk,0) as AIRLINE_MST_PK,");
                sb.Append("       DECODE(TRAN.CHECK_FOR_ALL_IN_RT, 1, 'true', 'false') SELECTED,");
                sb.Append("       DECODE(TRAN.CHECK_ADVATOS, 1, 'true', 'false') ADVATOS,");
                sb.Append("       QUOTED_MIN_RATE");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("       QUOTATION_DTL_TBL     QTRN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3)");
                sb.Append("  UNION");
                sb.Append("  SELECT DISTINCT POL.port_grp_mst_pk POL_GRP_FK,");
                sb.Append("       POD.port_grp_mst_pk POD_GRP_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_ID AS \"Frt. Ele.\',');");

                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       CURR.CURRENCY_MST_PK CURRENCY_MST_FK,");
                sb.Append("       CURR.CURRENCY_ID AS \"Curr.\',');");

                sb.Append("       amt.airline_mst_pk AS AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       0.00 AS MIN_AMOUNT");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       PORT_GRP_MST_TBL            POL,");
                sb.Append("       PORT_GRP_MST_TBL            POD,");
                sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,AIRLINE_MST_TBL         AMT");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.port_grp_mst_pk IN( " + POLPK + ") AND POD.port_grp_mst_pk IN( " + PODPK + ")))");
                sb.Append("   AND POL.BIZ_TYPE = 1");
                sb.Append("   AND POD.BIZ_TYPE = 1");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1");
                sb.Append("   AND FMT.CHARGE_TYPE <> 3");
                sb.Append("   AND FMT.BUSINESS_TYPE IN (1, 3)");
                sb.Append("   AND FMT.BY_DEFAULT = 1");
                sb.Append("   AND CURR.CURRENCY_MST_PK =" + HttpContext.Current.Session["CURRENCY_MST_PK"] + "");
                sb.Append("AND FMT.FREIGHT_ELEMENT_MST_PK NOT IN");
                sb.Append("       (SELECT DISTINCT FREIGHT_ELEMENT_MST_FK");
                sb.Append("          FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("               QUOTATION_DTL_TBL     QTRN,");
                sb.Append("               FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("               CURRENCY_TYPE_MST_TBL");
                sb.Append("         WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("           AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("           AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("           AND CHARGE_TYPE <> 3");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append(" and amt.airline_mst_pk in ");
                sb.Append("       (SELECT DISTINCT QTRN.carrier_mst_fk");
                sb.Append("          FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("               QUOTATION_DTL_TBL     QTRN,");
                sb.Append("               FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("               CURRENCY_TYPE_MST_TBL");
                sb.Append("         WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("           AND QTRN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("           AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("           AND CHARGE_TYPE <> 3");
                sb.Append("           AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append("   GROUP BY POL.port_grp_mst_pk,");
                sb.Append("          POL.port_grp_id,");
                sb.Append("          POD.port_grp_mst_pk,");
                sb.Append("          POD.port_grp_id,");
                sb.Append("          FMT.FREIGHT_ELEMENT_MST_PK,");
                sb.Append("          FMT.FREIGHT_ELEMENT_ID,");
                sb.Append("          CURR.CURRENCY_MST_PK,");
                sb.Append("          CURR.CURRENCY_ID,");
                sb.Append("          CURRENCY_NAME, AIRLINE_MST_PK,");
                sb.Append("          FREIGHT_ELEMENT_NAME");
                sb.Append("   HAVING POL.port_grp_id <> POD.port_grp_id");
                sb.Append("  ORDER BY FREIGHT_ELEMENT_ID");
            }
            return sb.ToString();
        }

        /// <summary>
        /// Gets the grid details.
        /// </summary>
        /// <param name="trnPk">The TRN pk.</param>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="PODPK">The podpk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        public object GetGridDetails(string trnPk = "0", string POLPK = "0", string PODPK = "0", int Group = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            if (Group == 0)
            {
                sb.Append("SELECT DISTINCT QTRAN.PORT_MST_POL_FK POL_PK,");
                sb.Append("       QTRAN.PORT_MST_POD_FK POD_PK,");
                sb.Append("       TRAN.FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FREIGHT_ELEMENT_ID,");
                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       TRAN.CURRENCY_MST_FK,");
                sb.Append("       CURRENCY_ID,QTRAN.carrier_mst_fk as AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       APPROVED_RATE CURRENT_RATE,");
                sb.Append("       APPROVED_RATE REQUEST_RATE,");
                sb.Append("       APPROVED_RATE,");
                sb.Append("       TRAN.CHARGE_BASIS");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3)");
                sb.Append("  UNION ");
                sb.Append(" SELECT DISTINCT POL.PORT_MST_PK POL_PK,");
                sb.Append("       POD.PORT_MST_PK POD_PK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_ID AS \"Frt. Ele.\',');");

                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       CURR.CURRENCY_MST_PK CURRENCY_MST_FK,");
                sb.Append("       CURR.CURRENCY_ID AS \"Curr.\",NULL AS AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       0.00 AS MIN_AMOUNT,");
                sb.Append("       0.00 AS CURRENT_RATE,");
                sb.Append("       0.00 AS APPROVED_RATE,");
                sb.Append("       0 CHARGE_BASIS");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,AIRLINE_MST_TBL AMT");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.PORT_MST_PK IN( " + POLPK + " ) AND POD.PORT_MST_PK IN( " + PODPK + ")))");
                sb.Append("   AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1 ");
                sb.Append("   AND FMT.BUSINESS_TYPE IN (1, 3)");
                sb.Append("   AND FMT.CHARGE_TYPE <> 3");
                sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK NOT IN");
                sb.Append("(SELECT DISTINCT ");
                sb.Append("       TRAN.FREIGHT_ELEMENT_MST_FK ");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append("   AND AMT.AIRLINE_MST_PK IN ");
                sb.Append("(SELECT DISTINCT ");
                sb.Append("        QTRAN.carrier_mst_fk ");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append(" ORDER BY FREIGHT_ELEMENT_MST_FK");
            }
            else
            {
                sb.Append("SELECT DISTINCT QTRAN.POL_GRP_FK,");
                sb.Append("       QTRAN.POD_GRP_FK,");
                sb.Append("       TRAN.FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FREIGHT_ELEMENT_ID,");
                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       TRAN.CURRENCY_MST_FK,");
                sb.Append("       CURRENCY_ID,QTRAN.carrier_mst_fk as AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       APPROVED_RATE CURRENT_RATE,");
                sb.Append("       APPROVED_RATE REQUEST_RATE,");
                sb.Append("       APPROVED_RATE,");
                sb.Append("       TRAN.CHARGE_BASIS");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3)");
                sb.Append("  UNION ");
                sb.Append(" SELECT DISTINCT POL.PORT_GRP_MST_PK         POL_GRP_FK,");
                sb.Append("       POD.PORT_GRP_MST_PK         POD_GRP_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("       FMT.FREIGHT_ELEMENT_ID AS \"Frt. Ele.\',');");

                sb.Append("       FREIGHT_ELEMENT_NAME,");
                sb.Append("       CURR.CURRENCY_MST_PK CURRENCY_MST_FK,");
                sb.Append("       CURR.CURRENCY_ID AS \"Curr.\",NULL AS AIRLINE_MST_PK,");
                sb.Append("       'false' SELECTED,");
                sb.Append("       'false' ADVATOS,");
                sb.Append("       0.00 AS MIN_AMOUNT,");
                sb.Append("       0.00 AS CURRENT_RATE,");
                sb.Append("       0.00 AS APPROVED_RATE,");
                sb.Append("       0 CHARGE_BASIS");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       PORT_GRP_MST_TBL        POL,");
                sb.Append("       PORT_GRP_MST_TBL        POD,");
                sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,AIRLINE_MST_TBL AMT");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.PORT_GRP_MST_PK IN( " + POLPK + " ) AND POD.PORT_GRP_MST_PK IN( " + PODPK + ")))");
                sb.Append("   AND CURR.CURRENCY_MST_PK = " + HttpContext.Current.Session["CURRENCY_MST_PK"] + "");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1 ");
                sb.Append("   AND FMT.BUSINESS_TYPE IN (1, 3)");
                sb.Append("   AND FMT.CHARGE_TYPE <> 3");
                sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK NOT IN");
                sb.Append("(SELECT DISTINCT ");
                sb.Append("       TRAN.FREIGHT_ELEMENT_MST_FK ");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append("   AND AMT.AIRLINE_MST_PK IN ");
                sb.Append("(SELECT DISTINCT ");
                sb.Append("        QTRAN.carrier_mst_fk ");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN      TRAN,");
                sb.Append("       QUOTATION_DTL_TBL    QTRAN,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL,");
                sb.Append("       CURRENCY_TYPE_MST_TBL");
                sb.Append(" WHERE TRAN.QUOTATION_DTL_FK IN (" + trnPk + ")");
                sb.Append("   AND FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND CURRENCY_MST_FK = CURRENCY_MST_PK");
                sb.Append("   AND CHARGE_TYPE <> 3");
                sb.Append("   AND FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN (1, 3))");
                sb.Append(" ORDER BY FREIGHT_ELEMENT_MST_FK");
            }
            return sb.ToString();
        }

        /// <summary>
        /// Gets the slab details.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="PODPK">The podpk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        public object GetSlabDetails(string FreightPks = "0", string POLPK = "0", string PODPK = "0", int Group = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            if (Group == 0)
            {
                sb.Append("SELECT DISTINCT QTRAN.PORT_MST_POL_FK POLPK,");
                sb.Append("                QTRAN.PORT_MST_POD_FK PODPK,");
                sb.Append("                TRAN.FREIGHT_ELEMENT_MST_FK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("                AIRFREIGHT_SLABS_TBL_PK,");
                sb.Append("                BREAKPOINT_ID,");
                sb.Append("                BREAKPOINT_DESC,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) CURRENT_RATE,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) REQUEST_RATE,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) APPROVED_RATE");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("       QUOTATION_DTL_TBL     QTRAN,");
                sb.Append("       QUOTE_AIR_BREAKPOINTS    BPNT,");
                sb.Append("       AIRFREIGHT_SLABS_TBL");
                sb.Append("  WHERE TRAN.quotation_dtl_fk IN (" + FreightPks + ")");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND BPNT.QUOT_GEN_AIR_FRT_FK = TRAN.QUOTION_FREIGHT_PK");
                sb.Append("   AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND BPNT.AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK");
                sb.Append("  UNION  ");
                sb.Append(" SELECT DISTINCT POL.PORT_MST_PK POLPK,");
                sb.Append("                POD.PORT_MST_PK PODPK,");
                sb.Append("                FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("                AIR.AIRFREIGHT_SLABS_TBL_PK,");
                sb.Append("                AIR.BREAKPOINT_ID,");
                sb.Append("                AIR.BREAKPOINT_DESC,");
                sb.Append("                0  CURRENT_RATE,");
                sb.Append("                0  REQUEST_RATE,");
                sb.Append("                0  APPROVED_RATE");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       AIRFREIGHT_SLABS_TBL    AIR,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.PORT_MST_PK IN( " + POLPK + " ) AND POD.PORT_MST_PK IN( " + PODPK + ")))");
                sb.Append("   AND AIR.ACTIVE_FLAG = 1");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1");
                sb.Append("    ORDER BY FREIGHT_ELEMENT_MST_FK, AIRFREIGHT_SLABS_TBL_PK");
            }
            else
            {
                sb.Append("SELECT DISTINCT QTRAN.POL_GRP_FK,");
                sb.Append("                QTRAN.POD_GRP_FK,");
                sb.Append("                TRAN.FREIGHT_ELEMENT_MST_FK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("                AIRFREIGHT_SLABS_TBL_PK,");
                sb.Append("                BREAKPOINT_ID,");
                sb.Append("                BREAKPOINT_DESC,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) CURRENT_RATE,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) REQUEST_RATE,");
                sb.Append("                NVL(BPNT.APPROVED_RATE, 0) APPROVED_RATE");
                sb.Append("  FROM QUOTATION_FREIGHT_TRN TRAN,");
                sb.Append("       QUOTATION_DTL_TBL     QTRAN,");
                sb.Append("       QUOTE_AIR_BREAKPOINTS    BPNT,");
                sb.Append("       AIRFREIGHT_SLABS_TBL");
                sb.Append("  WHERE TRAN.quotation_dtl_fk IN (" + FreightPks + ")");
                sb.Append("   AND QTRAN.QUOTE_DTL_PK = TRAN.QUOTATION_DTL_FK");
                sb.Append("   AND BPNT.QUOT_GEN_AIR_FRT_FK = TRAN.QUOTION_FREIGHT_PK");
                sb.Append("   AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1");
                sb.Append("   AND BPNT.AIRFREIGHT_SLABS_TBL_FK = AIRFREIGHT_SLABS_TBL_PK");
                sb.Append("  UNION  ");
                sb.Append(" SELECT DISTINCT POL.PORT_GRP_MST_PK POL_GRP_FK,");
                sb.Append("                POD.PORT_GRP_MST_PK POD_GRP_FK,");
                sb.Append("                FMT.FREIGHT_ELEMENT_MST_PK FREIGHT_ELEMENT_MST_FK,");
                sb.Append("                AIR.AIRFREIGHT_SLABS_TBL_PK,");
                sb.Append("                AIR.BREAKPOINT_ID,");
                sb.Append("                AIR.BREAKPOINT_DESC,");
                sb.Append("                0  CURRENT_RATE,");
                sb.Append("                0  REQUEST_RATE,");
                sb.Append("                0  APPROVED_RATE");
                sb.Append("  FROM FREIGHT_ELEMENT_MST_TBL FMT,");
                sb.Append("       AIRFREIGHT_SLABS_TBL    AIR,");
                sb.Append("       PORT_GRP_MST_TBL            POL,");
                sb.Append("       PORT_GRP_MST_TBL            POD");
                sb.Append(" WHERE (1 = 1)");
                sb.Append("   AND ((POL.PORT_GRP_MST_PK IN( " + POLPK + " ) AND POD.PORT_GRP_MST_PK IN( " + PODPK + ")))");
                sb.Append("   AND AIR.ACTIVE_FLAG = 1");
                sb.Append("   AND FMT.ACTIVE_FLAG = 1");
                sb.Append("    ORDER BY FREIGHT_ELEMENT_MST_FK, AIRFREIGHT_SLABS_TBL_PK");
            }
            return sb.ToString();
        }

        #endregion "Get Freight Details"

        #region "GetPLRPFDTransporterName"

        //'Added By Sushama
        /// <summary>
        /// Gets the name of the PLRPFD transporter.
        /// </summary>
        /// <param name="PLRPK">The PLRPK.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="PLRPFDflag">The PLRPF dflag.</param>
        /// <returns></returns>
        public string GetPLRPFDTransporterName(string PLRPK, string CargoType, string PLRPFDflag)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            if (PLRPFDflag == "TRANSPORTER")
            {
                sb.Append("   SELECT V.VENDOR_NAME FROM VENDOR_MST_TBL V ");
                sb.Append("   WHERE V.VENDOR_MST_PK = " + PLRPK);
            }
            else
            {
                //'FCL
                if (CargoType == "1")
                {
                    sb.Append("   SELECT P.PORT_NAME FROM PORT_MST_TBL P ");
                    sb.Append("   WHERE P.PORT_MST_PK = " + PLRPK);
                }
                else
                {
                    sb.Append("   SELECT P.PLACE_NAME FROM PLACE_MST_TBL P ");
                    sb.Append("   WHERE P.PLACE_PK = " + PLRPK);
                }
            }
            try
            {
                return objWF.ExecuteScaler(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw;
            }
        }

        #endregion "GetPLRPFDTransporterName"

        #endregion "AIR Related all procedures and functions"

        #region "Fecth Local Charges"

        /// <summary>
        /// Fetches the local CHRGS.
        /// </summary>
        /// <param name="POLPK">The polpk.</param>
        /// <param name="PODPK">The podpk.</param>
        /// <param name="CommGrp_FK">The comm GRP_ fk.</param>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="QuotDt">The quot dt.</param>
        /// <param name="CargoType">Type of the cargo.</param>
        /// <param name="Quotation_Mst_Fk">The quotation_ MST_ fk.</param>
        /// <param name="QUOT_TYPE">Type of the quo t_.</param>
        /// <param name="FROM_FLAG">The fro m_ flag.</param>
        /// <param name="Booking_Mst_Fk">The booking_ MST_ fk.</param>
        /// <returns></returns>
        public DataSet FetchLocalChrgs(long POLPK, long PODPK, int CommGrp_FK, int BizType, System.DateTime QuotDt, int CargoType = 0, long Quotation_Mst_Fk = 0, int QUOT_TYPE = 0, int FROM_FLAG = 1, int Booking_Mst_Fk = 0)
        {
            //FROM_FLAG:1 for Quotation(Default) and 2 for Booking
            WorkFlow objWF = new WorkFlow();
            try
            {
                objWF.MyCommand.Parameters.Clear();
                var _with79 = objWF.MyCommand.Parameters;
                _with79.Add("QUOTATION_MST_FK_IN", Quotation_Mst_Fk).Direction = ParameterDirection.Input;
                _with79.Add("BOOKING_MST_FK_IN", Booking_Mst_Fk).Direction = ParameterDirection.Input;
                _with79.Add("POL_PK_IN", POLPK).Direction = ParameterDirection.Input;
                _with79.Add("POD_PK_IN", PODPK).Direction = ParameterDirection.Input;
                _with79.Add("COMM_GRP_FK_IN", CommGrp_FK).Direction = ParameterDirection.Input;
                _with79.Add("COMMODITY_MST_FK_IN", "").Direction = ParameterDirection.Input;
                _with79.Add("CARGO_TYPE_IN", CargoType).Direction = ParameterDirection.Input;
                _with79.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with79.Add("QUOTATION_DT_IN", QuotDt).Direction = ParameterDirection.Input;
                //'
                _with79.Add("CURRENCY_MST_FK_IN", HttpContext.Current.Session["CURRENCY_MST_PK"]).Direction = ParameterDirection.Input;
                _with79.Add("QUOT_TYPE_IN", QUOT_TYPE).Direction = ParameterDirection.Input;
                _with79.Add("FROM_FLAG_IN", (FROM_FLAG < 1 ? 1 : FROM_FLAG)).Direction = ParameterDirection.Input;
                _with79.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                return objWF.GetDataSet("QUOTATION_LOCAL_CHRG_PKG", "FETCH_LOCAL_CHARGE");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }

        /// <summary>
        /// Fetches the dummy grid.
        /// </summary>
        /// <returns></returns>
        public DataSet FetchDummyGrid()
        {
            WorkFlow objWF = new WorkFlow();
            string strQuery = "SELECT '' COL1, '' COL2, '' COL3 FROM DUAL WHERE 1=2  ";
            try
            {
                return objWF.GetDataSet(strQuery);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Gets the name of the port.
        /// </summary>
        /// <param name="PortPK">The port pk.</param>
        /// <returns></returns>
        public string GetPortName(long PortPK)
        {
            WorkFlow objWF = new WorkFlow();
            string strQuery = "SELECT PMT.PORT_NAME FROM PORT_MST_TBL PMT WHERE PMT.PORT_MST_PK =" + PortPK;
            try
            {
                return Convert.ToString(objWF.ExecuteScaler(strQuery));
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Gets the name of the comm GRP.
        /// </summary>
        /// <param name="CommGrpFK">The comm GRP fk.</param>
        /// <returns></returns>
        public string GetCommGrpName(long CommGrpFK)
        {
            WorkFlow objWF = new WorkFlow();
            string strQuery = "SELECT  G.COMMODITY_GROUP_CODE FROM COMMODITY_GROUP_MST_TBL G WHERE G.COMMODITY_GROUP_PK=" + CommGrpFK;
            try
            {
                return Convert.ToString(objWF.ExecuteScaler(strQuery));
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Gets the currency.
        /// </summary>
        /// <param name="BaseCurrencyPk">The base currency pk.</param>
        /// <returns></returns>
        public string GetCurrency(long BaseCurrencyPk)
        {
            WorkFlow objWF = new WorkFlow();
            string strQuery = "SELECT CTMT.CURRENCY_ID FROM CURRENCY_TYPE_MST_TBL CTMT WHERE CTMT.CURRENCY_MST_PK=" + BaseCurrencyPk;
            try
            {
                return Convert.ToString(objWF.ExecuteScaler(strQuery));
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
            }
        }

        #endregion "Fecth Local Charges"

        /// <summary>
        /// Fetches the mail details.
        /// </summary>
        /// <param name="lngPkValue">The LNG pk value.</param>
        /// <param name="PkValue">The pk value.</param>
        /// <returns></returns>
        public DataSet FetchMailDetails(long lngPkValue = 0, long PkValue = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT AGT.AGENT_MST_PK USER_MST_PK,");
            sb.Append("       AGT.AGENT_NAME USER_NAME,");
            sb.Append("       C.CUSTOMER_NAME,");
            sb.Append("       AGD.ADM_EMAIL_ID EMAIL_ID,");
            sb.Append("       U.USER_ID");
            sb.Append("  FROM QUOTATION_MST_TBL     Q,");
            sb.Append("       BOOKING_MST_TBL       B,");
            sb.Append("       BOOKING_TRN           BT,");
            sb.Append("       QUOTATION_DTL_TBL     QT,");
            sb.Append("       AGENT_MST_TBL         AGT,");
            sb.Append("       CUSTOMER_MST_TBL      C,");
            sb.Append("       AGENT_CONTACT_DTLS    AGD,");
            sb.Append("       USER_MST_TBL          U");
            sb.Append(" WHERE QT.QUOTATION_MST_FK = Q.QUOTATION_MST_PK");
            sb.Append("  AND BT.BOOKING_MST_FK = B.BOOKING_MST_PK(+)");
            sb.Append("   AND BT.TRANS_REF_NO(+) = Q.QUOTATION_REF_NO");
            sb.Append("   AND Q.TARIFF_AGENT_MST_FK = AGT.AGENT_MST_PK");
            sb.Append("   AND AGD.AGENT_MST_FK = AGT.AGENT_MST_PK");
            sb.Append("   AND Q.THIRD_PARTY_FRTPAYER_FK = C.CUSTOMER_MST_PK");
            sb.Append("   AND Q.CREATED_BY_FK = U.USER_MST_PK");
            if (lngPkValue > 0)
            {
                sb.Append("   AND Q.QUOTATION_MST_PK = " + lngPkValue);
            }
            if (PkValue > 0)
            {
                sb.Append("   AND B.BOOKING_MST_PK = " + PkValue);
            }
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                throw sqlExp;
            }
            catch (Exception exp)
            {
                throw exp;
            }
            return new DataSet();
        }

        #region " SRR Sea Query."

        /// <summary>
        /// SRRs the query sea.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="SRRNr">The SRR nr.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPKs">The oper p ks.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string SRRQuerySea(bool forFCL = true, string SRRNr = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPKs = "", int Group = 0)
        {
            try
            {
                string strSQL = null;
                string exchQueryFCL = null;
                string exchQueryLCL = null;
                if (Group == 0)
                {
                    if (forFCL)
                    {
                        exchQueryFCL = " NVL(( Case WHEN MAIN2.STATUS <> 1 Then     " + "            tran2.requested_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "         )* get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate) ,0 ) + " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)       from  srr_trn_sea_tbl t2,                                    srr_sur_chrg_sea_tbl f2                                               where t2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK  and                        t2.SRR_TRN_SEA_PK  = f2.SRR_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                 ";

                        exchQueryFCL = exchQueryFCL + "    )    +                                                                      ( Select NVL(Sum(NVL(FCL_REQ_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                        TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5,";

                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL cc5            where cc5.CONTAINER_TYPE_MST_FK = tran2.CONTAINER_TYPE_MST_FK and                   mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK       AND                   cc5.TARIFF_TRN_SEA_FK     = tt5.TARIFF_TRN_SEA_PK        AND                   tt5.PORT_MST_POL_FK       = tran2.PORT_MST_POL_FK        AND                   tt5.PORT_MST_POD_FK       = tran2.PORT_MST_POD_FK        AND                                      tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                                      tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 1                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from SRR_TRN_SEA_TBL tt2, srr_SUR_CHRG_SEA_TBL ff2 where                     tt2.srr_TRN_SEA_PK  = tran2.srr_TRN_SEA_PK and                     tt2.srr_TRN_SEA_PK  = ff2.SRR_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";
                    }
                    else
                    {
                        exchQueryLCL = "   ( Case  WHEN MAIN2.STATUS <> 1 Then       " + "            tran2.requested_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "      ) +                                                          " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                     from  SRR_TRN_SEA_TBL t2,                                    SRR_SUR_CHRG_SEA_TBL f2                                               where t2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK and                        t2.SRR_TRN_SEA_PK  = f2.SRR_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                     )    +                                                                      ( Select NVL(Sum(NVL(LCL_TARIFF_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                     TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5                                                  where                                                                                mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK     AND                   tt5.PORT_MST_POL_FK       = tran2.PORT_MST_POL_FK        AND                   tt5.PORT_MST_POD_FK       = tran2.PORT_MST_POD_FK        AND                   tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                   tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 2                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from SRR_TRN_SEA_TBL tt2, srr_SUR_CHRG_SEA_TBL ff2 where                     tt2.srr_TRN_SEA_PK  = tran2.srr_TRN_SEA_PK and                     tt2.srr_TRN_SEA_PK  = ff2.SRR_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                ";
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER       FROM(Select      DISTINCT                                                  main2.srr_sea_pk                     PK,                   " + SRC(SourceType.SRR) + "      TYPE,                    main2.srr_ref_no                          REF_NO,                  main2.srr_ref_no                          REFNO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,               tran2.PORT_MST_POL_FK                      POL_PK,                  portpol2.PORT_ID                           POL_ID,                  tran2.PORT_MST_POD_FK                      POD_PK,                  portpod2.PORT_ID                           POD_ID,                  main2.OPERATOR_MST_FK                      OPER_PK,                 opr2.OPERATOR_ID                           OPER_ID,                 opr2.OPERATOR_NAME                         OPER_NAME,               tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                 cntr2.CONTAINER_TYPE_MST_ID                CNTR_ID,                 tran2.EXPECTED_VOLUME                      QUANTITY,                main2.COMMODITY_MST_FK                     COMM_PK,                 NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                 ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,           ROUND(NVL(" + exchQueryFCL + ",0),2)                OPERATOR_RATE,           NULL                                       TARIFF,                  NULL                                       NET,                     'false'                                    SELECTED,              " + SourceType.SRR + "          PRIORITYORDER,cntr2.PREFERENCES          from                                                                 srr_sea_tbl              main2,                               srr_trn_sea_tbl          tran2,                               PORT_MST_TBL                   portpol2,                            PORT_MST_TBL                   portpod2,                            OPERATOR_MST_TBL               opr2,                                CONTAINER_TYPE_MST_TBL         cntr2,                               COMMODITY_MST_TBL              cmdt2                              where                                                                            main2.srr_sea_pk      = tran2.srr_sea_fk                   AND    main2.CARGO_TYPE            = 1  and  main2.active=1                  AND    tran2.PORT_MST_POL_FK       = portpol2.PORT_MST_PK(+)                  AND    tran2.PORT_MST_POD_FK       = portpod2.PORT_MST_PK(+)                  AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                  AND    tran2.CONTAINER_TYPE_MST_FK = cntr2.CONTAINER_TYPE_MST_PK(+)           AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(SRRNr) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                           FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(SRRNr) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        strSQL = strSQL + "   ORDER BY Q.PK DESC,Q.PREFERENCES ";
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                      main2.SRR_SEA_PK                     PK,                    " + SRC(SourceType.SRR) + "      TYPE,                     main2.SRR_REF_NO                          REF_NO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran2.PORT_MST_POL_FK                      POL_PK,                   portpol2.PORT_ID                           POL_ID,                   tran2.PORT_MST_POD_FK                      POD_PK,                   portpod2.PORT_ID                           POD_ID,                   main2.OPERATOR_MST_FK                      OPER_PK,                  opr2.OPERATOR_ID                           OPER_ID,                  opr2.OPERATOR_NAME                         OPER_NAME,                main2.COMMODITY_MST_FK                     COMM_PK,                  NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                  tran2.LCL_BASIS                            LCL_BASIS,                NVL(dim2.DIMENTION_ID,'')                  DIMENTION_ID,             0                                          WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + exchQueryLCL + ",0),2)                OPERATOR_RATE,            " + SourceType.SRR + "        PRIORITYORDER            from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                PORT_MST_TBL                   portpol2,                             PORT_MST_TBL                   portpod2,                             OPERATOR_MST_TBL               opr2,                                 COMMODITY_MST_TBL              cmdt2,                                DIMENTION_UNIT_MST_TBL         dim2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                  AND    main2.CARGO_TYPE            = 2                                         AND    tran2.PORT_MST_POL_FK       = portpol2.PORT_MST_PK(+)                   AND    tran2.PORT_MST_POD_FK       = portpod2.PORT_MST_PK(+)                   AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                   AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                 AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    tran2.LCL_BASIS             = dim2.DIMENTION_UNIT_MST_PK(+)        ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                       ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS ,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                      ";
                        }
                        strSQL = strSQL + "    AND    (main2.CUSTOMER_MST_FK       = " + Convert.ToString(SRRNr) + "                      OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(SRRNr) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            ORDER BY PK DESC ";
                    }
                }
                else
                {
                    //port group option
                    if (forFCL)
                    {
                        exchQueryFCL = " NVL(( Case WHEN MAIN2.STATUS <> 1 Then     " + "            tran2.requested_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "         )* get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate) ,0 ) + " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)       from  SRR_TRN_SEA_TBL t2,                                    SRR_SUR_CHRG_SEA_TBL f2                                               where t2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK  and                        t2.SRR_TRN_SEA_PK  = f2.SRR_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                 ";

                        exchQueryFCL = exchQueryFCL + "    )    +                                                                      ( Select NVL(Sum(NVL(FCL_REQ_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                        TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5,";

                        exchQueryFCL = exchQueryFCL + " TARIFF_TRN_SEA_CONT_DTL cc5            where cc5.CONTAINER_TYPE_MST_FK = tran2.CONTAINER_TYPE_MST_FK and                   mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK       AND                   cc5.TARIFF_TRN_SEA_FK     = tt5.TARIFF_TRN_SEA_PK        AND                   tt5.pol_grp_fk       = tran2.pol_grp_fk        AND                   tt5.pod_grp_fk       = tran2.pod_grp_fk        AND                                      tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                                      tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 1                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from SRR_TRN_SEA_TBL tt2, SRR_SUR_CHRG_SEA_TBL ff2 where                     tt2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK and                     tt2.SRR_TRN_SEA_PK  = ff2.SRR_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";
                    }
                    else
                    {
                        exchQueryLCL = "   ( Case  WHEN MAIN2.STATUS <> 1 Then       " + "            tran2.requested_BOF_RATE                     else        " + "            tran2.APPROVED_BOF_RATE End                            " + "      ) +                                                          " + " ( Select nvl(Sum(NVL(APP_SURCHARGE_AMT * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0)),0)                     from  SRR_TRN_SEA_TBL t2,                                    SRR_SUR_CHRG_SEA_TBL f2                                               where t2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK and                        t2.SRR_TRN_SEA_PK  = f2.SRR_TRN_SEA_FK and                         f2.CHECK_FOR_ALL_IN_RT   = 1                                     )    +                                                                      ( Select NVL(Sum(NVL(LCL_TARIFF_RATE * get_ex_rate(tran2.currency_mst_fk," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",sysdate),0 ) ),0) from                     TARIFF_TRN_SEA_FCL_LCL tt5,                               TARIFF_MAIN_SEA_TBL mm5                                                  where                                                                                mm5.TARIFF_MAIN_SEA_PK    = tt5.TARIFF_MAIN_SEA_FK     AND                   tt5.pol_grp_fk       = tran2.pol_grp_fk        AND                   tt5.pod_grp_fk       = tran2.pod_grp_fk        AND                   tt5.CHECK_FOR_ALL_IN_RT   = 1                            AND                   tran2.SUBJECT_TO_SURCHG_CHG = 1                          AND                   mm5.OPERATOR_MST_FK       = main2.OPERATOR_MST_FK        AND                   mm5.CARGO_TYPE            = 2                            AND                   mm5.ACTIVE                = 1                            AND                   mm5.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + " AND                   ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tt5.VALID_FROM   AND   NVL(tt5.VALID_TO,NULL_DATE_FORMAT)   AND                   tt5.FREIGHT_ELEMENT_MST_FK not in                                                ( Select FREIGHT_ELEMENT_MST_FK                                                   from SRR_TRN_SEA_TBL tt2, SRR_SUR_CHRG_SEA_TBL ff2 where                     tt2.SRR_TRN_SEA_PK  = tran2.SRR_TRN_SEA_PK and                     tt2.SRR_TRN_SEA_PK  = ff2.SRR_TRN_SEA_FK and                       ff2.CHECK_FOR_ALL_IN_RT   = 1                                          )                                                                     )                                                                            ";
                    }
                    if (forFCL)
                    {
                        strSQL = "  SELECT Q.PK,     Q.TYPE,      Q.REF_NO,      Q.REFNO,      Q.SHIP_DATE,      Q.POL_PK,      Q.POL_ID,      Q.POD_PK,      Q.POD_ID,      Q.OPER_PK,      Q.OPER_ID,      Q.OPER_NAME,      Q.CNTR_PK,      Q.CNTR_ID,      Q.QUANTITY,      Q.COMM_PK,      Q.COMM_ID,      Q.ALL_IN_TARIFF,      Q.OPERATOR_RATE,      Q.TARIFF,      Q.NET,      Q.SELECTED,      Q.PRIORITYORDER       FROM(Select      DISTINCT                                                  main2.SRR_SEA_PK                     PK,                   " + SRC(SourceType.SRR) + "      TYPE,                    main2.SRR_REF_NO                          REF_NO,                  main2.SRR_REF_NO                          REFNO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,               tran2.pol_grp_fk                      POL_PK,                  portpol2.port_grp_id                           POL_ID,                  tran2.pod_grp_fk                      POD_PK,                  portpod2.port_grp_id                           POD_ID,                  main2.OPERATOR_MST_FK                      OPER_PK,                 opr2.OPERATOR_ID                           OPER_ID,                 opr2.OPERATOR_NAME                         OPER_NAME,               tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                 cntr2.CONTAINER_TYPE_MST_ID                CNTR_ID,                 tran2.EXPECTED_VOLUME                      QUANTITY,                main2.COMMODITY_MST_FK                     COMM_PK,                 NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                 ROUND(NVL(" + exchQueryFCL + ",0),2)                ALL_IN_TARIFF,           ROUND(NVL(" + exchQueryFCL + ",0),2)                OPERATOR_RATE,           NULL                                       TARIFF,                  NULL                                       NET,                     'false'                                    SELECTED,              " + SourceType.SRR + "          PRIORITYORDER,cntr2.PREFERENCES          from                                                                 SRR_SEA_TBL              main2,                               SRR_TRN_SEA_TBL          tran2,                               port_grp_mst_tbl                   portpol2,                            port_grp_mst_tbl                   portpod2,                            OPERATOR_MST_TBL               opr2,                                CONTAINER_TYPE_MST_TBL         cntr2,                               COMMODITY_MST_TBL              cmdt2                              where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                   AND    main2.CARGO_TYPE            = 1  and  main2.active=1                  AND    tran2.pol_grp_fk       = portpol2.port_grp_mst_pk(+)                  AND    tran2.pod_grp_fk       = portpod2.port_grp_mst_pk(+)                  AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                  AND    tran2.CONTAINER_TYPE_MST_FK = cntr2.CONTAINER_TYPE_MST_PK(+)           AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main2.CUSTOMER_MST_FK       =  " + Convert.ToString(SRRNr) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(SRRNr) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                            ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ))Q                        ";
                        }
                        strSQL = strSQL + "   ORDER BY Q.PK DESC,Q.PREFERENCES ";
                    }
                    else
                    {
                        strSQL = "    Select     DISTINCT                                      main2.SRR_SEA_PK                     PK,                    " + SRC(SourceType.SRR) + "      TYPE,                     main2.SRR_REF_NO                          REF_NO,                   TO_CHAR(tran2.VALID_TO,'" + dateFormat + "')       SHIP_DATE,                tran2.pol_grp_fk                      POL_PK,                   portpol2.port_grp_id                           POL_ID,                   tran2.pod_grp_fk                      POD_PK,                   portpod2.port_grp_id                           POD_ID,                   main2.OPERATOR_MST_FK                      OPER_PK,                  opr2.OPERATOR_ID                           OPER_ID,                  opr2.OPERATOR_NAME                         OPER_NAME,                main2.COMMODITY_MST_FK                     COMM_PK,                  NVL(cmdt2.COMMODITY_ID,'')                 COMM_ID,                  tran2.LCL_BASIS                            LCL_BASIS,                NVL(dim2.DIMENTION_ID,'')                  DIMENTION_ID,             0                                          WEIGHT,                   0                                          VOLUME,                   ROUND(NVL(" + exchQueryLCL + ",0),2)                ALL_IN_TARIFF,            'false'                                    SELECTED,                 ROUND(NVL(" + exchQueryLCL + ",0),2)                OPERATOR_RATE,            " + SourceType.SRR + "        PRIORITYORDER            from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                port_grp_mst_tbl                   portpol2,                             port_grp_mst_tbl                   portpod2,                             OPERATOR_MST_TBL               opr2,                                 COMMODITY_MST_TBL              cmdt2,                                DIMENTION_UNIT_MST_TBL         dim2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                  AND    main2.CARGO_TYPE            = 2                                         AND    tran2.pol_grp_fk       = portpol2.port_grp_mst_pk(+)                   AND    tran2.pod_grp_fk       = portpod2.port_grp_mst_pk(+)                   AND    main2.OPERATOR_MST_FK       = opr2.OPERATOR_MST_PK(+)                   AND    main2.COMMODITY_MST_FK      = cmdt2.COMMODITY_MST_PK(+)                 AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM AND NVL(tran2.VALID_TO, NULL_DATE_FORMAT)                AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    tran2.LCL_BASIS             = dim2.DIMENTION_UNIT_MST_PK(+)        ";
                        if (string.IsNullOrEmpty(OperPKs))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " )                       ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS ,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                      ";
                        }
                        strSQL = strSQL + "    AND    (main2.CUSTOMER_MST_FK       = " + Convert.ToString(SRRNr) + "                      OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                              AND A.CUST_MST_FK       =  " + Convert.ToString(SRRNr) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                    tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            ORDER BY PK DESC ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " SRR Sea Query."

        #region " SRR Freight Query "

        /// <summary>
        /// SRRs the freight query sea.
        /// </summary>
        /// <param name="forFCL">if set to <c>true</c> [for FCL].</param>
        /// <param name="CustNo">The customer no.</param>
        /// <param name="SectorContainers">The sector containers.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPK">The oper pk.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string SRRFreightQuerySea(bool forFCL = true, string CustNo = "", string SectorContainers = "", string CommodityGroup = "", string ShipDate = "", string OperPK = "", int Group = 0)
        {
            string strSQL = null;

            try
            {
                string strContRefNo = null;
                string strFreightElements = null;
                string strSurcharge = null;
                string strContSectors = null;
                string strContNoLCL = null;
                string strFreightsLCL = null;
                string strSurchargeLCL = null;
                string strBasisSectors = null;

                if (Group == 0)
                {
                    strContRefNo = " (   Select    DISTINCT  SRR_REF_NO     from                                                                  SRR_SEA_TBL              main7,                                SRR_TRN_SEA_TBL          tran7                                where                                                                            main7.SRR_SEA_PK      = tran7.SRR_SEA_FK                   AND    main7.CARGO_TYPE            = 1   AND main7.active=1                   AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran7.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran7.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strContNoLCL = " (   Select    DISTINCT  SRR_REF_NO     from                                                                  SRR_SEA_TBL              main7,                                SRR_TRN_SEA_TBL          tran7                                where                                                                            main7.SRR_SEA_PK      = tran7.SRR_SEA_FK                   AND    main7.CARGO_TYPE            = 2                                        AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran7.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran7.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strFreightElements = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  SRR_SEA_TBL              main8,                                SRR_TRN_SEA_TBL          tran8,                                SRR_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.SRR_SEA_PK      = tran8.SRR_SEA_FK                   AND    tran8.SRR_TRN_SEA_PK  = frtd8.SRR_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 1  AND MAIN8.Active=1                   AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.PORT_MST_POL_FK       = tran6.PORT_MST_POL_FK                    AND    tran8.PORT_MST_POD_FK       = tran6.PORT_MST_POD_FK                    AND    tran8.CONTAINER_TYPE_MST_FK = cont6.CONTAINER_TYPE_MST_FK              AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strFreightsLCL = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  SRR_SEA_TBL              main8,                                SRR_TRN_SEA_TBL          tran8,                                SRR_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.SRR_SEA_PK      = tran8.SRR_SEA_FK                   AND    tran8.SRR_TRN_SEA_PK  = frtd8.SRR_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 2                                        AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.PORT_MST_POL_FK       = tran6.PORT_MST_POL_FK                    AND    tran8.PORT_MST_POD_FK       = tran6.PORT_MST_POD_FK                    AND    tran8.LCL_BASIS             = tran6.LCL_BASIS                          AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurcharge = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  SRR_SEA_TBL              main9,                                SRR_TRN_SEA_TBL          tran9                                where                                                                            main9.SRR_SEA_PK      = tran9.SRR_SEA_FK                   AND    main9.CARGO_TYPE            = 1 AND MAIN9.Active=1                    AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran9.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran9.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurchargeLCL = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  SRR_SEA_TBL              main9,                                SRR_TRN_SEA_TBL          tran9                                where                                                                            main9.SRR_SEA_PK      = tran9.SRR_SEA_FK                   AND    main9.CARGO_TYPE            = 2                                        AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.PORT_MST_POL_FK       =  tran6.PORT_MST_POL_FK                   AND    tran9.PORT_MST_POD_FK       =  tran6.PORT_MST_POD_FK                   AND    tran9.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strContSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.CONTAINER_TYPE_MST_FK                    from                                                                           SRR_SEA_TBL              main10,                                        SRR_TRN_SEA_TBL          tran10                                        where                                                                                 main10.SRR_SEA_PK      = tran10.SRR_SEA_FK                 AND    main10.CARGO_TYPE            = 1  AND MAIN10.Active=1                  AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strContSectors = strContSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strContSectors = strContSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.CONTAINER_TYPE_MST_FK,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strContSectors = strContSectors + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    strBasisSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.LCL_BASIS                                from                                                                           SRR_SEA_TBL              main10,                                        SRR_TRN_SEA_TBL          tran10                                        where                                                                                 main10.SRR_SEA_PK      = tran10.SRR_SEA_FK                 AND    main10.CARGO_TYPE            = 2                                       AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                       tran10.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.PORT_MST_POL_FK, tran10.PORT_MST_POD_FK,                                                      tran10.LCL_BASIS,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strBasisSectors = strBasisSectors + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";
                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select          main22.SRR_REF_NO                          REF_NO,                   tran22.PORT_MST_POL_FK                      POL_PK,                   tran22.PORT_MST_POD_FK                      POD_PK,                   tran22.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE,                     NULL                                        FINAL_RATE,                NULL                                        PYTYPE,MAIN22.OPERATOR_MST_FK AS OPER_PK          from                                                                   SRR_SEA_TBL              main22,                                SRR_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.SRR_SEA_PK      = tran22.SRR_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 1  AND main22.active=1                    AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.CONTAINER_TYPE_MST_FK,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    else
                    {
                        strSQL = "    SELECT Q.* FROM (Select          main22.SRR_REF_NO                          REF_NO,                   tran22.PORT_MST_POL_FK                      POL_PK,                   tran22.PORT_MST_POD_FK                      POD_PK,                   tran22.LCL_BASIS                            LCLBASIS,                 frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                  NULL  QUOTE_MIN_RATE,                ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE ,                   ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         FINAL_RATE,MAIN22.OPERATOR_MST_FK AS OPER_PK       from                                                                   SRR_SEA_TBL              main22,                                SRR_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.SRR_SEA_PK      = tran22.SRR_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 2                                         AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.PORT_MST_POL_FK, tran22.PORT_MST_POD_FK,                                                       tran22.LCL_BASIS,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }

                    if (forFCL)
                    {
                        strSQL += "    Select          main2.SRR_REF_NO                          REF_NO,                   tran2.PORT_MST_POL_FK                      POL_PK,                   tran2.PORT_MST_POD_FK                      POD_PK,                   tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  frtd2.APP_SURCHARGE_AMT                    QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN2.OPERATOR_MST_FK AS OPER_PK                   from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                SRR_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                   AND    tran2.SRR_TRN_SEA_PK  = frtd2.SRR_TRN_SEA_FK               AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt2.CHARGE_BASIS           <> 2                                       AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                 AND    main2.CARGO_TYPE            = 1   AND main2.active=1                   AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            UNION     Select                 " + strContRefNo + "                       REF_NO,                   tran6.PORT_MST_POL_FK                      POL_PK,                   tran6.PORT_MST_POD_FK                      POD_PK,                   cont6.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  cont6.FCL_REQ_RATE                         RATE,                     NULL                                       QUOTERATE,                NULL                                       PYTYPE,MAIN6.OPERATOR_MST_FK AS OPER_PK                   from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                           ";

                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont6,                            FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContRefNo + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 1  AND MAIN6.ACTIVE = 1                 AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         AND    cont6.TARIFF_TRN_SEA_FK = tran6.TARIFF_TRN_SEA_PK                     --AND    frt6.CHARGE_BASIS           <> 2                                      AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      cont6.CONTAINER_TYPE_MST_FK )                           in ( " + strContSectors + " )                                       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightElements + ")      AND  " + strSurcharge + " = 1) Q,                       FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                    else
                    {
                        strSQL += "    Select                 main2.SRR_REF_NO                          REF_NO,                   tran2.PORT_MST_POL_FK                      POL_PK,                   tran2.PORT_MST_POD_FK                      POD_PK,                   tran2.LCL_BASIS                            LCLBASIS,                 frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      frtd2.APP_SURCHARGE_AMT                    RATE  ,                    frtd2.APP_SURCHARGE_AMT                    FINAL_RATE,MAIN2.OPERATOR_MST_FK AS OPER_PK                     from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                SRR_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                  AND    tran2.SRR_TRN_SEA_PK  = frtd2.SRR_TRN_SEA_FK              AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt2.CHARGE_BASIS           <> 2                                      AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                AND    main2.CARGO_TYPE            = 2                                       AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.PORT_MST_POL_FK, tran2.PORT_MST_POD_FK,                                                       tran2.LCL_BASIS,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)           UNION     Select                 " + strContNoLCL + "                       REF_NO,                   tran6.PORT_MST_POL_FK                      POL_PK,                   tran6.PORT_MST_POD_FK                      POD_PK,                   tran6.LCL_BASIS                            LCLBASIS,                 tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      tran6.LCL_TARIFF_RATE                      RATE  ,                    tran6.LCL_TARIFF_RATE                      FINAL_RATE,MAIN6.OPERATOR_MST_FK AS OPER_PK                      from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                                FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContNoLCL + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 2                                       AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt6.CHARGE_BASIS           <> 2                                       AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      tran6.LCL_BASIS )                                       in ( " + strBasisSectors + " )                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightsLCL + ")          AND  " + strSurchargeLCL + " = 1) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                }
                else
                {
                    //'Port Group Code
                    strContRefNo = " (   Select    DISTINCT  SRR_REF_NO     from                                                                  SRR_SEA_TBL              main7,                                SRR_TRN_SEA_TBL          tran7                                where                                                                            main7.SRR_SEA_PK      = tran7.SRR_SEA_FK                   AND    main7.CARGO_TYPE            = 1   AND main7.active=1                   AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran7.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran7.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strContNoLCL = " (   Select    DISTINCT  SRR_REF_NO     from                                                                  SRR_SEA_TBL              main7,                                SRR_TRN_SEA_TBL          tran7                                where                                                                            main7.SRR_SEA_PK      = tran7.SRR_SEA_FK                   AND    main7.CARGO_TYPE            = 2                                        AND    main7.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    main7.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND    tran7.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran7.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran7.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran7.VALID_FROM   AND   NVL(tran7.VALID_TO,NULL_DATE_FORMAT)             AND    main7.OPERATOR_MST_FK =  main6.OPERATOR_MST_FK  )    ";

                    strFreightElements = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  SRR_SEA_TBL              main8,                                SRR_TRN_SEA_TBL          tran8,                                SRR_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.SRR_SEA_PK      = tran8.SRR_SEA_FK                   AND    tran8.SRR_TRN_SEA_PK  = frtd8.SRR_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 1  AND MAIN8.Active=1                   AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.pol_grp_fk       = tran6.pod_grp_fk                    AND    tran8.pol_grp_fk       = tran6.pod_grp_fk                    AND    tran8.CONTAINER_TYPE_MST_FK = cont6.CONTAINER_TYPE_MST_FK              AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strFreightsLCL = " (   Select   DISTINCT  frtd8.FREIGHT_ELEMENT_MST_FK     from                                                                  SRR_SEA_TBL              main8,                                SRR_TRN_SEA_TBL          tran8,                                SRR_SUR_CHRG_SEA_TBL          frtd8                                where                                                                            main8.SRR_SEA_PK      = tran8.SRR_SEA_FK                   AND    tran8.SRR_TRN_SEA_PK  = frtd8.SRR_TRN_SEA_FK               AND    main8.CARGO_TYPE            = 2                                        AND    main8.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main8.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main8.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran8.pol_grp_fk       = tran6.pol_grp_fk                    AND    tran8.pod_grp_fk       = tran6.pod_grp_fk                    AND    tran8.LCL_BASIS             = tran6.LCL_BASIS                          AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran8.VALID_FROM   AND   NVL(tran8.VALID_TO,NULL_DATE_FORMAT)             AND    main8.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurcharge = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  SRR_SEA_TBL              main9,                                SRR_TRN_SEA_TBL          tran9                                where                                                                            main9.SRR_SEA_PK      = tran9.SRR_SEA_FK                   AND    main9.CARGO_TYPE            = 1 AND MAIN9.Active=1                    AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran9.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran9.CONTAINER_TYPE_MST_FK =  cont6.CONTAINER_TYPE_MST_FK             AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strSurchargeLCL = " ( Select  DISTINCT  SUBJECT_TO_SURCHG_CHG      from                                                                  SRR_SEA_TBL              main9,                                SRR_TRN_SEA_TBL          tran9                                where                                                                            main9.SRR_SEA_PK      = tran9.SRR_SEA_FK                   AND    main9.CARGO_TYPE            = 2                                        AND    main9.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main9.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main9.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                      AND    tran9.pol_grp_fk       =  tran6.pol_grp_fk                   AND    tran9.pod_grp_fk       =  tran6.pod_grp_fk                   AND    tran9.LCL_BASIS             =  tran6.LCL_BASIS                         AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran9.VALID_FROM   AND   NVL(tran9.VALID_TO,NULL_DATE_FORMAT)             AND    main9.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK          )   ";

                    strContSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.CONTAINER_TYPE_MST_FK                    from                                                                           SRR_SEA_TBL              main10,                                        SRR_TRN_SEA_TBL          tran10                                        where                                                                                 main10.SRR_SEA_PK      = tran10.SRR_SEA_FK                 AND    main10.CARGO_TYPE            = 1  AND MAIN10.Active=1                  AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strContSectors = strContSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strContSectors = strContSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.CONTAINER_TYPE_MST_FK,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strContSectors = strContSectors + "     AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    strBasisSectors = "  Select  DISTINCT  tran10.PORT_MST_POL_FK,                                         tran10.PORT_MST_POD_FK, tran10.LCL_BASIS                                from                                                                           SRR_SEA_TBL              main10,                                        SRR_TRN_SEA_TBL          tran10                                        where                                                                                 main10.SRR_SEA_PK      = tran10.SRR_SEA_FK                 AND    main10.CARGO_TYPE            = 2                                       AND    main10.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    main10.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main10.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                    if (string.IsNullOrEmpty(OperPK))
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                       tran10.LCL_BASIS)                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                    }
                    else
                    {
                        strBasisSectors = strBasisSectors + "     AND    (tran10.pol_grp_fk, tran10.pod_grp_fk,                                                      tran10.LCL_BASIS,main10.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                    }
                    strBasisSectors = strBasisSectors + "    AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran10.VALID_FROM   AND   NVL(tran10.VALID_TO,NULL_DATE_FORMAT)           AND    main10.OPERATOR_MST_FK       =  main6.OPERATOR_MST_FK            ";

                    if (forFCL)
                    {
                        strSQL = "    SELECT Q.* FROM (Select distinct         main22.SRR_REF_NO                          REF_NO,                   tran22.pol_grp_fk                      POL_PK,                   tran22.pod_grp_fk                      POD_PK,                   tran22.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE,                     NULL                                        FINAL_RATE,                NULL                                        PYTYPE,MAIN22.OPERATOR_MST_FK AS OPER_PK          from                                                                   SRR_SEA_TBL              main22,                                SRR_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.SRR_SEA_PK      = tran22.SRR_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 1  AND main22.active=1                    AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.CONTAINER_TYPE_MST_FK,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    else
                    {
                        strSQL = "    SELECT Q.* FROM (Select  distinct        main22.SRR_REF_NO                          REF_NO,                   tran22.pol_grp_fk                      POL_PK,                   tran22.pod_grp_fk                      POD_PK,                   tran22.LCL_BASIS                            LCLBASIS,                 frt22.FREIGHT_ELEMENT_MST_PK                FRT_PK,                   frt22.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt22.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt22.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      'true'                                      SELECTED,                 'false'  ADVATOS,                                                    tran22.CURRENCY_MST_FK                      CURR_PK,                  curr22.CURRENCY_ID                          CURR_ID,                  NULL  QUOTE_MIN_RATE,                ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         QUOTERATE ,                   ( Case When MAIN22.STATUS <> 1 Then    " + "            tran22.REQUESTED_BOF_RATE                     else    " + "            tran22.APPROVED_BOF_RATE End )         FINAL_RATE,MAIN22.OPERATOR_MST_FK AS OPER_PK       from                                                                   SRR_SEA_TBL              main22,                                SRR_TRN_SEA_TBL          tran22,                                FREIGHT_ELEMENT_MST_TBL        frt22,                                 CURRENCY_TYPE_MST_TBL          curr22                                where                                                                              main22.SRR_SEA_PK      = tran22.SRR_SEA_FK                   AND    frt22.FREIGHT_ELEMENT_MST_PK = " + BofPk + "                             AND    tran22.CURRENCY_MST_FK       = curr22.CURRENCY_MST_PK(+)                 AND    main22.CARGO_TYPE            = 2                                         AND    main22.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "             AND    (main22.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                     OR   main22.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran22.pol_grp_fk, tran22.pod_grp_fk,                                                       tran22.LCL_BASIS,main22.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN             tran22.VALID_FROM   AND   NVL(tran22.VALID_TO,NULL_DATE_FORMAT)            UNION ";
                    }
                    if (forFCL)
                    {
                        strSQL += "    Select   distinct       main2.SRR_REF_NO                          REF_NO,                   tran2.pol_grp_fk                      POL_PK,                   tran2.pod_grp_fk                      POD_PK,                   tran2.CONTAINER_TYPE_MST_FK                CNTR_PK,                  frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  frtd2.APP_SURCHARGE_AMT                    QUOTERATE,                     NULL                                       FINAL_RATE,                NULL                                       PYTYPE,MAIN2.OPERATOR_MST_FK AS OPER_PK                   from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                SRR_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                   AND    tran2.SRR_TRN_SEA_PK  = frtd2.SRR_TRN_SEA_FK               AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)          --AND    frt2.CHARGE_BASIS           <> 2                                       AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                 AND    main2.CARGO_TYPE            = 1   AND main2.active=1                   AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "            AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                    OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.CONTAINER_TYPE_MST_FK,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                   tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)            UNION     Select   distinct              " + strContRefNo + "                       REF_NO,                   tran6.pol_grp_fk                      POL_PK,                   tran6.pod_grp_fk                      POD_PK,                   cont6.CONTAINER_TYPE_MST_FK                CNTR_PK,                  tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  cont6.FCL_REQ_RATE                         RATE,                     NULL                                       QUOTERATE,                NULL                                       PYTYPE,MAIN6.OPERATOR_MST_FK AS OPER_PK                   from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                           ";
                        //& vbCrLf _

                        strSQL = strSQL + "TARIFF_TRN_SEA_CONT_DTL cont6,                            FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContRefNo + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 1  AND MAIN6.ACTIVE = 1                 AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         AND    cont6.TARIFF_TRN_SEA_FK = tran6.TARIFF_TRN_SEA_PK                     --AND    frt6.CHARGE_BASIS           <> 2                                      AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      cont6.CONTAINER_TYPE_MST_FK )                           in ( " + strContSectors + " )                                       AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightElements + ")      AND  " + strSurcharge + " = 1) Q,                       FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                    else
                    {
                        strSQL += "    Select    distinct             main2.SRR_REF_NO                          REF_NO,                   tran2.pol_grp_fk                      POL_PK,                   tran2.pod_grp_fk                      POD_PK,                   tran2.LCL_BASIS                            LCLBASIS,                 frtd2.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt2.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt2.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt2.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,    ( Case When NVL(tran2.APPROVED_ALL_IN_RATE,0) > 0        Then " + "        DECODE(frtd2.CHECK_FOR_ALL_IN_RT, 1,'true','false')   else " + "        'true'        End )                       SELECTED,                 'false'  ADVATOS,                                                    frtd2.CURRENCY_MST_FK                      CURR_PK,                  curr2.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      frtd2.APP_SURCHARGE_AMT                    RATE  ,                    frtd2.APP_SURCHARGE_AMT                    FINAL_RATE,MAIN2.OPERATOR_MST_FK AS OPER_PK                     from                                                                  SRR_SEA_TBL              main2,                                SRR_TRN_SEA_TBL          tran2,                                SRR_SUR_CHRG_SEA_TBL          frtd2,                                FREIGHT_ELEMENT_MST_TBL        frt2,                                 CURRENCY_TYPE_MST_TBL          curr2                                where                                                                            main2.SRR_SEA_PK      = tran2.SRR_SEA_FK                  AND    tran2.SRR_TRN_SEA_PK  = frtd2.SRR_TRN_SEA_FK              AND    frtd2.FREIGHT_ELEMENT_MST_FK = frt2.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt2.CHARGE_BASIS           <> 2                                      AND    frtd2.CURRENCY_MST_FK       = curr2.CURRENCY_MST_PK(+)                AND    main2.CARGO_TYPE            = 2                                       AND    main2.COMMODITY_GROUP_MST_FK = " + Convert.ToString(CommodityGroup) + "           AND    (main2.CUSTOMER_MST_FK       =  " + Convert.ToString(CustNo) + "                   OR   main2.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK                      FROM AFFILIATE_CUSTOMER_DTLS A, SRR_SEA_TBL CT , CUSTOMER_MST_TBL C      WHERE A.REFERENCE_MST_FK = CT.SRR_SEA_PK                               AND A.CUST_MST_FK       =  " + Convert.ToString(CustNo) + "                    AND A.CUST_MST_FK=C.CUSTOMER_MST_PK ))                                 ";

                        if (string.IsNullOrEmpty(OperPK))
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS )                            in ( " + Convert.ToString(SectorContainers) + " ) ";
                        }
                        else
                        {
                            strSQL = strSQL + "     AND    (tran2.pol_grp_fk, tran2.pod_grp_fk,                                                       tran2.LCL_BASIS,main2.OPERATOR_MST_FK )                            in ( " + Convert.ToString(SectorContainers) + " )                        ";
                        }
                        strSQL = strSQL + "   AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran2.VALID_FROM   AND   NVL(tran2.VALID_TO,NULL_DATE_FORMAT)           UNION     Select   distinct              " + strContNoLCL + "                       REF_NO,                   tran6.pol_grp_fk                      POL_PK,                   tran6.pod_grp_fk                      POD_PK,                   tran6.LCL_BASIS                            LCLBASIS,                 tran6.FREIGHT_ELEMENT_MST_FK               FRT_PK,                   frt6.FREIGHT_ELEMENT_ID                    FRT_ID,                   frt6.FREIGHT_ELEMENT_NAME                  FRT_NAME,                 DECODE(frt6.CHARGE_BASIS,'0','','1','%','2','Flat Rate','3','Kgs','4','Unit')CHARGE_BASIS,      DECODE(tran6.CHECK_FOR_ALL_IN_RT, 1,'true','false')  SELECTED,       'false'  ADVATOS,                                                    tran6.CURRENCY_MST_FK                      CURR_PK,                  curr6.CURRENCY_ID                          CURR_ID,                  NULL  MIN_RATE,                      tran6.LCL_TARIFF_RATE                      RATE  ,                    tran6.LCL_TARIFF_RATE                      FINAL_RATE,MAIN6.OPERATOR_MST_FK AS OPER_PK                      from                                                                  TARIFF_MAIN_SEA_TBL            main6,                                TARIFF_TRN_SEA_FCL_LCL         tran6,                                FREIGHT_ELEMENT_MST_TBL        frt6,                                 CURRENCY_TYPE_MST_TBL          curr6                                where " + strContNoLCL + " IS NOT NULL AND                                   main6.TARIFF_MAIN_SEA_PK    = tran6.TARIFF_MAIN_SEA_FK                AND    main6.CARGO_TYPE            = 2                                       AND    main6.ACTIVE                = 1                                       AND    tran6.FREIGHT_ELEMENT_MST_FK = frt6.FREIGHT_ELEMENT_MST_PK(+)         --AND    frt6.CHARGE_BASIS           <> 2                                       AND    tran6.CURRENCY_MST_FK       = curr6.CURRENCY_MST_PK(+)                AND    main6.COMMODITY_GROUP_FK    = " + Convert.ToString(CommodityGroup) + "            AND    (tran6.PORT_MST_POL_FK, tran6.PORT_MST_POD_FK,                                                      tran6.LCL_BASIS )                                       in ( " + strBasisSectors + " )                                      AND    ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5) BETWEEN                  tran6.VALID_FROM   AND   NVL(tran6.VALID_TO,NULL_DATE_FORMAT)            AND    tran6.FREIGHT_ELEMENT_MST_FK NOT IN (" + strFreightsLCL + ")          AND  " + strSurchargeLCL + " = 1) Q,                    FREIGHT_ELEMENT_MST_TBL FRT                       WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_PK              ORDER BY FRT.PREFERENCE                ";
                    }
                }
                strSQL = strSQL.Replace("   ", " ");
                strSQL = strSQL.Replace("  ", " ");
                return strSQL;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion " SRR Freight Query "

        #region "SRR Air"

        /// <summary>
        /// Queries the SRR.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QuerySRR(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", string OperPks = "", int Group = 0)
        {
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append(" Select  distinct        ");
                strQuery.Append("  MAST.SRR_REF_NO REF_NO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  main.PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.PORT_ID      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.PORT_NAME     PORTPOL_NAME, ");
                strQuery.Append("  main.PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.PORT_ID      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.PORT_NAME     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  COMMODITY_MST_FK,        ");
                strQuery.Append("  COMMODITY_NAME,         ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_IN_CBM,        ");
                strQuery.Append("  0 PACK_COUNT,         ");
                strQuery.Append("  EXPECTED_WEIGHT CHARGEABLE_WEIGHT,       ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_WEIGHT,        ");
                strQuery.Append("  0 DENSITY,          ");
                strQuery.Append("  main.SRR_AIR_FK FK,       ");
                strQuery.Append("  MAIN.SRR_trn_air_pk PK,nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK  ");
                strQuery.Append(" from SRR_AIR_TBL  MAST,     ");
                strQuery.Append("  SRR_TRN_AIR_TBL main,      ");
                strQuery.Append("  PORT_MST_TBL PORTPOL,       ");
                strQuery.Append("  PORT_MST_TBL PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR,        ");
                strQuery.Append("   COMMODITY_MST_TBL COM       ");
                strQuery.Append(" where MAST.SRR_AIR_PK = MAIN.SRR_AIR_FK ");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND PORT_MST_POL_FK  = PORTPOL.PORT_MST_PK  ");
                strQuery.Append("  AND PORT_MST_POD_FK  = PORTPOD.PORT_MST_PK  ");
                strQuery.Append("        AND COM.COMMODITY_MST_PK(+)= MAST.COMMODITY_MST_FK         ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.PORT_MST_POL_FK,MAIN.PORT_MST_POD_FK,MAST.AIRLINE_MST_FK) in (" + Sectors + ")");
                }

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.SRR_APPROVED              =      1   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.Commodity_Group_Fk =" + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                    strQuery.Append("  OR MAST.CUSTOMER_MST_FK is NULL  ");
                    strQuery.Append(" OR   MAST.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK ");
                    strQuery.Append(" FROM AFFILIATE_CUSTOMER_DTLS A, SRR_AIR_TBL CT , CUSTOMER_MST_TBL C ");
                    strQuery.Append(" WHERE A.REFERENCE_MST_FK = CT.SRR_AIR_PK ");
                    strQuery.Append("  AND A.CUST_MST_FK       =  " + Convert.ToString(CustomerPk) + " ");
                    strQuery.Append("  AND A.CUST_MST_FK=C.CUSTOMER_MST_PK )) ");
                }
            }
            else
            {
                strQuery.Append(" Select  distinct        ");
                strQuery.Append("  MAST.SRR_REF_NO REFNO,       ");
                strQuery.Append("  AIR.AIRLINE_ID AIRLINE,      ");
                strQuery.Append("  main.pol_grp_fk as PORT_MST_POL_FK,       ");
                strQuery.Append("  PORTPOL.port_grp_id      PORTPOL_ID,  ");
                strQuery.Append("  PORTPOL.port_grp_name     PORTPOL_NAME, ");
                strQuery.Append("  main.pod_grp_fk PORT_MST_POD_FK,       ");
                strQuery.Append("  PORTPOD.port_grp_id      PORTPOD_ID,  ");
                strQuery.Append("  PORTPOD.port_grp_name     PORTPOD_NAME, ");
                strQuery.Append("  to_Char(main.VALID_FROM, '" + dateFormat + "') VALID_FROM, ");
                strQuery.Append("  to_Char(main.VALID_TO, '" + dateFormat + "') VALID_TO, ");
                strQuery.Append("  COMMODITY_MST_FK,        ");
                strQuery.Append("  COMMODITY_NAME,         ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_IN_CBM,        ");
                strQuery.Append("  0 PACK_COUNT,         ");
                strQuery.Append("  EXPECTED_WEIGHT CHARGEABLE_WEIGHT,       ");
                strQuery.Append("  EXPECTED_VOLUME VOLUME_WEIGHT,        ");
                strQuery.Append("  0 DENSITY,          ");
                strQuery.Append("  main.SRR_AIR_FK FK,       ");
                strQuery.Append("  MAIN.SRR_AIR_FK PK,nvl(MAST.AIRLINE_MST_FK,0) AIRLINE_MST_PK  ");
                strQuery.Append(" from SRR_AIR_TBL  MAST,     ");
                strQuery.Append("  SRR_TRN_AIR_TBL main,      ");
                strQuery.Append("  port_grp_mst_tbl PORTPOL,       ");
                strQuery.Append("  port_grp_mst_tbl PORTPOD,       ");
                strQuery.Append("  AIRLINE_MST_TBL AIR,        ");
                strQuery.Append("   COMMODITY_MST_TBL COM       ");
                strQuery.Append(" where MAST.SRR_AIR_PK = MAIN.SRR_AIR_FK ");
                strQuery.Append("  AND AIR.AIRLINE_MST_PK(+) = MAST.AIRLINE_MST_FK  ");
                strQuery.Append("  AND pol_grp_fk  = PORTPOL.port_grp_mst_pk  ");
                strQuery.Append("  AND pod_grp_fk  = PORTPOD.port_grp_mst_pk  ");
                strQuery.Append("        AND COM.COMMODITY_MST_PK(+)= MAST.COMMODITY_MST_FK         ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    strQuery.Append(" AND (MAIN.pol_grp_fk,MAIN.pod_grp_fk) in (" + Sectors + ")");
                }
                else
                {
                    strQuery.Append(" AND (MAIN.pol_grp_fk,MAIN.pod_grp_fk,MAST.AIRLINE_MST_FK) in (" + Sectors + ")");
                }

                strQuery.Append(" AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)  ");
                strQuery.Append("  between MAIN.VALID_FROM and nvl(MAIN.VALID_TO,NULL_DATE_FORMAT) ");
                strQuery.Append("  AND MAST.SRR_APPROVED              =      1   ");
                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    strQuery.Append(" AND MAST.Commodity_Group_Fk =" + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    strQuery.Append(" AND ( MAST.CUSTOMER_MST_FK = " + Convert.ToString(CustomerPk));
                    strQuery.Append("  OR MAST.CUSTOMER_MST_FK is NULL  ");
                    strQuery.Append(" OR   MAST.CUSTOMER_MST_FK IN (SELECT C.REF_GROUP_CUST_PK ");
                    strQuery.Append(" FROM AFFILIATE_CUSTOMER_DTLS A, SRR_AIR_TBL CT , CUSTOMER_MST_TBL C ");
                    strQuery.Append(" WHERE A.REFERENCE_MST_FK = CT.SRR_AIR_PK ");
                    strQuery.Append("  AND A.CUST_MST_FK       =  " + Convert.ToString(CustomerPk) + " ");
                    strQuery.Append("  AND A.CUST_MST_FK=C.CUSTOMER_MST_PK )) ");
                }
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN SRR.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnSRR(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("Select          ");
            strQuery.Append("  SRR_TRN_AIR_FK  FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,        ");
            strQuery.Append("  MAIN.AIRLINE_MST_FK AS AIRLINE_MST_PK,");
            strQuery.Append("  'false' SELECTED, ");
            strQuery.Append("  'false' ADVATOS,   ");
            //'Added Koteshwari for Advatos Column PTSID-JUN18
            strQuery.Append("  APPROVED_RATE CURRENT_RATE,         ");
            strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
            strQuery.Append("  APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append(" from          ");
            strQuery.Append("  SRR_AIR_TBL MAIN,SRR_TRN_AIR_TBL DTL,");
            strQuery.Append("  SRR_AIR_SURCHARGE tran,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("  SRR_TRN_AIR_FK IN( " + TrnPk + " )   ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append("  AND  MAIN.SRR_AIR_PK=DTL.SRR_AIR_FK  ");
            strQuery.Append("  AND  DTL.SRR_TRN_AIR_PK=TRAN.SRR_TRN_AIR_Fk  ");
            strQuery.Append(" Order By PREFERENCE ");
            //FREIGHT_ELEMENT_ID
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN oth SRR.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <returns></returns>
        private string QueryTrnOthSRR(string TrnPk)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append("Select          ");
            strQuery.Append("  SRR_trn_air_fk FK,       ");
            strQuery.Append("  tran.FREIGHT_ELEMENT_MST_FK,      ");
            strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
            strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
            strQuery.Append("  tran.CURRENCY_MST_FK,       ");
            strQuery.Append("  CURRENCY_ID,        ");
            strQuery.Append("  CURRENCY_NAME,        ");
            strQuery.Append("  APPROVED_RATE CURRENT_RATE,         ");
            strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
            strQuery.Append("  APPROVED_RATE,        ");
            strQuery.Append("  tran.CHARGE_BASIS        ");
            strQuery.Append(" from          ");
            strQuery.Append("  SRR_AIR_OTH_CHRG  tran,     ");
            strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
            strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
            strQuery.Append(" where          ");
            strQuery.Append("   SRR_trn_air_fk IN( " + TrnPk + " )   ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
            strQuery.Append("  AND  CURRENCY_MST_FK  = CURRENCY_MST_PK  ");
            strQuery.Append("  AND  nvl(CHARGE_TYPE,3) = 3      ");
            strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE in(1,3)  ");
            strQuery.Append(" Order By FREIGHT_ELEMENT_ID    ");
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN FRTSRR.
        /// </summary>
        /// <param name="TrnPk">The TRN pk.</param>
        /// <param name="Group">The group.</param>
        /// <param name="Sector">The sector.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private string QueryTrnFRTSRR(string TrnPk, int Group = 0, string Sector = "", string OperPks = "")
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  SRR_AIR_FRT_PK FREIGHT_PK,      ");
                strQuery.Append("  SRR_TRN_AIR_FK FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  CURRENCY_NAME,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  SRR_AIR_FREIGHT_TBL   TRAN,SRR_trn_air_tbl dtl,SRR_air_tbl main,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("    dtl.SRR_trn_air_pk IN(" + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3) AND  dtl.SRR_trn_air_pk=tran.SRR_trn_air_fk and dtl.SRR_air_fk=main.SRR_air_pk ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND (dtl.port_mst_pol_fk,dtl.port_mst_pod_fk) in (" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND (dtl.port_mst_pol_fk,dtl.port_mst_pod_fk,main.airline_mst_fk) in (" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE ");
            }
            else
            {
                strQuery.Append("SELECT Q.POL_GRP_FK,Q.POD_GRP_FK,");
                //strQuery.Append("  Q.CONT_CUST_AIR_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  Q.CONT_CUST_TRN_AIR_FK FK,       " & vbCrLf)
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  q.FREIGHT_PK,       ");
                strQuery.Append("  Q.CURRENCY_MST_FK,       ");
                strQuery.Append("  Q.CURRENCY_ID,        ");
                strQuery.Append("  Q.airline_mst_pk,        ");
                strQuery.Append("  Q.SELECTED, ");
                strQuery.Append("  Q.ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  Q.MIN_AMOUNT   FROM (      ");
                strQuery.Append("SELECT DISTINCT DTL.POL_GRP_FK,DTL.POD_GRP_FK,");
                strQuery.Append("(SELECT trn.SRR_trn_air_pk from SRR_trn_air_tbl trn where trn.pol_grp_fk=dtl.pol_grp_fk and trn.pod_grp_fk=dtl.pod_grp_fk and trn.SRR_air_fk in (" + TrnPk + ") and  rownum=1) as   FREIGHT_PK,");
                //strQuery.Append("  CONT_CUST_AIR_FREIGHT_PK,      " & vbCrLf)
                //strQuery.Append("  CONT_CUST_TRN_AIR_FK FK,       " & vbCrLf)
                strQuery.Append("  FREIGHT_ELEMENT_MST_FK,       ");
                strQuery.Append("  FREIGHT_ELEMENT_ID,        ");
                strQuery.Append("  FREIGHT_ELEMENT_NAME,       ");
                strQuery.Append("  TRAN.CURRENCY_MST_FK,       ");
                strQuery.Append("  CURRENCY_ID,        ");
                strQuery.Append("  nvl(main.airline_mst_fk,0) as airline_mst_pk,        ");
                strQuery.Append("  'false' SELECTED, ");
                strQuery.Append("  'false' ADVATOS, ");
                //'Added Koteshwari for Advatos Column PTSID-JUN18
                strQuery.Append("  MIN_AMOUNT,PREFERENCE         ");
                strQuery.Append(" FROM   SRR_air_tbl main,SRR_trn_air_tbl dtl, ");
                strQuery.Append("  SRR_AIR_FREIGHT_TBL   TRAN,   ");
                strQuery.Append("  FREIGHT_ELEMENT_MST_TBL,      ");
                strQuery.Append("  CURRENCY_TYPE_MST_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("   dtl.SRR_air_fk IN(" + TrnPk + " )  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_FK = FREIGHT_ELEMENT_MST_PK  ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.ACTIVE_FLAG = 1   ");
                strQuery.Append("  AND  CURRENCY_MST_FK   = CURRENCY_MST_PK  ");
                strQuery.Append("  AND  CHARGE_TYPE <> 3      ");
                strQuery.Append("  AND  FREIGHT_ELEMENT_MST_TBL.BUSINESS_TYPE IN(1,3)  ");
                strQuery.Append("  AND  main.SRR_air_pk=dtl.SRR_air_fk  ");
                strQuery.Append("  AND  dtl.SRR_trn_air_pk=tran.SRR_trn_air_fk  ");
                if (!string.IsNullOrEmpty(Sector))
                {
                    if (string.IsNullOrEmpty(OperPks))
                    {
                        strQuery.Append("  AND (dtl.pol_grp_fk,dtl.pod_grp_fk) in (" + Sector + ")");
                    }
                    else
                    {
                        strQuery.Append("  AND (dtl.pol_grp_fk,dtl.pod_grp_fk,main.airline_mst_fk) in (" + Sector + ")");
                    }
                }
                strQuery.Append(" ORDER BY PREFERENCE)Q ");
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// Queries the TRN slab SRR.
        /// </summary>
        /// <param name="FreightPks">The freight PKS.</param>
        /// <param name="Group">The group.</param>
        /// <returns></returns>
        private string QueryTrnSlabSRR(string FreightPks, int Group = 0)
        {
            // Child Record :==========[ RFQ_SPOT_TRN_AIR_FCL_LCL ]====
            StringBuilder strQuery = new StringBuilder();
            if (Group == 0)
            {
                strQuery.Append("SELECT          ");
                strQuery.Append("  DTL.SRR_trn_air_pk FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append(" APPROVED_RATE CURRENT_RATE,         ");
                strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
                strQuery.Append("  APPROVED_RATE         ");
                strQuery.Append(" FROM          ");
                strQuery.Append("  SRR_AIR_FREIGHT_TBL  TRAN,SRR_TRN_AIR_TBL DTL, ");
                strQuery.Append("  SRR_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  tran.SRR_AIR_FRT_PK IN (" + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.SRR_AIR_FRT_FK = TRAN.SRR_AIR_FRT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  and dtl.SRR_trn_air_pk= tran.SRR_trn_air_fk");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID ");
            }
            else
            {
                strQuery.Append("SELECT  Q.POL_GRP_FK,Q.POD_GRP_FK,");
                strQuery.Append("  Q.FK,       ");
                strQuery.Append("  Q.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  Q.AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  Q.BREAKPOINT_ID,        ");
                strQuery.Append("  Q.BREAKPOINT_DESC,        ");
                strQuery.Append("  Q.CURRENT_RATE,         ");
                strQuery.Append("  Q.REQUEST_RATE,         ");
                strQuery.Append("  Q.APPROVED_RATE FROM(        ");
                strQuery.Append("SELECT  DISTINCT DTL.POL_GRP_FK,DTL.POD_GRP_FK,");
                strQuery.Append("  SRR_TRN_AIR_FK FK,       ");
                strQuery.Append("  TRAN.FREIGHT_ELEMENT_MST_FK,      ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL_PK,      ");
                strQuery.Append("  BREAKPOINT_ID,        ");
                strQuery.Append("  BREAKPOINT_DESC,        ");
                strQuery.Append(" APPROVED_RATE CURRENT_RATE,         ");
                strQuery.Append("  APPROVED_RATE REQUEST_RATE,         ");
                strQuery.Append("  APPROVED_RATE,BREAKPOINT_RANGE        ");
                strQuery.Append(" FROM   SRR_TRN_AIR_TBL DTL,       ");
                strQuery.Append("  SRR_AIR_FREIGHT_TBL  TRAN,    ");
                strQuery.Append("  SRR_AIR_BREAKPOINTS  BPNT,    ");
                strQuery.Append("  AIRFREIGHT_SLABS_TBL       ");
                strQuery.Append(" WHERE          ");
                strQuery.Append("  dtl.SRR_trn_air_pk IN (" + FreightPks + ")  ");
                strQuery.Append("  AND BPNT.SRR_AIR_FRT_FK = TRAN.SRR_AIR_FRT_PK ");
                strQuery.Append("  AND AIRFREIGHT_SLABS_TBL.ACTIVE_FLAG = 1    ");
                strQuery.Append("  AND BPNT.AIRFREIGHT_SLABS_FK= AIRFREIGHT_SLABS_TBL_PK ");
                strQuery.Append("  and dtl.SRR_trn_air_pk= tran.SRR_trn_air_fk");
                strQuery.Append("  ORDER BY FREIGHT_ELEMENT_MST_FK, BREAKPOINT_RANGE,BREAKPOINT_ID)Q ");
            }
            return strQuery.ToString();
        }

        /// <summary>
        /// SRRs the oth query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder SRROthQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            //CONT_CUST_TRN_AIR_FK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, CURRENT_RATE, APPROVED_RATE, CHARGE_BASIS
            sbSQL.Append("    Select                                                          ");
            sbSQL.Append("     NULL                                      PK,                  ");
            //0
            sbSQL.Append("     otf.SRR_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     otf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     otf.CURRENCY_MST_FK                       CURR_FK,             ");
            //3
            sbSQL.Append("     otf.APPROVED_RATE                         BASIS_RATE,          ");
            //4
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //5
            sbSQL.Append("     otf.CHARGE_BASIS                          CH_BASIS,            ");
            //6
            sbSQL.Append("     decode(otf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,      ");
            //7
            sbSQL.Append("    1 PYMT_TYPE      ");
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     SRR_AIR_OTH_CHRG         otf                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           otf.SRR_TRN_AIR_FK    in (" + ParentKeys + ")      ");

            return sbSQL;
        }

        #endregion "SRR Air"

        #region " srr Query."

        /// <summary>
        /// SRRs the query air.
        /// </summary>
        /// <param name="CustomerPk">The customer pk.</param>
        /// <param name="Sectors">The sectors.</param>
        /// <param name="CommodityGroup">The commodity group.</param>
        /// <param name="ShipDate">The ship date.</param>
        /// <param name="Group">The group.</param>
        /// <param name="OperPks">The oper PKS.</param>
        /// <returns></returns>
        private StringBuilder SRRQueryAir(string CustomerPk = "", string Sectors = "", string CommodityGroup = "", string ShipDate = "", int Group = 0, string OperPks = "")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type
            if (Group == 0)
            {
                sbSQL.Append("    Select                                                         ");
                sbSQL.Append("       tran.SRR_TRN_AIR_PK                    PK,            ");
                //0
                sbSQL.Append("       tran.SRR_AIR_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.SRR + "             REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.SRR) + "        TYPE_ID,       ");
                //3
                sbSQL.Append("       main.SRR_REF_NO                             REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.PORT_MST_POL_FK                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.PORT_ID                              POL_ID,        ");
                //7
                sbSQL.Append("       tran.PORT_MST_POD_FK                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.PORT_ID                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       main.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,        ");
                //20
                sbSQL.Append("       0                                            AI_QT,         ");
                //21
                sbSQL.Append("       0                                            NET,           ");
                //22
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //23
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //24
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //25>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //26>
                sbSQL.Append("   From SRR_AIR_TBL              main,                    ");
                sbSQL.Append("        SRR_TRN_AIR_TBL          tran,                    ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOL,                 ");
                sbSQL.Append("        PORT_MST_TBL                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.SRR_AIR_PK           =   tran.SRR_AIR_FK    ");
                sbSQL.Append("   AND tran.PORT_MST_POL_FK            =   PORTPOL.PORT_MST_PK      ");
                sbSQL.Append("   AND tran.PORT_MST_POD_FK            =   PORTPOD.PORT_MST_PK      ");
                sbSQL.Append("   AND main.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.SRR_APPROVED              =      1                     ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK,main.airline_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    //sbSQL.Append("  AND cmdt.COMMODITY_GROUP_FK    = " & CStr(CommodityGroup) & vbCrLf)
                    sbSQL.Append("   AND MAIN.Commodity_Group_Fk    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK      = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null )");
                }
            }
            else
            {
                sbSQL.Append("    Select    distinct                                                     ");
                sbSQL.Append("       tran.SRR_TRN_AIR_PK                    PK,            ");
                //0
                sbSQL.Append("       tran.SRR_AIR_FK                        FK,            ");
                //1
                sbSQL.Append("    " + SourceType.SRR + "             REF_TYPE,      ");
                //2
                sbSQL.Append("    " + SRC(SourceType.SRR) + "        TYPE_ID,       ");
                //3
                sbSQL.Append("       main.SRR_REF_NO                             REF_NO,        ");
                //4
                sbSQL.Append("       TO_CHAR(tran.VALID_TO,'" + dateFormat + "')  SHIP_DATE,     ");
                //5
                sbSQL.Append("       tran.pol_grp_fk                         POLFK,         ");
                //6
                sbSQL.Append("       PORTPOL.port_grp_id                         POL_ID,        ");
                //7
                sbSQL.Append("       tran.pod_grp_fk                         PODFK,         ");
                //8
                sbSQL.Append("       PORTPOD.port_grp_id                              POD_ID,        ");
                //9
                sbSQL.Append("       main.AIRLINE_MST_FK                          AIR_PK,        ");
                //10
                sbSQL.Append("       air.AIRLINE_ID                               AIR_ID,        ");
                //11
                sbSQL.Append("       main.COMMODITY_MST_FK                        COMM_PK,       ");
                //12
                sbSQL.Append("       cmdt.COMMODITY_ID                            COMM_ID,       ");
                //13
                sbSQL.Append("    " + BreakPoint.Kgs + "                          SLAB_TYPE_PK,  ");
                //14
                sbSQL.Append("    " + BPNT(BreakPoint.Kgs.ToString()) + "                    SLAB_TYPE,     ");
                //15
                sbSQL.Append("       0                                            BOXES,         ");
                //16
                sbSQL.Append("       NULL                                         SLAB,          ");
                //17
                sbSQL.Append("       ''                                           SLAB_ID,       ");
                //18
                sbSQL.Append("       0                                            CH_WT,         ");
                //19
                sbSQL.Append("       0                                            FRT_WT,        ");
                //19
                sbSQL.Append("       0                                            AI_QT,         ");
                //20
                sbSQL.Append("       0                                            NET,           ");
                //21
                sbSQL.Append("       ''                                           OTH_DTL,       ");
                //22
                sbSQL.Append("       ''                                           OTH_BTN,       ");
                //23
                sbSQL.Append("       ''                                           CRG_BTN,       ");
                //24>
                sbSQL.Append("       'false'                                      SELECTED       ");
                //25>
                sbSQL.Append("   From SRR_AIR_TBL              main,                    ");
                sbSQL.Append("        SRR_TRN_AIR_TBL          tran,                    ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOL,                 ");
                sbSQL.Append("        port_grp_mst_tbl                   PORTPOD,                 ");
                sbSQL.Append("        AIRLINE_MST_TBL                air,                     ");
                sbSQL.Append("        COMMODITY_MST_TBL              cmdt                     ");
                sbSQL.Append("   Where                                                        ");
                sbSQL.Append("       main.SRR_AIR_PK           =   tran.SRR_AIR_FK    ");
                sbSQL.Append("   AND tran.pol_grp_fk            =   PORTPOL.port_grp_mst_pk      ");
                sbSQL.Append("   AND tran.pod_grp_fk            =   PORTPOD.port_grp_mst_pk      ");
                sbSQL.Append("   AND main.COMMODITY_MST_FK           =   cmdt.COMMODITY_MST_PK(+) ");
                sbSQL.Append("   AND main.AIRLINE_MST_FK             =   air.AIRLINE_MST_PK(+)    ");
                sbSQL.Append("   AND main.SRR_APPROVED              =      1                    ");
                if (string.IsNullOrEmpty(OperPks))
                {
                    sbSQL.Append("   AND (tran.PORT_MST_POL_FK,tran.PORT_MST_POD_FK) in (" + Sectors + ")");
                }
                else
                {
                    sbSQL.Append("   AND (tran.pol_grp_fk,tran.pod_grp_fk,main.airline_mst_fk) in (" + Sectors + ")");
                }
                sbSQL.Append("   AND ROUND(TO_DATE('" + ShipDate + "','" + dateFormat + "')-0.5)     ");
                sbSQL.Append("       between tran.VALID_FROM and nvl(tran.VALID_TO,NULL_DATE_FORMAT)    ");

                if (!string.IsNullOrEmpty(Convert.ToString(CommodityGroup)))
                {
                    //sbSQL.Append("  AND cmdt.COMMODITY_GROUP_FK    = " & CStr(CommodityGroup) & vbCrLf)
                    sbSQL.Append("   AND MAIN.Commodity_Group_Fk    = " + Convert.ToString(CommodityGroup));
                }

                if (!string.IsNullOrEmpty(Convert.ToString(CustomerPk)))
                {
                    sbSQL.Append("  AND ( main.CUSTOMER_MST_FK      = " + Convert.ToString(CustomerPk));
                    sbSQL.Append("        or main.CUSTOMER_MST_FK  is null )");
                }
            }
            return sbSQL;
        }

        #endregion " srr Query."

        #region " SRR Query "

        /// <summary>
        /// SRRs the freight query.
        /// </summary>
        /// <param name="ParentKeys">The parent keys.</param>
        /// <returns></returns>
        private StringBuilder SRRFreightQuery(string ParentKeys = "-1")
        {
            StringBuilder sbSQL = new StringBuilder();
            // Type, Ref No, Shipment Date, POL, POD, Airline, Commodity, KG/ULD, Boxes, Slab, ChrgWt, All in Quote, Net, OthBtn, CargoBtn
            // + Freight, Sel, Curr, Min Amt, Trf Rate, Trf Amt, Quote Rate, Quote Amt, Charge Basis, Freight Type

            //CONT_CUST_AIR_FREIGHT_PK, CONT_CUST_TRN_AIR_FK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, MIN_AMOUNT
            //CONT_AIR_BREAKPTS_PK, CURRENT_RATE, APPROVED_RATE, AIRFREIGHT_SLABS_FK, CONT_CUST_AIR_FRT_FK

            sbSQL.Append("    Select Q.* FROM (                                              ");
            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     trf.SRR_AIR_FRT_PK              PK,                  ");
            //0
            sbSQL.Append("     trf.SRR_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     trf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt.FREIGHT_ELEMENT_ID                    FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     trf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur.CURRENCY_ID                           CURR_ID,             ");
            //7'6
            sbSQL.Append("     trf.MIN_AMOUNT                            MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     0                                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     3                                         CH_BASIS,            ");
            //11'10
            sbSQL.Append("  " + CBCS(ChargeBasis.KGs) + "                CH_BASIS_ID,         ");
            //12'11
            sbSQL.Append("  " + FreightType.AFC + "                      FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("    SRR_AIR_FREIGHT_TBL      trf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt,                            ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur                             ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           trf.SRR_TRN_AIR_FK    in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   trf.FREIGHT_ELEMENT_MST_FK  =  frt.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   trf.CURRENCY_MST_FK         =  cur.CURRENCY_MST_PK(+)        ");

            sbSQL.Append(" UNION ALL ");

            //CONT_AIR_SURCHARGE_PK, FREIGHT_ELEMENT_MST_FK, CURRENCY_MST_FK, CONT_CUST_TRN_AIR_FK, CURRENT_RATE, APPROVED_RATE, CHARGE_BASIS

            sbSQL.Append("    Select                                                       ");
            sbSQL.Append("     srf.SRR_SURCHARGE_PK                 PK,                  ");
            //0
            sbSQL.Append("     srf.SRR_TRN_AIR_FK                  FK,                  ");
            //1
            sbSQL.Append("     srf.FREIGHT_ELEMENT_MST_FK                FRT_FK,              ");
            //2
            sbSQL.Append("     frt1.FREIGHT_ELEMENT_ID                   FRT_ID,              ");
            //3
            sbSQL.Append("     'false'                                   SELECTED,            ");
            //4
            sbSQL.Append("     'false'                                   ADVATOS,             ");
            //5 ''Added Koteshwari for Advatos Column PTSID-JUN18
            sbSQL.Append("     srf.CURRENCY_MST_FK                       CURR_FK,             ");
            //6'5
            sbSQL.Append("     cur1.CURRENCY_ID                          CURR_ID,             ");
            //7'6
            sbSQL.Append("     NULL                                      MIN_AMOUNT,          ");
            //8'7
            sbSQL.Append("     srf.APPROVED_RATE                         BASIS_RATE,          ");
            //9'8
            sbSQL.Append("     0                                         TARIFF_RATE,         ");
            //10'9
            sbSQL.Append("     srf.CHARGE_BASIS                          CH_BASIS,            ");
            //11'10
            sbSQL.Append("     decode(srf.CHARGE_BASIS,1,'%',2,'Flat','KGs') CH_BASIS_ID,     ");
            //12'11
            sbSQL.Append("  " + FreightType.Surcharge + "                FRT_TYPE             ");
            //13'12
            sbSQL.Append("    from                                                            ");
            sbSQL.Append("     SRR_AIR_SURCHARGE        srf,                            ");
            sbSQL.Append("     FREIGHT_ELEMENT_MST_TBL        frt1,                           ");
            sbSQL.Append("     CURRENCY_TYPE_MST_TBL          cur1                            ");
            sbSQL.Append("    where                                                           ");
            sbSQL.Append("           srf.SRR_TRN_AIR_FK    in (" + ParentKeys + ")          ");
            sbSQL.Append("     and   srf.FREIGHT_ELEMENT_MST_FK  =  frt1.FREIGHT_ELEMENT_MST_PK(+) ");
            sbSQL.Append("     and   srf.CURRENCY_MST_FK         =  cur1.CURRENCY_MST_PK(+)        ");
            sbSQL.Append("     ) Q, FREIGHT_ELEMENT_MST_TBL FRT        ");
            sbSQL.Append("     WHERE FRT.FREIGHT_ELEMENT_MST_PK = Q.FRT_FK      ");
            sbSQL.Append("     ORDER BY FRT.PREFERENCE       ");
            return sbSQL;
        }

        #endregion " SRR Query "

        #region "Fetch SRR Information for Quotation"

        /// <summary>
        /// Fetches the SRR DTLS.
        /// </summary>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="SRRPK">The SRRPK.</param>
        /// <returns></returns>
        public DataSet FetchSRRDtls(string BizType, int SRRPK)
        {
            string strsql = "";
            WorkFlow objWF = new WorkFlow();
            if (BizType.ToUpper() == "AIR")
            {
                strsql += "SELECT SAT.SRR_AIR_PK,";
                strsql += " SAT.SRR_REF_NO,";
                strsql += " POL.PORT_MST_PK     AS POLPK,";
                strsql += " POL.PORT_ID         AS POLID,";
                strsql += " POL.PORT_NAME       AS POLNAME,";
                strsql += " POD.PORT_MST_PK     AS PODPK,";
                strsql += " POD.PORT_ID         AS PODID,";
                strsql += " POD.PORT_NAME       AS PODNAME,";
                strsql += " CMT.CUSTOMER_MST_PK,";
                strsql += " CMT.CUSTOMER_ID,";
                strsql += " CMT.CUSTOMER_NAME,NVL(SAT.PORT_GROUP,0) AS PORT_GROUP,SAT.COMMODITY_GROUP_FK ";
                strsql += " FROM SRR_AIR_TBL      SAT,";
                strsql += " SRR_TRN_AIR_TBL  TRN,";
                strsql += " PORT_MST_TBL     POL,";
                strsql += " PORT_MST_TBL     POD,";
                strsql += " CUSTOMER_MST_TBL CMT ";
                strsql += " WHERE SAT.SRR_AIR_PK = " + SRRPK;
                strsql += " AND SAT.SRR_AIR_PK = TRN.SRR_AIR_FK";
                strsql += " AND TRN.PORT_MST_POL_FK = POL.PORT_MST_PK";
                strsql += " AND TRN.PORT_MST_POD_FK = POD.PORT_MST_PK";
                strsql += " AND SAT.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK";
            }
            else
            {
                strsql += "SELECT SST.SRR_SEA_PK,";
                strsql += " SST.SRR_REF_NO,";
                strsql += " POL.PORT_MST_PK     AS POLPK,";
                strsql += " POL.PORT_ID         AS POLID,";
                strsql += " POL.PORT_NAME       AS POLNAME,";
                strsql += " POD.PORT_MST_PK     AS PODPK,";
                strsql += " POD.PORT_ID         AS PODID,";
                strsql += " POD.PORT_NAME       AS PODNAME,";
                strsql += " CMT.CUSTOMER_MST_PK,";
                strsql += " CMT.CUSTOMER_ID,";
                strsql += " CMT.CUSTOMER_NAME,NVL(SST.PORT_GROUP,0) AS PORT_GROUP,SST.CARGO_TYPE,SST.Commodity_Group_Mst_Fk ";
                strsql += " FROM SRR_SEA_TBL      SST,";
                strsql += " SRR_TRN_SEA_TBL  TRN,";
                strsql += " PORT_MST_TBL     POL,";
                strsql += " PORT_MST_TBL     POD,";
                strsql += " CUSTOMER_MST_TBL CMT ";
                strsql += " WHERE SST.SRR_SEA_PK = " + SRRPK;
                strsql += " AND SST.SRR_SEA_PK = TRN.SRR_SEA_FK";
                strsql += " AND TRN.PORT_MST_POL_FK = POL.PORT_MST_PK";
                strsql += " AND TRN.PORT_MST_POD_FK = POD.PORT_MST_PK";
                strsql += " AND SST.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK";
            }
            return objWF.GetDataSet(strsql);
        }

        #endregion "Fetch SRR Information for Quotation"

        #region "Fetch SRR Information for Quotation"

        /// <summary>
        /// Fetches the srrqutdtl.
        /// </summary>
        /// <param name="BizType">Type of the biz.</param>
        /// <param name="SRRPK">The SRRPK.</param>
        /// <returns></returns>
        public DataSet FetchSRRQUTDTL(string BizType, int SRRPK)
        {
            string strsql = "";
            WorkFlow objWF = new WorkFlow();
            //If BizType.ToUpper = "SEA" Or BizType.ToUpper = "AIR" Then
            strsql += "SELECT QMT.QUOTATION_MST_PK,";
            strsql += "  QMT.VALID_FOR,";
            strsql += " QMT.QUOTATION_DATE,";
            strsql += " QMT.QUOTATION_DATE + QMT.VALID_FOR VALIDITY_DATE";

            if (BizType.ToUpper() == "SEA")
            {
                strsql += " FROM SRR_SEA_TBL SST,";
            }
            else
            {
                strsql += " FROM SRR_AIR_TBL SST,";
            }

            strsql += "   QUOTATION_DTL_TBL QDT, QUOTATION_MST_TBL QMT";

            if (BizType.ToUpper() == "SEA")
            {
                strsql += " WHERE SST.SRR_SEA_PK = " + SRRPK;
            }
            else
            {
                strsql += " WHERE SST.SRR_AIR_PK = " + SRRPK;
            }
            strsql += " AND (SST.SRR_REF_NO = QDT.TRANS_REF_NO OR SST.SRR_REF_NO = QDT.TRAN_REF_NO2) ";
            strsql += " AND QDT.QUOTATION_MST_FK = QMT.QUOTATION_MST_PK";
            strsql += " AND QMT.QUOTATION_DATE + QMT.VALID_FOR >= SYSDATE";
            //  End If
            return objWF.GetDataSet(strsql);
        }

        #endregion "Fetch SRR Information for Quotation"

        #region "Fetch Version Numbers"

        /// <summary>
        /// Fetches the qut version.
        /// </summary>
        /// <param name="QtnNumber">The QTN number.</param>
        /// <returns></returns>
        public DataSet FetchQutVersion(string QtnNumber)
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT Q.QUOTATION_MST_PK,Q.QUOTATION_REF_NO FROM QUOTATION_MST_TBL Q");
            sb.Append(" WHERE Q.QUOTATION_REF_NO LIKE '" + QtnNumber + "%' ");
            DataSet DS = null;
            DS = (new WorkFlow()).GetDataSet(sb.ToString());
            return DS;
        }

        /// <summary>
        /// Fetches the qut version nr.
        /// </summary>
        /// <param name="QtnNumber">The QTN number.</param>
        /// <returns></returns>
        public DataSet FetchQutVersionNr(string QtnNumber)
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT Q.QUOTATION_MST_PK,Q.QUOTATION_REF_NO FROM QUOTATION_MST_TBL Q");
            sb.Append(" WHERE Q.QUOTATION_REF_NO LIKE '" + QtnNumber + "' ");
            DataSet DS = null;
            DS = (new WorkFlow()).GetDataSet(sb.ToString());
            return DS;
        }

        #endregion "Fetch Version Numbers"

        #region "Fetch Sales Executive"

        /// <summary>
        /// Fetches the sales executive.
        /// </summary>
        /// <param name="CustPk">The customer pk.</param>
        /// <param name="Quopk">The quopk.</param>
        /// <returns></returns>
        public DataSet FetchSalesExecutive(Int16 CustPk = 0, int Quopk = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            if (Quopk == 0)
            {
                sb.Append("SELECT NVL(C.REP_EMP_MST_FK, SEMP.EMPLOYEE_MST_PK) REPPK,NVL(E.EMPLOYEE_NAME,SEMP.EMPLOYEE_NAME) SALESREP");
                sb.Append("  FROM CUSTOMER_MST_TBL C, EMPLOYEE_MST_TBL E , EMPLOYEE_MST_TBL SEMP");
                sb.Append(" WHERE C.REP_EMP_MST_FK = E.EMPLOYEE_MST_PK(+) AND C.REQ_SALES_EXE = SEMP.EMPLOYEE_MST_PK(+)");
                sb.Append("   AND C.CUSTOMER_MST_PK = " + CustPk);
            }
            else
            {
                if (Convert.ToInt32(objWF.ExecuteScaler("Select count(*) from quotation_mst_tbl b where b.executive_mst_fk is not null and b.quotation_mst_pk =" + Quopk)) > 0)
                {
                    sb.Append("SELECT B.executive_mst_fk REPPK,E.EMPLOYEE_NAME SALESREP");
                    sb.Append("  FROM quotation_mst_tbl B, EMPLOYEE_MST_TBL E");
                    sb.Append(" WHERE B.executive_mst_fk = E.EMPLOYEE_MST_PK");
                    sb.Append("   AND b.quotation_mst_pk= " + Quopk);
                }
                else
                {
                    sb.Append("SELECT  '' REPPK, '' SALESREP");
                    sb.Append("  FROM dual");
                }
            }
            try
            {
                return (objWF.GetDataSet(sb.ToString()));
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion "Fetch Sales Executive"

        /// <summary>
        /// Fetch_s the version QTN.
        /// </summary>
        /// <param name="Iquotationpk">The iquotationpk.</param>
        /// <returns></returns>
        public DataSet Fetch_VersionQtn(int Iquotationpk = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT DISTINCT CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN QTS.POL_GRP_FK ELSE QTS.Port_Mst_PoL_Fk END PORT_MST_POL_FK,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN (SELECT PGMT.PORT_GRP_ID FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK=QTS.POL_GRP_FK) ELSE POL.PORT_ID END PORT_ID,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN (SELECT PGMT.PORT_GRP_NAME FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK=QTS.POL_GRP_FK) ELSE POL.PORT_NAME END PORT_NAME,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK) ELSE TO_CHAR(QTS.Port_Mst_Pod_Fk) END podpk,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT PGMT.PORT_GRP_ID FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK IN (select DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK || ')') ELSE POD.PORT_ID END podid,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT PGMT.PORT_GRP_NAME FROM PORT_GRP_MST_TBL PGMT WHERE PGMT.PORT_GRP_MST_PK IN (select DISTINCT QDT.POD_GRP_FK from quotation_dtl_tbl qdt where qdt.quotation_mst_fk=' || QST.QUOTATION_MST_PK || ')') ELSE POD.PORT_NAME END  podNAME,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.PORT_MST_POL_FK from quotation_dtl_tbl qdt where QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END POLPORTPK,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT QDT.PORT_MST_POD_FK from quotation_dtl_tbl qdt where QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END PODPORTPK,");
            sb.Append("       CASE WHEN QTS.POL_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT pmt.port_id from quotation_dtl_tbl qdt,port_mst_tbl pmt where qdt.port_mst_pol_fk=pmt.port_mst_pk and QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END POLPORTID,");
            sb.Append("       CASE WHEN QTS.POD_GRP_FK IS NOT NULL THEN ROWTOCOL('SELECT DISTINCT pmt.port_id from quotation_dtl_tbl qdt,port_mst_tbl pmt where qdt.PORT_MST_POD_FK=pmt.port_mst_pk and QDT.quotation_mst_fk=' || QST.QUOTATION_MST_PK ) ELSE '' END PODPORTID,");
            sb.Append("       QST.CUSTOMER_MST_FK,");
            sb.Append("       CMT.CUSTOMER_ID,");
            sb.Append("       CMT.CUSTOMER_NAME,");
            sb.Append("       QST.CARGO_TYPE,");
            sb.Append("       QST.CUSTOMER_CATEGORY_MST_FK,");
            sb.Append("       QST.QUOTED_BY,");
            sb.Append("       QST.STATUS,");
            sb.Append("       QST.CREATED_DT,");
            sb.Append("       QST.QUOTATION_DATE,");
            sb.Append("       QST.EXPECTED_SHIPMENT_DT,");
            sb.Append("       QST.REMARKS,");
            sb.Append("       QST.CREDIT_LIMIT,");
            sb.Append("       QST.CREDIT_DAYS,");
            sb.Append("       QST.VALID_FOR,");
            sb.Append("       QST.CUST_TYPE,");
            sb.Append("       DECODE(QST.PYMT_TYPE,1,'PrePaid', 2,'Collect', 3,'Foreign') as PYMT_TYPE, ");
            sb.Append("       QST.SHIPPING_TERMS_MST_PK,");
            sb.Append("       QST.CARGO_MOVE_FK,");
            sb.Append("       QST.BIZ_TYPE,");
            sb.Append("       QST.PROCESS_TYPE,");
            sb.Append("       DECODE( QST.CARGO_TYPE,1,'FCL', 2,'LCL', 3,'BBC') as CARGO_TYPE, ");
            //  sb.Append("       QST.CARGO_TYPE,")
            sb.Append("       QST.VERSION_NO,");
            sb.Append("       NVL(CU.CUSTOMER_MST_PK,0) THDFRTPAYER_PK,");
            sb.Append("       CU.CUSTOMER_ID THDFRTPAYER_ID,");
            sb.Append("       CU.CUSTOMER_NAME THDFRTPAYER_NAME,");
            sb.Append("       NVL(AGT.AGENT_MST_PK,0) AGENT_MST_PK,");
            sb.Append("       AGT.AGENT_ID,");
            sb.Append("       AGT.AGENT_NAME,");
            sb.Append("       NVL(QST.COLLECT_AGENT_FLAG,0) COLLECT_AGENT_FLAG,");
            ///Added By Sushama
            sb.Append("       QTS.PORT_MST_PLR_FK,");
            sb.Append("       QTS.PORT_MST_PFD_FK,");
            sb.Append("       QTS.TRANSPORTER_PLR_FK,");
            sb.Append("       QTS.TRANSPORTER_PFD_FK,QST.BIZ_TYPE,");

            sb.Append("       CGMT.COMMODITY_GROUP_CODE,");
            sb.Append("       QST.QUOTATION_REF_NO,");
            sb.Append("       OP.OPERATOR_ID,QTS.PORT_MST_PLR_FK,QTS.PORT_MST_PFD_FK,");
            //sb.Append("  CASE WHEN (SELECT COUNT(*) FROM QUOTATION_DTL_TBL QDT WHERE QDT.QUOTATION_MST_FK=QST.QUOTATION_MST_PK  AND QDT.CONTAINER_TYPE_MST_FK IS NOT NULL)>0 THEN ")
            //sb.Append("  (SELECT ROWTOCOL('SELECT   CT.CONTAINER_TYPE_MST_ID FROM CONTAINER_TYPE_MST_TBL CT    WHERE CT.CONTAINER_TYPE_MST_PK IN (SELECT QDT.CONTAINER_TYPE_MST_FK FROM QUOTATION_DTL_TBL QDT WHERE QDT.QUOTATION_MST_FK=''' || QST.QUOTATION_MST_PK || ''') ORDER BY CT.PREFERENCES ') ")
            //sb.Append("       FROM DUAL) ELSE '' END AS CONTAINER_TYPE_MST_ID, ")
            // sb.Append("                   QST.QUOTATION_MST_PK || ''') ORDER BY CT.PREFERENCES ')")
            //sb.Append("     FROM DUAL)  AS CONTAINER_TYPE_MST_ID,")
            sb.Append(" CMMT.CARGO_MOVE_CODE,ST.INCO_CODE");

            ///END
            sb.Append("    FROM QUOTATION_MST_TBL         QST,");
            sb.Append("       QUOTATION_DTL_TBL QTS,");
            sb.Append("       CUSTOMER_MST_TBL          CMT,");
            sb.Append("       PORT_MST_TBL              POL,");
            sb.Append("       PORT_MST_TBL              POD,");
            sb.Append("       CUSTOMER_MST_TBL           CU,");
            sb.Append("       AGENT_MST_TBL              AGT,");
            sb.Append("       CUSTOMER_CATEGORY_MST_TBL CCMT,COMMODITY_GROUP_MST_TBL  CGMT, OPERATOR_MST_TBL OP,CARGO_MOVE_MST_TBL CMMT,SHIPPING_TERMS_MST_TBL ST,CURRENCY_TYPE_MST_TBL CTMT");
            sb.Append("   WHERE QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK(+)");
            sb.Append("   AND POL.PORT_MST_PK = QTS.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = QTS.PORT_MST_POD_FK");
            sb.Append("   AND CMT.CUSTOMER_MST_PK(+) = QST.CUSTOMER_MST_FK");
            sb.Append("   AND CU.CUSTOMER_MST_PK(+) = QST.THIRD_PARTY_FRTPAYER_FK");
            sb.Append("   AND AGT.AGENT_MST_PK(+) = QST.TARIFF_AGENT_MST_FK  AND CGMT.COMMODITY_GROUP_PK(+)=QTS.COMMODITY_GROUP_FK ");
            sb.Append("   AND CCMT.CUSTOMER_CATEGORY_MST_PK = QST.CUSTOMER_CATEGORY_MST_FK AND OP.OPERATOR_MST_PK(+) = QTS.CARRIER_MST_FK  AND CMMT.CARGO_MOVE_PK(+) = QST.CARGO_MOVE_FK AND ST.SHIPPING_TERMS_MST_PK(+) = QST.SHIPPING_TERMS_MST_PK");
            if (Iquotationpk > 0)
            {
                sb.Append("   AND QST.QUOTATION_MST_PK =  " + Iquotationpk + "");
            }
            try
            {
                DataSet DS = null;
                DS = (objWF.GetDataSet(sb.ToString()));
                return DS;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Fetch_s the version QTN1.
        /// </summary>
        /// <param name="Iquotationpk">The iquotationpk.</param>
        /// <returns></returns>
        public DataSet Fetch_VersionQtn1(int Iquotationpk = 0)
        {
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();

                var _with80 = objWF.MyCommand.Parameters;
                _with80.Add("QUOTATION_FK_IN", Iquotationpk).Direction = ParameterDirection.Input;
                _with80.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                return objWF.GetDataSet("QUOTATION_MST_TBL_PKG", "FETCH_QUOTATION_LISTING");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }

        /// <summary>
        /// Fetches the cont tot.
        /// </summary>
        /// <param name="Iquotationpk">The iquotationpk.</param>
        /// <returns></returns>
        public DataSet FetchContTot(int Iquotationpk = 0)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            Strsql = "  SELECT CY.PREFERENCES,Q.QUOTATION_MST_PK,COUNT(CY.CONTAINER_TYPE_MST_ID) || ' X ' || CY.CONTAINER_TYPE_MST_ID AS CONTID";
            Strsql += " FROM QUOTATION_MST_TBL Q,CONTAINER_TYPE_MST_TBL CY,QUOTATION_DTL_TBL QD ";
            Strsql += " WHERE Q.QUOTATION_MST_PK = QD.QUOTATION_MST_FK ";
            Strsql += " AND QD.CONTAINER_TYPE_MST_FK = CY.CONTAINER_TYPE_MST_PK ";
            Strsql += " AND Q.QUOTATION_MST_PK =" + Iquotationpk;
            Strsql += " GROUP BY Q.QUOTATION_MST_PK,CY.CONTAINER_TYPE_MST_ID,CY.PREFERENCES ORDER BY CY.PREFERENCES ";
            try
            {
                return Objwk.GetDataSet(Strsql);
            }
            catch (Exception ex)
            {
            }
            return new DataSet();
        }
    }
}