#region "Comments"

//'***************************************************************************************************************
//'*  Company Name            :
//'*  Project Title           :    QFOR
//'***************************************************************************************************************
//'*  Created By              :    Santosh on 10-May-16
//'*  Module/Project Leader   :    Santosh Pisipati
//'*  Description             :
//'*  Module/Form/Class Name  :
//'*  Configuration ID        :
//'***************************************************************************************************************
//'*  Revision History
//'***************************************************************************************************************
//'*  Modified Date(DD-MON-YYYY)              Modified By                             Remarks (Bugs Related)
//'*
//'*
//'***************************************************************************************************************

#endregion "Comments"

using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections;
using System.Data;
using System.Text;
using System.Web;
using Microsoft.VisualBasic;

namespace Quantum_QFOR
{
    /// <summary>
    /// 
    /// </summary>
    public class cls_JobCard : CommonFeatures
    {
        private long _PkValueTrans;
        cls_TrackAndTrace objTrackNTrace = new cls_TrackAndTrace();
        cls_SeaBookingEntry objVesselVoyage = new cls_SeaBookingEntry();
        clsConsolidatedInvoices objConsInv = new clsConsolidatedInvoices();
        DataSet MainDS = new DataSet();
        OracleDataAdapter DA = new OracleDataAdapter();
        DataSet dsBkg = new DataSet();
        DataSet ds = new DataSet();

        WorkFlow objWF = new WorkFlow();
        int[,] MatrixA = new int[91, 5];
        int[,] MatrixN = new int[58, 11];
        int alpchk;

        WorkFlow ObjWkAdd = new WorkFlow();
        #region "Agent Rate ENUM"
        public enum AgentFreightHeader
        {
            PK = 0,
            ContainerPK = 1,
            CONTAINER_TYPE_MST_ID = 2,
            FreightElementID = 3,
            FreightElementName = 4,
            FreightElementPK = 5,
            Basis = 6,
            Quantity = 7,
            PaymentType = 8,
            LocationPK = 9,
            LocationID = 10,
            FreightPayerPK = 11,
            FreightPayerID = 12,
            CurrencyPK = 13,
            Rateperbasis = 14,
            Amount = 15,
            ROE = 16,
            Total_Amt = 17,
            Del = 18,
            Print = 19,
            credit = 20,
            BASISID = 21,
            CHARGEABLE_WEIGHT = 22,
            VOLUME_IN_CBM = 23,
            UpdFlag = 24,
            SURCHARGE = 24
        }

        public enum AgentOthChargesHeader
        {
            PK = 0,
            FreightElementPK = 1,
            FreightElementID = 2,
            FreightElementDesc = 3,
            Payment_Type = 4,
            LocationPK = 5,
            LocationID = 6,
            FreightPayerPK = 7,
            FreightPayerID = 8,
            Currency = 9,
            ROE = 10,
            Amount = 11,
            Del = 12,
            Print = 13,
            UpdFlag = 14
        }
        #endregion

        #region "CAN Count"
        public DataSet FetchCANCount(int JobPK)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT * FROM CAN_MST_TBL C WHERE C.JOB_CARD_FK=" + JobPK);
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Available Fields"
        public DataSet FetchAvaialbleFields(int BizType = 0, int Cargotype = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with1 = objWF.MyCommand.Parameters;
                _with1.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with1.Add("CARGOTYPE_IN", Cargotype).Direction = ParameterDirection.Input;
                _with1.Add("SELETED_IN", 0).Direction = ParameterDirection.Input;
                _with1.Add("FL_HEADER", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with1.Add("FL_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("JOB_CARD_TRN_PKG", "JOBCARD_AVAILABLE_FIELDS");
                DataRelation Rel_Field = new DataRelation("YEAR", new DataColumn[] { DS.Tables[0].Columns["FIELD_TYPE"] }, new DataColumn[] { DS.Tables[1].Columns["FIELD_TYPE"] });

                Rel_Field.Nested = true;
                DS.Relations.Add(Rel_Field);
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }

        public DataSet FetchSelectedFields(int BizType = 0, int Cargotype = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with2 = objWF.MyCommand.Parameters;
                _with2.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with2.Add("CARGOTYPE_IN", Cargotype).Direction = ParameterDirection.Input;
                _with2.Add("SELETED_IN", 1).Direction = ParameterDirection.Input;
                _with2.Add("FL_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("JOB_CARD_TRN_PKG", "JOBCARD_SEL_FIELDS");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "Save Commodity Details"
        public void SaveCommodityDetails(int Jobpk)
        {
            WorkFlow objWK = new WorkFlow();
            objWK.OpenConnection();
            OracleCommand insCommand = new OracleCommand();
            OracleTransaction TRAN = null;
            TRAN = objWK.MyConnection.BeginTransaction();
            Int32 RowEft = default(Int32);
            try
            {
                var _with3 = insCommand;
                _with3.Connection = objWK.MyConnection;
                _with3.CommandType = CommandType.StoredProcedure;
                _with3.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JC_COMMODITY_DTL_INS";
                _with3.Parameters.Clear();
                var _with4 = _with3.Parameters;
                _with4.Add("JOB_CARD_TRN_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                _with4.Add("RETURN_VALUE", OracleDbType.Int32).Direction = ParameterDirection.Output;
                var _with5 = objWK.MyDataAdapter;
                _with5.InsertCommand = insCommand;
                _with5.InsertCommand.Transaction = TRAN;
                RowEft = _with5.InsertCommand.ExecuteNonQuery();
                if (RowEft > 0)
                {
                    TRAN.Commit();
                }
                else
                {
                    TRAN.Rollback();
                }
            }
            catch (OracleException oraEx)
            {
                ErrorMessage = oraEx.Message;
                throw oraEx;
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
                throw ex;
            }
        }

        public void SaveSplReqDetails(int JOBPK, int CntType, string SplReq = "")
        {
            WorkFlow objWK = new WorkFlow();
            WorkFlow objWK1 = new WorkFlow();
            objWK.OpenConnection();
            try
            {
                Int32 i = default(Int32);
                string strSql = null;
                string strSql1 = null;
                string drCntKind = null;
                DataSet DSCont = new DataSet();
                strSql = "SELECT C.CONTAINER_KIND FROM CONTAINER_TYPE_MST_TBL C WHERE C.CONTAINER_TYPE_MST_PK= " + CntType + "";
                strSql1 = " SELECT JC.JOB_TRN_CONT_PK  FROM JOB_TRN_CONT JC  WHERE JC.JOB_CARD_TRN_FK = " + JOBPK;
                DSCont = objWK1.GetDataSet(strSql1.ToString());

                var _with6 = objWK.MyCommand;
                _with6.Parameters.Clear();
                _with6.CommandType = CommandType.Text;
                _with6.CommandText = strSql;
                drCntKind = Convert.ToString(_with6.ExecuteScalar());
                objWK.MyCommand.Parameters.Clear();
                if (DSCont.Tables[0].Rows.Count > 0)
                {
                    for (i = 0; i <= DSCont.Tables[0].Rows.Count - 1; i++)
                    {
                        if (Convert.ToString(CommodityGroup) == "HAZARDOUS")
                        {
                            if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                            {
                                arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }
                            else
                            {
                                arrMessage = SaveTransactionHZSpcl(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }

                        }
                        else if (Convert.ToString(CommodityGroup) == "REEFER")
                        {
                            if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                            {
                                arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }
                            else
                            {
                                arrMessage = SaveTransactionReefer(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }

                        }
                        else if (Convert.ToString(CommodityGroup) == "ODC")
                        {
                            if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                            {
                                arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }
                        }
                        else
                        {
                            if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                            {
                                arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName, SplReq, Convert.ToInt64(DSCont.Tables[0].Rows[i][0]));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        #endregion

        #region "fetch MaWB Nr"
        public DataSet Fetch_MAwbNr(string jobcardNo, long usrLocFK = 0)
        {
            WorkFlow ObjWk = new WorkFlow();
            StringBuilder strQuery = new StringBuilder();

            try
            {
                strQuery.Append("   select abn.airway_bill_no" );
                strQuery.Append("     from airway_bill_trn abn , airway_bill_mst_tbl am " );
                strQuery.Append("   where abn.airway_bill_mst_fk = am.airway_bill_mst_pk  " );
                strQuery.Append("   and  abn.reference_no = '" + jobcardNo + "'" );
                strQuery.Append(" and am.location_mst_fk=" + usrLocFK );

                strQuery.Append("" );

                return ObjWk.GetDataSet(strQuery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " Fetch ROE"
        public DataSet Fetch_ROE(string CurrencyPK, string ConversionDate = "")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            if (string.IsNullOrEmpty(ConversionDate))
            {
                ConversionDate = " TO_DATE(SYSDATE,DATEFORMAT) ";
            }
            else
            {
                ConversionDate = " TO_DATE('" + ConversionDate + "',DATEFORMAT) ";
            }
            try
            {
                strSQL.Append( "SELECT ROUND(GET_EX_RATE(CURR.CURRENCY_MST_PK," + HttpContext.Current.Session["currency_mst_pk"] + " , ");
                strSQL.Append( " round(" + ConversionDate + " - .5)),6) AS ROE, ");
                strSQL.Append( " ROUND(GET_EX_RATE_BUY(CURR.CURRENCY_MST_PK," + HttpContext.Current.Session["currency_mst_pk"] + " , ");
                strSQL.Append( " round(" + ConversionDate + " - .5)),6) AS ROE_BUY ");
                strSQL.Append( " FROM CURRENCY_TYPE_MST_TBL CURR ");
                strSQL.Append( " WHERE CURR.ACTIVE_FLAG = 1 ");
                strSQL.Append( " AND CURR.CURRENCY_MST_PK = '" + CurrencyPK + "' ");
                DataSet dsExchRt = new DataSet();
                dsExchRt = objWF.GetDataSet(strSQL.ToString());
                if (dsExchRt.Tables[0].Rows.Count == 0)
                {
                    DataRow dr = null;
                    dr = dsExchRt.Tables[0].NewRow();
                    dr[0] = 0;
                    dr[1] = 0;
                    dsExchRt.Tables[0].Rows.Add(dr);
                }
                return dsExchRt;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Fetch Job Card For Listing Screen as per the new Requirement"
        public DataSet FetchAllJob(string jobrefNO = "", string bookingNo = "", string HblNo = "", string polID = "", string podId = "", string polPK = "", string podPK = "", string jcStatus = "", string shipper = "", string consignee = "",
        string agent = "", string bizType = "3", string processType = "", string cargoType = "", double SearchFor = 0, Int32 SearchFortime = 0, string SortColumn = "", Int32 CurrentPage = 0, Int32 TotalPage = 0, string SortType = " ASC ",
        bool BOOKING = false, string MblNo = "", long lngUsrLocFk = 0, string containerno = "", int jctype = 0, Int32 flag = 1, string hdnPlrpk = "", string hdnPfdpk = "", string carrierFk = "", string vesselPk = "",
        string UcrNr = "", string Commpk = "0", bool flgXBkg = false, bool flgCL = false, string VesselName = "", string VoyageFlightNo = "", string PONumber = "", bool IsNominated = false, int SalesExecMstFk = 0, int OtherStatus = 0,
        long CustomerPK = 0, long NotifyPK = 0)
        {

            WorkFlow objWF = new WorkFlow();
            DataSet MainDS = new DataSet();
            objWF.MyConnection.Open();
            objWF.MyCommand = new OracleCommand();
            var _with7 = objWF.MyCommand;
            _with7.Connection = objWF.MyConnection;
            _with7.CommandType = CommandType.StoredProcedure;
            _with7.CommandText = objWF.MyUserName + ".JOB_CARD_TRN_PKG.FETCH_JOBCARD";
            _with7.Parameters.Clear();
            _with7.Parameters.Add("BOOKING_REF_NO_IN", bookingNo).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("JOBCARD_REF_NO_IN", jobrefNO).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("JOB_CARD_STATUS_IN", jcStatus).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("JCTYPE_IN", jctype).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("OTHER_STATUS_IN", OtherStatus).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("POL_ID_IN", polID).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("POD_ID_IN", podId).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("POL_FK_IN", polPK).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("POD_FK_IN", podPK).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("VESSEL_NAME_IN", VesselName).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("VOYAGE_FLIGHT_IN", VoyageFlightNo).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("VOYAGE_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CONTAINER_NO_IN", containerno).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("SHIPPER_FK_IN", shipper).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CONSIGNEE_FK_IN", consignee).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("AGENT_MST_FK_IN", agent).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("UCR_NO_IN", UcrNr).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("COMMODITY_GROUP_FK_IN", Commpk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CHK_NOMINATED_IN", (IsNominated ? 1 : 0)).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CHK_CSR_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("EXECUTIVE_MST_FK_IN", SalesExecMstFk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("PROCESS_TYPE_IN", processType).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("BUSINESS_TYPE_IN", bizType).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CARGO_TYPE_IN", cargoType).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CUSTOMER_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("COL_PLACE_MST_FK_IN", hdnPlrpk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("DEL_PLACE_MST_FK_IN", hdnPfdpk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CARRIER_MST_FK_IN", carrierFk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("HBL_HAWB_REF_NO_IN", HblNo).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("MBL_MAWB_REF_NO_IN", MblNo).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("USER_LOCATION_FK_IN", lngUsrLocFk).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("LC_NUMBER_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("PO_NUMBER_IN", PONumber).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CHK_CAN_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CHK_DO_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("POO_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CB_FLAG_IN", (flgXBkg ? 1 : 0)).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CL_FLAG_IN", (flgCL ? 1 : 0)).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("LOAD_FLAG_IN", flag).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("M_PAGESIZE_IN", RecordsPerPage).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CUSTOMER_FK_IN", CustomerPK).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("NOTIFY_FK_IN", NotifyPK).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("SEARCH_FOR_IN", SearchFor).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("SEARCH_FOR_TIME_IN", SearchFortime).Direction = ParameterDirection.Input;
            _with7.Parameters.Add("CURRENT_PAGE_IN", CurrentPage).Direction = ParameterDirection.InputOutput;
            _with7.Parameters.Add("TOTAL_PAGE_IN", TotalPage).Direction = ParameterDirection.InputOutput;
            _with7.Parameters.Add("JC_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
            try
            {
                objWF.MyDataAdapter = new OracleDataAdapter(objWF.MyCommand);
                objWF.MyDataAdapter.Fill(MainDS);
                CurrentPage = Convert.ToInt32(objWF.MyCommand.Parameters["CURRENT_PAGE_IN"].Value);
                TotalPage = Convert.ToInt32(objWF.MyCommand.Parameters["TOTAL_PAGE_IN"].Value);
                objWF.MyCommand.Dispose();
                objWF.MyDataAdapter.Dispose();
                return MainDS;
            }
            catch (OracleException sqlExp)
            {
                //ErrorMessage = sqlExp.Message
                throw sqlExp;
            }
            catch (Exception exp)
            {
                //ErrorMessage = exp.Message
                throw exp;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }

        public DataSet fn_FetchListingNew(string jobrefNO = "", string bookingNo = "", string HblNo = "", string polID = "", string podId = "", string polName = "", string podName = "", string jcStatus = "", string shipper = "", string consignee = "",
        string agent = "", string process = "", string cargoType = "", double SearchFor = 0, Int32 SearchFortime = 0, string SortColumn = "", Int32 CurrentPage = 0, Int32 TotalPage = 0, string SortType = " ASC ", string CurrBizType = "3",
        bool BOOKING = false, string Mbl = "", long lngUsrLocFk = 0, string containerno = "", int jctype = 0, Int32 flag = 0, string hdnPlrpk = "", string hdnPfdpk = "", string hdnSLpk = "", string hdnVslpk = "",
        string UcrNr = "", string Commpk = "0", bool flgXBkg = false, bool flgCL = false, string VesselName = "", string PONumber = "", bool IsNominated = false, int SalesExecMstFk = 0, int OtherStatus = 0)
        {
            Int32 last = default(Int32);
            Int32 start = default(Int32);
            string strSQL = null;
            string strCondition = null;
            Int32 TotalRecords = default(Int32);
            WorkFlow objWF = new WorkFlow();
            StringBuilder buildQuery = new StringBuilder();
            StringBuilder buildCondition = new StringBuilder();
            if (BOOKING == false)
            {
                //2exp 1-imp
                if (process == "2")
                {
                    buildCondition.Append( "     BOOKING_MST_TBL BK, JOB_CARD_TRN JC,");
                    buildCondition.Append( "     HBL_EXP_TBL HBL, ");
                    buildCondition.Append( "     MBL_EXP_TBL MBL, ");
                    buildCondition.Append( "     JOB_TRN_CONT cont, ");
                }
                else
                {
                    buildCondition.Append( "     BOOKING_MST_TBL BK, ");
                    buildCondition.Append( "     JOB_CARD_TRN JC,");
                    buildCondition.Append( "     JOB_TRN_CONT cont, ");
                }

                buildCondition.Append( "     CUSTOMER_MST_TBL SH,");

                if (process == "2")
                {
                    buildCondition.Append( "     CUSTOMER_MST_TBL CO,");
                }

                buildCondition.Append( "     PORT_MST_TBL POL,PORT_MST_TBL POD, ");
                if (process == "2")
                {
                    buildCondition.Append( "     AGENT_MST_TBL DPA, ");
                }
                else
                {
                    buildCondition.Append( "     AGENT_MST_TBL POLA, ");
                }

                buildCondition.Append( "     EMPLOYEE_MST_TBL EMP,");
                if (process == "2")
                {
                    buildCondition.Append( "     EMPLOYEE_MST_TBL DEF_EXEC,");
                }
                buildCondition.Append( "     OPERATOR_MST_TBL     OMT, ");
                buildCondition.Append( "     VESSEL_VOYAGE_TRN    VVT, ");
                buildCondition.Append( "    VESSEL_VOYAGE_TBL    VST, ");

                buildCondition.Append( "     USER_MST_TBL UMT ");
                buildCondition.Append( "      where ");

                //exp
                if (process == "2")
                {
                    buildCondition.Append( "   BK.BOOKING_MST_PK = JC.BOOKING_MST_FK (+)");
                    buildCondition.Append( "   AND JC.SHIPPER_CUST_MST_FK = SH.CUSTOMER_MST_PK");
                    buildCondition.Append( "   AND cont.job_card_trn_fk=jc.job_card_trn_pk");
                    //added manivannan
                    buildCondition.Append( "   AND JC.CONSIGNEE_CUST_MST_FK = CO.CUSTOMER_MST_PK(+)");
                    buildCondition.Append( "   AND BK.PORT_MST_POL_FK = POL.PORT_MST_PK ");
                    buildCondition.Append( "   AND BK.PORT_MST_POD_FK = POD.PORT_MST_PK ");
                    buildCondition.Append( "    AND  JC.DP_AGENT_MST_FK= DPA.AGENT_MST_PK(+) ");
                    buildCondition.Append( "   AND JC.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK(+) ");
                    buildCondition.Append( "   AND JC.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+) ");
                    ///
                    buildCondition.Append( "    AND VVT.VESSEL_VOYAGE_TBL_FK = VST.VESSEL_VOYAGE_TBL_PK(+) ");
                    buildCondition.Append( "   AND JC.VOYAGE_TRN_FK=VVT.VOYAGE_TRN_PK(+)");
                    buildCondition.Append( "    AND OMT.OPERATOR_MST_PK(+) = BK.CARRIER_MST_FK");
                    ///
                    buildCondition.Append( " AND (UMT.DEFAULT_LOCATION_FK = " + lngUsrLocFk + " ");
                    buildCondition.Append( "        OR POL.LOCATION_MST_FK = " + lngUsrLocFk + ") ");

                    buildCondition.Append( " AND JC.CREATED_BY_FK = UMT.USER_MST_PK ");
                    buildCondition.Append( "   AND SH.REP_EMP_MST_FK = DEF_EXEC.EMPLOYEE_MST_PK(+)");
                }
                else
                {
                    buildCondition.Append( "   BK.BOOKING_MST_PK = JC.BOOKING_MST_FK (+)");
                    buildCondition.Append( "   AND JC.SHIPPER_CUST_MST_FK = SH.CUSTOMER_MST_PK(+) ");
                    buildCondition.Append( "   AND jc.job_card_trn_pk = cont.job_card_trn_fk (+)");
                    buildCondition.Append( "   AND JC.PORT_MST_POL_FK = POL.PORT_MST_PK ");
                    buildCondition.Append( "   AND JC.PORT_MST_POD_FK = POD.PORT_MST_PK ");
                    buildCondition.Append( "   AND JC.POL_AGENT_MST_FK = POLA.AGENT_MST_PK(+) ");

                    buildCondition.Append( "    AND VVT.VESSEL_VOYAGE_TBL_FK = VST.VESSEL_VOYAGE_TBL_PK(+) ");
                    buildCondition.Append( "   AND JC.VOYAGE_TRN_FK=VVT.VOYAGE_TRN_PK(+)");
                    buildCondition.Append( "    AND OMT.OPERATOR_MST_PK(+) = JC.CARRIER_MST_FK");
                    ///
                    buildCondition.Append( " AND ((UMT.DEFAULT_LOCATION_FK = " + lngUsrLocFk + " and JC.JC_AUTO_MANUAL = 0) ");
                    buildCondition.Append( "  OR (JC.PORT_MST_POD_FK ");
                    buildCondition.Append( " IN (SELECT T.PORT_MST_FK FROM LOC_PORT_MAPPING_TRN T WHERE T.LOCATION_MST_FK= " + lngUsrLocFk + ")  and JC.JC_AUTO_MANUAL = 1)) ");
                    buildCondition.Append( " AND jc.CREATED_BY_FK = UMT.USER_MST_PK ");
                    //Added by Faheem
                    buildCondition.Append( " AND JC.CONSOLE = 1 ");
                    //End
                    if (!string.IsNullOrEmpty(PONumber))
                    {
                        buildCondition.Append( " AND UPPER(JC.PO_NUMBER) LIKE '%" + PONumber.ToUpper().Replace("'", "''") + "%'");
                    }
                    if (jctype != 2)
                    {
                        buildCondition.Append( "AND  JC.JC_AUTO_MANUAL=" + jctype);
                    }
                    //buildCondition.Append(vbCrLf & "   AND CO.REP_EMP_MST_FK = DEF_EXEC.EMPLOYEE_MST_PK(+)")
                }
                buildCondition.Append( "   AND JC.EXECUTIVE_MST_FK = EMP.EMPLOYEE_MST_PK(+)");

                if (jobrefNO.Length > 0)
                {
                    buildCondition.Append( " AND UPPER(JC.JOBCARD_REF_NO) LIKE '%" + jobrefNO.ToUpper().Replace("'", "''") + "%'");
                }
                if (SearchFor > 0 & SearchFortime > 0)
                {
                    int NO = -Convert.ToInt32(SearchFor);
                    System.DateTime Time = default(System.DateTime);
                    switch (SearchFortime)
                    {
                        case 1:
                            Time = DateTime.Today.AddDays(NO);
                            break;
                        case 2:
                            Time = DateTime.Today.AddDays(NO * 7);
                            break;
                        case 3:
                            Time = DateTime.Today.AddMonths(NO);
                            break;
                        case 4:
                            Time = DateTime.Today.AddYears(NO);
                            break;
                    }
                    buildCondition.Append( " AND JOBCARD_DATE BETWEEN TO_DATE('" + Time + "','" + dateFormat + "') AND TO_DATE('" + DateTime.Today + "','" + dateFormat + "')");
                }
                if (process == "2")
                {
                    if (bookingNo.Length > 0)
                    {
                        buildCondition.Append( " AND UPPER(BOOKING_REF_NO) LIKE '%" + bookingNo.ToUpper().Replace("'", "''") + "%'");
                    }
                    if (SearchFor > 0 & SearchFortime > 0)
                    {
                        int NO = -Convert.ToInt32(SearchFor);
                        System.DateTime Time = default(System.DateTime);
                        switch (SearchFortime)
                        {
                            case 1:
                                Time = DateTime.Today.AddDays(NO);
                                break;
                            case 2:
                                Time = DateTime.Today.AddDays(NO * 7);
                                break;
                            case 3:
                                Time = DateTime.Today.AddMonths(NO);
                                break;
                            case 4:
                                Time = DateTime.Today.AddYears(NO);
                                break;
                        }
                        buildCondition.Append( " AND BOOKING_DATE BETWEEN TO_DATE('" + Time + "','" + dateFormat + "') AND TO_DATE('" + DateTime.Today + "','" + dateFormat + "')");
                    }
                    buildCondition.Append( " AND BK.STATUS in (2,5,6, DECODE(JC.WIN_XML_GEN, 1, 3, -1)) ");
                }
                if (jcStatus.Length > 0)
                {
                    buildCondition.Append( " AND (JC.JOB_CARD_STATUS IS NULL OR JC.JOB_CARD_STATUS =" + jcStatus + ")");
                }
                if (HblNo.Trim().Length > 0)
                {
                    buildCondition.Append( " AND UPPER(HBL_REF_NO) LIKE '%" + HblNo.ToUpper().Replace("'", "''") + "%'");
                }
                if (polID.Length > 0)
                {
                    buildCondition.Append( "       AND UPPER(POL.PORT_ID) = '" + polID.ToUpper().Replace("'", "''") + "'");
                }
                if (polName.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POL.PORT_NAME) = '" + polName.ToUpper().Replace("'", "''") + "' ");
                }
                if (podId.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POD.PORT_ID) LIKE '" + podId.ToUpper().Replace("'", "''") + "'");
                }
                if (podName.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POD.PORT_NAME) LIKE '" + podName.ToUpper().Replace("'", "''") + "' ");
                }
                //'
                if (VesselName.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(VST.VESSEL_NAME) = '" + VesselName.ToUpper().Replace("'", "''") + "' ");
                }
                //For export
                if (Convert.ToInt32(process) == 2)
                {
                    if (!string.IsNullOrEmpty(hdnPlrpk))
                    {
                        buildCondition.Append( " AND BK.COL_PLACE_MST_FK = " + hdnPlrpk);
                    }
                    if (!string.IsNullOrEmpty(hdnPfdpk))
                    {
                        buildCondition.Append( "  AND BK.DEL_PLACE_MST_FK = " + hdnPfdpk);
                    }
                    if (!string.IsNullOrEmpty(hdnSLpk))
                    {
                        buildCondition.Append( "  AND BK.CARRIER_MST_FK = " + hdnSLpk);
                    }
                    //For import
                }
                else
                {
                    if (!string.IsNullOrEmpty(hdnPfdpk))
                    {
                        buildCondition.Append( "  AND JC.DEL_PLACE_MST_FK = " + hdnPfdpk);
                    }
                    if (!string.IsNullOrEmpty(hdnSLpk))
                    {
                        buildCondition.Append( "  AND JC.CARRIER_MST_FK = " + hdnSLpk);
                    }
                }
                if (!string.IsNullOrEmpty(hdnVslpk))
                {
                    buildCondition.Append( "  AND JC.VOYAGE_TRN_FK = " + hdnVslpk);
                }
                if (!string.IsNullOrEmpty(UcrNr))
                {
                    buildCondition.Append( "  AND JC.UCR_NO = '" + UcrNr + "'");
                }
                if (Convert.ToInt32(Commpk) != 0)
                {
                    buildCondition.Append( "  AND JC.COMMODITY_GROUP_FK = " + Commpk);
                }
                if (flgXBkg)
                {
                    buildCondition.Append( "  AND JC.CB_AGENT_MST_FK IS NOT NULL");
                }
                if (flgCL)
                {
                    buildCondition.Append( "  AND JC.CL_AGENT_MST_FK IS NOT NULL");
                }
                if (containerno.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(CONT.CONTAINER_NUMBER) LIKE '" + containerno.ToUpper().Replace("'", "''") + "' ");
                }
                ///Modified By Koteshwari on 2/3/2011
                //If cargoType.Length > 0 Then
                if (Convert.ToInt32(cargoType) > 0)
                {
                    if (process == "2")
                    {
                        buildCondition.Append( "   AND BK.CARGO_TYPE = " + cargoType);
                    }
                    else
                    {
                        buildCondition.Append( "  AND JC.CARGO_TYPE = " + cargoType);
                    }
                }
                if (agent.Length > 0)
                {
                    if (process == "2")
                    {
                        //buildCondition.Append(vbCrLf & " AND  UPPER(DPA.AGENT_NAME) = '" & agent.ToUpper.Replace("'", "''") & "'")
                        buildCondition.Append( "  AND DPA.AGENT_MST_PK = " + agent);
                    }
                    else
                    {
                        //buildCondition.Append(vbCrLf & " AND  UPPER(POLA.AGENT_NAME) = '" & agent.ToUpper.Replace("'", "''") & "'")
                        buildCondition.Append( "  AND POLA.AGENT_MST_PK = " + agent);
                    }
                }
                if (shipper.Length > 0)
                {
                    // buildCondition.Append(vbCrLf & " AND UPPER(SH.CUSTOMER_NAME) LIKE '" & shipper.ToUpper.Replace("'", "''") & "'")
                    buildCondition.Append( "  AND SH.CUSTOMER_MST_PK = " + shipper);
                }
                if (consignee.Length > 0)
                {
                    //buildCondition.Append(vbCrLf & " AND UPPER(CO.CUSTOMER_NAME) LIKE '" & consignee.ToUpper.Replace("'", "''") & "'")
                    buildCondition.Append( "  AND CO.CUSTOMER_MST_PK = " + consignee);
                }
                if (Mbl.Trim().Length > 0)
                {
                    buildCondition.Append( " AND UPPER(MBL_REF_NO) LIKE '%" + Mbl.ToUpper().Replace("'", "''") + "%'");
                }
            }
            else
            {
                buildCondition.Append( "     BOOKING_MST_TBL  BK,  ");
                buildCondition.Append( "     CUSTOMER_MST_TBL SH,");
                buildCondition.Append( "     CUSTOMER_MST_TBL CO,");
                buildCondition.Append( "     PORT_MST_TBL POL,PORT_MST_TBL POD, ");
                buildCondition.Append( "     AGENT_MST_TBL CBA, ");
                buildCondition.Append( "     AGENT_MST_TBL CLA, ");
                //'
                buildCondition.Append( "     OPERATOR_MST_TBL     OMT, ");
                buildCondition.Append( "      VESSEL_VOYAGE_TRN    VVT, ");
                buildCondition.Append( "    VESSEL_VOYAGE_TBL    VST, ");
                //'
                buildCondition.Append( "     USER_MST_TBL UMT ");
                buildCondition.Append( "      where ");
                buildCondition.Append( "   BK.CONS_CUSTOMER_MST_FK = CO.CUSTOMER_MST_PK(+)");
                buildCondition.Append( "   AND BK.CUST_CUSTOMER_MST_FK = SH.CUSTOMER_MST_PK");
                buildCondition.Append( "   AND BK.PORT_MST_POL_FK = POL.PORT_MST_PK ");
                buildCondition.Append( "   AND BK.PORT_MST_POD_FK = POD.PORT_MST_PK ");
                buildCondition.Append( "   AND BK.CB_AGENT_MST_FK = CBA.AGENT_MST_PK (+)");
                buildCondition.Append( "   AND BK.CL_AGENT_MST_FK = CLA.AGENT_MST_PK (+) ");
                ///
                buildCondition.Append( "    AND VVT.VESSEL_VOYAGE_TBL_FK = VST.VESSEL_VOYAGE_TBL_PK(+) ");
                buildCondition.Append( "   AND JC.VOYAGE_TRN_FK=VVT.VOYAGE_TRN_PK(+)");
                buildCondition.Append( "    AND OMT.OPERATOR_MST_PK(+) = JC.CARRIER_MST_FK");
                ///
                buildCondition.Append( " AND BK.BOOKING_MST_PK NOT IN(SELECT JC.BOOKING_MST_FK FROM JOB_CARD_TRN JC) ");
                buildCondition.Append( " AND UMT.DEFAULT_LOCATION_FK = " + lngUsrLocFk + " ");
                buildCondition.Append( " AND BK.CREATED_BY_FK = UMT.USER_MST_PK ");
                if (bookingNo.Length > 0)
                {
                    buildCondition.Append( " AND UPPER(BOOKING_REF_NO) LIKE '%" + bookingNo.ToUpper().Replace("'", "''") + "%'");
                }
                if (SearchFor > 0 & SearchFortime > 0)
                {
                    int NO = -Convert.ToInt32(SearchFor);
                    System.DateTime Time = default(System.DateTime);
                    switch (SearchFortime)
                    {
                        case 1:
                            Time = DateTime.Today.AddDays(NO);
                            break;
                        case 2:
                            Time = DateTime.Today.AddDays(NO * 7);
                            break;
                        case 3:
                            Time = DateTime.Today.AddMonths(NO);
                            break;
                        case 4:
                            Time = DateTime.Today.AddYears(NO);
                            break;
                    }
                    buildCondition.Append( " AND BOOKING_DATE BETWEEN TO_DATE('" + Time + "','" + dateFormat + "') AND TO_DATE('" + DateTime.Today + "','" + dateFormat + "')");
                }
                buildCondition.Append( " AND BK.STATUS in (2,5,6) ");
                if (polID.Length > 0)
                {
                    buildCondition.Append( "       AND UPPER(POL.PORT_ID) = '" + polID.ToUpper().Replace("'", "''") + "'");
                }
                if (polName.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POL.PORT_NAME) = '" + polName.ToUpper().Replace("'", "''") + "' ");
                }
                if (podId.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POD.PORT_ID) LIKE '" + podId.ToUpper().Replace("'", "''") + "'");
                }
                if (podName.Length > 0)
                {
                    buildCondition.Append( "     AND UPPER(POD.PORT_NAME) LIKE '" + podName.ToUpper().Replace("'", "''") + "' ");
                }
                if (hdnPlrpk != "0")
                {
                    buildCondition.Append( " AND BK.COL_PLACE_MST_FK = " + hdnPlrpk);
                }
                if (hdnPfdpk != "0")
                {
                    buildCondition.Append( "  AND BK.DEL_PLACE_MST_FK = " + hdnPfdpk);
                }
                if (hdnSLpk != "0")
                {
                    buildCondition.Append( "  AND BK.CARRIER_MST_FK = " + hdnSLpk);
                }
                if (hdnVslpk != "0")
                {
                    buildCondition.Append( "  AND JC.VOYAGE_TRN_FK = " + hdnVslpk);
                }
                if (UcrNr != "0")
                {
                    buildCondition.Append( "  AND JC.UCR_NO = '" + UcrNr + "'");
                }
                if (Convert.ToInt32(Commpk) != 0)
                {
                    buildCondition.Append( "  AND JC.COMMODITY_GROUP_FK = " + Commpk);
                }
                if (flgXBkg)
                {
                    buildCondition.Append( "  AND JC.CB_AGENT_MST_FK IS NOT NULL");
                }
                if (flgCL)
                {
                    buildCondition.Append( "  AND JC.CL_AGENT_MST_FK IS NOT NULL");
                }
                ///Modified By Koteshwari on 2/3/2011
                //If cargoType.Length > 0 Then
                if (Convert.ToInt32(cargoType) > 0)
                {
                    buildCondition.Append( "   AND BK.CARGO_TYPE = " + cargoType);
                }
                if (agent.Length > 0)
                {
                    if (process == "2")
                    {
                        //buildCondition.Append(vbCrLf & " AND  UPPER(DPA.AGENT_NAME) = '" & agent.ToUpper.Replace("'", "''") & "'")
                        buildCondition.Append( "  AND DPA.AGENT_MST_PK = " + agent);
                    }
                    else
                    {
                        //buildCondition.Append(vbCrLf & " AND  UPPER(POLA.AGENT_NAME) = '" & agent.ToUpper.Replace("'", "''") & "'")
                        buildCondition.Append( "  AND POLA.AGENT_MST_PK = " + agent);
                    }
                }
                if (shipper.Length > 0)
                {
                    //buildCondition.Append(vbCrLf & " AND UPPER(SH.CUSTOMER_NAME) LIKE '" & shipper.ToUpper.Replace("'", "''") & "'")
                    buildCondition.Append( "  AND SH.CUSTOMER_MST_PK = " + shipper);
                }
                if (consignee.Length > 0)
                {
                    //buildCondition.Append(vbCrLf & " AND UPPER(CO.CUSTOMER_NAME) LIKE '" & consignee.ToUpper.Replace("'", "''") & "'")
                    buildCondition.Append( "  AND CO.CUSTOMER_MST_PK = " + consignee);
                }
            }
            //If process = 2 Then 'export
            //    If IsNominated Then
            //        buildCondition.Append(vbCrLf & "   AND JC.CHK_NOMINATED = 1")
            //    ElseIf SalesExecMstFk > 0 Then
            //        buildCondition.Append(vbCrLf & "   AND JC.EXECUTIVE_MST_FK = " & SalesExecMstFk)
            //    End If
            //Else
            //    If IsNominated Then
            //        buildCondition.Append(vbCrLf & "   AND JC.JC_AUTO_MANUAL = 1 AND JC.CHK_CSR=0")
            //    ElseIf SalesExecMstFk > 0 Then
            //        buildCondition.Append(vbCrLf & "   AND JC.EXECUTIVE_MST_FK = " & SalesExecMstFk)
            //    End If
            //End If
            //export
            if (Convert.ToInt32(process) == 2 & IsNominated)
            {
                buildCondition.Append( "   AND JC.CHK_NOMINATED = 1");
            }
            if (SalesExecMstFk > 0)
            {
                buildCondition.Append( "   AND (JC.EXECUTIVE_MST_FK = " + SalesExecMstFk);
                buildCondition.Append( "    OR DEF_EXEC.EMPLOYEE_MST_PK=" + SalesExecMstFk + ")");
            }

            if (OtherStatus == 1)
            {
                buildCondition.Append( "   AND jc.win_xml_gen = 1");
                //'Generated
            }
            else if (OtherStatus == 2)
            {
                buildCondition.Append( "   AND jc.win_xml_gen = 0");
                //'Not Generate
            }
            else if (OtherStatus == 3)
            {
                buildCondition.Append( "   AND jc.win_xml_status = 1");
                //'Active
            }
            else if (OtherStatus == 4)
            {
                buildCondition.Append( "   AND jc.win_xml_status = 2");
                //'Completed
            }
            else if (OtherStatus == 5)
            {
                buildCondition.Append( "   AND jc.win_xml_status = 3");
                //'Cancelled
            }
            else if (OtherStatus == 6)
            {
                buildCondition.Append( "   AND jc.win_xml_status = 0");
                //'NA
            }
            else if (OtherStatus == 7)
            {
                buildCondition.Append( "   AND jc.win_ack_status = 0");
                //' NR
            }
            else if (OtherStatus == 8)
            {
                buildCondition.Append( "   AND jc.win_ack_status = 1");
                //' Ack not received
            }
            else if (OtherStatus == 9)
            {
                buildCondition.Append( "   AND jc.win_ack_status = 2");
                //' Success
            }
            else if (OtherStatus == 10)
            {
                buildCondition.Append( "   AND jc.win_ack_status = 3");
                //' Failure
            }
            else if (OtherStatus == 11)
            {
                buildCondition.Append( "   AND jc.win_ack_status = 4");
                //' Warning
            }

            if (flag == 0)
            {
                buildCondition.Append( " AND 1=2 ");
            }
            strCondition = buildCondition.ToString();

            buildQuery.Append( "     Select distinct " );
            if (process == "2")
            {
                buildQuery.Append( "       JC.JOB_CARD_TRN_PK JCPK, ");
                buildQuery.Append( "       JC.JOBCARD_REF_NO JCREFNR, ");
                buildQuery.Append( "       JC.JOBCARD_DATE JCDATE, ");
                ///'''
                buildQuery.Append( "       BK.BOOKING_MST_PK BKGPK, ");
                buildQuery.Append( "       BK.BOOKING_REF_NO BKGREFNR, ");
                buildQuery.Append( "       SH.CUSTOMER_MST_PK, ");
                buildQuery.Append( "       SH.CUSTOMER_ID, ");
                buildQuery.Append( "       SH.CUSTOMER_NAME, ");
                ///
                buildQuery.Append( "        OMT.OPERATOR_ID SLID, ");
                buildQuery.Append( "        (CASE ");
                buildQuery.Append( "       WHEN (NVL(VST.VESSEL_NAME, '') || '/' || ");
                buildQuery.Append( "        NVL(VVT.VOYAGE, '') = '/') THEN ");
                buildQuery.Append( "        '' ");
                buildQuery.Append( "          ELSE ");
                buildQuery.Append( "         NVL(VST.VESSEL_NAME, '') || '/' || ");
                buildQuery.Append( "         NVL(VVT.VOYAGE, '') ");
                buildQuery.Append( "          END) AS VESVOYAGE, ");
                buildQuery.Append( "         POL.PORT_ID POL, ");
                buildQuery.Append( "        POD.PORT_ID POD, ");
                buildQuery.Append( "        VVT.POL_ETD ETD, ");
                buildQuery.Append( "        VVT.POD_ETA ETA, ");
                ///
                //buildQuery.Append(vbCrLf & "       HBL.HBL_REF_NO HBLREFNR, ")
                //buildQuery.Append(vbCrLf & "       MBL.MBL_REF_NO MBLREFNR, ")
                //'Added By Koteshwari on 2/3/2011
                buildQuery.Append( "       DECODE(BK.CARGO_TYPE, '1','FCL','2','LCL','4','BBC' ) CARGO_TYPE,");
                //'End
                buildQuery.Append( "       HBL.HBL_REF_NO HBLREFNR, ");
                buildQuery.Append( "       MBL.MBL_REF_NO MBLREFNR, ");
                buildQuery.Append( "       NVL(EMP.EMPLOYEE_NAME,NVL(DEF_EXEC.EMPLOYEE_NAME,'CSR')) SALES_EXEC, ");
                buildQuery.Append( "       DECODE(JC.JOB_CARD_STATUS, '1','Open','2','Close') JCSTATUS,");
                //'
                buildQuery.Append( "       Decode(jc.win_xml_gen, 0, 'Not Gen.', 1,'Generated') XMLSTATUS, ");
                buildQuery.Append( "       Decode(jc.win_xml_status, 0, 'NA', 1, 'Active', 2, 'Completed', 3, 'Cancelled')  WINSTATUS, ");
                buildQuery.Append( "       Decode(jc.win_ack_status, 0, 'NR', 1, 'Pending for Ack', 2, 'Success', 3, 'Failure',4,'Warning') SUCFAIL, ");
                buildQuery.Append( "       '' SEL ");
            }
            else
            {
                buildQuery.Append( "       JC.JOB_CARD_TRN_PK JCPK, ");
                buildQuery.Append( "       JC.JOBCARD_REF_NO JCREFNR, ");
                buildQuery.Append( "       JC.JOBCARD_DATE JCDATE, ");
                ///'''
                buildQuery.Append( "       BK.BOOKING_MST_PK BKGPK, ");
                buildQuery.Append( "       BK.BOOKING_REF_NO BKGREFNR, ");
                //buildQuery.Append(vbCrLf & "       CO.CUSTOMER_MST_PK, ")
                //buildQuery.Append(vbCrLf & "       CO.CUSTOMER_ID, ")
                //buildQuery.Append(vbCrLf & "       CO.CUSTOMER_NAME, ")
                //'Vasava:PTS WIN_007B if JC is created with Temp customer it is not listing 
                buildQuery.Append( "  NVL((SELECT CMT.CUSTOMER_MST_PK  FROM CUSTOMER_MST_TBL CMT");
                buildQuery.Append( "  WHERE CMT.CUSTOMER_MST_PK =JC.CUST_CUSTOMER_MST_FK),");
                buildQuery.Append( "  (SELECT TMT.CUSTOMER_MST_PK FROM TEMP_CUSTOMER_TBL TMT ");
                buildQuery.Append( "  WHERE TMT.CUSTOMER_MST_PK = JC.CUST_CUSTOMER_MST_FK)) CUSTOMER_MST_PK,");
                buildQuery.Append( "  NVL((SELECT CMT.CUSTOMER_ID  FROM CUSTOMER_MST_TBL CMT");
                buildQuery.Append( "  WHERE CMT.CUSTOMER_MST_PK =JC.CUST_CUSTOMER_MST_FK),");
                buildQuery.Append( "  (SELECT TMT.CUSTOMER_ID FROM TEMP_CUSTOMER_TBL TMT ");
                buildQuery.Append( "  WHERE TMT.CUSTOMER_MST_PK = JC.CUST_CUSTOMER_MST_FK)) CUSTOMER_ID,");
                buildQuery.Append( "  NVL((SELECT CMT.CUSTOMER_NAME  FROM CUSTOMER_MST_TBL CMT");
                buildQuery.Append( "  WHERE CMT.CUSTOMER_MST_PK =JC.CUST_CUSTOMER_MST_FK),");
                buildQuery.Append( "  (SELECT TMT.CUSTOMER_NAME FROM TEMP_CUSTOMER_TBL TMT ");
                buildQuery.Append( "  WHERE TMT.CUSTOMER_MST_PK = JC.CUST_CUSTOMER_MST_FK)) CUSTOMER_NAME,");
                ///
                buildQuery.Append( "        OMT.OPERATOR_ID SLID, ");
                buildQuery.Append( "        (CASE ");
                buildQuery.Append( "       WHEN (NVL(VST.VESSEL_NAME, '') || '/' || ");
                buildQuery.Append( "        NVL(VVT.VOYAGE, '') = '/') THEN ");
                buildQuery.Append( "        '' ");
                buildQuery.Append( "          ELSE ");
                buildQuery.Append( "         NVL(VST.VESSEL_NAME, '') || '/' || ");
                buildQuery.Append( "         NVL(VVT.VOYAGE, '') ");
                buildQuery.Append( "          END) AS VESVOYAGE, ");
                buildQuery.Append( "         POL.PORT_ID POL, ");
                buildQuery.Append( "        POD.PORT_ID POD, ");
                //'If Record is Saved from WIN Vessel Voyage is Optional
                buildQuery.Append( "        CASE WHEN JC.WIN_UNIQ_REF_ID IS NOT NULL THEN JC.ETD_DATE ELSE VVT.POL_ETD END ETD,");
                buildQuery.Append( "        CASE WHEN JC.WIN_UNIQ_REF_ID IS NOT NULL THEN JC.ETA_DATE ELSE VVT.POD_ETA END ETA,");
                //buildQuery.Append(vbCrLf & "        VVT.POL_ETD ETD, ")
                //buildQuery.Append(vbCrLf & "        VVT.POD_ETA ETA, ")
                ///
                //'Added By Koteshwari on 2/3/2011
                //'COMENTED BY SUBHRANSU buildQuery.Append(vbCrLf & "       ''CARGO_TYPE,")
                buildQuery.Append( "       DECODE(JC.CARGO_TYPE, '1','FCL','2','LCL','4','BBC' ) CARGO_TYPE,");
                //'End
                buildQuery.Append( "       JC.HBL_REF_NO HBLREFNR, ");
                buildQuery.Append( "       JC.MBL_REF_NO MBLREFNR, ");
                //buildQuery.Append(vbCrLf & "       NVL(EMP.EMPLOYEE_NAME,NVL(DEF_EXEC.EMPLOYEE_NAME,'CSR')) SALES_EXEC, ")
                buildQuery.Append( "       NVL(EMP.EMPLOYEE_NAME,(SELECT NVL(DEF_EXEC.EMPLOYEE_NAME, 'CSR') ");
                buildQuery.Append( "       FROM EMPLOYEE_MST_TBL DEF_EXEC,CUSTOMER_MST_TBL CMT ");
                buildQuery.Append( "       WHERE DEF_EXEC.EMPLOYEE_MST_PK(+) = CMT.REP_EMP_MST_FK ");
                buildQuery.Append( "       AND CMT.CUSTOMER_MST_PK = JC.CUST_CUSTOMER_MST_FK)) SALES_EXEC,");
                buildQuery.Append( "       DECODE(JC.JOB_CARD_STATUS, '1','Open','2','Close') JCSTATUS,");
                //' ''''
                buildQuery.Append( "       Decode(jc.win_xml_gen, 0, 'Not Gen.', 1,'Generated') XMLSTATUS, ");
                buildQuery.Append( "       Decode(jc.win_xml_status, 0, 'NA', 1, 'Active', 2, 'Completed', 3, 'Cancelled')  WINSTATUS, ");
                buildQuery.Append( "       Decode(jc.win_ack_status, 0, 'NR', 1, 'Pending for Ack', 2, 'Success', 3, 'Failure',4,'Warning') SUCFAIL, ");
                buildQuery.Append( "       '0' SEL ");
            }
            buildQuery.Append( "      from ");
            buildQuery.Append("               " + strCondition);
            buildQuery.Append( "     Order By " + SortColumn + SortType);

            StringBuilder strCount = new StringBuilder();
            strSQL = buildQuery.ToString();
            strCount.Append(" SELECT COUNT(*)  from  ");
            strCount.Append((" (" + buildQuery.ToString() + ")"));
            TotalRecords = Convert.ToInt32(objWF.ExecuteScaler(strCount.ToString()));
            TotalPage = TotalRecords / RecordsPerPage;
            if (TotalRecords % RecordsPerPage != 0)
            {
                TotalPage += 1;
            }
            if (CurrentPage > TotalPage)
                CurrentPage = 1;
            if (TotalRecords == 0)
                CurrentPage = 0;
            last = CurrentPage * RecordsPerPage;
            start = (CurrentPage - 1) * RecordsPerPage + 1;
            strCount.Remove(0, strCount.Length);

            StringBuilder sqlstr2 = new StringBuilder();
            sqlstr2.Append(" Select * from ");
            sqlstr2.Append( "  ( Select ROWNUM SR_NO, q.* from ");
            sqlstr2.Append("  (" + buildQuery.ToString() + " ");
            sqlstr2.Append("  ) q )  WHERE \"SR_NO\"  BETWEEN " + start + " AND " + last + "");

            strSQL = sqlstr2.ToString();
            DataSet DS = null;
            try
            {
                DS = objWF.GetDataSet(strSQL);
                return DS;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "FetchXML Cargo Data"
        public DataSet FetchXMLCargodata(string JobXmlpk = "0", int BizType = 1, int ProcessType = 1, string CaroType = "1")
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();

            try
            {
                var _with8 = objWF.MyCommand.Parameters;
                _with8.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with8.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with8.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with8.Add("CARGO_TYPE_IN", CaroType).Direction = ParameterDirection.Input;
                _with8.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLCARGODATA_SEA");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        public DataSet FetchXMLHAZARDOUSData(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();

            try
            {
                var _with9 = objWF.MyCommand.Parameters;
                _with9.Add("CONT_PK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with9.Add("BIZTYPE_IN", 2).Direction = ParameterDirection.Input;
                _with9.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with9.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLHAZ_DTL");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        public DataSet FetchXMLCommoditydata(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();

            try
            {
                var _with10 = objWF.MyCommand.Parameters;
                _with10.Add("CONT_PK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with10.Add("BIZTYPE_IN", 2).Direction = ParameterDirection.Input;
                _with10.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with10.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLCOMMODITY_DTL");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "FetchPickUpDropDetails"
        public DataSet FetchXMLPickUp(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with11 = objWF.MyCommand.Parameters;
                _with11.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with11.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with11.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with11.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XML_PICKUP");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        public DataSet FetchXMLDrop(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with12 = objWF.MyCommand.Parameters;
                _with12.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with12.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with12.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with12.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XML_DROP");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }

        #region "Fetch PickDrop Count"
        public int FetchPickDropCount(int JobPK, int BizType, int Process, int Pick_dropFlg)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append(" SELECT COUNT (*) FROM JOB_PICKUPDROP_TRN PCD WHERE PCD.JOB_TRN_FK = " + JobPK);
            sb.Append(" AND PCD.BIZ_TYPE =" + BizType + " AND PCD.PROCESS_TYPE=" + Process + " AND PCD.PICKUP_DROP_TYPE = " + Pick_dropFlg);
            return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
        }
        public int FetchPickDropPK(int JobPK, int BizType, int Process, int Pick_dropFlg)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append(" SELECT PICK_DROP_MST_PK FROM JOB_PICKUPDROP_TRN PCD WHERE PCD.JOB_TRN_FK = " + JobPK);
            sb.Append(" AND PCD.BIZ_TYPE =" + BizType + " AND PCD.PROCESS_TYPE=" + Process + " AND PCD.PICKUP_DROP_TYPE = " + Pick_dropFlg);
            return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
        }
        #endregion

        #region "FetchPickUpDropDetails"
        public DataSet FetchPickUpDropDetails(string PickUpDropPK = "0", string JobPK = "0", string BizType = "0", string ProcessType = "0")
        {
            WorkFlow objWK = new WorkFlow();
            OracleCommand objCommand = new OracleCommand();
            DataSet dsData = new DataSet();

            try
            {
                objWK.OpenConnection();
                objWK.MyCommand.Connection = objWK.MyConnection;

                var _with13 = objWK.MyCommand;
                _with13.CommandType = CommandType.StoredProcedure;
                _with13.CommandText = objWK.MyUserName + ".JOBSPENDIN_DOCREC_PKG.JOB_PICKUP_DROP_DETAILS";

                objWK.MyCommand.Parameters.Clear();
                var _with14 = objWK.MyCommand.Parameters;
                _with14.Add("MAIN_PK_IN", PickUpDropPK).Direction = ParameterDirection.Input;
                _with14.Add("JOB_PK_IN", JobPK).Direction = ParameterDirection.Input;
                _with14.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with14.Add("PROCESS_TYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with14.Add("MAIN_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                objWK.MyDataAdapter.SelectCommand = objWK.MyCommand;
                objWK.MyDataAdapter.Fill(dsData);
                return dsData;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region "FetchXML JOBdData"
        public DataSet FetchXMLJOBdata(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with15 = objWF.MyCommand.Parameters;
                _with15.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with15.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with15.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with15.Add("LOG_LOC_FK", HttpContext.Current.Session["LOGED_IN_LOC_FK"]).Direction = ParameterDirection.Input;
                _with15.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLJOBDATA_SEA");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "Get Document List"
        public DataSet FetchXMLDocument(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {

            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with16 = objWF.MyCommand.Parameters;
                _with16.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with16.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with16.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with16.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FECTCH_XMLDOCUMENT");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }

        }
        #endregion

        #region "Get Activity List"
        public DataSet FetchXMLActivity(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with17 = objWF.MyCommand.Parameters;
                _with17.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with17.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with17.Add("PROCESS_TYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with17.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLACTIVITIES");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }

        }
        #endregion

        #region "FetchXML IMPSEAAIR"
        public DataSet FetchXMLImpSeaAir(string JobXmlpk = "0", int BizType = 0, int ProcessType = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with18 = objWF.MyCommand.Parameters;
                _with18.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with18.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with18.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with18.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XMLIMP_SEAAIR");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "FETCHXML TRANSHIPMENT"
        public DataSet FETCHXMLTRANSHIPMENT(string JobXmlpk = "0", int BizType = 0, int ProcessType = 1)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet DS = new DataSet();
            try
            {
                var _with19 = objWF.MyCommand.Parameters;
                _with19.Add("JOBPK_IN", JobXmlpk).Direction = ParameterDirection.Input;
                _with19.Add("BIZTYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with19.Add("PROCESSTYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with19.Add("GETDS_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_WINXML_PKG", "FETCH_XML_TRANSHIPMENT");
                return DS;
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "fetch all "
        public int ForFetchEntry(string @ref, string JOBpk = "", string BookingPK = "", string hblRef = "", string proc = "EXP", string Loc = "0", int CargoType = 1)
        {
            string strSQL = null;
            DataSet ds = null;
            if (proc == "EXP")
            {
                strSQL = "SELECT j.JOB_CARD_TRN_PK,j.BOOKING_MST_FK,h.hbl_ref_no, " + " UMT.DEFAULT_LOCATION_FK, " + " LOC.LOCATION_NAME FROM JOB_CARD_TRN j,hbl_exp_tbl h," + " BOOKING_MST_TBL B, USER_MST_TBL UMT, LOCATION_MST_TBL  LOC" + " WHERE j.HBL_HAWB_FK=h.hbl_exp_tbl_pk(+) AND UPPER(j.JOBCARD_REF_NO) LIKE '%" + @ref.ToUpper() + "%'" + " AND J.CREATED_BY_FK = UMT.USER_MST_PK AND LOC.LOCATION_MST_PK = UMT.DEFAULT_LOCATION_FK AND J.BOOKING_MST_FK = B.BOOKING_MST_PK " + " AND B.CARGO_TYPE = " + CargoType + " AND LOC.LOCATION_MST_PK = " + Loc;
            }
            else
            {
                strSQL = "SELECT j.JOB_CARD_TRN_PK,j.jobcard_ref_no,j.hbl_ref_no, " + " UMT.DEFAULT_LOCATION_FK, " + " LOC.LOCATION_NAME " + " FROM JOB_CARD_TRN j,USER_MST_TBL UMT, LOCATION_MST_TBL  LOC" + " WHERE UPPER(j.JOBCARD_REF_NO) LIKE '%" + @ref.ToUpper() + "%'" + " AND J.CONSOLE=1 AND LOC.LOCATION_MST_PK = UMT.DEFAULT_LOCATION_FK  " + " AND ( (select p.location_mst_fk from port_mst_tbl p where p.port_mst_pk=j.port_mst_pod_fk)=" + Loc + " OR J.PORT_MST_POD_FK IN" + " (SELECT T.PORT_MST_FK FROM LOC_PORT_MAPPING_TRN T WHERE T.LOCATION_MST_FK= " + Loc + "))  " + "  AND UMT.USER_MST_PK=J.CREATED_BY_FK";
            }
            try
            {
                ds = (new WorkFlow()).GetDataSet(strSQL);
                if (ds.Tables[0].Rows.Count == 1)
                {
                    JOBpk = Convert.ToString(getDefault(ds.Tables[0].Rows[0][0], ""));
                    BookingPK = Convert.ToString(getDefault(ds.Tables[0].Rows[0][1], ""));
                    hblRef = Convert.ToString(getDefault(ds.Tables[0].Rows[0][2], ""));
                    if (Loc != getDefault(ds.Tables[0].Rows[0][3], "") & proc == "EXP")
                    {
                        Loc = Convert.ToString(getDefault(ds.Tables[0].Rows[0][4], ""));
                        return -1;
                    }
                }

                return ds.Tables[0].Rows.Count;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "GetESi Status"
        public DataSet Esi_Fetch(int StrcurrentBookingID = 0, int StrcurrentJobCardID = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder();

            sb.Append(" SELECT ESI.*");
            sb.Append("  FROM JOB_CARD_TRN JC,");
            sb.Append("       SYN_EBKG_ESI_HDR_TBL ESI,");
            sb.Append("       BOOKING_MST_TBL      BST");
            sb.Append("  WHERE BST.BOOKING_MST_PK = ESI.BOOKING_SEA_FK ");
            sb.Append("   AND BST.BOOKING_MST_PK = JC.BOOKING_MST_FK ");

            sb.Append("");
            if (StrcurrentBookingID != 0)
            {
                sb.Append("   AND BST.BOOKING_MST_PK = " + StrcurrentBookingID);
            }
            else if (StrcurrentJobCardID != 0)
            {
                sb.Append("  AND JC.JOB_CARD_TRN_PK = " + StrcurrentJobCardID);
            }

            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion


        #region "Fetch Location"
        public DataSet FetchLocation(long Loc)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet LocDS = null;
            objWF.MyCommand.Parameters.Clear();
            var _with20 = objWF.MyCommand.Parameters;
            _with20.Add("LOC_MST_PK_IN", Loc).Direction = ParameterDirection.Input;
            _with20.Add("LOCATION_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
            LocDS = objWF.GetDataSet("PKG_COMMON_TASKS", "GET_LOC_ADDRESS");
            try
            {
                return LocDS;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #region "Fetch Main ESI"
        public DataSet FetchMainESI(int bookingpk)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();

            
            sb.Append(" SELECT DISTINCT BOOK.BOOKING_MST_PK,");
            sb.Append("                EST.ESI_HDR_PK,");
            sb.Append("                JC.JOB_CARD_TRN_PK,");
            sb.Append("                BOOK.BOOKING_REF_NO,");
            sb.Append("                BOOK.BOOKING_DATE,");
            sb.Append("                BOOK.STATUS,");
            sb.Append("                JC.UCR_NO CUSTOMERREFERENE,");
            sb.Append("                JC.INSURANCE_AMT,");
            sb.Append("                JC.INSURANCE_CURRENCY,");
            sb.Append("                EST.ESI_REF_NR,");
            sb.Append("                CMT.CUSTOMER_NAME SHIPPER,");
            sb.Append("                CCD.ADM_ADDRESS_1 || '' || CCD.ADM_ADDRESS_2 || '' ||");
            sb.Append("                CCD.ADM_ADDRESS_3 SHIPPER_ADRESS,");
            sb.Append("                CMT.VAT_NO,");
            sb.Append("                CMT1.CUSTOMER_NAME CONSIGNNAME,");
            sb.Append("                CC.ADM_ADDRESS_1 || '' || CC.ADM_ADDRESS_2 || '' ||");
            sb.Append("                CC.ADM_ADDRESS_3 CONSIGN_ADRESS,");
            sb.Append("                VES.VESSEL_NAME \"vessel_name\",");
            sb.Append("                VES.VESSEL_ID || '/' || VOY.VOYAGE VSL_VOY,");
            sb.Append("                POL.PORT_ID POL,");
            sb.Append("                POD.PORT_ID POD,");
            sb.Append("                COL_PLACE.PLACE_CODE PORID,");
            sb.Append("                DEL_PLACE.PLACE_CODE PFDID,");
            sb.Append("                SUM(FD.FREIGHT_AMT) FRTAMT,");
            sb.Append("                DECODE(BOOK.PYMT_TYPE, 1, 'PREPAID', 2, 'COLLECT', 3,'FOREIGN') PAYMENTTYPE,");
            sb.Append("                (CASE");
            sb.Append("                  WHEN BOOK.PYMT_TYPE = 1 THEN");
            sb.Append("                   'A'");
            sb.Append("                  ELSE");
            sb.Append("                   'B'");
            sb.Append("                END) TYPE");
            sb.Append("   FROM BOOKING_MST_TBL       BOOK,");
            sb.Append("       SYN_EBKG_ESI_HDR_TBL  EST,");
            sb.Append("       CUSTOMER_CONTACT_DTLS CCD,");
            sb.Append("       CUSTOMER_CONTACT_DTLS CC,");
            sb.Append("       CUSTOMER_MST_TBL      CMT,");
            sb.Append("       CUSTOMER_MST_TBL      CMT1,");
            sb.Append("       ");
            sb.Append("       JOB_CARD_TRN JC,");
            sb.Append("       ");
            sb.Append("       VESSEL_VOYAGE_TBL VES,");
            sb.Append("       ");
            sb.Append("       VESSEL_VOYAGE_TRN VOY,");
            sb.Append("       ");
            sb.Append("       PORT_MST_TBL       POL,");
            sb.Append("       PORT_MST_TBL       POD,");
            sb.Append("       PLACE_MST_TBL      DEL_PLACE,");
            sb.Append("       PLACE_MST_TBL      COL_PLACE,");
            sb.Append("       job_trn_fd FD");
            sb.Append("");
            sb.Append("  WHERE BOOK.BOOKING_MST_PK = EST.BOOKING_MST_FK");
            sb.Append("   AND JC.SHIPPER_CUST_MST_FK = CMT.CUSTOMER_MST_PK(+)");
            sb.Append("   AND JC.CONSIGNEE_CUST_MST_FK = CMT1.CUSTOMER_MST_PK(+)");
            sb.Append("   AND BOOK.CUST_CUSTOMER_MST_FK = CCD.CUSTOMER_MST_FK(+)");
            sb.Append("   AND BOOK.CONS_CUSTOMER_MST_FK = CC.CUSTOMER_MST_FK(+)");
            sb.Append("   AND JC.SHIPPER_CUST_MST_FK = CMT.CUSTOMER_MST_PK(+)");
            sb.Append("   AND JC.CONSIGNEE_CUST_MST_FK = CMT1.CUSTOMER_MST_PK(+)");
            sb.Append("   AND JC.BOOKING_MST_FK(+) = BOOK.BOOKING_MST_PK");
            sb.Append("   AND JC.VOYAGE_TRN_FK = VOY.VOYAGE_TRN_PK");
            sb.Append("   AND VES.VESSEL_VOYAGE_TBL_PK(+) = VOY.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND POL.PORT_MST_PK(+) = BOOK.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK(+) = BOOK.PORT_MST_POD_FK");
            sb.Append("   AND BOOK.DEL_PLACE_MST_FK = DEL_PLACE.PLACE_PK(+)");
            sb.Append("   AND BOOK.COL_PLACE_MST_FK = COL_PLACE.PLACE_PK(+)");
            sb.Append("   AND FD.JOB_CARD_TRN_FK = JC.JOB_CARD_TRN_PK");
            sb.Append("   AND BOOK.BOOKING_MST_PK = " + bookingpk);
            sb.Append("  GROUP BY BOOKING_MST_PK,");
            sb.Append("          ESI_HDR_PK,");
            sb.Append("          JOB_CARD_TRN_PK,");
            sb.Append("          BOOKING_REF_NO,");
            sb.Append("          BOOKING_DATE,");
            sb.Append("          STATUS,");
            sb.Append("          UCR_NO,");
            sb.Append("          INSURANCE_AMT,");
            sb.Append("          INSURANCE_CURRENCY,");
            sb.Append("          ESI_REF_NR,");
            sb.Append("          CMT.CUSTOMER_NAME,");
            sb.Append("          BOOK.PYMT_TYPE,");
            sb.Append("          CCD.ADM_ADDRESS_1,");
            sb.Append("          CCD.ADM_ADDRESS_2,");
            sb.Append("          CCD.ADM_ADDRESS_3,");
            sb.Append("          VES.VESSEL_NAME,");
            sb.Append("          CMT.VAT_NO,");
            sb.Append("          CMT1.CUSTOMER_NAME,");
            sb.Append("          CC.ADM_ADDRESS_1,");
            sb.Append("          CC.ADM_ADDRESS_2,");
            sb.Append("          CC.ADM_ADDRESS_3,");
            sb.Append("          VES.VESSEL_NAME,");
            sb.Append("          VES.VESSEL_ID,");
            sb.Append("          VOY.VOYAGE,");
            sb.Append("          POL.PORT_ID,");
            sb.Append("          POD.PORT_ID,");
            sb.Append("          COL_PLACE.PLACE_CODE,");
            sb.Append("          DEL_PLACE.PLACE_CODE");
            sb.Append("");

            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch Detail ESI"
        public object FetchDetailESI(int ESIPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();

           
            sb.Append(" SELECT DISTINCT QCOMM.COMMODITY_ID,");
            sb.Append("                QCOMM.COMMODITY_NAME,");
            sb.Append("                CNT.CNTR_DTL_TBL_PK,");
            sb.Append("                CONT.CONTAINER_TYPE_MST_PK,");
            sb.Append("                CONT.CONTAINER_TYPE_MST_ID,");
            sb.Append("                CNT.CONTAINER_NR,");
            sb.Append("                PCK.PACK_TYPE_MST_PK PACK_TYPE_PK,");
            sb.Append("                PCK.PACK_TYPE_ID,");
            sb.Append("                CNT.PACK_COUNT QUANTITY,");
            sb.Append("                NVL(CNT.GROSS_WEIGHT, 0) GROSS_WEIGHT,");
            sb.Append("                NVL(CNT.NET_WEIGHT, 0) NET_WEIGHT,");
            sb.Append("                CNT.VOLUME_IN_CBM,");
            sb.Append("                NVL(CNT.CHARGEABLE_WEIGHT, 0) CHARGEABLE_WEIGHT,");
            sb.Append("                CNT.COMMODITY_MST_FK,");
            sb.Append("                CNT.COMMODITY_MST_FKS,");
            sb.Append("                CONT.CONTAINER_TAREWEIGHT_TONE,");
            sb.Append("                NULL NO_OF_BOXES,");
            sb.Append("                CNT.SEAL_NUMBER SEAL_NR,");
            sb.Append("                CNT.GOODS_DESCRIPTION,");
            sb.Append("                CNT.MARKS_NUMBERS,");
            sb.Append("                CNT.REMARKS");
            sb.Append("   FROM SYN_EBKG_ESI_HDR_TBL  ESI,");
            sb.Append("       SYN_EBKG_ESI_CNTR_TBL CNT,");
            sb.Append("       SYN_EBKG_ESI_COMM_TBL COMM,       ");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONT,");
            sb.Append("       PACK_TYPE_MST_TBL      PCK,");
            sb.Append("       COMMODITY_MST_TBL      QCOMM");
            sb.Append("");
            sb.Append("  WHERE ESI.ESI_HDR_PK = CNT.ESI_HDR_FK");
            sb.Append("   AND ESI.ESI_HDR_PK = COMM.ESI_HDR_FK(+)");
            sb.Append("   AND CNT.CONTAINER_TYPE_FK = CONT.CONTAINER_TYPE_MST_PK");
            sb.Append("   AND CNT.PACK_TYPE_MST_FK = PCK.PACK_TYPE_MST_PK");
            sb.Append("   AND COMM.COMMODITY_FK = QCOMM.COMMODITY_MST_PK(+)      ");
            sb.Append("   AND ESI.ESI_HDR_PK = " + ESIPK + "");

            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion


        public ArrayList JobCrad_Update_ESI(int StrcurrentBookingID = 0, int StrcurrentJobCardID = 0)
        {
            //'Update the Esiin Job card 
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder();
            StringBuilder sb1 = new StringBuilder();
            DataSet dsContainerData = null;
            int IRcnt = 0;
            int Int_Container_pk = 0;
            int k = 0;
            WorkFlow objWK = new WorkFlow();
            objWK.OpenConnection();
            OracleTransaction TRAN = null;
            string[] ArrSealnr = null;
            string Slnr = null;
            DataSet ds = null;
            string StrcurrentBookingpk = null;


            try
            {
                DataSet dsContainer = null;
                sb.Append("  SELECT JC.BOOKING_MST_FK, SEC.JOB_TRN_CONT_PK,SEC.JOB_CARD_TRN_FK, SEC.CONTAINER_TYPE_MST_FK");
                sb.Append("  FROM JOB_CARD_TRN JC, job_trn_cont SEC");
                sb.Append("  WHERE JC.JOB_CARD_TRN_PK = SEC.JOB_CARD_TRN_FK(+)");
                sb.Append("   AND SEC.JOB_CARD_TRN_FK = " + StrcurrentJobCardID);
                sb.Append("  ORDER BY SEC.container_type_mst_fk ASC ");
                dsContainer = objWF.GetDataSet(sb.ToString());
                sb.Remove(0, sb.Length);


                sb.Append("");
                sb.Append(" SELECT ESI.*, EEC.*, MY_CONCADINATE_FUN(NVL(ESI.ESI_HDR_PK, 0), 1) MARKS_NUMBERS_IN1, MY_CONCADINATE_FUN(NVL(ESI.ESI_HDR_PK, 0), 2) GOODS_DESCRIPTION_IN1, MY_CONCADINATE_FUN(NVL(ESI.ESI_HDR_PK, 0), 3) REMARKS1,EEC.PACK_COUNT as PACK_COUNT1,");
                sb.Append(" EEC.VOLUME_IN_CBM VOLUME_IN_CBM1,EEC.GROSS_WEIGHT GROSS_WEIGHT1,EEC.NET_WEIGHT NET_WEIGHT1");
                sb.Append("  FROM SYN_EBKG_ESI_HDR_TBL ESI, SYN_EBKG_ESI_CNTR_TBL EEC");
                sb.Append(" WHERE ESI.ESI_HDR_PK = EEC.ESI_HDR_FK");
                if (StrcurrentBookingID != 0)
                {
                    sb.Append("   AND ESI.BOOKING_SEA_FK = " + StrcurrentBookingID);
                }
                else if (StrcurrentJobCardID != 0)
                {
                    sb1.Append("  SELECT J.BOOKING_MST_FK");
                    sb1.Append("  FROM JOB_CARD_TRN J");
                    sb1.Append("  WHERE J.JOB_CARD_TRN_PK =" + StrcurrentJobCardID);
                    if (StrcurrentJobCardID != 0)
                    {
                        ds = objWF.GetDataSet(sb1.ToString());
                    }

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        StrcurrentBookingpk = Convert.ToString(ds.Tables[0].Rows[0]["BOOKING_MST_FK"]);
                    }
                    sb.Append("   AND ESI.BOOKING_SEA_FK = " + StrcurrentBookingpk);

                }
                sb.Append(" ORDER BY eec.container_type_fk ASC ");

                dsContainerData = objWF.GetDataSet(sb.ToString());

                if (dsContainerData.Tables[0].Rows.Count > 0)
                {
                    TRAN = objWK.MyConnection.BeginTransaction();
                    OracleCommand insCommand = new OracleCommand();
                    OracleCommand updCommand = new OracleCommand();
                    if (dsContainerData.Tables[0].Rows.Count == dsContainer.Tables[0].Rows.Count)
                    {
                        for (IRcnt = 0; IRcnt <= dsContainerData.Tables[0].Rows.Count - 1; IRcnt++)
                        {
                            if ((string.IsNullOrEmpty(dsContainer.Tables[0].Rows[IRcnt]["JOB_TRN_CONT_PK"].ToString())))
                            {
                                //'Nothing to Insert , Only Update the Things

                            }
                            else if (string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_TYPE_FK"].ToString()))
                            {
                                var _with21 = updCommand;
                                updCommand.Parameters.Clear();
                                _with21.Connection = objWK.MyConnection;
                                _with21.CommandType = CommandType.StoredProcedure;
                                _with21.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_ESI_TRN_SEA_EXP_CONT_UPD";
                                var _with22 = _with21.Parameters;
                                _with22.Add("JOB_TRN_CONT_PK_IN", dsContainer.Tables[0].Rows[IRcnt]["JOB_TRN_CONT_PK"]).Direction = ParameterDirection.Input;
                                _with22.Add("JOB_CARD_TRN_FK_IN", dsContainer.Tables[0].Rows[IRcnt]["JOB_CARD_TRN_FK"]).Direction = ParameterDirection.Input;

                                _with22.Add("CONTAINER_NUMBER_IN", dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_NR"]).Direction = ParameterDirection.Input;
                                _with22.Add("CONTAINER_TYPE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_TYPE_FK"]).Direction = ParameterDirection.Input;

                                if (!string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["SEAL_NUMBER"].ToString()))
                                {
                                    Slnr = Convert.ToString(dsContainerData.Tables[0].Rows[IRcnt]["SEAL_NUMBER"]);
                                    if (!string.IsNullOrEmpty(Slnr))
                                    {
                                        ArrSealnr = Slnr.Split('$');
                                    }
                                    if (Convert.ToInt32(ArrSealnr[3]) == 1)
                                    {
                                        Slnr = ArrSealnr[0];
                                    }
                                    else if (Convert.ToInt32(ArrSealnr[3]) == 2)
                                    {
                                        Slnr = ArrSealnr[1];
                                    }
                                    else if (Convert.ToInt32(ArrSealnr[3]) == 3)
                                    {
                                        Slnr = ArrSealnr[2];
                                    }
                                    else
                                    {
                                        Slnr = ArrSealnr[1];
                                    }
                                }
                                else
                                {
                                    Slnr = "";
                                }

                                _with22.Add("SEAL_NUMBER_IN", (string.IsNullOrEmpty(Slnr) ? "" : Slnr)).Direction = ParameterDirection.Input;

                                _with22.Add("VOLUME_IN_CBM_IN", dsContainerData.Tables[0].Rows[IRcnt]["VOLUME_IN_CBM1"]).Direction = ParameterDirection.Input;
                                _with22.Add("GROSS_WEIGHT_IN", dsContainerData.Tables[0].Rows[IRcnt]["GROSS_WEIGHT1"]).Direction = ParameterDirection.Input;
                                _with22.Add("NET_WEIGHT_IN", dsContainerData.Tables[0].Rows[IRcnt]["NET_WEIGHT1"]).Direction = ParameterDirection.Input;

                                // .Add("CHARGEABLE_WEIGHT_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("JOB_TRN_CONT_PK")).Direction = ParameterDirection.Input
                                _with22.Add("PACK_TYPE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_TYPE_MST_FK"]).Direction = ParameterDirection.Input;
                                _with22.Add("PACK_COUNT_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_COUNT1"]).Direction = ParameterDirection.Input;
                                _with22.Add("COMMODITY_MST_FKS_IN", dsContainerData.Tables[0].Rows[IRcnt]["COMMODITY_MST_FKS"]).Direction = ParameterDirection.Input;

                                //  .Add("CONTAINER_PK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("JOB_CARD_TRN_PK")).Direction = ParameterDirection.Input
                                _with22.Add("MARKS_NUMBERS_IN", dsContainerData.Tables[0].Rows[IRcnt]["MARKS_NUMBERS1"]).Direction = ParameterDirection.Input;
                                _with22.Add("GOODS_DESCRIPTION_IN", dsContainerData.Tables[0].Rows[IRcnt]["GOODS_DESCRIPTION1"]).Direction = ParameterDirection.Input;

                                //'added 
                                _with22.Add("QUANTITY_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_COUNT1"]).Direction = ParameterDirection.Input;
                                _with22.Add("REMARKS_IN", dsContainerData.Tables[0].Rows[IRcnt]["REMARKS1"]).Direction = ParameterDirection.Input;
                                _with22.Add("PYMT_TYPE_IN", dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TYPE"]).Direction = ParameterDirection.Input;
                                _with22.Add("CARGO_MOVE_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["CARGO_MOVE_FK"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["CARGO_MOVE_FK"])).Direction = ParameterDirection.Input;
                                //.Add("SHIPPING_TERMS_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("PYMT_TERMS")).Direction = ParameterDirection.Input
                                _with22.Add("SHIPPING_TERMS_MST_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TERMS"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TERMS"])).Direction = ParameterDirection.Input;
                                _with22.Add("NOTIFY1_CUST_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["NOTIFYPARTY_FK1"]).Direction = ParameterDirection.Input;

                                _with22.Add("NOTIFY2_CUST_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["NOTIFYPARTY_FK2"]).Direction = ParameterDirection.Input;
                                // .Add("CONSIGNEE_CUST_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("CONSIGN_MST_FK")).Direction = ParameterDirection.Input
                                // .Add("DEL_PLACE_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("PFD_FK")).Direction = ParameterDirection.Input
                                // .Add("COL_PLACE_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("POR_FK")).Direction = ParameterDirection.Input
                                _with22.Add("CONSIGNEE_CUST_MST_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["CONSIGN_MST_FK"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["CONSIGN_MST_FK"])).Direction = ParameterDirection.Input;
                                if (string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["PFD_FK"].ToString()))
                                {
                                    _with22.Add("DEL_PLACE_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with22.Add("DEL_PLACE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["PFD_FK"]).Direction = ParameterDirection.Input;
                                }
                                if (string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["POR_FK"].ToString()))
                                {
                                    _with22.Add("COL_PLACE_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with22.Add("COL_PLACE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["POR_FK"]).Direction = ParameterDirection.Input;
                                }
                                _with22.Add("ESI_FLAG_IN", 1).Direction = ParameterDirection.Input;
                                _with22.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;

                                var _with23 = objWK.MyDataAdapter;
                                _with23.UpdateCommand = updCommand;
                                _with23.UpdateCommand.Transaction = TRAN;
                                _with23.UpdateCommand.ExecuteNonQuery();
                                Int_Container_pk = Convert.ToInt32(updCommand.Parameters["RETURN_VALUE"].Value);


                            }
                            else if (dsContainer.Tables[0].Rows[IRcnt]["CONTAINER_TYPE_MST_FK"] == dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_TYPE_FK"])
                            {
                                var _with24 = updCommand;
                                updCommand.Parameters.Clear();
                                _with24.Connection = objWK.MyConnection;
                                _with24.CommandType = CommandType.StoredProcedure;
                                _with24.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_ESI_TRN_SEA_EXP_CONT_UPD";
                                var _with25 = _with24.Parameters;
                                _with25.Add("JOB_TRN_CONT_PK_IN", dsContainer.Tables[0].Rows[IRcnt]["JOB_TRN_CONT_PK"]).Direction = ParameterDirection.Input;
                                _with25.Add("JOB_CARD_TRN_FK_IN", dsContainer.Tables[0].Rows[IRcnt]["JOB_CARD_TRN_FK"]).Direction = ParameterDirection.Input;

                                _with25.Add("CONTAINER_NUMBER_IN", dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_NR"]).Direction = ParameterDirection.Input;
                                _with25.Add("CONTAINER_TYPE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["CONTAINER_TYPE_FK"]).Direction = ParameterDirection.Input;

                                if (!string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["SEAL_NUMBER"].ToString()))
                                {
                                    Slnr = Convert.ToString(dsContainerData.Tables[0].Rows[IRcnt]["SEAL_NUMBER"]);
                                    if (!string.IsNullOrEmpty(Slnr))
                                    {
                                        ArrSealnr = Slnr.Split('$');
                                    }
                                    if (Convert.ToInt32(ArrSealnr[3]) == 1)
                                    {
                                        Slnr = ArrSealnr[0];
                                    }
                                    else if (Convert.ToInt32(ArrSealnr[3]) == 2)
                                    {
                                        Slnr = ArrSealnr[1];
                                    }
                                    else if (Convert.ToInt32(ArrSealnr[3]) == 3)
                                    {
                                        Slnr = ArrSealnr[2];
                                    }
                                    else
                                    {
                                        Slnr = ArrSealnr[1];
                                    }
                                }
                                else
                                {
                                    Slnr = "";
                                }

                                _with25.Add("SEAL_NUMBER_IN", (string.IsNullOrEmpty(Slnr) ? "" : Slnr)).Direction = ParameterDirection.Input;

                                _with25.Add("VOLUME_IN_CBM_IN", dsContainerData.Tables[0].Rows[IRcnt]["VOLUME_IN_CBM1"]).Direction = ParameterDirection.Input;
                                _with25.Add("GROSS_WEIGHT_IN", dsContainerData.Tables[0].Rows[IRcnt]["GROSS_WEIGHT1"]).Direction = ParameterDirection.Input;
                                _with25.Add("NET_WEIGHT_IN", dsContainerData.Tables[0].Rows[IRcnt]["NET_WEIGHT1"]).Direction = ParameterDirection.Input;

                                // .Add("CHARGEABLE_WEIGHT_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("JOB_TRN_CONT_PK")).Direction = ParameterDirection.Input
                                _with25.Add("PACK_TYPE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_TYPE_MST_FK"]).Direction = ParameterDirection.Input;
                                _with25.Add("PACK_COUNT_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_COUNT1"]).Direction = ParameterDirection.Input;
                                _with25.Add("COMMODITY_MST_FKS_IN", dsContainerData.Tables[0].Rows[IRcnt]["COMMODITY_MST_FKS"]).Direction = ParameterDirection.Input;

                                //  .Add("CONTAINER_PK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("JOB_CARD_TRN_PK")).Direction = ParameterDirection.Input
                                _with25.Add("MARKS_NUMBERS_IN", dsContainerData.Tables[0].Rows[IRcnt]["MARKS_NUMBERS1"]).Direction = ParameterDirection.Input;
                                _with25.Add("GOODS_DESCRIPTION_IN", dsContainerData.Tables[0].Rows[IRcnt]["GOODS_DESCRIPTION1"]).Direction = ParameterDirection.Input;

                                //'added 
                                _with25.Add("QUANTITY_IN", dsContainerData.Tables[0].Rows[IRcnt]["PACK_COUNT1"]).Direction = ParameterDirection.Input;
                                _with25.Add("REMARKS_IN", dsContainerData.Tables[0].Rows[IRcnt]["REMARKS1"]).Direction = ParameterDirection.Input;
                                _with25.Add("PYMT_TYPE_IN", dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TYPE"]).Direction = ParameterDirection.Input;
                                _with25.Add("CARGO_MOVE_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["CARGO_MOVE_FK"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["CARGO_MOVE_FK"])).Direction = ParameterDirection.Input;
                                //.Add("SHIPPING_TERMS_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("PYMT_TERMS")).Direction = ParameterDirection.Input
                                _with25.Add("SHIPPING_TERMS_MST_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TERMS"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["PYMT_TERMS"])).Direction = ParameterDirection.Input;
                                _with25.Add("NOTIFY1_CUST_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["NOTIFYPARTY_FK1"]).Direction = ParameterDirection.Input;

                                _with25.Add("NOTIFY2_CUST_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["NOTIFYPARTY_FK2"]).Direction = ParameterDirection.Input;
                                // .Add("CONSIGNEE_CUST_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("CONSIGN_MST_FK")).Direction = ParameterDirection.Input
                                // .Add("DEL_PLACE_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("PFD_FK")).Direction = ParameterDirection.Input
                                // .Add("COL_PLACE_MST_FK_IN", dsContainerData.Tables(0).Rows(IRcnt).Item("POR_FK")).Direction = ParameterDirection.Input
                                _with25.Add("CONSIGNEE_CUST_MST_FK_IN", (Convert.ToInt32(dsContainerData.Tables[0].Rows[IRcnt]["CONSIGN_MST_FK"]) == 0 ? DBNull.Value : dsContainerData.Tables[0].Rows[IRcnt]["CONSIGN_MST_FK"])).Direction = ParameterDirection.Input;
                                if (string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["PFD_FK"].ToString()))
                                {
                                    _with25.Add("DEL_PLACE_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with25.Add("DEL_PLACE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["PFD_FK"]).Direction = ParameterDirection.Input;
                                }
                                if (string.IsNullOrEmpty(dsContainerData.Tables[0].Rows[IRcnt]["POR_FK"].ToString()))
                                {
                                    _with25.Add("COL_PLACE_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                                }
                                else
                                {
                                    _with25.Add("COL_PLACE_MST_FK_IN", dsContainerData.Tables[0].Rows[IRcnt]["POR_FK"]).Direction = ParameterDirection.Input;
                                }
                                _with25.Add("ESI_FLAG_IN", 1).Direction = ParameterDirection.Input;
                                _with25.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;

                                var _with26 = objWK.MyDataAdapter;
                                _with26.UpdateCommand = updCommand;
                                _with26.UpdateCommand.Transaction = TRAN;
                                _with26.UpdateCommand.ExecuteNonQuery();
                                Int_Container_pk = Convert.ToInt32(updCommand.Parameters["RETURN_VALUE"].Value);
                            }
                            //'If dsContainer.Tables(0).Rows(IRcnt).Item("CONTAINER_TYPE_MST_FK") = dsContainerData.Tables(0).Rows(IRcnt).Item("CONTAINER_TYPE_FK") Then
                            //End If ''(IsDBNull(dsContainer.Tables(0).Rows(IRcnt).Item("JOB_TRN_CONT_PK"))) Then
                        }
                        ///' For IRcnt = 0 To dsContainerData.Tables(0).Rows.Count - 1

                    }
                    //' dsContainerData.Tables(0).Rows.Count = dsContainer.Tables(0).Rows.Count Then

                }
                //'dsContainerData.Tables(0).Rows.Count > 0 Then



                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                else
                {
                    TRAN.Commit();
                    arrMessage.Add("All Data Saved Successfully");
                    return arrMessage;
                }
            }
            catch (OracleException oraexp)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (objWK.MyConnection.State == ConnectionState.Open)
                {
                    objWK.MyConnection.Close();
                }
            }

        }
        public ArrayList HBL_Update_ESI(int StrcurrentBookingID = 0, int StrcurrentJobCardID = 0)
        {
            
            return new ArrayList();
        }


        #region "GetMainBookingData"
        //Function gets the Booking data for particular BookingPK 
        public DataSet GetMainBookingData(string bookingPK)
        {

            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append( "SELECT");
            SQL.Append( "      DISTINCT bst.BOOKING_MST_PK,");
            SQL.Append( "      bst.booking_ref_no,");
            SQL.Append( "      bst.cargo_type,cust.customer_id,");
            SQL.Append( "      cust.customer_name, cust.del_address,");
            SQL.Append( "      bst.cust_customer_mst_fk,");
            SQL.Append( "      col_place.place_name AS \"CollectionPlace\",");
            SQL.Append( "      bst.col_place_mst_fk,");
            SQL.Append( "      del_place.place_name AS \"DeliveryPlace\",");
            SQL.Append( "      bst.del_place_mst_fk,");
            SQL.Append( "      POL.port_name as \"POL\",");
            SQL.Append( "      POL.port_id as \"POL_ID\",");
            SQL.Append( "      bst.port_mst_pol_fk AS \"POLPK\",");
            SQL.Append( "      POD.port_name as \"POD\",");
            SQL.Append( "      POD.port_id as \"POD_ID\",");
            SQL.Append( "      bst.port_mst_pod_fk AS \"PODPK\",");
            SQL.Append( "      oprator.operator_id,");
            SQL.Append( "      oprator.operator_name,");
            SQL.Append( "      bst.CARRIER_MST_FK operator_mst_fk,");
            //SQL.Append(vbCrLf & "      bst.vessel_name,")
            //SQL.Append(vbCrLf & "      bst.voyage,")
            SQL.Append( "      VVT.VOYAGE_TRN_PK \"VoyagePK\",");
            SQL.Append( "      V.VESSEL_NAME,");
            SQL.Append( "      VVT.VOYAGE,");
            SQL.Append( "      bst.eta_date,");
            SQL.Append( "      bst.etd_date,");

            SQL.Append( "      (   CASE WHEN bst.cust_customer_mst_fk IN ");
            SQL.Append( "                                         (SELECT");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK ");
            SQL.Append( "                                          FROM");
            SQL.Append( "                                                 CUSTOMER_MST_TBL C,");
            SQL.Append( "                                                 CUSTOMER_CATEGORY_MST_TBL CC,CUSTOMER_CATEGORY_TRN CCT ");
            SQL.Append( "                                          WHERE");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK = CCT.CUSTOMER_MST_FK ");
            SQL.Append( "                                                 AND CC.CUSTOMER_CATEGORY_MST_PK = CCT.CUSTOMER_CATEGORY_MST_FK ");
            SQL.Append( "                                                 AND UPPER(CC.CUSTOMER_CATEGORY_ID) LIKE 'SHIPPER'");
            SQL.Append( "                                         )");
            SQL.Append( "          THEN cust.customer_id ELSE '' END");
            SQL.Append( "       ) \"Shipper\",");

            SQL.Append( "      (   CASE WHEN bst.cust_customer_mst_fk IN ");
            SQL.Append( "                                         (SELECT");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK ");
            SQL.Append( "                                          FROM");
            SQL.Append( "                                                 CUSTOMER_MST_TBL C,");
            SQL.Append( "                                                 CUSTOMER_CATEGORY_MST_TBL CC,CUSTOMER_CATEGORY_TRN CCT ");
            SQL.Append( "                                          WHERE");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK = CCT.CUSTOMER_MST_FK ");
            SQL.Append( "                                                 AND CC.CUSTOMER_CATEGORY_MST_PK = CCT.CUSTOMER_CATEGORY_MST_FK ");
            SQL.Append( "                                                 AND UPPER(CC.CUSTOMER_CATEGORY_ID) LIKE 'SHIPPER'");
            SQL.Append( "                                         )");
            SQL.Append( "          THEN cust.customer_name ELSE '' END");
            SQL.Append( "       ) \"ShipperName\",");

            SQL.Append( "      (   CASE WHEN bst.cust_customer_mst_fk IN ");
            SQL.Append( "                                         (SELECT");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK ");
            SQL.Append( "                                          FROM");
            SQL.Append( "                                                 CUSTOMER_MST_TBL C,");
            SQL.Append( "                                                 CUSTOMER_CATEGORY_MST_TBL CC,CUSTOMER_CATEGORY_TRN CCT ");
            SQL.Append( "                                          WHERE");
            SQL.Append( "                                                 C.CUSTOMER_MST_PK = CCT.CUSTOMER_MST_FK ");
            SQL.Append( "                                                 AND CC.CUSTOMER_CATEGORY_MST_PK = CCT.CUSTOMER_CATEGORY_MST_FK ");
            SQL.Append( "                                                 AND UPPER(CC.CUSTOMER_CATEGORY_ID) LIKE 'SHIPPER'");
            SQL.Append( "                                         )");
            SQL.Append( "          THEN TO_CHAR(cust.customer_mst_pk) ELSE ''END");
            SQL.Append( "       ) \"shipper_cust_mst_fk\",");

            SQL.Append( "      consignee.customer_id AS \"Consignee\",");
            SQL.Append( "      consignee.customer_name AS \"ConsigneeName\",");
            SQL.Append( "      bst.cons_customer_mst_fk consignee_cust_mst_fk,");
            SQL.Append( "      bst.cb_agent_mst_fk,");
            SQL.Append( "      cbagnt.agent_id \"cbAgent\",");
            SQL.Append( "      cbagnt.agent_name \"cbAgentName\",");
            SQL.Append( "      bst.cl_agent_mst_fk,");
            SQL.Append( "      clagnt.agent_id \"clAgent\",");
            SQL.Append( "      clagnt.agent_name \"clAgentName\",");
            SQL.Append( "      bst.cargo_move_fk,");
            SQL.Append( "      bst.pymt_type,");
            SQL.Append( "      bst.commodity_group_fk,");
            SQL.Append( "      comm.commodity_group_desc,");
            SQL.Append( "      '' GOODS_DESCRIPTION,");
            SQL.Append( "      '' MARKS_NUMBERS,");
            SQL.Append( "      0 CHK_NOMINATED,");
            SQL.Append( "      1 CHK_CSR,");
            SQL.Append( "       NVL(AGT.AGENT_MST_PK,0) TARIFF_AGENT_MST_FK,");
            SQL.Append( "       AGT.AGENT_ID,");
            SQL.Append( "       AGT.AGENT_NAME,");
            SQL.Append( "       NVL(bst.COLLECT_AGENT_FLAG,0) COLLECT_AGENT_FLAG,");
            SQL.Append( "       0 SALES_EXEC_FK,");
            SQL.Append( "      '' SALES_EXEC_ID,");
            SQL.Append( "      '' SALES_EXEC_NAME ");
            SQL.Append( " FROM ");
            SQL.Append( "      BOOKING_MST_TBL bst,");
            SQL.Append( "      BOOKING_TRN btrn,");
            SQL.Append( "      port_mst_tbl POD,");
            SQL.Append( "      port_mst_tbl POL,");
            SQL.Append( "      customer_mst_tbl cust,");
            SQL.Append( "      customer_mst_tbl consignee,");
            SQL.Append( "      place_mst_tbl col_place,");
            SQL.Append( "      place_mst_tbl del_place,");
            SQL.Append( "      operator_mst_tbl oprator,");
            SQL.Append( "      agent_mst_tbl clagnt,");
            SQL.Append( "      agent_mst_tbl cbagnt,");
            SQL.Append( "      commodity_group_mst_tbl comm,");
            SQL.Append( "      AGENT_MST_TBL     AGT,");
            SQL.Append( "      VESSEL_VOYAGE_TBL V,");
            SQL.Append( "      VESSEL_VOYAGE_TRN VVT");

            SQL.Append( "WHERE ");
            SQL.Append( "      bst.cust_customer_mst_fk = cust.customer_mst_pk");
            SQL.Append( "      AND bst.col_place_mst_fk = col_place.place_pk (+)");
            SQL.Append( "      AND bst.del_place_mst_fk = del_place.place_pk (+)");
            SQL.Append( "      AND bst.cb_agent_mst_fk = cbagnt.agent_mst_pk(+)");
            SQL.Append( "      AND bst.cl_agent_mst_fk = clagnt.agent_mst_pk(+)");
            SQL.Append( "      AND bst.port_mst_pol_fk = POL.port_mst_pk");
            SQL.Append( "      AND bst.port_mst_pod_fk = POD.port_mst_pk");
            SQL.Append( "      AND bst.CARRIER_MST_FK = oprator.operator_mst_pk(+)");
            SQL.Append( "      AND bst.BOOKING_MST_PK =" + bookingPK);
            SQL.Append( "      AND bst.cons_customer_mst_fk = consignee.customer_mst_pk(+)");
            SQL.Append( "      AND bst.status = 2");
            // only for the confirmed booking.
            SQL.Append( "      AND bst.commodity_group_fk = comm.commodity_group_pk(+)");
            SQL.Append( "      AND AGT.AGENT_MST_PK(+) = bst.TARIFF_AGENT_MST_FK");
            SQL.Append( "      AND VVT.VESSEL_VOYAGE_TBL_FK = V.VESSEL_VOYAGE_TBL_PK");
            SQL.Append( "      AND BST.VESSEL_VOYAGE_FK = VVT.VOYAGE_TRN_PK");

            try
            {
                return objWF.GetDataSet(SQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetBookingContainerData(string bookingPK)
        {

            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append( "SELECT");
            SQL.Append( "      btrn.container_type_mst_fk,");
            SQL.Append( "      cont.container_type_mst_id,");
            SQL.Append( "      btrn.no_of_boxes,");
            SQL.Append( "      com.commodity_name,");
            SQL.Append( "      btrn.commodity_mst_fk");
            SQL.Append( "FROM");
            SQL.Append( "      BOOKING_MST_TBL bst,");
            SQL.Append( "      BOOKING_TRN btrn,");
            SQL.Append( "      container_type_mst_tbl cont,");
            SQL.Append( "      commodity_mst_tbl com");
            SQL.Append( "WHERE");
            SQL.Append( "      btrn.BOOKING_MST_FK =  bst.BOOKING_MST_PK");
            SQL.Append( "      AND btrn.container_type_mst_fk = cont.container_type_mst_pk");
            SQL.Append( "      AND btrn.BOOKING_MST_FK =" + bookingPK);
            SQL.Append( "      AND btrn.commodity_mst_fk =com.commodity_mst_pk(+) ");
            SQL.Append( "      AND bst.status = 2");
            // only for the confirmed booking.
            SQL.Append( " ORDER BY cont.Preferences");

            try
            {
                return objWF.GetDataSet(SQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetBookingContainerLCLData(string bookingPK)
        {

            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append( "select");
            SQL.Append( "0 JOB_TRN_CONT_pk,");
            //modified by latha
            SQL.Append( "bkg_trn.container_type_mst_fk,");
            SQL.Append( "'' container_id,");
            SQL.Append( "'' container_number,");
            SQL.Append( "'' seal_number,");
            SQL.Append( "bkg.volume_in_cbm volume_in_cbm,");
            SQL.Append( "bkg.gross_weight gross_weight,");
            SQL.Append( "bkg.net_weight net_weight,");
            SQL.Append( "bkg.chargeable_weight,");
            SQL.Append( "bkg.pack_typ_mst_fk pack_type_mst_fk,");
            SQL.Append( "bkg.pack_count pack_count,");
            SQL.Append( "bkg_trn.commodity_mst_fk,");
            SQL.Append( "'' load_date");
            SQL.Append( ", '0' CONTAINER_PK");
            SQL.Append( "from");
            SQL.Append( "BOOKING_MST_TBL bkg,");
            SQL.Append( "BOOKING_TRN bkg_trn,");
            SQL.Append( "commodity_mst_tbl com ");
            SQL.Append( "where");
            SQL.Append( "bkg_trn.BOOKING_MST_FK = bkg.BOOKING_MST_PK");
            SQL.Append( "AND bkg_trn.BOOKING_MST_FK =" + bookingPK);
            SQL.Append( "AND bkg_trn.commodity_mst_fk =com.commodity_mst_pk(+) ");
            SQL.Append( "AND bkg.status = 2");

            try
            {
                return objWF.GetDataSet(SQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetBookingFreightData(string bookingPK, Int64 baseCurrency)
        {

            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append( "SELECT");
            SQL.Append( "     '0' JOB_TRN_FD_pk,");
            SQL.Append( "     CONTAINER_TYPE_MST_FK,");
            SQL.Append( "     container_type_mst_id,");
            SQL.Append( "     frt.freight_element_id,");
            SQL.Append( "     frt.freight_element_name,");
            SQL.Append( "     frt.freight_element_mst_pk,");
            SQL.Append( "     basis,");
            SQL.Append( "     quantity,");
            SQL.Append( "     DECODE(bfrt.pymt_type,1,'Prepaid',2,'Collect', 3,'Foreign') freight_type,");
            SQL.Append( "     nvl(bfrt.tariff_rate,1)*nvl(btrn.no_of_boxes,1) freight_amt,");
            SQL.Append( "     bfrt.currency_mst_fk,");
            SQL.Append( "     ROUND(GET_EX_RATE(bfrt.currency_mst_fk," + baseCurrency + ",round(sysdate - .5)),4) AS ROE ,");
            SQL.Append( "     'false' \"Delete\", 1 \"Print\" ");
            SQL.Append( "FROM");
            SQL.Append( "     BOOKING_MST_TBL bst,");
            SQL.Append( "     BOOKING_TRN btrn,");
            SQL.Append( "     BOOKING_TRN_FRT_DTLS bfrt,");
            SQL.Append( "     container_type_mst_tbl cont,");
            SQL.Append( "     freight_element_mst_tbl frt,");
            SQL.Append( "     currency_type_mst_tbl curr");
            SQL.Append( "WHERE");
            SQL.Append( "     bfrt.freight_element_mst_fk = frt.freight_element_mst_pk");
            SQL.Append( "     AND bfrt.BOOKING_MST_FK = btrn.BOOKING_TRN_FK");
            SQL.Append( "     AND btrn.BOOKING_MST_FK = bst.BOOKING_MST_PK");
            SQL.Append( "     AND btrn.container_type_mst_fk = cont.container_type_mst_pk");
            SQL.Append( "     AND bst.BOOKING_MST_PK = " + bookingPK);
            SQL.Append( "     AND bfrt.currency_mst_fk = curr.currency_mst_pk");
            SQL.Append( "     AND bst.status = 2");
            // only for the confirmed booking.
            SQL.Append( "     ORDER BY cont.container_type_mst_id,frt.freight_element_id ");

            try
            {
                return objWF.GetDataSet(SQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetBookingFreightLCLData(string bookingPK, Int64 baseCurrency)
        {

            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append( "SELECT");
            SQL.Append( "     '0' JOB_TRN_FD_pk,");
            SQL.Append( "     CONTAINER_TYPE_MST_FK,");
            SQL.Append( "     CONTAINER_TYPE_MST_ID,");
            SQL.Append( "     frt.freight_element_id,");
            SQL.Append( "     frt.freight_element_name,");
            SQL.Append( "     frt.freight_element_mst_pk,");
            SQL.Append( "     DECODE(btrn.basis,0,' ',1,'%',2,'Flat rate',3,'Kgs',4,'Unit') basis,");
            SQL.Append( "     btrn.quantity,");
            SQL.Append( "     DECODE(bfrt.pymt_type,1,'Prepaid',2,'Collect', 3,'Foreign') freight_type,");
            SQL.Append( "     nvl(bfrt.tariff_rate,1)*nvl(btrn.quantity,1) freight_amt,");
            SQL.Append( "     bfrt.currency_mst_fk,");
            SQL.Append( "     ROUND(GET_EX_RATE(bfrt.currency_mst_fk," + baseCurrency + ",round(sysdate - .5)),4) AS ROE ,");
            SQL.Append( "     'false' \"Delete\", 1 \"Print\" ");
            SQL.Append( "     FROM");
            SQL.Append( "     BOOKING_MST_TBL bst,");
            SQL.Append( "     BOOKING_TRN btrn,");
            SQL.Append( "     BOOKING_TRN_FRT_DTLS bfrt,");
            SQL.Append( "     freight_element_mst_tbl frt,");
            SQL.Append( "     currency_type_mst_tbl curr, CONTAINER_TYPE_MST_TBL CTMT ");
            SQL.Append( "     WHERE");
            SQL.Append( "     bfrt.freight_element_mst_fk = frt.freight_element_mst_pk");
            SQL.Append( "     AND bfrt.BOOKING_MST_FK = btrn.BOOKING_TRN_FK");
            SQL.Append( "     AND CTMT.CONTAINER_TYPE_MST_PK = BTRN.CONTAINER_TYPE_MST_FK");
            SQL.Append( "     AND btrn.BOOKING_MST_FK = bst.BOOKING_MST_PK");
            SQL.Append( "     AND bst.BOOKING_MST_PK =" + bookingPK);
            SQL.Append( "     AND bfrt.currency_mst_fk = curr.currency_mst_pk");
            SQL.Append( "     AND bst.status = 2");
            SQL.Append( "     ORDER BY frt.freight_element_id");

            try
            {
                return objWF.GetDataSet(SQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public Int64 GetBaseCurrency()
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();

            SQL.Append(" SELECT c.currency_mst_fk FROM corporate_mst_tbl c ");

            try
            {
                return Convert.ToInt64(objWF.ExecuteScaler(SQL.ToString()));
            }
            catch (OracleException sqlExp)
            {
                return 0;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Property"
        int ComGrp;
        public int CommodityGroup
        {
            get { return ComGrp; }
            set { ComGrp = value; }
        }
        #endregion

        #region "Commodity"
        public DataSet FetchCommodity()
        {

            string strSQL = null;
            strSQL = "SELECT c.commodity_mst_pk,c.commodity_name  FROM commodity_mst_tbl c WHERE c.active_flag =1 ORDER BY c.commodity_name";
            WorkFlow objWF = new WorkFlow();
            try
            {
                return objWF.GetDataSet(strSQL);
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Spacial Request"

        private ArrayList SaveTransactionHZSpcl(OracleCommand SCM, string UserName, string strSpclRequest, long PkValue)
        {
            try
            {
                if (!string.IsNullOrEmpty(strSpclRequest))
                {
                    arrMessage.Clear();
                    string[] strParam = null;
                    strParam = strSpclRequest.Split('~');
                    try
                    {
                        var _with27 = SCM;
                        _with27.CommandType = CommandType.StoredProcedure;
                        _with27.CommandText = UserName + ".JOB_TRN_SPCL_REQ_PKG.JOB_TRN_HAZ_SPL_REQ_INS";
                        var _with28 = _with27.Parameters;
                        _with28.Clear();
                        //BKG_TRN_SEA_FK_IN()
                        _with28.Add("JOB_TRN_SEA_FK_IN", PkValue).Direction = ParameterDirection.Input;
                        //OUTER_PACK_TYPE_MST_FK_IN()
                        _with28.Add("OUTER_PACK_TYPE_MST_FK_IN", getDefault(strParam[0], DBNull.Value)).Direction = ParameterDirection.Input;
                        //INNER_PACK_TYPE_MST_FK_IN()
                        _with28.Add("INNER_PACK_TYPE_MST_FK_IN", getDefault(strParam[1], DBNull.Value)).Direction = ParameterDirection.Input;
                        //MIN_TEMP_IN()
                        _with28.Add("MIN_TEMP_IN", getDefault(strParam[2], DBNull.Value)).Direction = ParameterDirection.Input;
                        //MIN_TEMP_UOM_IN()
                        _with28.Add("MIN_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[2]) ? 0 : Convert.ToInt32(strParam[3])), 0)).Direction = ParameterDirection.Input;
                        //MAX_TEMP_IN()
                        _with28.Add("MAX_TEMP_IN", getDefault(strParam[4], DBNull.Value)).Direction = ParameterDirection.Input;
                        //MAX_TEMP_UOM_IN()
                        _with28.Add("MAX_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[4]) ? 0 : Convert.ToInt32(strParam[5])), 0)).Direction = ParameterDirection.Input;
                        //FLASH_PNT_TEMP_IN()
                        _with28.Add("FLASH_PNT_TEMP_IN", getDefault(strParam[6], DBNull.Value)).Direction = ParameterDirection.Input;
                        //FLASH_PNT_TEMP_UOM_IN()
                        _with28.Add("FLASH_PNT_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[6]) ? 0 : Convert.ToInt32(strParam[7])), 0)).Direction = ParameterDirection.Input;
                        //IMDG_CLASS_CODE_IN()
                        _with28.Add("IMDG_CLASS_CODE_IN", getDefault(strParam[8], DBNull.Value)).Direction = ParameterDirection.Input;
                        //UN_NO_IN()
                        _with28.Add("UN_NO_IN", getDefault(strParam[9], DBNull.Value)).Direction = ParameterDirection.Input;
                        //IMO_SURCHARGE_IN()
                        _with28.Add("IMO_SURCHARGE_IN", getDefault(strParam[10], 0)).Direction = ParameterDirection.Input;
                        //SURCHARGE_AMT_IN()
                        _with28.Add("SURCHARGE_AMT_IN", getDefault(strParam[11], 0)).Direction = ParameterDirection.Input;
                        //IS_MARINE_POLLUTANT_IN()
                        _with28.Add("IS_MARINE_POLLUTANT_IN", getDefault(strParam[12], 0)).Direction = ParameterDirection.Input;
                        //EMS_NUMBER_IN()
                        _with28.Add("EMS_NUMBER_IN", getDefault(strParam[13], DBNull.Value)).Direction = ParameterDirection.Input;
                        _with28.Add("PROPER_SHIPPING_NAME_IN", getDefault(strParam[14], DBNull.Value)).Direction = ParameterDirection.Input;
                        _with28.Add("PACK_CLASS_TYPE_IN", getDefault(strParam[15], DBNull.Value)).Direction = ParameterDirection.Input;
                        //RETURN_VALUE()
                        _with28.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        _with27.ExecuteNonQuery();
                        arrMessage.Add("All data saved successfully");
                        return arrMessage;
                    }
                    catch (OracleException oraexp)
                    {
                        arrMessage.Add(oraexp.Message);
                        return arrMessage;
                    }
                    catch (Exception ex)
                    {
                        arrMessage.Add(ex.Message);
                        return arrMessage;
                    }
                }
                arrMessage.Add("All data saved successfully");
                return arrMessage;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataTable fetchSpclReq(string strPK)
        {
            try
            {
                if (!string.IsNullOrEmpty(strPK))
                {
                    StringBuilder strQuery = new StringBuilder();
                    strQuery.Append("SELECT JOB_TRN_SPL_PK," );
                    strQuery.Append("JOB_TRN_CONT_FK," );
                    strQuery.Append("OUTER_PACK_TYPE_MST_FK," );
                    strQuery.Append("INNER_PACK_TYPE_MST_FK," );
                    strQuery.Append("MIN_TEMP," );
                    strQuery.Append("MIN_TEMP_UOM," );
                    strQuery.Append("MAX_TEMP," );
                    strQuery.Append("MAX_TEMP_UOM," );
                    strQuery.Append("FLASH_PNT_TEMP," );
                    strQuery.Append("FLASH_PNT_TEMP_UOM," );
                    strQuery.Append("IMDG_CLASS_CODE," );
                    strQuery.Append("UN_NO," );
                    strQuery.Append("IMO_SURCHARGE," );
                    strQuery.Append("SURCHARGE_AMT," );
                    strQuery.Append("IS_MARINE_POLLUTANT," );
                    strQuery.Append("Q.PROPER_SHIPPING_NAME, " );
                    strQuery.Append("Q.PACK_CLASS_TYPE, " );
                    strQuery.Append("EMS_NUMBER FROM JOB_TRN_SPL_REQ Q" );
                    strQuery.Append("WHERE " );
                    strQuery.Append("Q.JOB_TRN_CONT_FK=" + strPK);
                    return (new WorkFlow()).GetDataTable(strQuery.ToString());
                }
                else
                {
                    return null;
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private ArrayList SaveTransactionReefer(OracleCommand SCM, string UserName, string strSpclRequest, long PkValue)
        {

            if (!string.IsNullOrEmpty(strSpclRequest))
            {
                arrMessage.Clear();
                string[] strParam = null;
                strParam = strSpclRequest.Split('~');
                try
                {
                    var _with29 = SCM;
                    _with29.CommandType = CommandType.StoredProcedure;
                    _with29.CommandText = UserName + ".JOB_TRN_SPCL_REQ_PKG.JOB_TRN_SPL_REQ_INS";
                    var _with30 = _with29.Parameters;
                    _with30.Clear();
                    //BOOKING_TRN_SEA_FK_IN()
                    _with30.Add("JOB_TRN_SEA_FK_IN", PkValue).Direction = ParameterDirection.Input;
                    //VENTILATION_IN()
                    _with30.Add("VENTILATION_IN", strParam[0]).Direction = ParameterDirection.Input;
                    //AIR_COOL_METHOD_IN()
                    _with30.Add("AIR_COOL_METHOD_IN", strParam[1]).Direction = ParameterDirection.Input;
                    //HUMIDITY_FACTOR_IN()
                    _with30.Add("HUMIDITY_FACTOR_IN", getDefault(strParam[2], DBNull.Value)).Direction = ParameterDirection.Input;
                    //IS_PERSHIABLE_GOODS_IN()
                    _with30.Add("IS_PERSHIABLE_GOODS_IN", strParam[3]).Direction = ParameterDirection.Input;
                    //MIN_TEMP_IN()
                    _with30.Add("MIN_TEMP_IN", getDefault(strParam[4], DBNull.Value)).Direction = ParameterDirection.Input;
                    //MIN_TEMP_UOM_IN()
                    _with30.Add("MIN_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[4]) ? 0 : Convert.ToInt32(strParam[5])), 0)).Direction = ParameterDirection.Input;
                    //MAX_TEMP_IN()
                    _with30.Add("MAX_TEMP_IN", getDefault(strParam[6], DBNull.Value)).Direction = ParameterDirection.Input;
                    //MAX_TEMP_UOM_IN()
                    _with30.Add("MAX_TEMP_UOM_IN", getDefault((string.IsNullOrEmpty(strParam[6]) ? 0 : Convert.ToInt32(strParam[7])), 0)).Direction = ParameterDirection.Input;
                    //PACK_TYPE_MST_FK_IN()
                    _with30.Add("PACK_TYPE_MST_FK_IN", getDefault(strParam[8], DBNull.Value)).Direction = ParameterDirection.Input;
                    //PACK_COUNT_IN()
                    _with30.Add("PACK_COUNT_IN", getDefault(strParam[9], 0)).Direction = ParameterDirection.Input;
                    _with30.Add("REF_VENTILATION_IN", getDefault(strParam[10], DBNull.Value)).Direction = ParameterDirection.Input;
                    //RETURN_VALUE()
                    _with30.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with29.ExecuteNonQuery();
                    arrMessage.Add("All data saved successfully");
                    return arrMessage;
                }
                catch (OracleException oraexp)
                {
                    arrMessage.Add(oraexp.Message);
                    return arrMessage;
                }
                catch (Exception ex)
                {
                    arrMessage.Add(ex.Message);
                    return arrMessage;
                }
            }
            arrMessage.Add("All data saved successfully");
            return arrMessage;
        }

        public DataTable fetchSpclReqReefer(string strPK)
        {
            if (!string.IsNullOrEmpty(strPK))
            {
                StringBuilder strQuery = new StringBuilder();
                strQuery.Append("SELECT JOB_TRN_SPL_PK," );
                strQuery.Append("JOB_TRN_CONT_FK," );
                strQuery.Append("VENTILATION," );
                strQuery.Append("AIR_COOL_METHOD," );
                strQuery.Append("HUMIDITY_FACTOR," );
                strQuery.Append("IS_PERSHIABLE_GOODS," );
                strQuery.Append("MIN_TEMP," );
                strQuery.Append("MIN_TEMP_UOM," );
                strQuery.Append("MAX_TEMP," );
                strQuery.Append("MAX_TEMP_UOM," );
                strQuery.Append("PACK_TYPE_MST_FK," );
                strQuery.Append("Q.PACK_COUNT, " );
                strQuery.Append("Q.REF_VENTILATION " );
                strQuery.Append("FROM JOB_TRN_SPL_REQ Q" );
                strQuery.Append("WHERE " );
                strQuery.Append("Q.JOB_TRN_CONT_FK=" + strPK);
                return (new WorkFlow()).GetDataTable(strQuery.ToString());
            }
            else
            {
                return null;
            }
        }

        private ArrayList SaveTransactionODC(OracleCommand SCM, string UserName, string strSpclRequest, long PkValue)
        {
            if (!string.IsNullOrEmpty(strSpclRequest))
            {
                arrMessage.Clear();
                string[] strParam = null;
                strParam = strSpclRequest.Split('~');
                try
                {
                    var _with31 = SCM;
                    _with31.CommandType = CommandType.StoredProcedure;
                    _with31.CommandText = UserName + ".JOB_TRN_SPCL_REQ_PKG.JOB_TRN_ODC_SPL_REQ_INS";
                    var _with32 = _with31.Parameters;
                    _with32.Clear();
                    //BKG_TRN_SEA_FK_IN()
                    _with32.Add("JOB_TRN_SEA_FK_IN", PkValue).Direction = ParameterDirection.Input;
                    //LENGTH_IN()
                    _with32.Add("LENGTH_IN", getDefault(strParam[0], DBNull.Value)).Direction = ParameterDirection.Input;
                    //LENGTH_UOM_MST_FK_IN()
                    _with32.Add("LENGTH_UOM_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //HEIGHT_IN()
                    _with32.Add("HEIGHT_IN", getDefault(strParam[2], DBNull.Value)).Direction = ParameterDirection.Input;
                    //HEIGHT_UOM_MST_FK_IN()
                    _with32.Add("HEIGHT_UOM_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //WIDTH_IN()
                    _with32.Add("WIDTH_IN", getDefault(strParam[1], 0)).Direction = ParameterDirection.Input;
                    //WIDTH_UOM_MST_FK_IN()
                    _with32.Add("WIDTH_UOM_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //WEIGHT_IN()
                    _with32.Add("WEIGHT_IN", getDefault(strParam[3], DBNull.Value)).Direction = ParameterDirection.Input;
                    //WEIGHT_UOM_MST_FK_IN()
                    _with32.Add("WEIGHT_UOM_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //VOLUME_IN()
                    _with32.Add("VOLUME_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //VOLUME_UOM_MST_FK_IN()
                    _with32.Add("VOLUME_UOM_MST_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //SLOT_LOSS_IN()
                    _with32.Add("SLOT_LOSS_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //LOSS_QUANTITY_IN()
                    _with32.Add("LOSS_QUANTITY_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    //APPR_REQ_IN()
                    _with32.Add("APPR_REQ_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    if (Convert.ToBoolean(strParam[4]) == true)
                    {
                        _with32.Add("STOWAGE_IN", 1).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        _with32.Add("STOWAGE_IN", 2).Direction = ParameterDirection.Input;
                    }
                    _with32.Add("HAND_INST_IN", (string.IsNullOrEmpty(strParam[6]) ? "" : strParam[6])).Direction = ParameterDirection.Input;
                    _with32.Add("LASH_INST_IN", (string.IsNullOrEmpty(strParam[7]) ? "": strParam[7])).Direction = ParameterDirection.Input;
                    //RETURN_VALUE()
                    _with32.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with31.ExecuteNonQuery();
                    arrMessage.Add("All data saved successfully");
                    return arrMessage;
                }
                catch (OracleException oraexp)
                {
                    arrMessage.Add(oraexp.Message);
                    return arrMessage;
                }
                catch (Exception ex)
                {
                    arrMessage.Add(ex.Message);
                    return arrMessage;
                }
            }
            arrMessage.Add("All data saved successfully");
            return arrMessage;
        }

        public DataTable fetchSpclReqODC(string strPK)
        {
            if (!string.IsNullOrEmpty(strPK))
            {
                StringBuilder strQuery = new StringBuilder();
                strQuery.Append("SELECT " );
                strQuery.Append("JOB_TRN_SPL_PK," );
                strQuery.Append("JOB_TRN_CONT_FK," );
                strQuery.Append("LENGTH," );
                strQuery.Append("LENGTH_UOM_MST_FK," );
                strQuery.Append("HEIGHT," );
                strQuery.Append("HEIGHT_UOM_MST_FK," );
                strQuery.Append("WIDTH," );
                strQuery.Append("WIDTH_UOM_MST_FK," );
                strQuery.Append("WEIGHT," );
                strQuery.Append("WEIGHT_UOM_MST_FK," );
                strQuery.Append("VOLUME," );
                strQuery.Append("VOLUME_UOM_MST_FK," );
                strQuery.Append("SLOT_LOSS," );
                strQuery.Append("LOSS_QUANTITY," );
                strQuery.Append("APPR_REQ, " );
                strQuery.Append("STOWAGE, " );
                strQuery.Append("HANDLING_INSTR, " );
                strQuery.Append("LASHING_INSTR " );
                strQuery.Append("FROM JOB_TRN_SPL_REQ Q" );
                strQuery.Append("WHERE " );
                strQuery.Append("Q.JOB_TRN_CONT_FK=" + strPK);
                return (new WorkFlow()).GetDataTable(strQuery.ToString());
            }
            else
            {
                return null;
            }
        }
        #endregion

        #region "Save Function"

        public ArrayList Save(DataSet M_DataSet, DataSet dsContainerData, DataSet dsTPDetails, DataSet dsFreightDetails, DataSet dsPurchaseInventory, DataSet dsCostDetails, DataSet dsPickUpDetails, DataSet dsDropDetails, bool Update, bool isEdting,
        object ucrNo, string jobCardRefNumber, string userLocation, string employeeID, long JobCardPK, DataSet dsOtherCharges, string strBookingRefNo, string strOperatorPk, Int16 intIsUpdate, string hdColPlace = "",
        string hdDelPlace = "", int AddVATOSFLAG = 0, Int32 CheckESI = 0, DataSet dsIncomeChargeDetails = null, DataSet dsExpenseChargeDetails = null, DataSet dsDoc = null, string PODetails = "", Int16 ProcessType = 1, Int16 BizType = 1, Int16 CargoType = 1,
        string sid = "", string polid = "", string podid = "")
        {


            //************************************************************************************
            string AGENT_CURR_COL_NAME = "AGENT_CURRENCY_MST_FK";
            string AGENT_RATE_COL_NAME = "AGENT_RATEPERBASIS";
            string AGENT_AMT_COL_NAME = "AGENT_AMOUNT";

            if (!dsFreightDetails.Tables[0].Columns.Contains(AGENT_CURR_COL_NAME))
                dsFreightDetails.Tables[0].Columns.Add(new DataColumn(AGENT_CURR_COL_NAME, typeof(System.UInt32)));
            if (!dsFreightDetails.Tables[0].Columns.Contains(AGENT_RATE_COL_NAME))
                dsFreightDetails.Tables[0].Columns.Add(new DataColumn(AGENT_RATE_COL_NAME, typeof(System.Double)));
            if (!dsFreightDetails.Tables[0].Columns.Contains(AGENT_AMT_COL_NAME))
                dsFreightDetails.Tables[0].Columns.Add(new DataColumn(AGENT_AMT_COL_NAME, typeof(System.Double)));
            if (!dsOtherCharges.Tables[0].Columns.Contains(AGENT_CURR_COL_NAME))
                dsOtherCharges.Tables[0].Columns.Add(new DataColumn(AGENT_CURR_COL_NAME, typeof(System.UInt32)));
            if (!dsOtherCharges.Tables[0].Columns.Contains(AGENT_AMT_COL_NAME))
                dsOtherCharges.Tables[0].Columns.Add(new DataColumn(AGENT_AMT_COL_NAME, typeof(System.Double)));

            //FREIGHT
            if ((HttpContext.Current.Session["AgentRates"] != null))
            {
                DataSet dsAgentFreight = HttpContext.Current.Session["AgentRates"] as DataSet;
                //Infragistics.WebUI.UltraWebGrid.UltraWebGrid UWGAgentFrt = null;
                //UWGAgentFrt = HttpContext.Current.Session["AgentRates"] as Infragistics.WebUI.UltraWebGrid.UltraWebGrid;
                //if ((dsAgentFreight != null))
                //{
                //    foreach (DataRow _rowFrt in dsFreightDetails.Tables[0].Rows)
                //    {
                //        foreach (DataRow _row in dsAgentFreight.Tables[0].Rows)
                //        {
                //            if (_row[AgentFreightHeader.FreightElementPK] == _rowFrt["FREIGHT_ELEMENT_MST_PK"])
                //            {
                //                if (!string.IsNullOrEmpty(_row[AgentFreightHeader.CurrencyPK]))
                //                    _rowFrt[AGENT_CURR_COL_NAME] = _row[AgentFreightHeader.CurrencyPK];
                //                if (!string.IsNullOrEmpty(_row[AgentFreightHeader.Rateperbasis]))
                //                    _rowFrt[AGENT_RATE_COL_NAME] = _row[AgentFreightHeader.Rateperbasis];
                //                if (!string.IsNullOrEmpty(_row[AgentFreightHeader.Amount]))
                //                    _rowFrt[AGENT_AMT_COL_NAME] = _row[AgentFreightHeader.Amount];
                //                break; // TODO: might not be correct. Was : Exit For
                //            }
                //        }
                //    }
                //}
            }

            //OTHER CHARGES
            if ((HttpContext.Current.Session["AgentRatesOth"] != null))
            {
                DataSet dsAgentFreightOth = HttpContext.Current.Session["AgentRatesOth"] as DataSet;
                //Infragistics.WebUI.UltraWebGrid.UltraWebGrid UWGAgentFrtOth = null;
                //UWGAgentFrtOth = HttpContext.Current.Session["AgentRatesOth"] as Infragistics.WebUI.UltraWebGrid.UltraWebGrid;
                //if ((dsAgentFreightOth != null))
                //{
                //    foreach (DataRow _rowFrt in dsOtherCharges.Tables[0].Rows)
                //    {
                //        foreach (DataRow _row in dsAgentFreightOth.Tables[0].Rows)
                //        {
                //            if (_row[AgentOthChargesHeader.FreightElementPK] == _rowFrt["FREIGHT_ELEMENT_MST_PK"])
                //            {
                //                if (!string.IsNullOrEmpty(_row[AgentOthChargesHeader.Currency]))
                //                    _rowFrt[AGENT_CURR_COL_NAME] = _row[AgentOthChargesHeader.Currency];
                //                if (!string.IsNullOrEmpty(_row[AgentOthChargesHeader.Amount]))
                //                    _rowFrt[AGENT_AMT_COL_NAME] = _row[AgentOthChargesHeader.Amount];
                //                break; // TODO: might not be correct. Was : Exit For
                //            }
                //        }
                //    }
                //}
            }
            //************************************************************************************
            int strVoyagepk = Convert.ToInt32(getDefault(M_DataSet.Tables[0].Rows[0]["VOYAGEPK"], 0));
            WorkFlow objWK = new WorkFlow();
            objVesselVoyage.ConfigurationPK = M_Configuration_PK;
            objVesselVoyage.CREATED_BY = M_CREATED_BY_FK;

            objWK.OpenConnection();
            OracleTransaction TRAN = null;
            OracleTransaction TRAN1 = null;

            //To save in Vessel/Voyage
            if (BizType == 2)
            {
                if (Update == true)
                {
                    strVoyagepk = 0;
                }
            }
            TRAN = objWK.MyConnection.BeginTransaction();
            TRAN1 = TRAN;
            if (strVoyagepk.ToString() == "0" & !string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["VESSEL_ID"].ToString()))
            {
                objWK.MyCommand.Transaction = TRAN1;
                objWK.MyCommand.Connection = objWK.MyConnection;

                arrMessage = objVesselVoyage.SaveVesselMaster(strVoyagepk,
                    Convert.ToString(getDefault(M_DataSet.Tables[0].Rows[0]["VESSEL_NAME"], "")),
                    Convert.ToInt32(getDefault(M_DataSet.Tables[0].Rows[0]["CARRIER_MST_FK"], 0)),
                    Convert.ToString(getDefault(M_DataSet.Tables[0].Rows[0]["VESSEL_ID"], "")),
                    Convert.ToString(getDefault(M_DataSet.Tables[0].Rows[0]["VOYAGE"], "")), 
                    objWK.MyCommand,
                    Convert.ToInt32(getDefault(M_DataSet.Tables[0].Rows[0]["PORT_MST_POL_FK"], 0)), 
                    Convert.ToString(M_DataSet.Tables[0].Rows[0]["PORT_MST_POD_FK"]),
                    DateTime.MinValue,
                    Convert.ToDateTime(getDefault(M_DataSet.Tables[0].Rows[0]["ETD_DATE"], null)),
                    DateTime.MinValue,
                    Convert.ToDateTime(getDefault(M_DataSet.Tables[0].Rows[0]["ETA_DATE"], null)),
                    Convert.ToDateTime(getDefault(M_DataSet.Tables[0].Rows[0]["departure_date"], null)),
                    Convert.ToDateTime(getDefault(M_DataSet.Tables[0].Rows[0]["arrival_date"], null)));
                M_DataSet.Tables[0].Rows[0]["VOYAGEPK"] = strVoyagepk;
                if (!(string.Compare(arrMessage[0].ToString(), "saved") > 0))
                {
                    TRAN1.Rollback();
                    return arrMessage;
                }
                else
                {
                    arrMessage.Clear();
                }
            }

            Int32 nRowCnt = default(Int32);
            int intPKVal = 0;
            long lngI = 0;
            Int32 RecAfct = default(Int32);
            OracleCommand insCommand = new OracleCommand();
            OracleCommand updCommand = new OracleCommand();

            OracleCommand insContainerDetails = new OracleCommand();
            OracleCommand updContainerDetails = new OracleCommand();

            OracleCommand insTPDetails = new OracleCommand();
            OracleCommand updTPDetails = new OracleCommand();
            OracleCommand delTPDetails = new OracleCommand();

            OracleCommand insPickUpDetails = new OracleCommand();
            OracleCommand updPickUpDetails = new OracleCommand();

            OracleCommand insDropDetails = new OracleCommand();
            OracleCommand updDropDetails = new OracleCommand();

            OracleCommand insFreightDetails = new OracleCommand();
            OracleCommand updFreightDetails = new OracleCommand();
            OracleCommand delFreightDetails = new OracleCommand();

            OracleCommand insPurchaseInvDetails = new OracleCommand();
            OracleCommand updPurchaseInvDetails = new OracleCommand();
            OracleCommand delPurchaseInvDetails = new OracleCommand();

            OracleCommand insCostDetails = new OracleCommand();
            //'Added By Koteshwari 
            OracleCommand updCostDetails = new OracleCommand();
            OracleCommand delCostDetails = new OracleCommand();

            OracleCommand insOtherChargesDetails = new OracleCommand();
            OracleCommand updOtherChargesDetails = new OracleCommand();
            OracleCommand delOtherChargesDetails = new OracleCommand();

            OracleCommand insIncomeChargeDetails = new OracleCommand();
            OracleCommand updIncomeChargeDetails = new OracleCommand();
            OracleCommand delIncomeChargeDetails = new OracleCommand();

            OracleCommand insExpenseChargeDetails = new OracleCommand();
            OracleCommand updExpenseChargeDetails = new OracleCommand();
            OracleCommand delExpenseChargeDetails = new OracleCommand();

            OracleCommand updESIContainerDetails = new OracleCommand();
            OracleCommand updESICommand = new OracleCommand();

            DataSet dsTrackNTrace = new DataSet();
            int Int_I = 0;
            int Int_J = 0;
            DataSet dsESI = new DataSet();
            DataSet dsESIContainerData = new DataSet();
            dsESI = M_DataSet.Copy();
            dsESI.AcceptChanges();
            dsESIContainerData = dsContainerData.Copy();
            dsESIContainerData.AcceptChanges();

            if (JobCardPK == -1)
            {
                for (Int_I = 0; Int_I <= M_DataSet.Tables[0].Rows.Count - 1; Int_I++)
                {
                    for (Int_J = 0; Int_J <= M_DataSet.Tables[0].Columns.Count - 1; Int_J++)
                    {
                        dsESI.Tables[0].Rows[Int_I][Int_J] = M_DataSet.Tables[0].Rows[Int_I][Int_J];
                    }
                }

                for (Int_I = 0; Int_I <= dsContainerData.Tables[0].Rows.Count - 1; Int_I++)
                {
                    for (Int_J = 0; Int_J <= dsContainerData.Tables[0].Columns.Count - 1; Int_J++)
                    {
                        dsESIContainerData.Tables[0].Rows[Int_I][Int_J] = dsContainerData.Tables[0].Rows[Int_I][Int_J];
                    }
                }
            }

            if (string.IsNullOrEmpty(jobCardRefNumber.Trim()))
            {
                if (Convert.ToInt32(M_DataSet.Tables[0].Rows[0]["PROCESS_TYPE"] )== 2 & Convert.ToInt32(M_DataSet.Tables[0].Rows[0]["BUSINESS_TYPE"]) == 2)
                {
                    jobCardRefNumber = GenerateProtocolKey("JOB CARD IMP (SEA)", Convert.ToInt32(userLocation), Convert.ToInt32(employeeID), System.DateTime.Now, "", "", polid, M_LAST_MODIFIED_BY_FK, new WorkFlow(), sid,
                    podid);
                }
                else if (Convert.ToInt32(M_DataSet.Tables[0].Rows[0]["PROCESS_TYPE"]) == 2 & Convert.ToInt32(M_DataSet.Tables[0].Rows[0]["BUSINESS_TYPE"]) == 1)
                {
                    jobCardRefNumber = GenerateProtocolKey("JOB CARD IMP (AIR)", Convert.ToInt32(userLocation), Convert.ToInt32(employeeID), System.DateTime.Now, "", "", polid, M_LAST_MODIFIED_BY_FK, new WorkFlow(), sid,
                    podid);
                }
            }

            //ucrNo = ucrNo & jobCardRefNumber

            try
            {
                DataTable DtTbl = new DataTable();
                DataRow DtRw = null;
                int i = 0;

                dsTrackNTrace = dsContainerData.Copy();
                var _with33 = insCommand;
                _with33.Connection = objWK.MyConnection;
                _with33.CommandType = CommandType.StoredProcedure;
                _with33.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_CARD_TRN_TBL_INS";
                var _with34 = _with33.Parameters;

                insCommand.Parameters.Add("BOOKING_MST_FK_IN", OracleDbType.Int32, 10, "BOOKING_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["BOOKING_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("JOBCARD_REF_NO_IN", jobCardRefNumber).Direction = ParameterDirection.Input;

                insCommand.Parameters.Add("UCR_NO_IN", ucrNo).Direction = ParameterDirection.Input;
                //insCommand.Parameters["UCR_NO_IN"].SourceVersion = DataRowVersion.Current

                insCommand.Parameters.Add("JOBCARD_DATE_IN", OracleDbType.Date, 20, "jobcard_date").Direction = ParameterDirection.Input;
                insCommand.Parameters["JOBCARD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("JOB_CARD_STATUS_IN", OracleDbType.Int32, 1, "job_card_status").Direction = ParameterDirection.Input;
                insCommand.Parameters["JOB_CARD_STATUS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("JOB_CARD_CLOSED_ON_IN", OracleDbType.Date, 20, "job_card_closed_on").Direction = ParameterDirection.Input;
                insCommand.Parameters["JOB_CARD_CLOSED_ON_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("JC_AUTO_MANUAL_IN", OracleDbType.Int32, 1, "JC_AUTO_MANUAL").Direction = ParameterDirection.Input;
                insCommand.Parameters["JC_AUTO_MANUAL_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_XML_STATUS_IN", OracleDbType.Int32, 1, "WIN_XML_STATUS").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_XML_STATUS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("REMARKS_IN", OracleDbType.Varchar2, 100, "remarks").Direction = ParameterDirection.Input;
                insCommand.Parameters["REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "vessel_name").Direction = ParameterDirection.Input;
                insCommand.Parameters["VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("VOYAGE_IN", OracleDbType.Varchar2, 10, "voyage").Direction = ParameterDirection.Input;
                insCommand.Parameters["VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                //insCommand.Parameters.Add("VOYAGE_FK_IN", OracleDbType.Varchar2, 10, "VoyagePK").Direction = ParameterDirection.Input
                insCommand.Parameters.Add("VOYAGE_FK_IN", getDefault(strVoyagepk, DBNull.Value)).Direction = ParameterDirection.Input;
                insCommand.Parameters["VOYAGE_FK_IN"].SourceVersion = DataRowVersion.Current;

                //insCommand.Parameters.Add("ETA_DATE_IN", OracleDbType.Date, 25, "eta_date").Direction = ParameterDirection.Input
                //insCommand.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["ETA_DATE"].ToString()))
                {
                    insCommand.Parameters.Add("ETA_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("ETA_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["ETA_DATE"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;
                //Added By Sivachandran on 12-08-2009

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Date"].ToString()))
                {
                    insCommand.Parameters.Add("SURVEY_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("SURVEY_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["Survey_Date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["SURVEY_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["SHIPPING_INST_DT"].ToString()))
                {
                    insCommand.Parameters.Add("SI_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("SI_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["SHIPPING_INST_DT"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["SI_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["RFS_Date"].ToString()))
                {
                    insCommand.Parameters.Add("RFS_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("RFS_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["RFS_Date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["RFS_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["CRQ_Date"].ToString()))
                {
                    insCommand.Parameters.Add("CRQ_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("CRQ_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["CRQ_Date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["CRQ_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["STF_Date"].ToString()))
                {
                    insCommand.Parameters.Add("STF_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("STF_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["STF_Date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["STF_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SURVEY_REF_NR_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Ref_Nr"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_Ref_Nr"])).Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("SURVEY_REMARKS_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Remarks"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_Remarks"])).Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("SURVEYOR_FK_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_PK"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_PK"])).Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("SI_IN", OracleDbType.Int32, 1, "SHIPPING_INST_FLAG").Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("RFS_IN", OracleDbType.Int32, 1, "RFS").Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("CRQ_IN", OracleDbType.Int32, 1, "CRQ").Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("STF_IN", OracleDbType.Int32, 1, "STF").Direction = ParameterDirection.Input;
                insCommand.Parameters.Add("SURVEY_COMPLETED_IN", OracleDbType.Int32, 1, "SURVEY_COMPLETED").Direction = ParameterDirection.Input;

                //end

                //insCommand.Parameters.Add("ETD_DATE_IN", OracleDbType.Date, 25, "etd_date").Direction = ParameterDirection.Input
                //insCommand.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["ETD_DATE"].ToString()))
                {
                    insCommand.Parameters.Add("ETD_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("ETD_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["ETD_DATE"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;



                //insCommand.Parameters.Add("ARRIVAL_DATE_IN", OracleDbType.Date, 25, "arrival_date").Direction = ParameterDirection.Input
                //insCommand.Parameters["ARRIVAL_DATE_IN"].SourceVersion = DataRowVersion.Current

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["arrival_date"].ToString()))
                {
                    insCommand.Parameters.Add("ARRIVAL_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("ARRIVAL_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["arrival_date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["ARRIVAL_DATE_IN"].SourceVersion = DataRowVersion.Current;

                //insCommand.Parameters.Add("DEPARTURE_DATE_IN", OracleDbType.Date, 25, "departure_date").Direction = ParameterDirection.Input
                //insCommand.Parameters["DEPARTURE_DATE_IN"].SourceVersion = DataRowVersion.Current

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["departure_date"].ToString()))
                {
                    insCommand.Parameters.Add("DEPARTURE_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    insCommand.Parameters.Add("DEPARTURE_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["departure_date"])).Direction = ParameterDirection.Input;
                }
                insCommand.Parameters["DEPARTURE_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SEC_VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "sec_vessel_name").Direction = ParameterDirection.Input;
                insCommand.Parameters["SEC_VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SEC_VOYAGE_IN", OracleDbType.Varchar2, 10, "sec_voyage").Direction = ParameterDirection.Input;
                insCommand.Parameters["SEC_VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SEC_ETA_DATE_IN", OracleDbType.Date, 20, "sec_eta_date").Direction = ParameterDirection.Input;
                insCommand.Parameters["SEC_ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SEC_ETD_DATE_IN", OracleDbType.Date, 20, "sec_etd_date").Direction = ParameterDirection.Input;
                insCommand.Parameters["SEC_ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SHIPPER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "shipper_cust_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["SHIPPER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CONSIGNEE_CUST_MST_FK_IN", OracleDbType.Int32, 10, "consignee_cust_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["CONSIGNEE_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("NOTIFY1_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify1_cust_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["NOTIFY1_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("NOTIFY2_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify2_cust_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["NOTIFY2_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CB_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cb_agent_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["CB_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("POL_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "POL_AGENT_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["POL_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("DP_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "dp_agent_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["DP_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CL_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cl_agent_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["CL_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CARGO_MOVE_FK_IN", OracleDbType.Int32, 10, "cargo_move_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["CARGO_MOVE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("PYMT_TYPE_IN", OracleDbType.Int32, 1, "pymt_type").Direction = ParameterDirection.Input;
                insCommand.Parameters["PYMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SHIPPING_TERMS_MST_FK_IN", OracleDbType.Int32, 10, "shipping_terms_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["SHIPPING_TERMS_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("INSURANCE_AMT_IN", OracleDbType.Int32, 10, "insurance_amt").Direction = ParameterDirection.Input;
                insCommand.Parameters["INSURANCE_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("INSURANCE_CURRENCY_IN", OracleDbType.Int32, 10, "insurance_currency").Direction = ParameterDirection.Input;
                insCommand.Parameters["INSURANCE_CURRENCY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("COMMODITY_GROUP_FK_IN", OracleDbType.Int32, 10, "commodity_group_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["COMMODITY_GROUP_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("TRANSPORTER_DEPOT_FK_IN", OracleDbType.Int32, 10, "depot_pk").Direction = ParameterDirection.Input;
                insCommand.Parameters["TRANSPORTER_DEPOT_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("TRANSPORTER_CARRIER_FK_IN", OracleDbType.Int32, 10, "carrier_pk").Direction = ParameterDirection.Input;
                insCommand.Parameters["TRANSPORTER_CARRIER_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("COUNTRY_ORIGIN_FK_IN", OracleDbType.Int32, 10, "country_mst_pk").Direction = ParameterDirection.Input;
                insCommand.Parameters["COUNTRY_ORIGIN_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("DA_NUMBER_IN", OracleDbType.Int32, 10, "da_number").Direction = ParameterDirection.Input;
                insCommand.Parameters["DA_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("DEL_ADDRESS_IN", OracleDbType.Varchar2, 200, "del_address").Direction = ParameterDirection.Input;
                insCommand.Parameters["DEL_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CREATED_BY_FK_IN", Convert.ToInt64(M_CREATED_BY_FK)).Direction = ParameterDirection.Input;

                insCommand.Parameters.Add("CONFIG_PK_IN", Convert.ToInt64(M_Configuration_PK)).Direction = ParameterDirection.Input;
                //Added By Rijesh To Incorporate Cargo Details On March -30 2006
                //*******************
                insCommand.Parameters.Add("GOODS_DESCRIPTION_IN", OracleDbType.Varchar2, 4000, "GOODS_DESCRIPTION").Direction = ParameterDirection.Input;
                insCommand.Parameters["GOODS_DESCRIPTION_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("MARKS_NUMBERS_IN", OracleDbType.Varchar2, 2000, "MARKS_NUMBERS").Direction = ParameterDirection.Input;
                insCommand.Parameters["MARKS_NUMBERS_IN"].SourceVersion = DataRowVersion.Current;
                //***********************

                insCommand.Parameters.Add("MASTER_JC_FK_IN", OracleDbType.Int32, 10, "MASTER_JC_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["MASTER_JC_FK_IN"].SourceVersion = DataRowVersion.Current;

                //Code Added By Anil on 17 Aug 09
                insCommand.Parameters.Add("SB_DATE_IN", OracleDbType.Date, 20, "sb_date").Direction = ParameterDirection.Input;
                insCommand.Parameters["SB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SB_NO_IN", OracleDbType.Varchar2, 20, "sb_number").Direction = ParameterDirection.Input;
                insCommand.Parameters["SB_NO_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CHA_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cha_agent_mst_fk").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHA_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("STUFF_LOC_IN", OracleDbType.Varchar2, 40, "stuff_loc").Direction = ParameterDirection.Input;
                insCommand.Parameters["STUFF_LOC_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_SHIPMENT_IN", OracleDbType.Int32, 1, "LC_SHIPMENT").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_SHIPMENT_IN"].SourceVersion = DataRowVersion.Current;

                //nomination parameters
                insCommand.Parameters.Add("CHK_NOMINATED_IN", OracleDbType.Int32, 1, "CHK_NOMINATED").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_NOMINATED_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CHK_CSR_IN", OracleDbType.Int32, 1, "CHK_CSR").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_CSR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("EXECUTIVE_MST_FK_IN", OracleDbType.Int32, 10, "SALES_EXEC_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["EXECUTIVE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                //-----------------------------------------------------------------------------------

                insCommand.Parameters.Add("CC_REQ_IN", OracleDbType.Int32, 1, "cc_req").Direction = ParameterDirection.Input;
                insCommand.Parameters["CC_REQ_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CC_IE_IN", OracleDbType.Int32, 1, "cc_ie").Direction = ParameterDirection.Input;
                insCommand.Parameters["CC_IE_IN"].SourceVersion = DataRowVersion.Current;

                //Raghavenra added
                insCommand.Parameters.Add("PRC_FK_IN", OracleDbType.Int32, 1, "PRC_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["PRC_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("ONC_FK_IN", OracleDbType.Int32, 1, "ONC_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["ONC_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("PRC_MODE_FK_IN", OracleDbType.Int32, 1, "PRC_MODE_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["PRC_MODE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("ONC_MODE_FK_IN", OracleDbType.Int32, 1, " ONC_MODE_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["ONC_MODE_FK_IN"].SourceVersion = DataRowVersion.Current;
                //End
                //Manjunath for Total, Received and Balance Quantity and Weight
                insCommand.Parameters.Add("WIN_TOTAL_QTY_IN", OracleDbType.Int32, 10, "WIN_TOTAL_QTY").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_TOTAL_QTY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_REC_QTY_IN", OracleDbType.Int32, 10, "WIN_REC_QTY").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_REC_QTY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_BALANCE_QTY_IN", OracleDbType.Int32, 10, "WIN_BALANCE_QTY").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_BALANCE_QTY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_TOTAL_WT_IN", OracleDbType.Int32, 10, "WIN_TOTAL_WT").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_TOTAL_WT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_REC_WT_IN", OracleDbType.Int32, 10, "WIN_REC_WT").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_REC_WT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_BALANCE_WT_IN", OracleDbType.Int32, 10, "WIN_BALANCE_WT").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_BALANCE_WT_IN"].SourceVersion = DataRowVersion.Current;
                //End

                /// Added By Rajesh
                insCommand.Parameters.Add("PROCESS_TYPE_IN", OracleDbType.Int32, 1, "PROCESS_TYPE").Direction = ParameterDirection.Input;
                insCommand.Parameters["PROCESS_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BUSINESS_TYPE_IN", OracleDbType.Int32, 1, "BUSINESS_TYPE").Direction = ParameterDirection.Input;
                insCommand.Parameters["BUSINESS_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CARGO_TYPE_IN", OracleDbType.Int32, 1, "CARGO_TYPE").Direction = ParameterDirection.Input;
                insCommand.Parameters["CARGO_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CUST_CUSTOMER_MST_FK_IN", OracleDbType.Int32, 10, "CUST_CUSTOMER_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["CUST_CUSTOMER_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("PORT_MST_POL_FK_IN", OracleDbType.Int32, 10, "PORT_MST_POL_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["PORT_MST_POL_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("PORT_MST_POD_FK_IN", OracleDbType.Int32, 10, "PORT_MST_POD_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["PORT_MST_POD_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CARRIER_MST_FK_IN", OracleDbType.Int32, 10, "CARRIER_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["CARRIER_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WEIGHT_MASS_IN", OracleDbType.Varchar2, 500, "WEIGHT_MASS").Direction = ParameterDirection.Input;
                insCommand.Parameters["WEIGHT_MASS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("HBL_HAWB_REF_NO_IN", OracleDbType.Varchar2, 20, "HBL_HAWB_REF_NO").Direction = ParameterDirection.Input;
                insCommand.Parameters["HBL_HAWB_REF_NO_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("HBL_HAWB_DATE_IN", OracleDbType.Date, 20, "HBL_HAWB_DATE").Direction = ParameterDirection.Input;
                insCommand.Parameters["HBL_HAWB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("MBL_MAWB_REF_NO_IN", OracleDbType.Varchar2, 20, "MBL_MAWB_REF_NO").Direction = ParameterDirection.Input;
                insCommand.Parameters["MBL_MAWB_REF_NO_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("MBL_MAWB_DATE_IN", OracleDbType.Date, 20, "MBL_MAWB_DATE").Direction = ParameterDirection.Input;
                insCommand.Parameters["MBL_MAWB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CLEARANCE_ADDRESS_IN", OracleDbType.Varchar2, 200, "CLEARANCE_ADDRESS").Direction = ParameterDirection.Input;
                insCommand.Parameters["CLEARANCE_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("HBL_HAWB_SURR_IN", OracleDbType.Int32, 1, "HBL_HAWB_SURRENDERED").Direction = ParameterDirection.Input;
                insCommand.Parameters["HBL_HAWB_SURR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("MBL_MAWB_SURR_IN", OracleDbType.Int32, 1, "MBL_MAWB_SURRENDERED").Direction = ParameterDirection.Input;
                insCommand.Parameters["MBL_MAWB_SURR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("HBL_HAWB_SURR_DT_IN", OracleDbType.Date, 20, "HBL_HAWB_SURRDT").Direction = ParameterDirection.Input;
                insCommand.Parameters["HBL_HAWB_SURR_DT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("MBL_MAWB_SURR_DT_IN", OracleDbType.Date, 20, "MBL_MAWB_SURRDT").Direction = ParameterDirection.Input;
                insCommand.Parameters["MBL_MAWB_SURR_DT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BASE_CURRENCY_FK_IN", OracleDbType.Int32, 10, "BASE_CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["BASE_CURRENCY_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_NUMBER_IN", OracleDbType.Varchar2, 100, "LC_NUMBER").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_DATE_IN", OracleDbType.Date, 20, "LC_DATE").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_EXPIRES_ON_IN", OracleDbType.Date, 20, "Lc_Expires_On").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_EXPIRES_ON_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_CONS_BANK_IN", OracleDbType.Varchar2, 200, "Lc_Cons_Bank").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_CONS_BANK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LC_REMARKS_IN", OracleDbType.Varchar2, 200, "Lc_Remarks").Direction = ParameterDirection.Input;
                insCommand.Parameters["LC_REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BRO_RECEIVED_IN", OracleDbType.Int32, 1, "Bro_Received").Direction = ParameterDirection.Input;
                insCommand.Parameters["BRO_RECEIVED_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BRO_NUMBER_IN", OracleDbType.Varchar2, 100, "Bro_Number").Direction = ParameterDirection.Input;
                insCommand.Parameters["BRO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BRO_DATE_IN", OracleDbType.Date, 20, "Bro_Date").Direction = ParameterDirection.Input;
                insCommand.Parameters["BRO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BRO_ISSUEDBY_IN", OracleDbType.Varchar2, 200, "Bro_Issuedby").Direction = ParameterDirection.Input;
                insCommand.Parameters["BRO_ISSUEDBY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("BRO_REMARKS_IN", OracleDbType.Varchar2, 200, "Bro_Remarks").Direction = ParameterDirection.Input;
                insCommand.Parameters["BRO_REMARKS_IN"].SourceVersion = DataRowVersion.Current;
                //
                insCommand.Parameters.Add("CHK_CAN_IN", OracleDbType.Int32, 1, "chk_can").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_CAN_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CHK_DO_IN", OracleDbType.Int32, 1, "chk_do").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_DO_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CHK_PAY_IN", OracleDbType.Int32, 1, "chk_pay").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_PAY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("CHK_REC_IN", OracleDbType.Int32, 1, "chk_rec").Direction = ParameterDirection.Input;
                insCommand.Parameters["CHK_REC_IN"].SourceVersion = DataRowVersion.Current;

                if (PODetails.Length > 0)
                {
                    string[] PO_Details = null;
                    PO_Details = PODetails.Split('~');

                    insCommand.Parameters.Add("PO_NUMBER_IN", (string.IsNullOrEmpty(PO_Details[0].Trim()) ? "" : PO_Details[0])).Direction = ParameterDirection.Input;
                    insCommand.Parameters["PO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("PO_DATE_IN", (string.IsNullOrEmpty(PO_Details[1].Trim()) ?"" : PO_Details[1])).Direction = ParameterDirection.Input;
                    insCommand.Parameters["PO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("ROUTING_INST_IN", (string.IsNullOrEmpty(PO_Details[2].Trim()) ? "" : PO_Details[2])).Direction = ParameterDirection.Input;
                    insCommand.Parameters["ROUTING_INST_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("SENT_ON_IN", (string.IsNullOrEmpty(PO_Details[3].Trim()) ? "" : PO_Details[3])).Direction = ParameterDirection.Input;
                    insCommand.Parameters["SENT_ON_IN"].SourceVersion = DataRowVersion.Current;

                }
                else
                {
                    insCommand.Parameters.Add("PO_NUMBER_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    insCommand.Parameters["PO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("PO_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    insCommand.Parameters["PO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("ROUTING_INST_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    insCommand.Parameters["ROUTING_INST_IN"].SourceVersion = DataRowVersion.Current;

                    insCommand.Parameters.Add("SENT_ON_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    insCommand.Parameters["SENT_ON_IN"].SourceVersion = DataRowVersion.Current;
                }


                insCommand.Parameters.Add("LINE_BKG_NR_IN", OracleDbType.Varchar2, 50, "LINE_BKG_NR").Direction = ParameterDirection.Input;
                insCommand.Parameters["LINE_BKG_NR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LINE_BKG_DT_IN", OracleDbType.Date, 20, "LINE_BKG_DT").Direction = ParameterDirection.Input;
                insCommand.Parameters["LINE_BKG_DT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("LINER_TERMS_FK_IN", OracleDbType.Int32, 10, "LINER_TERMS_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["LINER_TERMS_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_UNIQ_REF_ID_IN", OracleDbType.Varchar2, 20, "WIN_UNIQ_REF_ID").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_UNIQ_REF_ID_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_SEND_USER_NAME_IN", OracleDbType.Varchar2, 50, "WIN_SEND_USER_NAME").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_SEND_USER_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_SEND_SECRET_KEY_IN", OracleDbType.Varchar2, 12, "WIN_SEND_SECRET_KEY").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_SEND_SECRET_KEY_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_MEM_JOBREF_NR_IN", OracleDbType.Varchar2, 50, "WIN_MEM_JOBREF_NR").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_MEM_JOBREF_NR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_QUOT_REF_NR_IN", OracleDbType.Varchar2, 20, "WIN_QUOT_REF_NR").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_QUOT_REF_NR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_INCO_PLACE_IN", OracleDbType.Varchar2, 50, "WIN_INCO_PLACE").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_INCO_PLACE_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("POO_FK_IN", OracleDbType.Int32, 10, "POO_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["POO_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_PICK_ONC_MOVE_FK_IN", OracleDbType.Int32, 10, "WIN_PICK_ONC_MOVE_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_PICK_ONC_MOVE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_CONSOL_REF_NR_IN", OracleDbType.Varchar2, 20, "WIN_CONSOL_REF_NR").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_CONSOL_REF_NR_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_CUTTOFF_DT_IN", OracleDbType.Date, 20, "WIN_CUTTOFF_DT").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_CUTTOFF_DT_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("WIN_CUTTOFF_TIME_IN", OracleDbType.Varchar2, 20, "WIN_CUTTOFF_TIME").Direction = ParameterDirection.Input;
                insCommand.Parameters["WIN_CUTTOFF_TIME_IN"].SourceVersion = DataRowVersion.Current;
                // ''' End By Rajesh
                insCommand.Parameters.Add("CONTAINER_OWNER_TYPE_FK_IN", OracleDbType.Int32, 1, "CONTAINER_OWNER_TYPE_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["CONTAINER_OWNER_TYPE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("TARIFF_AGENT_MST_FK_IN", OracleDbType.Int32, 1, "TARIFF_AGENT_MST_FK").Direction = ParameterDirection.Input;
                insCommand.Parameters["TARIFF_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("COLLECT_AGENT_FLAG_IN", OracleDbType.Int32, 1, "COLLECT_AGENT_FLAG").Direction = ParameterDirection.Input;
                insCommand.Parameters["COLLECT_AGENT_FLAG_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("STATUS_IN", OracleDbType.Int32, 1, "STATUS").Direction = ParameterDirection.Input;
                insCommand.Parameters["STATUS_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SAC_N1_IN", OracleDbType.Int32, 1, "SAC_N1").Direction = ParameterDirection.Input;
                insCommand.Parameters["SAC_N1_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SAC_N2_IN", OracleDbType.Int32, 1, "SAC_N2").Direction = ParameterDirection.Input;
                insCommand.Parameters["SAC_N2_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SAC_N1_NAME_IN", OracleDbType.Varchar2, 50, "SAC_N1_NAME").Direction = ParameterDirection.Input;
                insCommand.Parameters["SAC_N1_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("SAC_N2_NAME_IN", OracleDbType.Varchar2, 50, "SAC_N2_NAME").Direction = ParameterDirection.Input;
                insCommand.Parameters["SAC_N2_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insCommand.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_CARD_TRN_PK").Direction = ParameterDirection.Output;
                insCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;



                var _with35 = updCommand;
                _with35.Connection = objWK.MyConnection;
                _with35.CommandType = CommandType.StoredProcedure;
                _with35.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_CARD_TRN_TBL_UPD";
                var _with36 = _with35.Parameters;

                updCommand.Parameters.Add("JOB_CARD_TRN_PK_IN", OracleDbType.Int32, 10, "JOB_CARD_TRN_PK").Direction = ParameterDirection.Input;
                updCommand.Parameters["JOB_CARD_TRN_PK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BOOKING_MST_FK_IN", OracleDbType.Int32, 10, "BOOKING_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["BOOKING_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("UCR_NO_IN", OracleDbType.Varchar2, 40, "ucr_no").Direction = ParameterDirection.Input;
                updCommand.Parameters["UCR_NO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("JOBCARD_REF_NO_IN", jobCardRefNumber).Direction = ParameterDirection.Input;

                updCommand.Parameters.Add("JOBCARD_DATE_IN", OracleDbType.Date, 20, "jobcard_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["JOBCARD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("JOB_CARD_STATUS_IN", OracleDbType.Int32, 1, "job_card_status").Direction = ParameterDirection.Input;
                updCommand.Parameters["JOB_CARD_STATUS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("JOB_CARD_CLOSED_ON_IN", OracleDbType.Date, 20, "job_card_closed_on").Direction = ParameterDirection.Input;
                updCommand.Parameters["JOB_CARD_CLOSED_ON_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_XML_STATUS_IN", OracleDbType.Int32, 1, "WIN_XML_STATUS").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_XML_STATUS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("REMARKS_IN", OracleDbType.Varchar2, 100, "remarks").Direction = ParameterDirection.Input;
                updCommand.Parameters["REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "vessel_name").Direction = ParameterDirection.Input;
                updCommand.Parameters["VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("VOYAGE_IN", OracleDbType.Varchar2, 10, "voyage").Direction = ParameterDirection.Input;
                updCommand.Parameters["VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                //updCommand.Parameters.Add("VOYAGE_FK_IN", OracleDbType.Varchar2, 10, "VoyagePK").Direction = ParameterDirection.Input
                updCommand.Parameters.Add("VOYAGE_FK_IN", getDefault(strVoyagepk, DBNull.Value)).Direction = ParameterDirection.Input;
                updCommand.Parameters["VOYAGE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("ETA_DATE_IN", OracleDbType.Date, 20, "eta_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("ETD_DATE_IN", OracleDbType.Date, 20, "etd_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                //updCommand.Parameters.Add("ARRIVAL_DATE_IN", OracleDbType.Date, 20, "arrival_date").Direction = ParameterDirection.Input
                //updCommand.Parameters["ARRIVAL_DATE_IN"].SourceVersion = DataRowVersion.Current

                //updCommand.Parameters.Add("DEPARTURE_DATE_IN", OracleDbType.Date, 20, "departure_date").Direction = ParameterDirection.Input
                //updCommand.Parameters["DEPARTURE_DATE_IN"].SourceVersion = DataRowVersion.Current

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["arrival_date"].ToString()))
                {
                    updCommand.Parameters.Add("ARRIVAL_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("ARRIVAL_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["arrival_date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["ARRIVAL_DATE_IN"].SourceVersion = DataRowVersion.Current;

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["departure_date"].ToString()))
                {
                    updCommand.Parameters.Add("DEPARTURE_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("DEPARTURE_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["departure_date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["DEPARTURE_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SEC_VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "sec_vessel_name").Direction = ParameterDirection.Input;
                updCommand.Parameters["SEC_VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SEC_VOYAGE_IN", OracleDbType.Varchar2, 10, "sec_voyage").Direction = ParameterDirection.Input;
                updCommand.Parameters["SEC_VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SEC_ETA_DATE_IN", OracleDbType.Date, 20, "sec_eta_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["SEC_ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SEC_ETD_DATE_IN", OracleDbType.Date, 20, "sec_etd_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["SEC_ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SHIPPER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "shipper_cust_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["SHIPPER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CONSIGNEE_CUST_MST_FK_IN", OracleDbType.Int32, 10, "consignee_cust_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["CONSIGNEE_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("NOTIFY1_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify1_cust_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["NOTIFY1_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("NOTIFY2_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify2_cust_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["NOTIFY2_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CB_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cb_agent_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["CB_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("POL_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "POL_AGENT_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["POL_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("DP_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "dp_agent_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["DP_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CL_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cl_agent_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["CL_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("VERSION_NO_IN", OracleDbType.Int32, 4, "version_no").Direction = ParameterDirection.Input;
                updCommand.Parameters["VERSION_NO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CARGO_MOVE_FK_IN", OracleDbType.Int32, 10, "cargo_move_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["CARGO_MOVE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("PYMT_TYPE_IN", OracleDbType.Int32, 1, "pymt_type").Direction = ParameterDirection.Input;
                updCommand.Parameters["PYMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SHIPPING_TERMS_MST_FK_IN", OracleDbType.Int32, 10, "shipping_terms_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["SHIPPING_TERMS_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("INSURANCE_AMT_IN", OracleDbType.Int32, 10, "insurance_amt").Direction = ParameterDirection.Input;
                updCommand.Parameters["INSURANCE_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("INSURANCE_CURRENCY_IN", OracleDbType.Int32, 10, "insurance_currency").Direction = ParameterDirection.Input;
                updCommand.Parameters["INSURANCE_CURRENCY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("COMMODITY_GROUP_FK_IN", OracleDbType.Int32, 10, "commodity_group_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["COMMODITY_GROUP_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("TRANSPORTER_DEPOT_FK_IN", OracleDbType.Int32, 10, "depot_pk").Direction = ParameterDirection.Input;
                updCommand.Parameters["TRANSPORTER_DEPOT_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("TRANSPORTER_CARRIER_FK_IN", OracleDbType.Int32, 10, "carrier_pk").Direction = ParameterDirection.Input;
                updCommand.Parameters["TRANSPORTER_CARRIER_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("COUNTRY_ORIGIN_FK_IN", OracleDbType.Int32, 10, "country_mst_pk").Direction = ParameterDirection.Input;
                updCommand.Parameters["COUNTRY_ORIGIN_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("DA_NUMBER_IN", OracleDbType.Int32, 10, "da_number").Direction = ParameterDirection.Input;
                updCommand.Parameters["DA_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;

                updCommand.Parameters.Add("CONFIG_PK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;

                updCommand.Parameters.Add("DEL_ADDRESS_IN", OracleDbType.Varchar2, 200, "del_address").Direction = ParameterDirection.Input;
                updCommand.Parameters["DEL_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                //<<<<<<<<<<<-----------------Jagadeesh on 15-Dec-06-----------------
                //updCommand.Parameters.Add("COL_PLACE_MST_FK_IN", OracleDbType.Int32, 10, hdColPlace).Direction = ParameterDirection.Input
                //updCommand.Parameters["COL_PLACE_MST_FK_IN"].SourceVersion = DataRowVersion.Current

                //updCommand.Parameters.Add("DEL_PLACE_MST_FK_IN", OracleDbType.Int32, 10, hdDelPlace).Direction = ParameterDirection.Input
                //updCommand.Parameters["DEL_PLACE_MST_FK_IN"].SourceVersion = DataRowVersion.Current
                //<<<<<<<<<<<--------------------------------------------------------
                //Added By Rijesh To Incorporate Cargo Details  on March 30  2006
                //****************************************************************
                updCommand.Parameters.Add("GOODS_DESCRIPTION_IN", OracleDbType.Varchar2, 4000, "GOODS_DESCRIPTION").Direction = ParameterDirection.Input;
                updCommand.Parameters["GOODS_DESCRIPTION_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("MARKS_NUMBERS_IN", OracleDbType.Varchar2, 2000, "MARKS_NUMBERS").Direction = ParameterDirection.Input;
                updCommand.Parameters["MARKS_NUMBERS_IN"].SourceVersion = DataRowVersion.Current;
                //*****************************************************************

                updCommand.Parameters.Add("MASTER_JC_FK_IN", OracleDbType.Int32, 10, "MASTER_JC_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["MASTER_JC_FK_IN"].SourceVersion = DataRowVersion.Current;

                //Added By Sivachandran on 12-08-2009

                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Date"].ToString()))
                {
                    updCommand.Parameters.Add("SURVEY_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("SURVEY_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["Survey_Date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["SURVEY_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["SHIPPING_INST_DT"].ToString()))
                {
                    updCommand.Parameters.Add("SI_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("SI_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["SHIPPING_INST_DT"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["SI_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["RFS_Date"].ToString()))
                {
                    updCommand.Parameters.Add("RFS_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("RFS_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["RFS_Date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["RFS_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["CRQ_Date"].ToString()))
                {
                    updCommand.Parameters.Add("CRQ_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("CRQ_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["CRQ_Date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["CRQ_DATE_IN"].SourceVersion = DataRowVersion.Current;
                if (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["STF_Date"].ToString()))
                {
                    updCommand.Parameters.Add("STF_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    updCommand.Parameters.Add("STF_DATE_IN", Convert.ToDateTime(M_DataSet.Tables[0].Rows[0]["STF_Date"])).Direction = ParameterDirection.Input;
                }
                updCommand.Parameters["STF_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SURVEY_REF_NR_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Ref_Nr"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_Ref_Nr"])).Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("SURVEY_REMARKS_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_Remarks"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_Remarks"])).Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("SURVEYOR_FK_IN", (string.IsNullOrEmpty(M_DataSet.Tables[0].Rows[0]["Survey_PK"].ToString()) ? DBNull.Value : M_DataSet.Tables[0].Rows[0]["Survey_PK"])).Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("SI_IN", OracleDbType.Int32, 1, "SHIPPING_INST_FLAG").Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("RFS_IN", OracleDbType.Int32, 1, "RFS").Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("CRQ_IN", OracleDbType.Int32, 1, "CRQ").Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("STF_IN", OracleDbType.Int32, 1, "STF").Direction = ParameterDirection.Input;
                updCommand.Parameters.Add("SURVEY_COMPLETED_IN", OracleDbType.Int32, 1, "SURVEY_COMPLETED").Direction = ParameterDirection.Input;

                //end

                //Code Added By Anil on 17 Aug 09
                updCommand.Parameters.Add("SB_DATE_IN", OracleDbType.Date, 20, "sb_date").Direction = ParameterDirection.Input;
                updCommand.Parameters["SB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SB_NO_IN", OracleDbType.Varchar2, 20, "sb_number").Direction = ParameterDirection.Input;
                updCommand.Parameters["SB_NO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CHA_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cha_agent_mst_fk").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHA_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("STUFF_LOC_IN", OracleDbType.Varchar2, 40, "stuff_loc").Direction = ParameterDirection.Input;
                updCommand.Parameters["STUFF_LOC_IN"].SourceVersion = DataRowVersion.Current;
                //End By Anil
                //Added by Faheem
                //updCommand.Parameters.Add("ADDVATOS_FLAG_IN", OracleDbType.Int32, 1, AddVATOSFLAG).Direction = ParameterDirection.Input
                //updCommand.Parameters["ADDVATOS_FLAG_IN"].SourceVersion = DataRowVersion.Current
                updCommand.Parameters.Add("ADDVATOS_FLAG_IN", AddVATOSFLAG).Direction = ParameterDirection.Input;
                //End

                updCommand.Parameters.Add("LC_SHIPMENT_IN", OracleDbType.Int32, 1, "LC_SHIPMENT").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_SHIPMENT_IN"].SourceVersion = DataRowVersion.Current;

                //nomination parameters
                updCommand.Parameters.Add("CHK_NOMINATED_IN", OracleDbType.Int32, 1, "CHK_NOMINATED").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_NOMINATED_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CHK_CSR_IN", OracleDbType.Int32, 1, "CHK_CSR").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_CSR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("EXECUTIVE_MST_FK_IN", OracleDbType.Int32, 10, "SALES_EXEC_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["EXECUTIVE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                //------------------------------------------------------------------------------------

                updCommand.Parameters.Add("CC_REQ_IN", OracleDbType.Int32, 1, "cc_req").Direction = ParameterDirection.Input;
                updCommand.Parameters["CC_REQ_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CC_IE_IN", OracleDbType.Int32, 1, "cc_ie").Direction = ParameterDirection.Input;
                updCommand.Parameters["CC_IE_IN"].SourceVersion = DataRowVersion.Current;

                //Raghavendra

                updCommand.Parameters.Add("PRC_FK_IN", OracleDbType.Int32, 1, "PRC_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["PRC_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("ONC_FK_IN", OracleDbType.Int32, 1, "ONC_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["ONC_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("PRC_MODE_FK_IN", OracleDbType.Int32, 1, "PRC_MODE_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["PRC_MODE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("ONC_MODE_FK_IN", OracleDbType.Int32, 1, "ONC_MODE_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["ONC_MODE_FK_IN"].SourceVersion = DataRowVersion.Current;

                //Manjunath for Total, Received and Balance Quantity and Weight
                updCommand.Parameters.Add("WIN_TOTAL_QTY_IN", OracleDbType.Int32, 10, "WIN_TOTAL_QTY").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_TOTAL_QTY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_REC_QTY_IN", OracleDbType.Int32, 10, "WIN_REC_QTY").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_REC_QTY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_BALANCE_QTY_IN", OracleDbType.Int32, 10, "WIN_BALANCE_QTY").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_BALANCE_QTY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_TOTAL_WT_IN", OracleDbType.Int32, 10, "WIN_TOTAL_WT").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_TOTAL_WT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_REC_WT_IN", OracleDbType.Int32, 10, "WIN_REC_WT").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_REC_WT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_BALANCE_WT_IN", OracleDbType.Int32, 10, "WIN_BALANCE_WT").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_BALANCE_WT_IN"].SourceVersion = DataRowVersion.Current;
                //End

                /// Added By Rajesh
                updCommand.Parameters.Add("PROCESS_TYPE_IN", OracleDbType.Int32, 1, "PROCESS_TYPE").Direction = ParameterDirection.Input;
                updCommand.Parameters["PROCESS_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BUSINESS_TYPE_IN", OracleDbType.Int32, 1, "BUSINESS_TYPE").Direction = ParameterDirection.Input;
                updCommand.Parameters["BUSINESS_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CARGO_TYPE_IN", OracleDbType.Int32, 1, "CARGO_TYPE").Direction = ParameterDirection.Input;
                updCommand.Parameters["CARGO_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CUST_CUSTOMER_MST_FK_IN", OracleDbType.Int32, 10, "CUST_CUSTOMER_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["CUST_CUSTOMER_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("PORT_MST_POL_FK_IN", OracleDbType.Int32, 10, "PORT_MST_POL_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["PORT_MST_POL_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("PORT_MST_POD_FK_IN", OracleDbType.Int32, 10, "PORT_MST_POD_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["PORT_MST_POD_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CARRIER_MST_FK_IN", OracleDbType.Int32, 10, "CARRIER_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["CARRIER_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WEIGHT_MASS_IN", OracleDbType.Varchar2, 500, "WEIGHT_MASS").Direction = ParameterDirection.Input;
                updCommand.Parameters["WEIGHT_MASS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("HBL_HAWB_REF_NO_IN", OracleDbType.Varchar2, 20, "HBL_HAWB_REF_NO").Direction = ParameterDirection.Input;
                updCommand.Parameters["HBL_HAWB_REF_NO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("HBL_HAWB_DATE_IN", OracleDbType.Date, 20, "HBL_HAWB_DATE").Direction = ParameterDirection.Input;
                updCommand.Parameters["HBL_HAWB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("MBL_MAWB_REF_NO_IN", OracleDbType.Varchar2, 20, "MBL_MAWB_REF_NO").Direction = ParameterDirection.Input;
                updCommand.Parameters["MBL_MAWB_REF_NO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("MBL_MAWB_DATE_IN", OracleDbType.Date, 20, "MBL_MAWB_DATE").Direction = ParameterDirection.Input;
                updCommand.Parameters["MBL_MAWB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CLEARANCE_ADDRESS_IN", OracleDbType.Varchar2, 200, "CLEARANCE_ADDRESS").Direction = ParameterDirection.Input;
                updCommand.Parameters["CLEARANCE_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("HBL_HAWB_SURR_IN", OracleDbType.Int32, 1, "HBL_HAWB_SURRENDERED").Direction = ParameterDirection.Input;
                updCommand.Parameters["HBL_HAWB_SURR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("MBL_MAWB_SURR_IN", OracleDbType.Int32, 1, "MBL_MAWB_SURRENDERED").Direction = ParameterDirection.Input;
                updCommand.Parameters["MBL_MAWB_SURR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("HBL_HAWB_SURR_DT_IN", OracleDbType.Date, 20, "HBL_HAWB_SURRDT").Direction = ParameterDirection.Input;
                updCommand.Parameters["HBL_HAWB_SURR_DT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("MBL_MAWB_SURR_DT_IN", OracleDbType.Date, 20, "MBL_MAWB_SURRDT").Direction = ParameterDirection.Input;
                updCommand.Parameters["MBL_MAWB_SURR_DT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BASE_CURRENCY_FK_IN", OracleDbType.Int32, 10, "BASE_CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["BASE_CURRENCY_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LC_NUMBER_IN", OracleDbType.Varchar2, 100, "LC_NUMBER").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LC_DATE_IN", OracleDbType.Date, 20, "LC_DATE").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LC_EXPIRES_ON_IN", OracleDbType.Date, 20, "Lc_Expires_On").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_EXPIRES_ON_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LC_CONS_BANK_IN", OracleDbType.Varchar2, 200, "Lc_Cons_Bank").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_CONS_BANK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LC_REMARKS_IN", OracleDbType.Varchar2, 200, "Lc_Remarks").Direction = ParameterDirection.Input;
                updCommand.Parameters["LC_REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BRO_RECEIVED_IN", OracleDbType.Int32, 1, "Bro_Received").Direction = ParameterDirection.Input;
                updCommand.Parameters["BRO_RECEIVED_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BRO_NUMBER_IN", OracleDbType.Varchar2, 100, "Bro_Number").Direction = ParameterDirection.Input;
                updCommand.Parameters["BRO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BRO_DATE_IN", OracleDbType.Date, 20, "Bro_Date").Direction = ParameterDirection.Input;
                updCommand.Parameters["BRO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BRO_ISSUEDBY_IN", OracleDbType.Varchar2, 200, "Bro_Issuedby").Direction = ParameterDirection.Input;
                updCommand.Parameters["BRO_ISSUEDBY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("BRO_REMARKS_IN", OracleDbType.Varchar2, 200, "Bro_Remarks").Direction = ParameterDirection.Input;
                updCommand.Parameters["BRO_REMARKS_IN"].SourceVersion = DataRowVersion.Current;
                //
                updCommand.Parameters.Add("CHK_CAN_IN", OracleDbType.Int32, 1, "chk_can").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_CAN_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CHK_DO_IN", OracleDbType.Int32, 1, "chk_do").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_DO_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CHK_PAY_IN", OracleDbType.Int32, 1, "chk_pay").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_PAY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("CHK_REC_IN", OracleDbType.Int32, 1, "chk_rec").Direction = ParameterDirection.Input;
                updCommand.Parameters["CHK_REC_IN"].SourceVersion = DataRowVersion.Current;

                if (PODetails.Length > 0)
                {
                    string[] PO_Details = null;
                    PO_Details = PODetails.Split('~');
                    
                    updCommand.Parameters.Add("PO_NUMBER_IN", (string.IsNullOrEmpty(PO_Details[0].Trim()) ? "" : PO_Details[0])).Direction = ParameterDirection.Input;
                    updCommand.Parameters["PO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("PO_DATE_IN", (string.IsNullOrEmpty(PO_Details[1].Trim()) ? "" : PO_Details[1])).Direction = ParameterDirection.Input;
                    updCommand.Parameters["PO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("ROUTING_INST_IN", (string.IsNullOrEmpty(PO_Details[2].Trim()) ? "" : PO_Details[2])).Direction = ParameterDirection.Input;
                    updCommand.Parameters["ROUTING_INST_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("SENT_ON_IN", (string.IsNullOrEmpty(PO_Details[3].Trim()) ? "": PO_Details[3])).Direction = ParameterDirection.Input;
                    updCommand.Parameters["SENT_ON_IN"].SourceVersion = DataRowVersion.Current;

                }
                else
                {
                    updCommand.Parameters.Add("PO_NUMBER_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    updCommand.Parameters["PO_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("PO_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    updCommand.Parameters["PO_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("ROUTING_INST_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    updCommand.Parameters["ROUTING_INST_IN"].SourceVersion = DataRowVersion.Current;

                    updCommand.Parameters.Add("SENT_ON_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    updCommand.Parameters["SENT_ON_IN"].SourceVersion = DataRowVersion.Current;
                }

                updCommand.Parameters.Add("LINE_BKG_NR_IN", OracleDbType.Varchar2, 50, "LINE_BKG_NR").Direction = ParameterDirection.Input;
                updCommand.Parameters["LINE_BKG_NR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LINE_BKG_DT_IN", OracleDbType.Date, 20, "LINE_BKG_DT").Direction = ParameterDirection.Input;
                updCommand.Parameters["LINE_BKG_DT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("LINER_TERMS_FK_IN", OracleDbType.Int32, 10, "LINER_TERMS_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["LINER_TERMS_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_UNIQ_REF_ID_IN", OracleDbType.Varchar2, 20, "WIN_UNIQ_REF_ID").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_UNIQ_REF_ID_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_SEND_USER_NAME_IN", OracleDbType.Varchar2, 50, "WIN_SEND_USER_NAME").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_SEND_USER_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_SEND_SECRET_KEY_IN", OracleDbType.Varchar2, 12, "WIN_SEND_SECRET_KEY").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_SEND_SECRET_KEY_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_MEM_JOBREF_NR_IN", OracleDbType.Varchar2, 50, "WIN_MEM_JOBREF_NR").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_MEM_JOBREF_NR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_QUOT_REF_NR_IN", OracleDbType.Varchar2, 20, "WIN_QUOT_REF_NR").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_QUOT_REF_NR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_INCO_PLACE_IN", OracleDbType.Varchar2, 50, "WIN_INCO_PLACE").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_INCO_PLACE_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("POO_FK_IN", OracleDbType.Int32, 10, "POO_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["POO_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_PICK_ONC_MOVE_FK_IN", OracleDbType.Int32, 10, "WIN_PICK_ONC_MOVE_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_PICK_ONC_MOVE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_CONSOL_REF_NR_IN", OracleDbType.Varchar2, 20, "WIN_CONSOL_REF_NR").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_CONSOL_REF_NR_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_CUTTOFF_DT_IN", OracleDbType.Date, 20, "WIN_CUTTOFF_DT").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_CUTTOFF_DT_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("WIN_CUTTOFF_TIME_IN", OracleDbType.Varchar2, 20, "WIN_CUTTOFF_TIME").Direction = ParameterDirection.Input;
                updCommand.Parameters["WIN_CUTTOFF_TIME_IN"].SourceVersion = DataRowVersion.Current;

                /// End By Rajesh
                updCommand.Parameters.Add("CONTAINER_OWNER_TYPE_FK_IN", OracleDbType.Int32, 1, "CONTAINER_OWNER_TYPE_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["CONTAINER_OWNER_TYPE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("TARIFF_AGENT_MST_FK_IN", OracleDbType.Int32, 1, "TARIFF_AGENT_MST_FK").Direction = ParameterDirection.Input;
                updCommand.Parameters["TARIFF_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("COLLECT_AGENT_FLAG_IN", OracleDbType.Int32, 1, "COLLECT_AGENT_FLAG").Direction = ParameterDirection.Input;
                updCommand.Parameters["COLLECT_AGENT_FLAG_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("STATUS_IN", OracleDbType.Int32, 1, "STATUS").Direction = ParameterDirection.Input;
                updCommand.Parameters["STATUS_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SAC_N1_IN", OracleDbType.Int32, 1, "SAC_N1").Direction = ParameterDirection.Input;
                updCommand.Parameters["SAC_N1_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SAC_N2_IN", OracleDbType.Int32, 1, "SAC_N2").Direction = ParameterDirection.Input;
                updCommand.Parameters["SAC_N2_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SAC_N1_NAME_IN", OracleDbType.Varchar2, 50, "SAC_N1_NAME").Direction = ParameterDirection.Input;
                updCommand.Parameters["SAC_N1_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updCommand.Parameters.Add("SAC_N2_NAME_IN", OracleDbType.Varchar2, 50, "SAC_N2_NAME").Direction = ParameterDirection.Input;
                updCommand.Parameters["SAC_N2_NAME_IN"].SourceVersion = DataRowVersion.Current;



                updCommand.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                //End
                

                var _with37 = objWK.MyDataAdapter;

                _with37.InsertCommand = insCommand;
                _with37.InsertCommand.Transaction = TRAN;

                _with37.UpdateCommand = updCommand;
                _with37.UpdateCommand.Transaction = TRAN;

                RecAfct = _with37.Update(M_DataSet);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                else
                {
                    if (JobCardPK <= 0)
                    {
                        JobCardPK = Convert.ToInt32(insCommand.Parameters["RETURN_VALUE"].Value);
                    }
                }


                //Manjunath for E-comm
                if (CheckESI == 1)
                {
                    //dsESI = M_DataSet.Copy()
                    var _with38 = updESICommand;
                    _with38.Connection = objWK.MyConnection;
                    _with38.CommandType = CommandType.StoredProcedure;
                    _with38.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_ESI_TBL_UPD";
                    var _with39 = _with38.Parameters;

                    updESICommand.Parameters.Add("JOB_CARD_TRN_PK_IN", OracleDbType.Int32, 10, "JOB_CARD_TRN_PK").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["JOB_CARD_TRN_PK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("BOOKING_MST_FK_IN", OracleDbType.Int32, 10, "BOOKING_MST_FK").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["BOOKING_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("UCR_NO_IN", OracleDbType.Varchar2, 40, "ucr_no").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["UCR_NO_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("JOBCARD_REF_NO_IN", jobCardRefNumber).Direction = ParameterDirection.Input;

                    updESICommand.Parameters.Add("JOBCARD_DATE_IN", OracleDbType.Date, 20, "jobcard_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["JOBCARD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("JOB_CARD_STATUS_IN", OracleDbType.Int32, 1, "job_card_status").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["JOB_CARD_STATUS_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("JOB_CARD_CLOSED_ON_IN", OracleDbType.Date, 20, "job_card_closed_on").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["JOB_CARD_CLOSED_ON_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("REMARKS_IN", OracleDbType.Varchar2, 100, "remarks").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["REMARKS_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "vessel_name").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("VOYAGE_IN", OracleDbType.Varchar2, 10, "voyage").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("VOYAGE_FK_IN", getDefault(strVoyagepk, DBNull.Value)).Direction = ParameterDirection.Input;
                    updESICommand.Parameters["VOYAGE_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("ETA_DATE_IN", OracleDbType.Date, 20, "eta_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("ETD_DATE_IN", OracleDbType.Date, 20, "etd_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("ARRIVAL_DATE_IN", OracleDbType.Date, 20, "arrival_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["ARRIVAL_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("DEPARTURE_DATE_IN", OracleDbType.Date, 20, "departure_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["DEPARTURE_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SEC_VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "sec_vessel_name").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SEC_VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SEC_VOYAGE_IN", OracleDbType.Varchar2, 10, "sec_voyage").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SEC_VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SEC_ETA_DATE_IN", OracleDbType.Date, 20, "sec_eta_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SEC_ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SEC_ETD_DATE_IN", OracleDbType.Date, 20, "sec_etd_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SEC_ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SHIPPER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "shipper_cust_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SHIPPER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("CONSIGNEE_CUST_MST_FK_IN", OracleDbType.Int32, 10, "consignee_cust_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["CONSIGNEE_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("NOTIFY1_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify1_cust_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["NOTIFY1_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("NOTIFY2_CUST_MST_FK_IN", OracleDbType.Int32, 10, "notify2_cust_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["NOTIFY2_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("CB_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cb_agent_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["CB_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("DP_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "dp_agent_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["DP_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("CL_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cl_agent_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["CL_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("VERSION_NO_IN", OracleDbType.Int32, 4, "version_no").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["VERSION_NO_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("CARGO_MOVE_FK_IN", OracleDbType.Int32, 10, "cargo_move_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["CARGO_MOVE_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("PYMT_TYPE_IN", OracleDbType.Int32, 1, "pymt_type").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["PYMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SHIPPING_TERMS_MST_FK_IN", OracleDbType.Int32, 10, "shipping_terms_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SHIPPING_TERMS_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("INSURANCE_AMT_IN", OracleDbType.Int32, 10, "insurance_amt").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["INSURANCE_AMT_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("INSURANCE_CURRENCY_IN", OracleDbType.Int32, 10, "insurance_currency").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["INSURANCE_CURRENCY_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("COMMODITY_GROUP_FK_IN", OracleDbType.Int32, 10, "commodity_group_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["COMMODITY_GROUP_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("TRANSPORTER_DEPOT_FK_IN", OracleDbType.Int32, 10, "depot_pk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["TRANSPORTER_DEPOT_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("TRANSPORTER_CARRIER_FK_IN", OracleDbType.Int32, 10, "carrier_pk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["TRANSPORTER_CARRIER_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("COUNTRY_ORIGIN_FK_IN", OracleDbType.Int32, 10, "country_mst_pk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["COUNTRY_ORIGIN_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("DA_NUMBER_IN", OracleDbType.Int32, 10, "da_number").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["DA_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;

                    updESICommand.Parameters.Add("CONFIG_PK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;

                    updESICommand.Parameters.Add("DEL_ADDRESS_IN", OracleDbType.Varchar2, 200, "del_address").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["DEL_ADDRESS_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("GOODS_DESCRIPTION_IN", OracleDbType.Varchar2, 4000, "GOODS_DESCRIPTION").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["GOODS_DESCRIPTION_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("MARKS_NUMBERS_IN", OracleDbType.Varchar2, 2000, "MARKS_NUMBERS").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["MARKS_NUMBERS_IN"].SourceVersion = DataRowVersion.Current;
                    //*****************************************************************

                    updESICommand.Parameters.Add("MASTER_JC_FK_IN", OracleDbType.Int32, 10, "MASTER_JC_FK").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["MASTER_JC_FK_IN"].SourceVersion = DataRowVersion.Current;

                    if (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["Survey_Date"].ToString()))
                    {
                        updESICommand.Parameters.Add("SURVEY_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        updESICommand.Parameters.Add("SURVEY_DATE_IN", Convert.ToDateTime(dsESI.Tables[0].Rows[0]["Survey_Date"])).Direction = ParameterDirection.Input;
                    }
                    updESICommand.Parameters["SURVEY_DATE_IN"].SourceVersion = DataRowVersion.Current;
                    if (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["RFS_Date"].ToString()))
                    {
                        updESICommand.Parameters.Add("RFS_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        updESICommand.Parameters.Add("RFS_DATE_IN", Convert.ToDateTime(dsESI.Tables[0].Rows[0]["RFS_Date"])).Direction = ParameterDirection.Input;
                    }
                    updESICommand.Parameters["RFS_DATE_IN"].SourceVersion = DataRowVersion.Current;
                    if (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["CRQ_Date"].ToString()))
                    {
                        updESICommand.Parameters.Add("CRQ_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        updESICommand.Parameters.Add("CRQ_DATE_IN", Convert.ToDateTime(dsESI.Tables[0].Rows[0]["CRQ_Date"])).Direction = ParameterDirection.Input;
                    }
                    updESICommand.Parameters["CRQ_DATE_IN"].SourceVersion = DataRowVersion.Current;
                    if (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["STF_Date"].ToString()))
                    {
                        updESICommand.Parameters.Add("STF_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        updESICommand.Parameters.Add("STF_DATE_IN", Convert.ToDateTime(dsESI.Tables[0].Rows[0]["STF_Date"])).Direction = ParameterDirection.Input;
                    }
                    updESICommand.Parameters["STF_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SURVEY_REF_NR_IN", (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["Survey_Ref_Nr"].ToString()) ? DBNull.Value : dsESI.Tables[0].Rows[0]["Survey_Ref_Nr"])).Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("SURVEY_REMARKS_IN", (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["Survey_Remarks"].ToString()) ? DBNull.Value : dsESI.Tables[0].Rows[0]["Survey_Remarks"])).Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("SURVEYOR_FK_IN", (string.IsNullOrEmpty(dsESI.Tables[0].Rows[0]["Survey_PK"].ToString()) ? DBNull.Value : dsESI.Tables[0].Rows[0]["Survey_PK"])).Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("RFS_IN", OracleDbType.Int32, 1, "RFS").Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("CRQ_IN", OracleDbType.Int32, 1, "CRQ").Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("STF_IN", OracleDbType.Int32, 1, "STF").Direction = ParameterDirection.Input;
                    updESICommand.Parameters.Add("SURVEY_COMPLETED_IN", OracleDbType.Int32, 1, "SURVEY_COMPLETED").Direction = ParameterDirection.Input;

                    //end

                    //Code Added By Anil on 17 Aug 09
                    updESICommand.Parameters.Add("SB_DATE_IN", OracleDbType.Date, 20, "sb_date").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SB_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("SB_NO_IN", OracleDbType.Varchar2, 20, "sb_number").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["SB_NO_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("CHA_AGENT_MST_FK_IN", OracleDbType.Int32, 10, "cha_agent_mst_fk").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["CHA_AGENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("STUFF_LOC_IN", OracleDbType.Varchar2, 40, "stuff_loc").Direction = ParameterDirection.Input;
                    updESICommand.Parameters["STUFF_LOC_IN"].SourceVersion = DataRowVersion.Current;

                    updESICommand.Parameters.Add("ADDVATOS_FLAG_IN", AddVATOSFLAG).Direction = ParameterDirection.Input;

                    updESICommand.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    updESICommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                    
                    var _with40 = objWK.MyDataAdapter;

                    _with40.UpdateCommand = updESICommand;
                    _with40.UpdateCommand.Transaction = TRAN;

                    RecAfct = _with40.Update(dsESI);

                    if (arrMessage.Count == 0)
                    {
                        //goto 21;
                    }

                    if (string.Compare(Convert.ToString(arrMessage[0]).ToLower(), "saved") > 0)
                    {
                        arrMessage.Clear();
                    }
                    //21:

					if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                    // End
                }

                var _with41 = insContainerDetails;
                _with41.Connection = objWK.MyConnection;
                _with41.CommandType = CommandType.StoredProcedure;
                _with41.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_CONT_INS";
                var _with42 = _with41.Parameters;

                insContainerDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insContainerDetails.Parameters.Add("CONTAINER_NUMBER_IN", OracleDbType.Varchar2, 16, "container_number").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["CONTAINER_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("SEAL_NUMBER_IN", OracleDbType.Varchar2, 20, "seal_number").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["SEAL_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("VOLUME_IN_CBM_IN", OracleDbType.Int32, 10, "volume_in_cbm").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["VOLUME_IN_CBM_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("GROSS_WEIGHT_IN", OracleDbType.Int32, 10, "gross_weight").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["GROSS_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("NET_WEIGHT_IN", OracleDbType.Int32, 10, "net_weight").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["NET_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("CHARGEABLE_WEIGHT_IN", OracleDbType.Int32, 10, "chargeable_weight").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["CHARGEABLE_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("PACK_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "pack_type_mst_fk").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["PACK_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("PACK_COUNT_IN", OracleDbType.Int32, 6, "pack_count").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["PACK_COUNT_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("COMMODITY_MST_FK_IN", OracleDbType.Int32, 30, "commodity_mst_fk").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["COMMODITY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                //Added By Prakash chandra on 5/1/2009 for pts: multiple commodity selection 
                insContainerDetails.Parameters.Add("COMMODITY_MST_FKS_IN", OracleDbType.Varchar2, 500, "COMMODITY_MST_FKS").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["COMMODITY_MST_FKS_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("PICKUP_DATE_IN", OracleDbType.Date, 20, "PICKUP_DATE").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["PICKUP_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("GATEIN_DATE_IN", OracleDbType.Date, 20, "GATEIN_DATE").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["GATEIN_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("LOAD_DATE_IN", OracleDbType.Date, 20, "load_date").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["LOAD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("GATEOUT_DATE_IN", OracleDbType.Date, 20, "GATEOUT_DATE").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["GATEOUT_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("CONTAINER_PK_IN", OracleDbType.Int32, 20, "CONTAINER_PK").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["CONTAINER_PK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("PALETTE_SIZE_IN", OracleDbType.Varchar2, 20, "DIMENSION_ID").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["PALETTE_SIZE_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("ULD_NUMBER_IN", OracleDbType.Varchar2, 20, "ULD_NUMBER").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["ULD_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("AIRFREIGHT_SLABS_TBL_PK_IN", OracleDbType.Varchar2, 20, "AIRFREIGHT_SLABS_TBL_PK").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["AIRFREIGHT_SLABS_TBL_PK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("CONTAINER_OWNER_TYPE_FK_IN", OracleDbType.Int32, 10, "CONTAINER_OWNER_TYPE_FK").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["CONTAINER_OWNER_TYPE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("BASIS_FK_IN", OracleDbType.Int32, 10, "BASIS_FK").Direction = ParameterDirection.Input;
                insContainerDetails.Parameters["BASIS_FK_IN"].SourceVersion = DataRowVersion.Current;

                insContainerDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_CONT_PK").Direction = ParameterDirection.Output;
                insContainerDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with43 = updContainerDetails;
                _with43.Connection = objWK.MyConnection;
                _with43.CommandType = CommandType.StoredProcedure;
                _with43.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_CONT_UPD";
                var _with44 = _with43.Parameters;

                updContainerDetails.Parameters.Add("JOB_TRN_CONT_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_CONT_PK").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["JOB_TRN_CONT_PK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updContainerDetails.Parameters.Add("CONTAINER_NUMBER_IN", OracleDbType.Varchar2, 16, "container_number").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["CONTAINER_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("SEAL_NUMBER_IN", OracleDbType.Varchar2, 20, "seal_number").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["SEAL_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("VOLUME_IN_CBM_IN", OracleDbType.Int32, 10, "volume_in_cbm").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["VOLUME_IN_CBM_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("GROSS_WEIGHT_IN", OracleDbType.Int32, 10, "gross_weight").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["GROSS_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("NET_WEIGHT_IN", OracleDbType.Int32, 10, "net_weight").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["NET_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("CHARGEABLE_WEIGHT_IN", OracleDbType.Int32, 10, "chargeable_weight").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["CHARGEABLE_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("PACK_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "pack_type_mst_fk").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["PACK_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("PACK_COUNT_IN", OracleDbType.Int32, 6, "pack_count").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["PACK_COUNT_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("COMMODITY_MST_FK_IN", OracleDbType.Int32, 30, "commodity_mst_fk").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["COMMODITY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                //Added By prakash chandra on 6/1/2009 for pts:Docs - Job Card – Provision to capture Multiple Commodities 
                updContainerDetails.Parameters.Add("COMMODITY_MST_FKS_IN", OracleDbType.Varchar2, 500, "COMMODITY_MST_FKS").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["COMMODITY_MST_FKS_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("PICKUP_DATE_IN", OracleDbType.Date, 20, "PICKUP_DATE").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["PICKUP_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("GATEIN_DATE_IN", OracleDbType.Date, 20, "GATEIN_DATE").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["GATEIN_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("LOAD_DATE_IN", OracleDbType.Date, 20, "load_date").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["LOAD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("GATEOUT_DATE_IN", OracleDbType.Date, 20, "GATEOUT_DATE").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["GATEOUT_DATE_IN"].SourceVersion = DataRowVersion.Current;
                //Snigdharani - 21/08/2009
                updContainerDetails.Parameters.Add("CONTAINER_PK_IN", OracleDbType.Int32, 20, "CONTAINER_PK").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["CONTAINER_PK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("PALETTE_SIZE_IN", OracleDbType.Varchar2, 20, "DIMENSION_ID").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["PALETTE_SIZE_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("ULD_NUMBER_IN", OracleDbType.Varchar2, 20, "ULD_NUMBER").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["ULD_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("AIRFREIGHT_SLABS_TBL_PK_IN", OracleDbType.Varchar2, 20, "AIRFREIGHT_SLABS_TBL_PK").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["AIRFREIGHT_SLABS_TBL_PK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("CONTAINER_OWNER_TYPE_FK_IN", OracleDbType.Int32, 10, "CONTAINER_OWNER_TYPE_FK").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["CONTAINER_OWNER_TYPE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("BASIS_FK_IN", OracleDbType.Int32, 10, "BASIS_FK").Direction = ParameterDirection.Input;
                updContainerDetails.Parameters["BASIS_FK_IN"].SourceVersion = DataRowVersion.Current;

                updContainerDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updContainerDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with45 = objWK.MyDataAdapter;

                _with45.InsertCommand = insContainerDetails;
                _with45.InsertCommand.Transaction = TRAN;

                _with45.UpdateCommand = updContainerDetails;
                _with45.UpdateCommand.Transaction = TRAN;
                RecAfct = _with45.Update(dsContainerData.Tables[0]);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                objWK.MyCommand.Transaction = TRAN;
                // Amit 22-Dec-06 TaskID "DOC-DEC-001"

                int rowCnt = 0;
                if (dsContainerData.Tables[0].Rows.Count > 0)
                {
                    try
                    {
                        for (rowCnt = 0; rowCnt <= dsContainerData.Tables[0].Rows.Count - 1; rowCnt++)
                        {
                            string CntType = null;
                            string strSql = null;
                            string drCntKind = null;
                            if (BizType == 2 & CargoType != 4)
                            {
                                CntType = Convert.ToString(((System.Data.DataRow)dsContainerData.Tables[0].Rows[rowCnt]).ItemArray[3]);
                                strSql = "SELECT C.CONTAINER_KIND FROM CONTAINER_TYPE_MST_TBL C WHERE UPPER(C.CONTAINER_TYPE_MST_ID)= '" + CntType.ToUpper() + "'";

                                var _with46 = objWK.MyCommand;
                                _with46.Parameters.Clear();
                                _with46.CommandType = CommandType.Text;
                                _with46.CommandText = strSql;
                                drCntKind = Convert.ToString(_with46.ExecuteScalar());
                                objWK.MyCommand.Parameters.Clear();
                                if (CommodityGroup == HAZARDOUS)
                                {
                                    if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                    {
                                        arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName,
                                            Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt32(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                    else
                                    {
                                        arrMessage = SaveTransactionHZSpcl(objWK.MyCommand, objWK.MyUserName,
                                            Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                }
                                else if (CommodityGroup == REEFER)
                                {
                                    if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                    {
                                        arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName,
                                            Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                    else
                                    {
                                        arrMessage = SaveTransactionReefer(objWK.MyCommand, objWK.MyUserName,
                                           Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                }
                                else if (CommodityGroup == ODC)
                                {
                                    if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                    {
                                        arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName,
                                            Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                }
                                else
                                {
                                    if (drCntKind == "3" | drCntKind == "4" | drCntKind == "5")
                                    {
                                        arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName,
                                            Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                    }
                                }
                            }
                            else if (BizType == 2 & CargoType == 4)
                            {
                                if (CommodityGroup == HAZARDOUS)
                                {
                                    arrMessage = SaveTransactionHZSpcl(objWK.MyCommand, objWK.MyUserName,
                                         Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                }
                                else if (CommodityGroup == REEFER)
                                {
                                    arrMessage = SaveTransactionReefer(objWK.MyCommand, objWK.MyUserName, Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                }
                                else if (CommodityGroup == ODC)
                                {
                                    arrMessage = SaveTransactionODC(objWK.MyCommand, objWK.MyUserName, Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                }
                            }
                            else if (BizType == 1)
                            {
                                if (CommodityGroup == HAZARDOUS)
                                {
                                    arrMessage = SaveTransactionHZSpcl(objWK.MyCommand, objWK.MyUserName, Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                }
                                else if (CommodityGroup == REEFER)
                                {
                                    arrMessage = SaveTransactionReefer(objWK.MyCommand, objWK.MyUserName, Convert.ToString(getDefault(dsContainerData.Tables[0].Rows[rowCnt]["strSpclReq"], "")),
                                            Convert.ToInt64(dsContainerData.Tables[0].Rows[rowCnt][0]));
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
                // End

                //Manjunath for E-comm
                if (CheckESI == 1)
                {
                    var _with47 = updESIContainerDetails;
                    _with47.Connection = objWK.MyConnection;
                    _with47.CommandType = CommandType.StoredProcedure;
                    _with47.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_ESI_CONT_UPD";
                    var _with48 = _with47.Parameters;

                    updESIContainerDetails.Parameters.Add("JOB_TRN_CONT_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_CONT_pk").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["JOB_TRN_CONT_PK_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                    updESIContainerDetails.Parameters.Add("CONTAINER_NUMBER_IN", OracleDbType.Varchar2, 16, "container_number").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["CONTAINER_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("SEAL_NUMBER_IN", OracleDbType.Varchar2, 20, "seal_number").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["SEAL_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("VOLUME_IN_CBM_IN", OracleDbType.Int32, 10, "volume_in_cbm").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["VOLUME_IN_CBM_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("GROSS_WEIGHT_IN", OracleDbType.Int32, 10, "gross_weight").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["GROSS_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("NET_WEIGHT_IN", OracleDbType.Int32, 10, "net_weight").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["NET_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("CHARGEABLE_WEIGHT_IN", OracleDbType.Int32, 10, "chargeable_weight").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["CHARGEABLE_WEIGHT_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("PACK_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "pack_type_mst_fk").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["PACK_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("PACK_COUNT_IN", OracleDbType.Int32, 6, "pack_count").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["PACK_COUNT_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("COMMODITY_MST_FK_IN", OracleDbType.Int32, 10, "commodity_mst_fk").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["COMMODITY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("COMMODITY_MST_FKS_IN", OracleDbType.Varchar2, 200, "COMMODITY_MST_FKS").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["COMMODITY_MST_FKS_IN"].SourceVersion = DataRowVersion.Current;


                    updESIContainerDetails.Parameters.Add("LOAD_DATE_IN", OracleDbType.Date, 20, "load_date").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["LOAD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("CONTAINER_PK_IN", OracleDbType.Int32, 20, "CONTAINER_PK").Direction = ParameterDirection.Input;
                    updESIContainerDetails.Parameters["CONTAINER_PK_IN"].SourceVersion = DataRowVersion.Current;

                    updESIContainerDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    updESIContainerDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                    var _with49 = objWK.MyDataAdapter;

                    _with49.UpdateCommand = updESIContainerDetails;
                    _with49.UpdateCommand.Transaction = TRAN;
                    RecAfct = _with49.Update(dsESIContainerData.Tables[0]);
                    if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                    objWK.MyCommand.Transaction = TRAN;
                }

                var _with50 = insTPDetails;
                _with50.Connection = objWK.MyConnection;
                _with50.CommandType = CommandType.StoredProcedure;
                _with50.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_TP_INS";
                var _with51 = _with50.Parameters;

                insTPDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insTPDetails.Parameters.Add("PORT_MST_FK_IN", OracleDbType.Int32, 10, "port_mst_fk").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["PORT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("TRANSHIPMENT_NO_IN", OracleDbType.Int32, 10, "transhipment_no").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["TRANSHIPMENT_NO_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "vessel_name").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("VOYAGE_IN", OracleDbType.Varchar2, 10, "voyage").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("VOYAGE_FK_IN", OracleDbType.Varchar2, 10, "GridVoyagePK").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["VOYAGE_FK_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("ETA_DATE_IN", OracleDbType.Date, 20, "eta_date").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("ETD_DATE_IN", OracleDbType.Date, 20, "etd_date").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("AGENT_FK_IN", OracleDbType.Varchar2, 10, "AgentPK").Direction = ParameterDirection.Input;
                insTPDetails.Parameters["AGENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                insTPDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_SEA_EXP_TP_PK").Direction = ParameterDirection.Output;
                insTPDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with52 = updTPDetails;
                _with52.Connection = objWK.MyConnection;
                _with52.CommandType = CommandType.StoredProcedure;
                _with52.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_TP_UPD";
                var _with53 = _with52.Parameters;

                updTPDetails.Parameters.Add("JOB_TRN_TP_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_TP_PK").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["JOB_TRN_TP_PK_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updTPDetails.Parameters.Add("PORT_MST_FK_IN", OracleDbType.Int32, 10, "port_mst_fk").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["PORT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("TRANSHIPMENT_NO_IN", OracleDbType.Int32, 10, "transhipment_no").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["TRANSHIPMENT_NO_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("VESSEL_NAME_IN", OracleDbType.Varchar2, 25, "vessel_name").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["VESSEL_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("VOYAGE_IN", OracleDbType.Varchar2, 10, "voyage").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["VOYAGE_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("VOYAGE_FK_IN", OracleDbType.Varchar2, 10, "GridVoyagePK").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["VOYAGE_FK_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("AGENT_FK_IN", OracleDbType.Varchar2, 10, "AgentPK").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["AGENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("ETA_DATE_IN", OracleDbType.Date, 20, "eta_date").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["ETA_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("ETD_DATE_IN", OracleDbType.Date, 20, "etd_date").Direction = ParameterDirection.Input;
                updTPDetails.Parameters["ETD_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updTPDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updTPDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with54 = delTPDetails;
                _with54.Connection = objWK.MyConnection;
                _with54.CommandType = CommandType.StoredProcedure;
                _with54.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_TP_DEL";

                delTPDetails.Parameters.Add("JOB_TRN_TP_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_TP_PK").Direction = ParameterDirection.Input;
                delTPDetails.Parameters["JOB_TRN_TP_PK_IN"].SourceVersion = DataRowVersion.Current;

                delTPDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                delTPDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with55 = objWK.MyDataAdapter;

                _with55.InsertCommand = insTPDetails;
                _with55.InsertCommand.Transaction = TRAN;

                _with55.UpdateCommand = updTPDetails;
                _with55.UpdateCommand.Transaction = TRAN;

                _with55.DeleteCommand = delTPDetails;
                _with55.DeleteCommand.Transaction = TRAN;
                RecAfct = _with55.Update(dsTPDetails.Tables[0]);
                // Amit 22-Dec-06 TaskID "DOC-DEC-001"
                if (arrMessage.Count == 0)
                {
                    //goto 20;
                }

                if (string.Compare(Convert.ToString(arrMessage[0]).ToLower(), "saved") > 0)
                {
                    arrMessage.Clear();
                }
                //20:

				if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                // End

                //Manjunath for Cargo Pick up & Drop Address
                if ((dsPickUpDetails != null))
                {
                    var _with56 = insPickUpDetails;
                    _with56.Connection = objWK.MyConnection;
                    _with56.CommandType = CommandType.StoredProcedure;
                    _with56.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_PICKUP_TRN_INS";

                    _with56.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                    _with56.Parameters.Add("PICKUP_DROP_TYPE_IN", OracleDbType.Int32, 1, "PICKUP_DROP_TYPE").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICKUP_DROP_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PICK_DROP_NAME1_IN", OracleDbType.Varchar2, 50, "COMP_NAME").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICK_DROP_NAME1_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PICK_DROP_NAME2_IN", OracleDbType.Varchar2, 50, "COMP_NAME1").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICK_DROP_NAME2_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PICK_DROP_ADDRESS1_IN", OracleDbType.Varchar2, 50, "ADDRESS1").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICK_DROP_ADDRESS1_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PICK_DROP_ADDRESS2_IN", OracleDbType.Varchar2, 50, "ADDRESS2").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICK_DROP_ADDRESS2_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PICK_DROP_ADDRESS3_IN", OracleDbType.Varchar2, 50, "ADDRESS3").Direction = ParameterDirection.Input;
                    _with56.Parameters["PICK_DROP_ADDRESS3_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("STATE_IN", OracleDbType.Varchar2, 50, "STATE").Direction = ParameterDirection.Input;
                    _with56.Parameters["STATE_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("CITY_IN", OracleDbType.Varchar2, 30, "CITY").Direction = ParameterDirection.Input;
                    _with56.Parameters["CITY_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("POST_CODE_IN", OracleDbType.Varchar2, 10, "POST_CODE").Direction = ParameterDirection.Input;
                    _with56.Parameters["POST_CODE_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("COUNTRY_MST_PK_IN", OracleDbType.Int32, 10, "COUNTRY_MST_PK").Direction = ParameterDirection.Input;
                    _with56.Parameters["COUNTRY_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("CONT_PERSON_IN", OracleDbType.Varchar2, 50, "CONT_PERSON").Direction = ParameterDirection.Input;
                    _with56.Parameters["CONT_PERSON_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("PHONE_NR_IN", OracleDbType.Varchar2, 25, "PHONE_NR").Direction = ParameterDirection.Input;
                    _with56.Parameters["PHONE_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("FAX_NR_IN", OracleDbType.Varchar2, 25, "FAX_NR").Direction = ParameterDirection.Input;
                    _with56.Parameters["FAX_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("CELL_NR_IN", OracleDbType.Varchar2, 25, "CELL_NR").Direction = ParameterDirection.Input;
                    _with56.Parameters["CELL_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("EMAIL_IN", OracleDbType.Varchar2, 100, "EMAIL").Direction = ParameterDirection.Input;
                    _with56.Parameters["EMAIL_IN"].SourceVersion = DataRowVersion.Current;

                    _with56.Parameters.Add("CREATED_BY_FK_IN", Convert.ToInt64(M_CREATED_BY_FK)).Direction = ParameterDirection.Input;

                    _with56.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "PICK_DROP_MST_PK").Direction = ParameterDirection.Output;
                    _with56.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                    var _with57 = updPickUpDetails;
                    _with57.Connection = objWK.MyConnection;
                    _with57.CommandType = CommandType.StoredProcedure;
                    _with57.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_PICKUP_TRN_UPD";

                    _with57.Parameters.Add("PICK_DROP_MST_PK_IN", OracleDbType.Int32, 10, "PICK_DROP_MST_PK").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                    _with57.Parameters.Add("PICKUP_DROP_TYPE_IN", OracleDbType.Int32, 1, "PICKUP_DROP_TYPE").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICKUP_DROP_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PICK_DROP_NAME1_IN", OracleDbType.Varchar2, 50, "COMP_NAME").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_NAME1_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PICK_DROP_NAME2_IN", OracleDbType.Varchar2, 50, "COMP_NAME1").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_NAME2_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PICK_DROP_ADDRESS1_IN", OracleDbType.Varchar2, 50, "ADDRESS1").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_ADDRESS1_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PICK_DROP_ADDRESS2_IN", OracleDbType.Varchar2, 50, "ADDRESS2").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_ADDRESS2_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PICK_DROP_ADDRESS3_IN", OracleDbType.Varchar2, 50, "ADDRESS3").Direction = ParameterDirection.Input;
                    _with57.Parameters["PICK_DROP_ADDRESS3_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("STATE_IN", OracleDbType.Varchar2, 50, "STATE").Direction = ParameterDirection.Input;
                    _with57.Parameters["STATE_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("CITY_IN", OracleDbType.Varchar2, 30, "CITY").Direction = ParameterDirection.Input;
                    _with57.Parameters["CITY_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("POST_CODE_IN", OracleDbType.Varchar2, 10, "POST_CODE").Direction = ParameterDirection.Input;
                    _with57.Parameters["POST_CODE_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("COUNTRY_MST_PK_IN", OracleDbType.Int32, 10, "COUNTRY_MST_PK").Direction = ParameterDirection.Input;
                    _with57.Parameters["COUNTRY_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("CONT_PERSON_IN", OracleDbType.Varchar2, 50, "CONT_PERSON").Direction = ParameterDirection.Input;
                    _with57.Parameters["CONT_PERSON_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("PHONE_NR_IN", OracleDbType.Varchar2, 25, "PHONE_NR").Direction = ParameterDirection.Input;
                    _with57.Parameters["PHONE_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("FAX_NR_IN", OracleDbType.Varchar2, 25, "FAX_NR").Direction = ParameterDirection.Input;
                    _with57.Parameters["FAX_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("CELL_NR_IN", OracleDbType.Varchar2, 25, "CELL_NR").Direction = ParameterDirection.Input;
                    _with57.Parameters["CELL_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("EMAIL_IN", OracleDbType.Varchar2, 100, "EMAIL").Direction = ParameterDirection.Input;
                    _with57.Parameters["EMAIL_IN"].SourceVersion = DataRowVersion.Current;

                    _with57.Parameters.Add("MODIFIED_BY_FK_IN", Convert.ToInt64(M_CREATED_BY_FK)).Direction = ParameterDirection.Input;

                    _with57.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with57.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                    var _with58 = objWK.MyDataAdapter;

                    _with58.InsertCommand = insPickUpDetails;
                    _with58.InsertCommand.Transaction = TRAN;

                    _with58.UpdateCommand = updPickUpDetails;
                    _with58.UpdateCommand.Transaction = TRAN;

                    RecAfct = _with58.Update(dsPickUpDetails);

                    if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                }

                if ((dsDropDetails != null))
                {
                    var _with59 = insDropDetails;
                    _with59.Connection = objWK.MyConnection;
                    _with59.CommandType = CommandType.StoredProcedure;
                    _with59.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_PICKUP_TRN_INS";

                    _with59.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                    _with59.Parameters.Add("PICKUP_DROP_TYPE_IN", OracleDbType.Int32, 1, "PICKUP_DROP_TYPE").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICKUP_DROP_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PICK_DROP_NAME1_IN", OracleDbType.Varchar2, 50, "COMP_NAME").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICK_DROP_NAME1_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PICK_DROP_NAME2_IN", OracleDbType.Varchar2, 50, "COMP_NAME1").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICK_DROP_NAME2_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PICK_DROP_ADDRESS1_IN", OracleDbType.Varchar2, 50, "ADDRESS1").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICK_DROP_ADDRESS1_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PICK_DROP_ADDRESS2_IN", OracleDbType.Varchar2, 50, "ADDRESS2").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICK_DROP_ADDRESS2_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PICK_DROP_ADDRESS3_IN", OracleDbType.Varchar2, 50, "ADDRESS3").Direction = ParameterDirection.Input;
                    _with59.Parameters["PICK_DROP_ADDRESS3_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("STATE_IN", OracleDbType.Varchar2, 50, "STATE").Direction = ParameterDirection.Input;
                    _with59.Parameters["STATE_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("CITY_IN", OracleDbType.Varchar2, 30, "CITY").Direction = ParameterDirection.Input;
                    _with59.Parameters["CITY_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("POST_CODE_IN", OracleDbType.Varchar2, 10, "POST_CODE").Direction = ParameterDirection.Input;
                    _with59.Parameters["POST_CODE_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("COUNTRY_MST_PK_IN", OracleDbType.Int32, 10, "COUNTRY_MST_PK").Direction = ParameterDirection.Input;
                    _with59.Parameters["COUNTRY_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("CONT_PERSON_IN", OracleDbType.Varchar2, 50, "CONT_PERSON").Direction = ParameterDirection.Input;
                    _with59.Parameters["CONT_PERSON_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("PHONE_NR_IN", OracleDbType.Varchar2, 25, "PHONE_NR").Direction = ParameterDirection.Input;
                    _with59.Parameters["PHONE_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("FAX_NR_IN", OracleDbType.Varchar2, 25, "FAX_NR").Direction = ParameterDirection.Input;
                    _with59.Parameters["FAX_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("CELL_NR_IN", OracleDbType.Varchar2, 25, "CELL_NR").Direction = ParameterDirection.Input;
                    _with59.Parameters["CELL_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("EMAIL_IN", OracleDbType.Varchar2, 100, "EMAIL").Direction = ParameterDirection.Input;
                    _with59.Parameters["EMAIL_IN"].SourceVersion = DataRowVersion.Current;

                    _with59.Parameters.Add("CREATED_BY_FK_IN", Convert.ToInt64(M_CREATED_BY_FK)).Direction = ParameterDirection.Input;

                    _with59.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "PICK_DROP_MST_PK").Direction = ParameterDirection.Output;
                    _with59.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                    var _with60 = updDropDetails;
                    _with60.Connection = objWK.MyConnection;
                    _with60.CommandType = CommandType.StoredProcedure;
                    _with60.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_PICKUP_TRN_UPD";

                    _with60.Parameters.Add("PICK_DROP_MST_PK_IN", OracleDbType.Int32, 10, "PICK_DROP_MST_PK").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                    _with60.Parameters.Add("PICKUP_DROP_TYPE_IN", OracleDbType.Int32, 1, "PICKUP_DROP_TYPE").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICKUP_DROP_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PICK_DROP_NAME1_IN", OracleDbType.Varchar2, 50, "COMP_NAME").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_NAME1_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PICK_DROP_NAME2_IN", OracleDbType.Varchar2, 50, "COMP_NAME1").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_NAME2_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PICK_DROP_ADDRESS1_IN", OracleDbType.Varchar2, 50, "ADDRESS1").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_ADDRESS1_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PICK_DROP_ADDRESS2_IN", OracleDbType.Varchar2, 50, "ADDRESS2").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_ADDRESS2_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PICK_DROP_ADDRESS3_IN", OracleDbType.Varchar2, 50, "ADDRESS3").Direction = ParameterDirection.Input;
                    _with60.Parameters["PICK_DROP_ADDRESS3_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("STATE_IN", OracleDbType.Varchar2, 50, "STATE").Direction = ParameterDirection.Input;
                    _with60.Parameters["STATE_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("CITY_IN", OracleDbType.Varchar2, 30, "CITY").Direction = ParameterDirection.Input;
                    _with60.Parameters["CITY_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("POST_CODE_IN", OracleDbType.Varchar2, 10, "POST_CODE").Direction = ParameterDirection.Input;
                    _with60.Parameters["POST_CODE_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("COUNTRY_MST_PK_IN", OracleDbType.Int32, 10, "COUNTRY_MST_PK").Direction = ParameterDirection.Input;
                    _with60.Parameters["COUNTRY_MST_PK_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("CONT_PERSON_IN", OracleDbType.Varchar2, 50, "CONT_PERSON").Direction = ParameterDirection.Input;
                    _with60.Parameters["CONT_PERSON_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("PHONE_NR_IN", OracleDbType.Varchar2, 25, "PHONE_NR").Direction = ParameterDirection.Input;
                    _with60.Parameters["PHONE_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("FAX_NR_IN", OracleDbType.Varchar2, 25, "FAX_NR").Direction = ParameterDirection.Input;
                    _with60.Parameters["FAX_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("CELL_NR_IN", OracleDbType.Varchar2, 25, "CELL_NR").Direction = ParameterDirection.Input;
                    _with60.Parameters["CELL_NR_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("EMAIL_IN", OracleDbType.Varchar2, 100, "EMAIL").Direction = ParameterDirection.Input;
                    _with60.Parameters["EMAIL_IN"].SourceVersion = DataRowVersion.Current;

                    _with60.Parameters.Add("MODIFIED_BY_FK_IN", Convert.ToInt64(M_CREATED_BY_FK)).Direction = ParameterDirection.Input;

                    _with60.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "RETURN_VALUE").Direction = ParameterDirection.Output;
                    _with60.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                    var _with61 = objWK.MyDataAdapter;

                    _with61.InsertCommand = insDropDetails;
                    _with61.InsertCommand.Transaction = TRAN;

                    _with61.UpdateCommand = updDropDetails;
                    _with61.UpdateCommand.Transaction = TRAN;

                    RecAfct = _with61.Update(dsDropDetails);

                    if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                }
                //End Manjunath

                //--------------------------Freight Details-----------------------------
                var _with62 = insFreightDetails;
                _with62.Connection = objWK.MyConnection;
                _with62.CommandType = CommandType.StoredProcedure;
                _with62.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_INS";
                var _with63 = _with62.Parameters;

                insFreightDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insFreightDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FREIGHT_TYPE_IN", OracleDbType.Int32, 1, "freight_type").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                // By Amit Singh on 23-May-07
                insFreightDetails.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                // End

                insFreightDetails.Parameters.Add("FREIGHT_AMT_IN", OracleDbType.Int32, 10, "freight_amt").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("BASIS_IN", OracleDbType.Int32, 10, "basis").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["BASIS_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "roe").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                //'Rateperbasis
                insFreightDetails.Parameters.Add("RATE_PERBASIS_IN", OracleDbType.Int32, 10, "Rateperbasis").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["RATE_PERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                //'surcharge
                insFreightDetails.Parameters.Add("surcharge_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["surcharge_IN"].SourceVersion = DataRowVersion.Current;
                ///surcharge

                insFreightDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "quantity").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;
                //'added by subhransu
                insFreightDetails.Parameters.Add("JOB_TRN_CONT_fk_in", DBNull.Value).Direction = ParameterDirection.Input;

                // Added Suresh Kumar 30.03.2006 - Print Check box for MBL Print
                insFreightDetails.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;
                //end
                //------------------------------------------
                insFreightDetails.Parameters.Add("AGENT_CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, AGENT_CURR_COL_NAME).Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["AGENT_CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("AGENT_RATEPERBASIS_IN", OracleDbType.Double, 21, AGENT_RATE_COL_NAME).Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["AGENT_RATEPERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("AGENT_FREIGHT_AMT_IN", OracleDbType.Double, 21, AGENT_AMT_COL_NAME).Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["AGENT_FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_FD_PK").Direction = ParameterDirection.Output;
                insFreightDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;



                var _with64 = updFreightDetails;
                _with64.Connection = objWK.MyConnection;
                _with64.CommandType = CommandType.StoredProcedure;
                _with64.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_UPD";
                var _with65 = _with64.Parameters;

                updFreightDetails.Parameters.Add("JOB_TRN_FD_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_FD_PK").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["JOB_TRN_FD_PK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updFreightDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FREIGHT_TYPE_IN", OracleDbType.Int32, 1, "freight_type").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                //'Rateperbasis
                updFreightDetails.Parameters.Add("RATE_PERBASIS_IN", OracleDbType.Int32, 10, "Rateperbasis").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["RATE_PERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                //'surcharge
                updFreightDetails.Parameters.Add("SURCHARGE_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["SURCHARGE_IN"].SourceVersion = DataRowVersion.Current;
                ///surcharge

                // By Amit Singh on 23-May-07
                updFreightDetails.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;
                // End

                updFreightDetails.Parameters.Add("FREIGHT_AMT_IN", OracleDbType.Int32, 10, "freight_amt").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("BASIS_IN", OracleDbType.Int32, 10, "basis").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["BASIS_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "roe").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "quantity").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;

                //' Added Suresh Kumar 30.03.2006 - Print Check box for MBL Print
                updFreightDetails.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;
                //end

                updFreightDetails.Parameters.Add("AGENT_CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, AGENT_CURR_COL_NAME).Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["AGENT_CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("AGENT_RATEPERBASIS_IN", OracleDbType.Double, 21, AGENT_RATE_COL_NAME).Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["AGENT_RATEPERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("AGENT_FREIGHT_AMT_IN", OracleDbType.Double, 21, AGENT_AMT_COL_NAME).Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["AGENT_FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updFreightDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with66 = delFreightDetails;
                _with66.Connection = objWK.MyConnection;
                _with66.CommandType = CommandType.StoredProcedure;
                _with66.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_DEL";

                delFreightDetails.Parameters.Add("JOB_TRN_FD_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_FD_PK").Direction = ParameterDirection.Input;
                delFreightDetails.Parameters["JOB_TRN_FD_PK_IN"].SourceVersion = DataRowVersion.Current;

                delFreightDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                delFreightDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with67 = objWK.MyDataAdapter;

                _with67.InsertCommand = insFreightDetails;
                _with67.InsertCommand.Transaction = TRAN;

                _with67.UpdateCommand = updFreightDetails;
                _with67.UpdateCommand.Transaction = TRAN;

                _with67.DeleteCommand = delFreightDetails;
                _with67.DeleteCommand.Transaction = TRAN;

                RecAfct = _with67.Update(dsFreightDetails);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }


                if (!SaveSecondaryServices(objWK, TRAN, Convert.ToInt32(JobCardPK), dsIncomeChargeDetails, dsExpenseChargeDetails))
                {
                    arrMessage.Add("Error while saving secondary service details");
                    return arrMessage;
                }

                var _with68 = insPurchaseInvDetails;
                _with68.Connection = objWK.MyConnection;
                _with68.CommandType = CommandType.StoredProcedure;
                _with68.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_PIA_INS";
                var _with69 = _with68.Parameters;

                insPurchaseInvDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insPurchaseInvDetails.Parameters.Add("COST_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "cost_element_mst_fk").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["COST_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "vendor_key").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("INVOICE_NUMBER_IN", OracleDbType.Varchar2, 20, "invoice_number").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["INVOICE_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("INVOICE_DATE_IN", OracleDbType.Date, 20, "invoice_date").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["INVOICE_DATE_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("INVOICE_AMT_IN", OracleDbType.Int32, 10, "invoice_amt").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["INVOICE_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("TAX_PERCENTAGE_IN", OracleDbType.Int32, 5, "tax_percentage").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["TAX_PERCENTAGE_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("TAX_AMT_IN", OracleDbType.Int32, 10, "tax_amt").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["TAX_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("ESTIMATED_AMT_IN", OracleDbType.Int32, 10, "estimated_amt").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["ESTIMATED_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "vendor_mst_fk").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("ATTACHED_FILE_NAME_IN", OracleDbType.Varchar2, 50, "attached_file_name").Direction = ParameterDirection.Input;
                insPurchaseInvDetails.Parameters["ATTACHED_FILE_NAME_IN"].SourceVersion = DataRowVersion.Current;

                insPurchaseInvDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_PIA_PK").Direction = ParameterDirection.Output;
                insPurchaseInvDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with70 = updPurchaseInvDetails;
                _with70.Connection = objWK.MyConnection;
                _with70.CommandType = CommandType.StoredProcedure;
                _with70.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_PIA_UPD";
                var _with71 = _with70.Parameters;

                updPurchaseInvDetails.Parameters.Add("JOB_TRN_PIA_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_PIA_PK").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["JOB_TRN_PIA_PK_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updPurchaseInvDetails.Parameters.Add("COST_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "cost_element_mst_fk").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["COST_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "vendor_key").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("INVOICE_NUMBER_IN", OracleDbType.Varchar2, 20, "invoice_number").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["INVOICE_NUMBER_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("INVOICE_DATE_IN", OracleDbType.Date, 20, "invoice_date").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["INVOICE_DATE_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("INVOICE_AMT_IN", OracleDbType.Int32, 10, "invoice_amt").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["INVOICE_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("TAX_PERCENTAGE_IN", OracleDbType.Int32, 5, "tax_percentage").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["TAX_PERCENTAGE_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("TAX_AMT_IN", OracleDbType.Int32, 10, "tax_amt").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["TAX_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("ESTIMATED_AMT_IN", OracleDbType.Int32, 10, "estimated_amt").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["ESTIMATED_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "vendor_mst_fk").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("ATTACHED_FILE_NAME_IN", OracleDbType.Varchar2, 50, "attached_file_name").Direction = ParameterDirection.Input;
                updPurchaseInvDetails.Parameters["ATTACHED_FILE_NAME_IN"].SourceVersion = DataRowVersion.Current;

                updPurchaseInvDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updPurchaseInvDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with72 = delPurchaseInvDetails;
                _with72.Connection = objWK.MyConnection;
                _with72.CommandType = CommandType.StoredProcedure;
                _with72.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_PIA_DEL";

                delPurchaseInvDetails.Parameters.Add("JOB_TRN_PIA_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_PIA_PK").Direction = ParameterDirection.Input;
                delPurchaseInvDetails.Parameters["JOB_TRN_PIA_PK_IN"].SourceVersion = DataRowVersion.Current;

                delPurchaseInvDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                delPurchaseInvDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;


                var _with73 = objWK.MyDataAdapter;

                _with73.InsertCommand = insPurchaseInvDetails;
                _with73.InsertCommand.Transaction = TRAN;

                _with73.UpdateCommand = updPurchaseInvDetails;
                _with73.UpdateCommand.Transaction = TRAN;

                _with73.DeleteCommand = delPurchaseInvDetails;
                _with73.DeleteCommand.Transaction = TRAN;

                RecAfct = _with73.Update(dsPurchaseInventory.Tables[0]);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                //'Added By Koteshwari on 22/4/2011
                var _with74 = insCostDetails;
                _with74.Connection = objWK.MyConnection;
                _with74.CommandType = CommandType.StoredProcedure;
                _with74.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_COST_INS";
                var _with75 = _with74.Parameters;
                insCostDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insCostDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "VENDOR_MST_PK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("COST_ELEMENT_FK_IN", OracleDbType.Int32, 10, "COST_ELEMENT_MST_PK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["COST_ELEMENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("LOCATION_FK_IN", OracleDbType.Int32, 10, "LOCATION_MST_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["LOCATION_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "VENDOR_KEY").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("PTMT_TYPE_IN", OracleDbType.Int32, 1, "PTMT_TYPE").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["PTMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("ESTIMATED_COST_IN", OracleDbType.Int32, 20, "ESTIMATED_COST").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["ESTIMATED_COST_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("TOTAL_COST_IN", OracleDbType.Int32, 20, "TOTAL_COST").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["TOTAL_COST_IN"].SourceVersion = DataRowVersion.Current;

                //'surcharge
                insCostDetails.Parameters.Add("SURCHARGE_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["SURCHARGE_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "ROE").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("BASIS_FK_IN", OracleDbType.Int32, 10, "BASIS_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["BASIS_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("RATEPERBASIS_IN", OracleDbType.Int32, 20, "ESTIMATED_RATE").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["RATEPERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "QUANTITY").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "CONTAINER_TYPE_MST_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;


                insCostDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_COST_PK").Direction = ParameterDirection.Output;
                insCostDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with76 = updCostDetails;
                _with76.Connection = objWK.MyConnection;
                _with76.CommandType = CommandType.StoredProcedure;
                _with76.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_COST_UPD";
                var _with77 = _with76.Parameters;

                updCostDetails.Parameters.Add("JOB_TRN_COST_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_COST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["JOB_TRN_COST_PK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updCostDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "VENDOR_MST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("COST_ELEMENT_FK_IN", OracleDbType.Int32, 50, "COST_ELEMENT_MST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["COST_ELEMENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("LOCATION_FK_IN", OracleDbType.Int32, 10, "LOCATION_MST_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["LOCATION_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "VENDOR_KEY").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("PTMT_TYPE_IN", OracleDbType.Int32, 1, "PTMT_TYPE").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["PTMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("ESTIMATED_COST_IN", OracleDbType.Int32, 20, "ESTIMATED_COST").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["ESTIMATED_COST_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("TOTAL_COST_IN", OracleDbType.Int32, 20, "TOTAL_COST").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["TOTAL_COST_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "ROE").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                //'surcharge
                updCostDetails.Parameters.Add("SURCHARGE_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["SURCHARGE_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("BASIS_FK_IN", OracleDbType.Int32, 10, "BASIS_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["BASIS_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("RATEPERBASIS_IN", OracleDbType.Int32, 20, "ESTIMATED_RATE").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["RATEPERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "QUANTITY").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "CONTAINER_TYPE_MST_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updCostDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with78 = delCostDetails;
                _with78.Connection = objWK.MyConnection;
                _with78.CommandType = CommandType.StoredProcedure;
                _with78.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_COST_DEL";

                delCostDetails.Parameters.Add("JOB_TRN_EST_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_COST_PK").Direction = ParameterDirection.Input;
                delCostDetails.Parameters["JOB_TRN_EST_PK_IN"].SourceVersion = DataRowVersion.Current;

                delCostDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                delCostDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with79 = objWK.MyDataAdapter;

                _with79.InsertCommand = insCostDetails;
                _with79.InsertCommand.Transaction = TRAN;

                _with79.UpdateCommand = updCostDetails;
                _with79.UpdateCommand.Transaction = TRAN;

                _with79.DeleteCommand = delCostDetails;
                _with79.DeleteCommand.Transaction = TRAN;

                RecAfct = _with79.Update(dsCostDetails.Tables[0]);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                //'End Koteshwari

                foreach (DataRow _rOth in dsOtherCharges.Tables[0].Rows)
                {
                    if (_rOth.RowState != DataRowState.Deleted)
                    {
                        string PayType = Convert.ToString(_rOth["Payment_Type"]);
                        if (PayType.ToUpper() == "PREPAID" | PayType == "1")
                        {
                            _rOth["Payment_Type"] = "1";
                        }
                        else if (PayType.ToUpper() == "COLLECT" | PayType == "2")
                        {
                            _rOth["Payment_Type"] = "2";
                        }
                        else
                        {
                            _rOth["Payment_Type"] = "3";
                        }
                    }
                }
                var _with80 = insOtherChargesDetails;
                _with80.Connection = objWK.MyConnection;
                _with80.CommandType = CommandType.StoredProcedure;
                _with80.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_OTH_CHRG_INS";

                _with80.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                _with80.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                _with80.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("PAYMENT_TYPE_IN", OracleDbType.Int32, 1, "Payment_Type").Direction = ParameterDirection.Input;
                _with80.Parameters["PAYMENT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                _with80.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                _with80.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_pk").Direction = ParameterDirection.Input;
                _with80.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("AMOUNT_IN", OracleDbType.Int32, 10, "amount").Direction = ParameterDirection.Input;
                _with80.Parameters["AMOUNT_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "ROE").Direction = ParameterDirection.Input;
                _with80.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                _with80.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("AGENT_CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, AGENT_CURR_COL_NAME).Direction = ParameterDirection.Input;
                _with80.Parameters["AGENT_CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("AGENT_AMOUNT_IN", OracleDbType.Double, 21, AGENT_AMT_COL_NAME).Direction = ParameterDirection.Input;
                _with80.Parameters["AGENT_AMOUNT_IN"].SourceVersion = DataRowVersion.Current;

                _with80.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_SEA_EXP_OTH_PK").Direction = ParameterDirection.Output;
                _with80.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with81 = updOtherChargesDetails;
                _with81.Connection = objWK.MyConnection;
                _with81.CommandType = CommandType.StoredProcedure;
                _with81.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_OTH_CHRG_UPD";

                _with81.Parameters.Add("JOB_TRN_OTH_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_OTH_PK").Direction = ParameterDirection.Input;
                _with81.Parameters["JOB_TRN_OTH_PK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                _with81.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                _with81.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("PAYMENT_TYPE_IN", OracleDbType.Int32, 1, "Payment_Type").Direction = ParameterDirection.Input;
                _with81.Parameters["PAYMENT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                _with81.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                _with81.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_pk").Direction = ParameterDirection.Input;
                _with81.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("AMOUNT_IN", OracleDbType.Int32, 10, "amount").Direction = ParameterDirection.Input;
                _with81.Parameters["AMOUNT_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "ROE").Direction = ParameterDirection.Input;
                _with81.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                _with81.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("AGENT_CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, AGENT_CURR_COL_NAME).Direction = ParameterDirection.Input;
                _with81.Parameters["AGENT_CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("AGENT_AMOUNT_IN", OracleDbType.Double, 21, AGENT_AMT_COL_NAME).Direction = ParameterDirection.Input;
                _with81.Parameters["AGENT_AMOUNT_IN"].SourceVersion = DataRowVersion.Current;

                _with81.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                _with81.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with82 = delOtherChargesDetails;
                _with82.Connection = objWK.MyConnection;
                _with82.CommandType = CommandType.StoredProcedure;
                _with82.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_OTH_CHRG_DEL";

                _with82.Parameters.Add("JOB_TRN_OTH_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_OTH_PK").Direction = ParameterDirection.Input;
                _with82.Parameters["JOB_TRN_OTH_PK_IN"].SourceVersion = DataRowVersion.Current;

                _with82.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                _with82.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with83 = objWK.MyDataAdapter;

                _with83.InsertCommand = insOtherChargesDetails;
                _with83.InsertCommand.Transaction = TRAN;

                _with83.UpdateCommand = updOtherChargesDetails;
                _with83.UpdateCommand.Transaction = TRAN;

                _with83.DeleteCommand = delOtherChargesDetails;
                _with83.DeleteCommand.Transaction = TRAN;

                RecAfct = _with83.Update(dsOtherCharges);

                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                else
                {
                    if (intIsUpdate == 1)
                    {
                        if (!string.IsNullOrEmpty(getDefault(strOperatorPk, "").ToString()))
                        {
                            arrMessage = (ArrayList)funUpStreamUpdationBookingOpr(strBookingRefNo, strOperatorPk, TRAN);

                            if (!(string.Compare(arrMessage[0].ToString(), "Saved") > 0))
                            {
                                TRAN.Rollback();
                                return arrMessage;
                            }
                        }
                    }
                    arrMessage = (ArrayList)SaveJobCardDoc(Convert.ToString(JobCardPK), TRAN, dsDoc, 2, 1);
                    //Biztype -2(Sea),Process Type -1(Export)
                    if (arrMessage.Count > 0)
                    {
                        if (!(string.Compare(arrMessage[0].ToString(), "Saved") > 0))
                        {
                            TRAN.Rollback();
                            return arrMessage;
                        }
                    }
                    arrMessage = (ArrayList)SaveTrackAndTrace(Convert.ToInt32(JobCardPK), TRAN, M_DataSet, Convert.ToInt32(userLocation), isEdting, dsTrackNTrace, jobCardRefNumber);
                    if (arrMessage.Count > 0)
                    {
                        TRAN.Commit();
                        return arrMessage;
                    }
                    else
                    {
                        TRAN.Rollback();
                    }
                    return arrMessage;
                }

            }
            catch (OracleException oraexp)
            {
                TRAN.Rollback();
                throw oraexp;
            }
            catch (Exception ex)
            {
                TRAN.Rollback();
                throw ex;
            }
            finally
            {
                objWK.CloseConnection();
            }
        }
        public bool SaveSecondaryServices(WorkFlow objWK, OracleTransaction TRAN, int JobCardPK, DataSet dsIncomeChargeDetails, DataSet dsExpenseChargeDetails)
        {
            if ((dsIncomeChargeDetails != null))
            {
                //----------------------------------Income Charge Details----------------------------------
                foreach (DataRow ri in dsIncomeChargeDetails.Tables[1].Rows)
                {
                    int Frt_Pk = 0;
                    try
                    {
                        Frt_Pk = Convert.ToInt32(ri["JOB_TRN_FD_PK"]);
                    }
                    catch (Exception ex)
                    {
                        Frt_Pk = 0;
                    }
                    var _with84 = objWK.MyCommand;
                    _with84.Parameters.Clear();
                    _with84.Transaction = TRAN;
                    _with84.CommandType = CommandType.StoredProcedure;
                    if (Frt_Pk > 0)
                    {
                        _with84.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_UPD";
                        _with84.Parameters.Add("JOB_TRN_FD_PK_IN", ri["JOB_TRN_FD_PK"]).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        _with84.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_INS";
                        _with84.Parameters.Add("SERVICE_TYPE_FLAG_IN", 1).Direction = ParameterDirection.Input;
                        _with84.Parameters.Add("JOB_TRN_CONT_FK_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                    _with84.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", ri["CONTAINER_TYPE_MST_FK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", ri["CHARGE_PK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("FREIGHT_TYPE_IN", ri["FREIGHT_TYPE"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("LOCATION_MST_FK_IN", ri["LOCATION_MST_FK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", ri["FRTPAYER_CUST_MST_FK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("FREIGHT_AMT_IN", ri["FREIGHT_AMT"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("CURRENCY_MST_FK_IN", ri["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("BASIS_IN", getDefault(ri["BASIS"], DBNull.Value)).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("PRINT_ON_MBL_IN", 1).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("BASIS_FK_IN", getDefault(ri["BASIS_PK"], DBNull.Value)).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("EXCHANGE_RATE_IN", getDefault(ri["ROE"], 1)).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("RATE_PERBASIS_IN", getDefault(ri["RATEPERBASIS"], DBNull.Value)).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("SURCHARGE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("QUANTITY_IN", getDefault(ri["VOLUME"], DBNull.Value)).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("SERVICE_MST_FK_IN", ri["SERVICE_MST_PK"]).Direction = ParameterDirection.Input;
                    _with84.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50).Direction = ParameterDirection.Output;
                    try
                    {
                        _with84.ExecuteNonQuery();
                        if (Frt_Pk == 0)
                        {
                            _with84.Parameters.Clear();
                            _with84.CommandType = CommandType.StoredProcedure;
                            _with84.CommandText = objWK.MyUserName + ".JOBCARD_SEC_SERVICE_PKG.FETCH_FRT_SEQ_CURRVAL";
                            _with84.Parameters.Add("BIZ_IN", 2).Direction = ParameterDirection.Input;
                            _with84.Parameters.Add("PROCESS_IN", 1).Direction = ParameterDirection.Input;
                            _with84.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10).Direction = ParameterDirection.Output;
                            _with84.ExecuteNonQuery();
                            Frt_Pk = Convert.ToInt32(_with84.Parameters["RETURN_VALUE"].Value);
                            ri["JOB_TRN_FD_PK"] = Frt_Pk;
                        }
                    }
                    catch (Exception ex)
                    {
                        return false;
                    }
                }
            }
            //----------------------------------Expense Charge Details----------------------------------
            if ((dsExpenseChargeDetails != null))
            {
                foreach (DataRow re in dsExpenseChargeDetails.Tables[1].Rows)
                {
                    int Cost_Pk = 0;
                    try
                    {
                        Cost_Pk = Convert.ToInt32(re["JOB_TRN_COST_PK"]);
                    }
                    catch (Exception ex)
                    {
                        Cost_Pk = 0;
                    }
                    var _with85 = objWK.MyCommand;
                    _with85.Parameters.Clear();
                    _with85.Transaction = TRAN;
                    _with85.CommandType = CommandType.StoredProcedure;
                    if (Cost_Pk > 0)
                    {
                        _with85.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_COST_UPD";
                        _with85.Parameters.Add("JOB_TRN_COST_PK_IN", re["JOB_TRN_COST_PK"]).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        _with85.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_COST_INS";
                        _with85.Parameters.Add("SERVICE_TYPE_FLAG_IN", 1).Direction = ParameterDirection.Input;
                    }

                    _with85.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("VENDOR_MST_FK_IN", re["SUPPLIER_MST_PK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("COST_ELEMENT_FK_IN", re["COST_ELEMENT_MST_PK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("LOCATION_FK_IN", re["LOCATION_MST_FK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("VENDOR_KEY_IN", re["SUPPLIER_MST_ID"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("PTMT_TYPE_IN", re["PTMT_TYPE"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("CURRENCY_MST_FK_IN", re["CURRENCY_MST_FK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("ESTIMATED_COST_IN", re["ESTIMATED_COST"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("TOTAL_COST_IN", re["TOTAL_COST"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("BASIS_FK_IN", re["DD_VALUE"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("RATEPERBASIS_IN", re["RATEPERBASIS"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("QUANTITY_IN", getDefault(re["VOLUME"], DBNull.Value)).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("EXCHANGE_RATE_IN", getDefault(re["ROE"], 1)).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("EXT_INT_FLAG_IN", getDefault(re["EXT_INT_FLAG"], 2)).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("SERVICE_MST_FK_IN", re["SERVICE_MST_FK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", re["CONTAINER_TYPE_MST_FK"]).Direction = ParameterDirection.Input;
                    _with85.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50).Direction = ParameterDirection.Output;
                    try
                    {
                        _with85.ExecuteNonQuery();
                        if (Cost_Pk == 0)
                        {
                            _with85.Parameters.Clear();
                            _with85.CommandType = CommandType.StoredProcedure;
                            _with85.CommandText = objWK.MyUserName + ".JOBCARD_SEC_SERVICE_PKG.FETCH_COST_SEQ_CURRVAL";
                            _with85.Parameters.Add("BIZ_IN", 2).Direction = ParameterDirection.Input;
                            _with85.Parameters.Add("PROCESS_IN", 1).Direction = ParameterDirection.Input;
                            _with85.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10).Direction = ParameterDirection.Output;
                            _with85.ExecuteNonQuery();
                            Cost_Pk = Convert.ToInt32(_with85.Parameters["RETURN_VALUE"].Value);
                            re["JOB_TRN_COST_PK"] = Cost_Pk;
                        }
                    }
                    catch (Exception ex)
                    {
                        return false;
                    }
                }
            }
            ClearRemovedServices(objWK, TRAN, JobCardPK, dsIncomeChargeDetails, dsExpenseChargeDetails);
            return true;
        }
        public bool ClearRemovedServices(WorkFlow objWK, OracleTransaction TRAN, int JobCardPK, DataSet dsIncomeChargeDetails, DataSet dsExpenseChargeDetails)
        {
            //Dim objwk As New WorkFlow
            string SelectedFrtPks = "";
            string SelectedCostPks = "";
            if (JobCardPK > 0)
            {
                //objwk.OpenConnection()
                //Dim TRAN As OracleTransaction
                //TRAN = objwk.MyConnection.BeginTransaction()
                try
                {
                    foreach (DataRow ri in dsIncomeChargeDetails.Tables[1].Rows)
                    {
                        if (string.IsNullOrEmpty(SelectedFrtPks))
                        {
                            SelectedFrtPks = Convert.ToString(getDefault(ri["JOB_TRN_FD_PK"], 0));
                        }
                        else
                        {
                            SelectedFrtPks += "," + getDefault(ri["JOB_TRN_FD_PK"], 0);
                        }
                    }
                    foreach (DataRow re in dsExpenseChargeDetails.Tables[1].Rows)
                    {
                        if (string.IsNullOrEmpty(SelectedCostPks))
                        {
                            SelectedCostPks = Convert.ToString(getDefault(re["JOB_TRN_COST_PK"], 0));
                        }
                        else
                        {
                            SelectedCostPks += "," + getDefault(re["JOB_TRN_COST_PK"], 0);
                        }
                    }

                    var _with86 = objWK.MyCommand;
                    _with86.Transaction = TRAN;
                    _with86.CommandType = CommandType.StoredProcedure;
                    _with86.CommandText = objWK.MyUserName + ".JOBCARD_SEC_SERVICE_PKG.DELETE_SEC_CHG_EXCEPT";
                    _with86.Parameters.Clear();
                    _with86.Parameters.Add("JOB_CARD_TRN_PK_IN", JobCardPK).Direction = ParameterDirection.Input;
                    _with86.Parameters.Add("JOB_TRN_FD_PKS", (string.IsNullOrEmpty(SelectedFrtPks) ? "" : SelectedFrtPks)).Direction = ParameterDirection.Input;
                    _with86.Parameters.Add("JOB_TRN_COST_PKS", (string.IsNullOrEmpty(SelectedCostPks) ? "" : SelectedCostPks)).Direction = ParameterDirection.Input;
                    _with86.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10).Direction = ParameterDirection.Output;
                    _with86.ExecuteNonQuery();
                    //TRAN.Commit()
                }
                catch (OracleException oraexp)
                {
                    TRAN.Rollback();
                    //Throw oraexp
                }
                catch (Exception ex)
                {
                    TRAN.Rollback();
                    //Throw ex
                }
                finally
                {
                    //objwk.CloseConnection()
                }
            }
            return false;
        }
        #endregion

        #region "Fetch Vessel/Voyage Detail"
        public DataSet FetchVoyageDetail(string VoyagePk)
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT");
            strSQL.Append("      VVT.VESSEL_ID,");
            strSQL.Append("      VVT.VESSEL_NAME,");
            strSQL.Append("      VTR.VOYAGE");
            strSQL.Append(" FROM");
            strSQL.Append("      VESSEL_VOYAGE_TBL VVT,");
            strSQL.Append("      VESSEL_VOYAGE_TRN VTR");
            strSQL.Append(" WHERE");
            strSQL.Append("      VVT.VESSEL_VOYAGE_TBL_PK = VTR.VESSEL_VOYAGE_TBL_FK");
            strSQL.Append(" AND  VTR.VOYAGE_TRN_PK=" + VoyagePk);

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "CustomerID"
        //To Get Customer ID
        //By Amit on 23-May-07
        public DataSet GetCustomerID(string CustomerPK)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strQuery.Append("SELECT CMT.CUSTOMER_ID" );
                strQuery.Append("   FROM CUSTOMER_MST_TBL CMT" );
                strQuery.Append("  WHERE CMT.CUSTOMER_MST_PK= '" + CustomerPK + "'");
                strQuery.Append("" );
                return objWF.GetDataSet(strQuery.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //End
        #endregion

        #region " Save Track And Trace "
        public object SaveTrackAndTrace(int jobPk, OracleTransaction TRAN, DataSet dsMain, int nlocationfk, bool IsEditing, DataSet dsContainer, string JCRefNr = "")
        {
            int Cnt = 0;
            int a = 0;
            bool UpdATD = false;
            bool UpdLDdate = false;
            string strContData = null;
            if (!string.IsNullOrEmpty((dsMain.Tables[0].Rows[Cnt]["departure_date"].ToString())))
            {
                UpdATD = true;
            }
            objTrackNTrace.DeleteOnSaveTraceExportOnATDLDUpd(jobPk, 2, 1, "Vessel Voyage", "LD-DT-DATA-DEL-SEA-EXP", nlocationfk, TRAN, "INS", CREATED_BY, "O",
            "Null");
            objTrackNTrace.DeleteOnSaveTraceExportOnATDLDUpd(jobPk, 2, 1, "Vessel Voyage", "GATE_OUT_DEL", nlocationfk, TRAN, "INS", CREATED_BY, "O",
            "Null");
            if (!string.IsNullOrEmpty((dsMain.Tables[0].Rows[Cnt]["arrival_date"].ToString())))
            {
                UpdateATA((string.IsNullOrEmpty(JCRefNr) ? dsMain.Tables[0].Rows[Cnt]["jobcard_ref_no"].ToString() : JCRefNr), dsMain.Tables[0].Rows[Cnt]["arrival_date"].ToString(), TRAN);
            }

            for (Cnt = 0; Cnt <= dsContainer.Tables[0].Rows.Count - 1; Cnt++)
            {
                if (!string.IsNullOrEmpty((dsContainer.Tables[0].Rows[Cnt]["load_date"].ToString())))
                {
                    UpdLDdate = true;
                    var _with87 = dsContainer.Tables[0].Rows[Cnt];
                    // Updated by Amit on 05-Jan-07 For Task DTS-1833
                    if (string.IsNullOrEmpty((dsMain.Tables[0].Rows[0]["vessel_name"].ToString())))
                    {
                        strContData = "Loaded Container " + _with87["container_number"] + '~' + _with87["load_date"];
                    }
                    else
                    {
                        strContData = "Loaded Container " + _with87["container_number"] + " On " + dsMain.Tables[0].Rows[0]["vessel_name"] + "/" + dsMain.Tables[0].Rows[0]["voyage"] + '~' + _with87["load_date"];
                    }
                    // End
                    arrMessage = objTrackNTrace.SaveTrackAndTraceExportOnLDUpd(jobPk, 2, 1, "Vessel Voyage", "LD-DT-UPD-JOB-SEA-EXP", nlocationfk, TRAN, "INS", CREATED_BY, "O",
                    strContData);
                }
                if (!string.IsNullOrEmpty((dsContainer.Tables[0].Rows[Cnt]["gateout_date"].ToString())))
                {
                    UpdLDdate = true;
                    var _with88 = dsContainer.Tables[0].Rows[Cnt];
                    strContData = "Gate-Out " + _with88["container_number"] + "(" + _with88["CONTAINER_TYPE_MST_ID"] + ")" + '~' + _with88["GATEOUT_DATE"];
                    arrMessage = objTrackNTrace.SaveTrackAndTraceExportOnLDUpd(jobPk, 2, 2, "Vessel Voyage", "GATE_OUT_INS", nlocationfk, TRAN, "INS", CREATED_BY, "O",
                    strContData);
                }
            }



            //If UpdLDdate = True Then
            //    arrMessage = objTrackNTrace.SaveTrackAndTraceExportOnATDLDUpd(jobPk, 2, 1, "Vessel Voyage", "LD-DT-UPD-JOB-SEA-EXP", nlocationfk, TRAN, "INS", "O")
            //End If

            if (UpdATD == true & IsEditing == true)
            {
                //Added by Venkata to get status like "sailed from XXX POL"
                for (Cnt = 0; Cnt <= dsMain.Tables[0].Rows.Count - 1; Cnt++)
                {
                    if (!string.IsNullOrEmpty((dsMain.Tables[0].Rows[Cnt]["departure_date"].ToString())))
                    {
                        //UpdATD = True
                        var _with89 = dsMain.Tables[0].Rows[Cnt];
                        strContData = "Sailed from " + _with89["POL"] + '~' + _with89["departure_date"];
                        arrMessage = objTrackNTrace.SaveTrackAndTraceExportOnATDUpd(jobPk, 2, 1, "Sail", "ATD-UPD-JC-SEA-EXP", nlocationfk, TRAN, "INS", CREATED_BY, "O",
                        strContData);
                    }
                }
                //end Added
            }
            else
            {
                arrMessage.Clear();
                arrMessage.Add("All Data Saved Successfully");
            }
            arrMessage = (ArrayList)InterchangeActivity(jobPk, TRAN);
            return arrMessage;
        }
        #endregion

        #region "Fetch Main Jobcard for export"
        public DataSet FetchMainJobCardDataExp(string jobCardPK = "0", string BizType = "0", string ProcessType = "0")
        {

            StringBuilder strSQL = new StringBuilder();
            strSQL.Append("SELECT ");
            strSQL.Append( "    job_exp.JOB_CARD_TRN_PK, ");
            strSQL.Append( "    job_exp.BOOKING_MST_FK,  ");
            strSQL.Append( "    bst.BOOKING_DATE,  ");
            strSQL.Append( "    job_exp.jobcard_ref_no, ");
            strSQL.Append( "    bst.booking_ref_no, ");
            strSQL.Append( "    cust.customer_id,");
            strSQL.Append( "    job_exp.cust_customer_mst_fk,");
            strSQL.Append( "    cust.customer_name, job_exp.del_address,");
            strSQL.Append( " CASE WHEN job_exp.CARGO_TYPE =1 THEN job_exp.POO_FK ");
            strSQL.Append( "  ELSE job_exp.POO_FK END COL_PLACE_MST_FK,  ");
            strSQL.Append( "  CASE WHEN job_exp.CARGO_TYPE =1 THEN POO.PORT_NAME  ");
            strSQL.Append( "  ELSE FRMPLC.PLACE_NAME END \"CollectionPlace\" , ");
            strSQL.Append( "    JOB_EXP.port_mst_pol_fk, ");
            strSQL.Append( "    pol.port_name \"POL\",");
            strSQL.Append( "    pol.port_ID \"POL_ID\",");
            strSQL.Append( "    JOB_EXP.port_mst_pod_fk, ");
            strSQL.Append( "    pod.port_name \"POD\",");
            strSQL.Append( "    pod.port_ID \"POD_ID\",");
            strSQL.Append( " CASE WHEN job_exp.CARGO_TYPE =1 THEN job_exp.PFD_FK");
            strSQL.Append( "  ELSE job_exp.del_place_mst_fk END DEL_PLACE_MST_FK,  ");
            strSQL.Append( "   CASE WHEN job_exp.CARGO_TYPE =1 THEN PFD.PORT_NAME  ");
            strSQL.Append( "  ELSE TOPLC.PLACE_NAME END \"DeliveryPlace\", ");

            strSQL.Append( "    job_card_status,     ");
            strSQL.Append( "    job_card_closed_on,  ");
            strSQL.Append( "    job_exp.WIN_XML_STATUS,");
            strSQL.Append( "    job_exp.WIN_TOTAL_QTY,");
            strSQL.Append( "    job_exp.WIN_REC_QTY,");
            strSQL.Append( "    job_exp.WIN_BALANCE_QTY,");
            strSQL.Append( "    job_exp.WIN_TOTAL_WT,");
            strSQL.Append( "    job_exp.WIN_REC_WT,");
            strSQL.Append( "    job_exp.WIN_BALANCE_WT,");
            strSQL.Append( "    job_exp.CARRIER_MST_FK, ");
            strSQL.Append( "    DECODE(JOB_EXP.BUSINESS_TYPE, 1, AMT.AIRLINE_ID, OPRATOR.OPERATOR_ID) \"operator_id\",");
            strSQL.Append( "    DECODE(JOB_EXP.BUSINESS_TYPE, 1, AMT.AIRLINE_NAME, OPRATOR.OPERATOR_NAME) \"operator_name\",");
            strSQL.Append( "    VVT.VOYAGE_TRN_PK \"VoyagePK\",  ");
            strSQL.Append( "    V.VESSEL_ID \"vessel_id\",   ");
            strSQL.Append( "    V.VESSEL_NAME \"vessel_name\",  ");
            strSQL.Append( "    DECODE(JOB_EXP.BUSINESS_TYPE, 1, JOB_EXP.VOYAGE_FLIGHT_NO, VVT.VOYAGE) \"voyage\",   ");
            strSQL.Append( "    TO_CHAR(job_exp.eta_date,DATETIMEFORMAT24)eta_date , ");
            strSQL.Append( "    TO_CHAR(job_exp.etd_date,DATETIMEFORMAT24) etd_date, ");
            strSQL.Append( "    TO_CHAR(job_exp.arrival_date,DATETIMEFORMAT24) arrival_date, ");
            strSQL.Append( "    TO_CHAR(job_exp.departure_date,DATETIMEFORMAT24) departure_date, ");
            strSQL.Append( "    job_exp.sec_vessel_name, ");
            strSQL.Append( "    job_exp.sec_voyage,  ");
            strSQL.Append( "    TO_CHAR(job_exp.sec_eta_date,DATEFORMAT) sec_eta_date, ");
            strSQL.Append( "    TO_CHAR(job_exp.sec_etd_date,DATEFORMAT) sec_etd_date, ");
            strSQL.Append( "    job_exp.shipper_cust_mst_fk, ");
            strSQL.Append( "    shipper.customer_id \"Shipper\", ");
            strSQL.Append( "    shipper.customer_name \"ShipperName\", ");
            strSQL.Append( "    job_exp.consignee_cust_mst_fk, ");
            strSQL.Append( "   NVL(consignee.CUSTOMER_ID, TEMP_CONS.CUSTOMER_ID) Consignee, ");
            strSQL.Append( "   NVL(consignee.CUSTOMER_NAME, TEMP_CONS.CUSTOMER_NAME) ConsigneeName, ");
            //strSQL.Append(vbCrLf & "    consignee.customer_id ""Consignee"",")
            // strSQL.Append(vbCrLf & "    consignee.customer_name ""ConsigneeName"",")
            strSQL.Append( "    NVL(job_exp.notify1_cust_mst_fk,TMPNOTIFY1.CUSTOMER_MST_PK)\"notify1_cust_mst_fk\", ");
            strSQL.Append( "  NVL(notify1.customer_id, TMPNOTIFY1.CUSTOMER_ID) Notify1,");
            // strSQL.Append(vbCrLf & "    notify1.customer_id ""Notify1"" ,")




            strSQL.Append( "  CASE WHEN JOB_EXP.SAC_N1=0  THEN nvl( notify1.customer_name,TMPNOTIFY1.Customer_Name) ");
            strSQL.Append( " ELSE  'Same As Consignee' END  \"Notify1Name\",   ");



            //strSQL.Append(vbCrLf & " CASE WHEN JOB_EXP.SAC_N1=0  THEN notify1.customer_name")
            //strSQL.Append(vbCrLf & "  ELSE  'Same As Consignee' END  ""Notify1Name"",  ")





            //   strSQL.Append(vbCrLf & "    notify1.customer_name ""Notify1Name"" ,")
            strSQL.Append( "    NVL(job_exp.notify2_cust_mst_fk,TMPNOTIFY2.CUSTOMER_MST_PK) \"notify2_cust_mst_fk\", ");

            strSQL.Append( "      NVL(notify2.customer_id, TMPNOTIFY2.CUSTOMER_ID) Notify2,");
            //  strSQL.Append(vbCrLf & "    notify2.customer_id ""Notify2"",")

            strSQL.Append( "       CASE WHEN JOB_EXP.SAC_N2=0  THEN NVL( notify2.customer_name,TMPNOTIFY2.Customer_Name)");
            strSQL.Append( "   ELSE  'Same As Consignee' END  \"Notify2Name\", ");


            //strSQL.Append(vbCrLf & " CASE WHEN JOB_EXP.SAC_N2=0  THEN notify2.customer_name")
            //strSQL.Append(vbCrLf & "  ELSE  'Same As Consignee' END  ""Notify2Name"",  ")
            // strSQL.Append(vbCrLf & "    notify2.customer_name ""Notify2Name"",")
            strSQL.Append( "    job_exp.cb_agent_mst_fk, ");
            strSQL.Append( "    cbagnt.agent_id \"cbAgent\",");
            strSQL.Append( "    cbagnt.agent_name \"cbAgentName\",");
            strSQL.Append( "    job_exp.dp_agent_mst_fk, ");
            strSQL.Append( "    dpagnt.agent_id \"dpAgent\",");
            strSQL.Append( "    dpagnt.agent_name \"dpAgentName\",");
            strSQL.Append( "    job_exp.cl_agent_mst_fk, ");
            strSQL.Append( "    clagnt.agent_id \"clAgent\",");
            strSQL.Append( "    clagnt.agent_name \"clAgentName\",");
            strSQL.Append( "    job_exp.pol_agent_mst_fk, ");
            strSQL.Append( "    polagt.agent_id \"polAgent\",");
            strSQL.Append( "    polagt.agent_name \"polAgentName\",");
            strSQL.Append( "    job_exp.remarks,  ");
            strSQL.Append( "    job_exp.version_no,  ");
            strSQL.Append( "    job_exp.jobcard_date,");
            strSQL.Append( "    job_exp.ucr_no,");
            strSQL.Append( "    job_exp.cargo_move_fk,");
            strSQL.Append( "    job_exp.pymt_type,");
            strSQL.Append( "    job_exp.shipping_terms_mst_fk,");
            strSQL.Append( "    job_exp.insurance_amt,");
            strSQL.Append( "    job_exp.insurance_currency,");
            strSQL.Append( "    job_exp.commodity_group_fk,");
            strSQL.Append( "    comm.commodity_group_desc,");
            strSQL.Append( "    DPT.PORT_ID \"carrier_id\",");
            strSQL.Append( "    DPT.PORT_NAME \"carrier_name\",");
            strSQL.Append( "    DPT.PORT_MST_PK \"carrier_pk\",");
            strSQL.Append( "    carrier.vendor_id \"depot_id\",");
            strSQL.Append( "    carrier.vendor_name \"depot_name\",");
            strSQL.Append( "    carrier.vendor_mst_pk \"depot_pk\",");
            strSQL.Append( "    country.country_id \"country_id\",");
            strSQL.Append( "    country.country_name \"country_name\",");
            strSQL.Append( "    country.country_mst_pk \"country_mst_pk\",");
            strSQL.Append( "    job_exp.da_number \"da_number\",");
            strSQL.Append( "    job_exp.HBL_HAWB_FK, ");
            strSQL.Append( "    job_exp.MBL_MAWB_FK, ");
            strSQL.Append( "    job_exp.MASTER_JC_FK, ");
            strSQL.Append( "    mst.master_jc_ref_no, ");
            strSQL.Append( "    mst.MASTER_JC_DATE, ");
            strSQL.Append( "    job_exp.GOODS_DESCRIPTION,");
            strSQL.Append( "    job_exp.MARKS_NUMBERS,");
            strSQL.Append( "    job_exp.SHIPPING_INST_FLAG,");
            strSQL.Append( "    job_exp.RFS,");
            strSQL.Append( "    job_exp.CRQ,");
            strSQL.Append( "    job_exp.STF,");
            strSQL.Append( "    job_exp.SHIPPING_INST_DT,");
            strSQL.Append( "    job_exp.RFS_DATE,");
            strSQL.Append( "    job_exp.CRQ_DATE,");
            strSQL.Append( "    job_exp.STF_DATE,");
            strSQL.Append( "    job_exp.SURVEY_COMPLETED,");
            strSQL.Append( "    job_exp.SURVEY_REF_NR,");
            strSQL.Append( "    job_exp.SURVEY_DATE,");
            strSQL.Append( "    job_exp.SURVEYOR_FK \"Survey_PK\",");
            strSQL.Append( "    job_exp.SURVEY_REMARKS,");
            strSQL.Append( "    Surveyor.vendor_id,");
            strSQL.Append( "    Surveyor.vendor_name,");
            strSQL.Append( "    job_exp.sb_number,job_exp.sb_date, ");
            strSQL.Append( "    job_exp.cha_agent_mst_fk, ");
            strSQL.Append( "    CHAAGNT.VENDOR_ID \"CHAAgentID\",");
            strSQL.Append( "    CHAAGNT.VENDOR_NAME \"CHAAgentName\",job_exp.stuff_loc,");
            strSQL.Append( "    curr.currency_id,");
            if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "    HBL.HBL_STATUS , ");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "    HBL.HAWB_STATUS HBL_STATUS, ");
            }
            else if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    0 HBL_STATUS , ");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    0 HBL_STATUS , ");
            }
            else
            {
                strSQL.Append( "    HBL.HBL_STATUS , ");
            }

            strSQL.Append( "    job_exp.ADDVATOS_FLAG, bst.shipment_date, job_exp.LC_SHIPMENT, ");
            strSQL.Append( "    NVL(JOB_EXP.CHK_NOMINATED,0) CHK_NOMINATED,");
            strSQL.Append( "    NVL(JOB_EXP.CHK_CSR,1) CHK_CSR,");
            strSQL.Append( "    NVL(EMP.EMPLOYEE_MST_PK,NVL(SHP_SE.EMPLOYEE_MST_PK,0)) SALES_EXEC_FK,");
            strSQL.Append( "    NVL(EMP.EMPLOYEE_ID,SHP_SE.EMPLOYEE_ID) SALES_EXEC_ID,");
            strSQL.Append( "    NVL(EMP.EMPLOYEE_NAME,SHP_SE.EMPLOYEE_NAME) SALES_EXEC_NAME ,");
            strSQL.Append( "    job_exp.cc_req,job_exp.cc_ie,job_exp.PRC_FK,job_exp.ONC_FK,job_exp.PRC_MODE_FK,job_exp.ONC_MODE_FK,");
            strSQL.Append( "   JOB_EXP.CHA_AGENT_MST_FK,");
            strSQL.Append( "   CHAAGNT.VENDOR_ID \"CHAAgentID\",");
            strSQL.Append( "   CHAAGNT.VENDOR_NAME \"CHAAgentName\", ");

            strSQL.Append( "         JOB_EXP.PROCESS_TYPE,");
            strSQL.Append( "         JOB_EXP.BUSINESS_TYPE,");
            strSQL.Append( "         JOB_EXP.CARGO_TYPE,");
            strSQL.Append( "         JOB_EXP.WEIGHT_MASS,");
            if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "          HBL.HBL_REF_NO HBL_HAWB_REF_NO,");
                strSQL.Append( "         HBL.HBL_DATE HBL_HAWB_DATE,");
                strSQL.Append( "          MBL.MBL_REF_NO MBL_MAWB_REF_NO,");
                strSQL.Append( "         MBL.MBL_DATE MBL_MAWB_DATE,");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "          HBL.HAWB_REF_NO HBL_HAWB_REF_NO,");
                strSQL.Append( "          HBL.HAWB_DATE HBL_HAWB_DATE,");
                strSQL.Append( "          MBL.MAWB_REF_NO MBL_MAWB_REF_NO,");
                strSQL.Append( "          MBL.MAWB_DATE MBL_MAWB_DATE,");
            }
            else
            {
                strSQL.Append( "         JOB_EXP.HBL_HAWB_REF_NO,");
                strSQL.Append( "         JOB_EXP.HBL_HAWB_DATE,");
                strSQL.Append( "         JOB_EXP.MBL_MAWB_REF_NO,");
                strSQL.Append( "         JOB_EXP.MBL_MAWB_DATE,");
            }

            strSQL.Append( "         JOB_EXP.CLEARANCE_ADDRESS,");
            strSQL.Append( "         JOB_EXP.JC_AUTO_MANUAL, ");
            strSQL.Append( "         JOB_EXP.HBL_HAWB_SURRENDERED,");
            strSQL.Append( "         JOB_EXP.MBL_MAWB_SURRENDERED,");
            strSQL.Append( "         JOB_EXP.HBL_HAWB_SURRDT,");
            strSQL.Append( "         JOB_EXP.MBL_MAWB_SURRDT,");
            strSQL.Append( "         JOB_EXP.BASE_CURRENCY_MST_FK,");
            strSQL.Append( "         JOB_EXP.LC_NUMBER,");
            strSQL.Append( "         JOB_EXP.LC_DATE,");
            strSQL.Append( "         JOB_EXP.LC_EXPIRES_ON,");
            strSQL.Append( "         JOB_EXP.LC_CONS_BANK,");
            strSQL.Append( "         JOB_EXP.LC_REMARKS,");
            strSQL.Append( "         JOB_EXP.BRO_RECEIVED,");
            strSQL.Append( "         JOB_EXP.BRO_NUMBER,");
            strSQL.Append( "         JOB_EXP.BRO_DATE,");
            strSQL.Append( "         JOB_EXP.BRO_ISSUEDBY,");
            strSQL.Append( "         JOB_EXP.BRO_REMARKS,");
            strSQL.Append( "         JOB_EXP.PO_NUMBER,");
            strSQL.Append( "         JOB_EXP.PO_DATE,");
            strSQL.Append( "         JOB_EXP.ROUTING_INST,");
            strSQL.Append( "         JOB_EXP.PO_SEND_ON_DATE,");
            strSQL.Append( "         JOB_EXP.CHK_CAN,");
            strSQL.Append( "         JOB_EXP.CHK_DO,");
            strSQL.Append( "         JOB_EXP.CHK_PAY,");
            strSQL.Append( "         JOB_EXP.CHK_REC,");
            strSQL.Append( "         JOB_EXP.LINE_BKG_NR,");
            strSQL.Append( "         JOB_EXP.LINE_BKG_DT,");
            strSQL.Append( "         JOB_EXP.LINER_TERMS_FK,");
            strSQL.Append( "         JOB_EXP.WIN_UNIQ_REF_ID,");
            strSQL.Append( "         JOB_EXP.WIN_SEND_USER_NAME,");
            strSQL.Append( "         JOB_EXP.WIN_SEND_SECRET_KEY,");
            strSQL.Append( "         JOB_EXP.WIN_MEM_JOBREF_NR,");
            strSQL.Append( "         JOB_EXP.WIN_QUOT_REF_NR,");
            strSQL.Append( "         JOB_EXP.WIN_INCO_PLACE,");
            strSQL.Append( "         JOB_EXP.POO_FK,");
            strSQL.Append( "         JOB_EXP.WIN_CONSOL_REF_NR,");
            strSQL.Append( "         JOB_EXP.WIN_PICK_ONC_MOVE_FK,");
            strSQL.Append( "         JOB_EXP.WIN_CUTTOFF_DT,");
            strSQL.Append( "         NVL(AGT.AGENT_MST_PK,0) TARIFF_AGENT_MST_FK,");
            strSQL.Append( "         AGT.AGENT_ID,");
            strSQL.Append( "         AGT.AGENT_NAME,");
            strSQL.Append( "         NVL(job_exp.COLLECT_AGENT_FLAG,0) COLLECT_AGENT_FLAG,");
            strSQL.Append( "         JOB_EXP.WIN_CUTTOFF_TIME, JOB_EXP.CONTAINER_OWNER_TYPE_FK, ");
            strSQL.Append( "         JOB_EXP.SAC_N1, ");
            strSQL.Append( "        JOB_EXP.SAC_N2, ");
            strSQL.Append( "         JOB_EXP.SAC_N1_NAME, ");
            strSQL.Append( "        JOB_EXP.SAC_N2_NAME, ");
            strSQL.Append( "         JOB_EXP.STATUS ");
            strSQL.Append( "   FROM ");



            strSQL.Append( "   TEMP_CUSTOMER_TBL TMPNOTIFY2,");
            strSQL.Append( "  TEMP_CUSTOMER_TBL TMPNOTIFY1,");
            strSQL.Append( "  TEMP_CUSTOMER_TBL TEMP_CONS,");




            strSQL.Append( "    JOB_CARD_TRN job_exp,");
            strSQL.Append( "    BOOKING_MST_TBL bst,");
            strSQL.Append( "    port_mst_tbl POD,");
            strSQL.Append( "    port_mst_tbl POL,");
            strSQL.Append( "    customer_mst_tbl cust,");
            strSQL.Append( "    customer_mst_tbl consignee,");
            strSQL.Append( "    customer_mst_tbl shipper,");
            strSQL.Append( "    customer_mst_tbl notify1,");
            strSQL.Append( "    customer_mst_tbl notify2,");
            strSQL.Append( "    place_mst_tbl FRMPLC,");
            strSQL.Append( "    place_mst_tbl TOPLC,");
            strSQL.Append( "    PORT_MST_TBL POO,");
            strSQL.Append( "    PORT_MST_TBL PFD,");
            strSQL.Append( "    operator_mst_tbl oprator, AIRLINE_MST_TBL AMT, ");
            strSQL.Append( "    agent_mst_tbl clagnt, ");
            strSQL.Append( "    agent_mst_tbl dpagnt, ");
            strSQL.Append( "    agent_mst_tbl cbagnt, ");
            strSQL.Append( "    agent_mst_tbl polagt, ");
            strSQL.Append( "    VENDOR_MST_TBL chaagnt, ");
            strSQL.Append( "    commodity_group_mst_tbl comm, ");
            strSQL.Append( "    VESSEL_VOYAGE_TBL V,  ");
            strSQL.Append( "    VESSEL_VOYAGE_TRN VVT, ");
            strSQL.Append( "    PORT_MST_TBL DPT,");
            strSQL.Append( "    vendor_mst_tbl  carrier,");
            strSQL.Append( "    vendor_mst_tbl  Surveyor,");
            strSQL.Append( "    country_mst_tbl country,");
            if (Convert.ToInt32(BizType )== 2 & Convert.ToInt32(ProcessType )== 1)
            {
                strSQL.Append( "    master_jc_sea_exp_tbl mst,");
                strSQL.Append( "    hbl_exp_tbl hbl,");
                strSQL.Append( "    mbl_exp_tbl mbl,");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "    master_jc_air_exp_tbl mst,");
                strSQL.Append( "    hawb_exp_tbl hbl,");
                strSQL.Append( "    mawb_exp_tbl mbl,");
            }
            else if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    master_jc_sea_imp_tbl mst,");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    master_jc_air_imp_tbl mst,");
            }
            else
            {
                strSQL.Append( "    master_jc_sea_exp_tbl mst,");
                strSQL.Append( "    hbl_exp_tbl hbl,");
                strSQL.Append( "    mbl_exp_tbl mbl,");
            }
            strSQL.Append( "    AGENT_MST_TBL           AGT, ");
            strSQL.Append( "    currency_type_mst_tbl   curr,");
            strSQL.Append( "    EMPLOYEE_MST_TBL        EMP, ");
            strSQL.Append( "    EMPLOYEE_MST_TBL        SHP_SE ");
            strSQL.Append( " WHERE ");
            strSQL.Append( "    job_exp.JOB_CARD_TRN_PK = " + jobCardPK);
            strSQL.Append( "    AND job_exp.BOOKING_MST_FK           =  bst.booking_MST_pk(+)");
            strSQL.Append( "    AND job_exp.port_mst_pol_fk              =  pol.port_mst_pk");
            strSQL.Append( "    AND job_exp.port_mst_pod_fk              =  pod.port_mst_pk");
            strSQL.Append( "    AND job_exp.POO_FK             =  FRMPLC.place_pk(+)");
            strSQL.Append( "    AND job_exp.PFD_FK             =  TOPLC.place_pk(+)");
            strSQL.Append( "    AND job_exp.POO_FK             =  POO.PORT_MST_PK(+)");
            strSQL.Append( "    AND job_exp.PFD_FK             =  PFD.PORT_MST_PK(+)");
            strSQL.Append( "    AND job_exp.cust_customer_mst_fk         =  cust.customer_mst_pk(+) ");
            strSQL.Append( "    AND job_exp.CARRIER_MST_FK              =  oprator.operator_mst_pk(+) AND job_exp.CARRIER_MST_FK = AMT.AIRLINE_MST_PK(+) ");
            strSQL.Append( "    AND job_exp.shipper_cust_mst_fk      =  shipper.customer_mst_pk(+)");
            strSQL.Append( "    AND job_exp.consignee_cust_mst_fk    =  consignee.customer_mst_pk(+)");
            strSQL.Append( "    AND job_exp.notify1_cust_mst_fk      =  notify1.customer_mst_pk(+)");
            strSQL.Append( "    AND job_exp.Notify2_Cust_Mst_Fk      =  notify2.customer_mst_pk(+)");
            strSQL.Append( "    AND job_exp.cl_agent_mst_fk          =  clagnt.agent_mst_pk(+)");
            strSQL.Append( "    AND job_exp.cha_agent_mst_fk         =  CHAAGNT.VENDOR_MST_PK(+) ");
            strSQL.Append( "    AND job_exp.cb_agent_mst_fk          =  cbagnt.agent_mst_pk(+)");
            strSQL.Append( "    AND job_exp.pol_agent_mst_fk          =  polagt.agent_mst_pk(+)");
            strSQL.Append( "    AND job_exp.dp_agent_mst_fk          =  dpagnt.agent_mst_pk(+)");
            strSQL.Append( "    AND job_exp.commodity_group_fk       =  comm.commodity_group_pk(+)");
            strSQL.Append( "    AND JOB_EXP.TRANSPORTER_DEPOT_FK = DPT.PORT_MST_PK(+) ");
            strSQL.Append( "    AND job_exp.transporter_carrier_fk   =  carrier.vendor_mst_pk(+)");
            strSQL.Append( "    AND job_exp.surveyor_fk              =  Surveyor.vendor_mst_pk(+)");
            strSQL.Append( "    AND job_exp.country_origin_fk        =  country.country_mst_pk(+)");
            strSQL.Append( "    AND VVT.VESSEL_VOYAGE_TBL_FK         =  V.VESSEL_VOYAGE_TBL_PK(+)  ");
            strSQL.Append( "    AND JOB_EXP.VOYAGE_TRN_FK = VVT.VOYAGE_TRN_PK(+)");
            strSQL.Append( "    AND AGT.AGENT_MST_PK(+) = job_exp.TARIFF_AGENT_MST_FK");

            strSQL.Append( "    AND shipper.REP_EMP_MST_FK=SHP_SE.EMPLOYEE_MST_PK(+) ");
            strSQL.Append( "    AND JOB_EXP.EXECUTIVE_MST_FK=EMP.EMPLOYEE_MST_PK(+) ");
            strSQL.Append( "  AND job_exp.consignee_cust_mst_fk = TEMP_CONS.CUSTOMER_MST_PK(+)  ");
            strSQL.Append( "  and job_exp.notify1_cust_mst_fk=TMPNOTIFY1.CUSTOMER_MST_PK(+)  ");
            strSQL.Append( "  and job_exp.notify2_cust_mst_fk=TMPNOTIFY2.CUSTOMER_MST_PK(+) ");
            if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "    AND job_exp.MASTER_JC_FK     =  mst.master_jc_sea_exp_pk(+)");
                strSQL.Append( "    and hbl.hbl_exp_tbl_pk(+) = job_exp.HBL_HAWB_FK");
                strSQL.Append( "    and mbl.mbl_exp_tbl_pk(+) = job_exp.MBL_MAWB_FK");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 1)
            {
                strSQL.Append( "    AND job_exp.MASTER_JC_FK     =  mst.master_jc_air_exp_pk(+)");
                strSQL.Append( "    and hbl.hawb_exp_tbl_pk(+) = job_exp.HBL_HAWB_FK");
                strSQL.Append( "    and mbl.mawb_exp_tbl_pk(+) = job_exp.MBL_MAWB_FK");
            }
            else if (Convert.ToInt32(BizType) == 2 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    AND job_exp.MASTER_JC_FK     =  mst.master_jc_sea_imp_pk(+)");
            }
            else if (Convert.ToInt32(BizType) == 1 & Convert.ToInt32(ProcessType) == 2)
            {
                strSQL.Append( "    AND job_exp.MASTER_JC_FK     =  mst.master_jc_air_imp_pk(+)");
            }
            else
            {
                strSQL.Append( "    AND job_exp.MASTER_JC_FK     =  mst.master_jc_sea_exp_pk(+)");
                strSQL.Append( "    and hbl.hbl_exp_tbl_pk(+) = job_exp.HBL_HAWB_FK");
                strSQL.Append( "    and mbl.mbl_exp_tbl_pk(+) = job_exp.MBL_MAWB_FK");
            }

            strSQL.Append( "    and curr.currency_mst_pk(+) = job_exp.base_currency_mst_fk");
            WorkFlow objWF = new WorkFlow();
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public DataSet FetchJobForAgentRates(int JOB_CARD_PK)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet dsJob = new DataSet();
            objWF.OpenConnection();
            try
            {
                objWF.MyCommand = new OracleCommand();
                var _with90 = objWF.MyCommand;
                _with90.Connection = objWF.MyConnection;
                _with90.Parameters.Clear();
                _with90.Parameters.Add("JOB_CARD_TRN_PK_IN", JOB_CARD_PK).Direction = ParameterDirection.Input;
                _with90.Parameters.Add("FETCH_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dsJob = objWF.GetDataSet("AGENCY_MST_TBL_PKG", "FETCH_JOB_FOR_AGENT_RATES");
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
            return dsJob;
        }

        public bool IsJobByAgentTariff(int JOB_CARD_PK)
        {
            WorkFlow objWF = new WorkFlow();
            int _count = 0;
            objWF.OpenConnection();
            try
            {
                objWF.MyCommand = new OracleCommand();
                var _with91 = objWF.MyCommand;
                _with91.Connection = objWF.MyConnection;
                _with91.CommandType = CommandType.StoredProcedure;
                _with91.CommandText = objWF.MyUserName + ".AGENCY_MST_TBL_PKG.IS_JOB_BY_AGENT_TARIFF";
                _with91.Parameters.Clear();
                _with91.Parameters.Add("JOB_CARD_TRN_PK_IN", JOB_CARD_PK).Direction = ParameterDirection.Input;
                _with91.Parameters.Add("RETURN_VALUE", OracleDbType.Int32).Direction = ParameterDirection.Output;
                _with91.ExecuteScalar();
                _count = Convert.ToInt32(_with91.Parameters["RETURN_VALUE"].Value);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
            if (_count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        #endregion

        #region " Fetch Container data export"
        public DataSet FetchContainerDataExport(string jobCardPK = "0", string MJCPK = "")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                //by thiyagarajan for displaying container details in frmcargodetails.aspx which has link of booking sea.
                //26/2/08 
                strSQL.Append( "SELECT");
                strSQL.Append( "    JOB_TRN_CONT_pk,");
                strSQL.Append( "    container_number,");
                strSQL.Append( "    cont.container_type_mst_id,");
                strSQL.Append( "    container_type_mst_fk,");
                strSQL.Append( "    seal_number,");
                strSQL.Append( "    volume_in_cbm,");
                strSQL.Append( "    gross_weight,");
                strSQL.Append( "    net_weight,");
                strSQL.Append( "    chargeable_weight,");
                strSQL.Append( "    pack_type_mst_fk,");
                strSQL.Append( "    pack_count,");
                strSQL.Append( "    commodity_mst_fk,");
                if (string.IsNullOrEmpty(MJCPK))
                {
                    strSQL.Append( "    TO_CHAR(job_trn_cont.load_date ,DATETIMEFORMAT24) load_date ");
                    // for now..
                }
                else
                {
                    strSQL.Append( "    TO_CHAR(job_exp.departure_date ,DATETIMEFORMAT24) load_date ");
                }
                //Snigdharani - 21/08/2009
                strSQL.Append( "     , job_trn_cont.CONTAINER_PK CONTAINER_PK");
                //strSQL.Append(vbCrLf & "    job_trn_cont.load_date load_date ")
                strSQL.Append( "FROM");
                strSQL.Append( "    job_trn_cont job_trn_cont,");
                strSQL.Append( "    pack_type_mst_tbl pack,");
                strSQL.Append( "    commodity_mst_tbl comm,");
                strSQL.Append( "    container_type_mst_tbl cont,");
                strSQL.Append( "    JOB_CARD_TRN job_exp");
                strSQL.Append( "WHERE ");
                strSQL.Append( "    job_trn_cont.pack_type_mst_fk = pack.pack_type_mst_pk(+)");
                strSQL.Append( "    AND job_trn_cont.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.Append( "    AND job_trn_cont.commodity_mst_fk = comm.commodity_mst_pk(+)");
                strSQL.Append( "    AND job_trn_cont.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region " Fetch Container data export"
        public DataSet FetchContainerDataExp(string jobCardPK = "0", string MJCPK = "")
        {
            WorkFlow objWF = new WorkFlow();
            DataSet ds = new DataSet();

            try
            {
                objWF.OpenConnection();
                objWF.MyDataAdapter = new OracleDataAdapter();
                var _with92 = objWF.MyDataAdapter;
                _with92.SelectCommand = new OracleCommand();
                _with92.SelectCommand.Connection = objWF.MyConnection;
                _with92.SelectCommand.CommandText = objWF.MyUserName + ".JOB_CARD_TRN_PKG.FETCH_JOB_TRN_CONT";
                _with92.SelectCommand.CommandType = CommandType.StoredProcedure;
                _with92.SelectCommand.Parameters.Add("JOB_CARD_TRN_PK_IN", jobCardPK).Direction = ParameterDirection.Input;
                _with92.SelectCommand.Parameters.Add("JOB_CONT_CUT", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with92.Fill(ds);

                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }

        public DataSet FetchContainerDataExpBooking(string jobCardPK = "0", string MJCPK = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("SELECT JCNT.JOB_TRN_CONT_PK,");
                sb.Append("       JCNT.PALETTE_SIZE,");
                //AIR
                sb.Append("       (CASE WHEN JC.BUSINESS_TYPE=2 THEN JCNT.CONTAINER_NUMBER ELSE JCNT.ULD_NUMBER END) CONTAINER_NUMBER,");
                sb.Append("       (CASE");
                sb.Append("         WHEN JC.BUSINESS_TYPE = 2 THEN");
                sb.Append("          CON.CONTAINER_TYPE_MST_ID");
                sb.Append("         ELSE");
                sb.Append("          AFS.BREAKPOINT_ID");
                sb.Append("       END) CONTAINER_TYPE_MST_ID,");
                sb.Append("       (CASE");
                sb.Append("         WHEN JC.BUSINESS_TYPE = 2 THEN");
                sb.Append("          CON.CONTAINER_TYPE_MST_PK");
                sb.Append("         ELSE");
                sb.Append("          AFS.AIRFREIGHT_SLABS_TBL_PK");
                sb.Append("       END) CONTAINER_TYPE_MST_PK,");
                sb.Append("       JCNT.SEAL_NUMBER,");
                sb.Append("       JCNT.VOLUME_IN_CBM,");
                sb.Append("       JCNT.GROSS_WEIGHT,");
                sb.Append("       JCNT.NET_WEIGHT, ");
                //sea
                sb.Append("       JCNT.CHARGEABLE_WEIGHT,");
                sb.Append("       (SELECT ROWTOCOL('SELECT PT.PACK_TYPE_DESC FROM PACK_TYPE_MST_TBL PT WHERE PT.PACK_TYPE_MST_PK IN (");
                sb.Append("                     SELECT DISTINCT JTC.PACK_TYPE_FK FROM JOB_TRN_CONT JOB,JOB_TRN_COMMODITY JTC ");
                sb.Append("                     WHERE JOB.JOB_TRN_CONT_PK=JTC.JOB_TRN_CONT_FK ");
                sb.Append("                     AND JOB.JOB_TRN_CONT_PK=' ||");
                sb.Append("                        JCNT.JOB_TRN_CONT_PK || ')')");
                sb.Append("          FROM DUAL) PACK_TYPE_MST_FK,");
                sb.Append("       JCNT.PACK_COUNT,");
                sb.Append("       JCNT.COMMODITY_MST_FK,");

                sb.Append("       (SELECT ROWTOCOL('SELECT CMT.COMMODITY_NAME FROM JOB_TRN_COMMODITY J, COMMODITY_MST_TBL CMT  ");
                sb.Append("       WHERE J.COMMODITY_MST_FK=CMT.COMMODITY_MST_PK AND J.JOB_TRN_CONT_FK=' || ");
                sb.Append("       JCNT.JOB_TRN_CONT_PK || '') FROM DUAL)  FETCH_COMM, ");
                //sb.Append("       ' ' FETCH_COMM,") 'SEA
                if (string.IsNullOrEmpty(MJCPK))
                {
                    sb.Append("               TO_CHAR(JCNT.LOAD_DATE ,DATETIMEFORMAT24) LOAD_DATE,");
                }
                else
                {
                    sb.Append("               TO_CHAR(JC.DEPARTURE_DATE ,DATETIMEFORMAT24) LOAD_DATE,");
                }
                sb.Append("       (SELECT ROWTOCOL('SELECT J.COMMODITY_MST_FK FROM JOB_TRN_COMMODITY J WHERE J.JOB_TRN_CONT_FK=' ||");
                sb.Append("                        JCNT.JOB_TRN_CONT_PK || '')");
                sb.Append("          FROM DUAL) COMMODITY_MST_FKS,");
                sb.Append("       ");
                sb.Append("       JCNT.CONTAINER_PK");
                sb.Append("  FROM JOB_TRN_CONT           JCNT,");
                sb.Append("       PACK_TYPE_MST_TBL      PACK,");
                sb.Append("       CONTAINER_TYPE_MST_TBL CON,");
                sb.Append("       AIRFREIGHT_SLABS_TBL   AFS,");
                sb.Append("       COMMODITY_MST_TBL      COMM,");
                sb.Append("       JOB_CARD_TRN           JC");
                sb.Append(" WHERE JCNT.PACK_TYPE_MST_FK = PACK.PACK_TYPE_MST_PK(+)");
                sb.Append("   AND JCNT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK(+)");
                sb.Append("   AND JCNT.AIRFREIGHT_SLABS_TBL_FK = AFS.AIRFREIGHT_SLABS_TBL_PK(+)");
                sb.Append("   AND JCNT.COMMODITY_MST_FK = COMM.COMMODITY_MST_PK(+)");
                sb.Append("   AND JCNT.JOB_CARD_TRN_FK = JC.JOB_CARD_TRN_PK");
                sb.Append("   AND JC.JOB_CARD_TRN_PK = " + jobCardPK);

                //strSQL.Append(vbCrLf & "SELECT")
                //strSQL.Append(vbCrLf & "    JOB_TRN_CONT_pk,")
                //strSQL.Append(vbCrLf & "    container_number,")
                //strSQL.Append(vbCrLf & "    cont.container_type_mst_id,")
                //strSQL.Append(vbCrLf & "    container_type_mst_fk,")
                //strSQL.Append(vbCrLf & "    seal_number,")
                //strSQL.Append(vbCrLf & "    volume_in_cbm,")
                //strSQL.Append(vbCrLf & "    gross_weight,")
                //strSQL.Append(vbCrLf & "    net_weight,")
                //strSQL.Append(vbCrLf & "    chargeable_weight,")
                //'strSQL.Append(vbCrLf & "    pack_type_mst_fk,")
                //strSQL.Append(vbCrLf & "    (SELECT ROWTOCOL('SELECT PT.PACK_TYPE_DESC FROM PACK_TYPE_MST_TBL PT WHERE PT.PACK_TYPE_MST_PK IN (     SELECT DISTINCT JC.PACK_TYPE_FK FROM job_trn_cont JOB,JOB_TRN_COMMODITY JC      WHERE JOB.JOB_TRN_CONT_PK=JC.JOB_TRN_CONT_FK      AND JOB.JOB_TRN_CONT_PK=' || ")
                //strSQL.Append(vbCrLf & "    JOB_TRN_CONT.JOB_TRN_CONT_PK || ')') ")
                //strSQL.Append(vbCrLf & "    FROM DUAL) pack_type_mst_fk,")
                //strSQL.Append(vbCrLf & "    pack_count,")
                //strSQL.Append(vbCrLf & "    commodity_mst_fk,")
                //strSQL.Append(vbCrLf & "    ' ' fetch_comm,") 'added by surya rasad for implementing multiple commodities
                //If MJCPK = "" Then
                //    strSQL.Append(vbCrLf & "    TO_CHAR(job_trn_cont.load_date ,DATETIMEFORMAT24) load_date, ") ' for now..
                //Else
                //    strSQL.Append(vbCrLf & "    TO_CHAR(job_exp.departure_date ,DATETIMEFORMAT24) load_date, ")
                //End If
                //'strSQL.Append(vbCrLf & "     COMMODITY_MST_FKS ")
                //strSQL.Append(vbCrLf & "    (SELECT ROWTOCOL('SELECT J.COMMODITY_MST_FK FROM JOB_TRN_COMMODITY J WHERE J.JOB_TRN_CONT_FK=' || ")
                //strSQL.Append(vbCrLf & "    JOB_TRN_CONT.JOB_TRN_CONT_PK || '') ")
                //strSQL.Append(vbCrLf & "    FROM DUAL)  COMMODITY_MST_FKS ")
                //strSQL.Append(vbCrLf & "     , job_trn_cont.CONTAINER_PK CONTAINER_PK")
                //'strSQL.Append(vbCrLf & "    job_trn_cont.load_date load_date ")
                //strSQL.Append(vbCrLf & "FROM")
                //strSQL.Append(vbCrLf & "    job_trn_cont job_trn_cont,")
                //strSQL.Append(vbCrLf & "    pack_type_mst_tbl pack,")
                //strSQL.Append(vbCrLf & "    commodity_mst_tbl comm,")
                //strSQL.Append(vbCrLf & "    container_type_mst_tbl cont,")
                //strSQL.Append(vbCrLf & "    JOB_CARD_TRN job_exp")
                //strSQL.Append(vbCrLf & "WHERE ")
                //strSQL.Append(vbCrLf & "    job_trn_cont.pack_type_mst_fk = pack.pack_type_mst_pk(+)")
                //strSQL.Append(vbCrLf & "    AND job_trn_cont.container_type_mst_fk = cont.container_type_mst_pk(+)")
                //strSQL.Append(vbCrLf & "    AND job_trn_cont.commodity_mst_fk = comm.commodity_mst_pk(+)")
                //strSQL.Append(vbCrLf & "    AND job_trn_cont.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK")
                //strSQL.Append(vbCrLf & "    AND job_exp.JOB_CARD_TRN_PK =" & jobCardPK)

                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Frieght Element"
        public DataSet FetchCostDet(int jobcardpk)
        {
            try
            {
                WorkFlow objWF = new WorkFlow();
                StringBuilder sb = new StringBuilder(5000);
                sb.Append("SELECT JOBCOST.JOB_TRN_COST_PK");
                sb.Append("  FROM JOB_CARD_TRN JOB,");
                sb.Append("       JOB_TRN_COST JOBCOST,");
                sb.Append("       INV_SUPPLIER_TBL     INV,");
                sb.Append("       INV_SUPPLIER_TRN_TBL INVTRN");
                sb.Append(" WHERE JOB.JOB_CARD_TRN_PK = JOBCOST.JOB_CARD_TRN_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + jobcardpk);
                sb.Append("   AND INVTRN.JOB_TRN_EST_FK = JOBCOST.JOB_TRN_COST_PK");
                sb.Append("   AND INV.INV_SUPPLIER_PK = INVTRN.INV_SUPPLIER_TBL_FK");
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchFret(int jobcardpk)
        {
            try
            {
                string strsql = null;
                WorkFlow objWF = new WorkFlow();
                ///strsql = "select * from  CONSOL_INVOICE_TRN_TBl where JOB_CARD_FK = " & jobcardpk & " AND FRT_OTH_ELEMENT = 1"
                strsql = "select con.FRT_OTH_ELEMENT_FK,cont.container_type_mst_pk from  CONSOL_INVOICE_TRN_TBl con , ";
                strsql = strsql  + " job_trn_fd job_trn_fd, container_type_mst_tbl cont ";
                strsql = strsql  + " where con.FRT_OTH_ELEMENT = 1 AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)";
                strsql = strsql  + " and con.frt_oth_element_fk=job_trn_fd.freight_element_mst_fk ";
                strsql = strsql  + "  and con.JOB_CARD_FK = " + jobcardpk;
                strsql = strsql  + " and con.consol_invoice_trn_pk=job_trn_fd.consol_invoice_trn_fk ";
                return objWF.GetDataSet(strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchAgentFret(int jobcardpk)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            try
            {
                sb.Append("SELECT INVTRN.COST_FRT_ELEMENT_FK, CONT.CONTAINER_TYPE_MST_PK");
                sb.Append("  FROM INV_AGENT_TBL     INV,");
                sb.Append("       INV_AGENT_TRN_TBL INVTRN,");
                sb.Append("       job_trn_fd        JOB_TRN_FD,");
                sb.Append("       CONTAINER_TYPE_MST_TBL    CONT");
                sb.Append(" WHERE INVTRN.COST_FRT_ELEMENT = 2");
                sb.Append("   AND JOB_TRN_FD.CONTAINER_TYPE_MST_FK = CONT.CONTAINER_TYPE_MST_PK(+)");
                sb.Append("   AND INV.JOB_CARD_FK = JOB_TRN_FD.JOB_CARD_TRN_FK");
                sb.Append("   AND INV.INV_AGENT_PK = INVTRN.INV_AGENT_FK");
                sb.Append("   AND INVTRN.COST_FRT_ELEMENT_FK = JOB_TRN_FD.FREIGHT_ELEMENT_MST_FK");
                sb.Append("   AND INV.JOB_CARD_FK = " + jobcardpk);
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " Fetch Freight data export"
        //added by manoharan 2/11/2006 for disable the entry in Fre. Data when already invoiced 

        public DataSet FetchFreDet(string jcpk)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            try
            {
                strSQL.Append( "SELECT");
                strSQL.Append( "    job_trn_fd.invoice_tbl_fk,");
                strSQL.Append( "    job_trn_fd.inv_agent_trn_fk,");
                strSQL.Append( "    job_trn_fd.consol_invoice_trn_fk");
                strSQL.Append( "    FROM");
                strSQL.Append( "    job_trn_fd job_trn_fd,");
                strSQL.Append( "    container_type_mst_tbl cont,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    freight_element_mst_tbl freight,");
                strSQL.Append( "    JOB_CARD_TRN job_exp");
                strSQL.Append( "    WHERE");
                strSQL.Append( "    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.Append( "    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk");
                strSQL.Append( "    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jcpk);
                strSQL.Append( "    ORDER BY cont.container_type_mst_id,freight.freight_element_id ");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        public DataSet FetchFreightDataExp(string jobCardPK = "0", Int64 jobProfit = 0, string BaseCurrFk = "0", Int64 BizType = 0, Int64 CargoType = 0)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( " SELECT QRY.JOB_TRN_FD_PK,");
                strSQL.Append( " QRY.CONTAINER_TYPE_MST_FK,");
                strSQL.Append( " QRY.CONTAINER_TYPE_MST_ID,");
                strSQL.Append( " QRY.FREIGHT_ELEMENT_ID,");
                strSQL.Append( " QRY.FREIGHT_ELEMENT_NAME,");
                strSQL.Append( " QRY.FREIGHT_ELEMENT_MST_PK,");
                strSQL.Append( " QRY.BASIS,");
                strSQL.Append( " QRY.QUANTITY,");
                strSQL.Append( " QRY.FREIGHT_TYPE,");
                strSQL.Append( " QRY.LOCATION_MST_FK,");
                strSQL.Append( " QRY.LOCATION_ID,");
                strSQL.Append( " QRY.FRTPAYER_CUST_MST_FK,");
                strSQL.Append( " QRY.CUSTOMER_ID,");
                strSQL.Append( " QRY.CURRENCY_MST_FK,");
                strSQL.Append( " QRY.RATEPERBASIS,");
                strSQL.Append( " QRY.FREIGHT_AMT,");
                strSQL.Append( " QRY.ROE,");
                strSQL.Append( " QRY.TOTAL_AMT,");
                strSQL.Append( " QRY.\"Delete\",");
                strSQL.Append( " QRY.\"Print\",");
                strSQL.Append( " QRY.CREDIT,");
                strSQL.Append( " QRY.DIMENTION_ID, ");
                strSQL.Append( " QRY.CHARGEABLE_WEIGHT, ");
                strSQL.Append( " QRY.VOLUME_IN_CBM ");

                strSQL.Append( " FROM(");

                strSQL.Append( " SELECT Q.* FROM (");
                strSQL.Append( " SELECT");
                strSQL.Append( "    JOB_TRN_FD_PK,\t");

                if (BizType == 1)
                {
                    strSQL.Append( "    0 CONTAINER_TYPE_MST_FK,");
                    strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.Append( "    COMM.COMMODITY_MST_PK CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.Append( "    JOB_TRN_FD.CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    cont.CONTAINER_TYPE_MST_ID,");
                    }
                }

                strSQL.Append( "    freight.freight_element_id,");
                strSQL.Append( "    freight.freight_element_name,");
                strSQL.Append( "    freight.freight_element_mst_pk,\t");

                if (BizType == 1)
                {
                    strSQL.Append( "    DECODE(job_trn_fd.basis,0,' ',1,'%',2,'Flat rate',3,'Kgs',4,'Unit') basis,");
                    //strSQL.Append(vbCrLf & "    job_trn_fd.basis,")
                }
                else
                {
                    strSQL.Append( "    job_trn_fd.basis,");
                }

                strSQL.Append( "    job_trn_fd.quantity,");
                if (jobProfit == 1)
                {
                    strSQL.Append( "   JOB_TRN_FD.FREIGHT_TYPE,");
                }
                else
                {
                    strSQL.Append( "   DECODE(JOB_TRN_FD.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') FREIGHT_TYPE,");
                }
                strSQL.Append( "    job_trn_fd.location_mst_fk, ");
                strSQL.Append( "    lmt.location_id ,");
                strSQL.Append( "    job_trn_fd.frtpayer_cust_mst_fk,");
                strSQL.Append( "     NVL(cmt.customer_id,TEMP_CUST.CUSTOMER_ID) AS customer_id, ");
                //   strSQL.Append(vbCrLf & "    cmt.customer_id, ")
                //strSQL.Append(vbCrLf & "    curr.currency_id currency_mst_fk,")
                strSQL.Append( "    job_trn_fd.Currency_Mst_Fk,");
                strSQL.Append( "  nvl(job_trn_fd.Rateperbasis, 0) Rateperbasis,");
                strSQL.Append( "  nvl(job_trn_fd.freight_amt, 0) freight_amt,");
                if (Convert.ToInt32(BaseCurrFk )!= 0)
                {
                    strSQL.Append("       NVL(GET_EX_RATE(job_trn_fd.CURRENCY_MST_FK, " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0) AS ROE,");
                    strSQL.Append( "    (JOB_TRN_FD.FREIGHT_AMT* NVL(GET_EX_RATE(job_trn_fd.CURRENCY_MST_FK, " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0)) total_amt,");
                }
                else
                {
                    strSQL.Append( "    job_trn_fd.exchange_rate AS ROE ,");
                    strSQL.Append( "    (JOB_TRN_FD.FREIGHT_AMT*JOB_TRN_FD.EXCHANGE_RATE) total_amt,");
                }
                strSQL.Append( "    'false' as \"Delete\", job_trn_fd.PRINT_ON_MBL \"Print\",FREIGHT.Credit , dmt.dimention_id, ");

                if (CargoType == 4)
                {
                    strSQL.Append( " CNT.CHARGEABLE_WEIGHT, CNT.VOLUME_IN_CBM ");
                }
                else
                {
                    strSQL.Append( " 0 CHARGEABLE_WEIGHT, 0 VOLUME_IN_CBM ");
                }

                strSQL.Append( "    FROM");
                strSQL.Append( "  TEMP_CUSTOMER_TBL TEMP_CUST,");
                strSQL.Append( "    JOB_TRN_FD job_trn_fd,");
                strSQL.Append( "    container_type_mst_tbl cont,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    freight_element_mst_tbl freight,");
                strSQL.Append( "    parameters_tbl prm,");
                strSQL.Append( "    JOB_CARD_trn job_exp,");
                strSQL.Append( "    location_mst_tbl lmt,");
                strSQL.Append( "    customer_mst_tbl cmt, dimention_unit_mst_tbl dmt");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( ", JOB_TRN_CONT CNT, COMMODITY_MST_TBL COMM ");
                }

                strSQL.Append( "    WHERE");
                strSQL.Append( "    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.Append( "    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk");
                strSQL.Append( "    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk");
                strSQL.Append( "    AND job_trn_fd.freight_element_mst_fk = prm.frt_bof_fk");
                strSQL.Append( "   AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+)");
                strSQL.Append( "   AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
                strSQL.Append( "  AND job_trn_fd.Frtpayer_Cust_Mst_Fk=TEMP_CUST.CUSTOMER_MST_PK(+) ");
                strSQL.Append( "    and  dmt.dimention_unit_mst_pk(+) = job_trn_fd.basis");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.Append( "    AND NVL(job_trn_fd.SERVICE_TYPE_FLAG,0) <>1");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( "    AND COMM.COMMODITY_MST_PK = CNT.COMMODITY_MST_FK ");
                    strSQL.Append( "    AND JOB_EXP.JOB_CARD_TRN_PK = cnt.job_card_trn_fk(+) AND CNT.BASIS_FK = JOB_TRN_FD.BASIS ");
                }

                strSQL.Append( "    ) Q");

                strSQL.Append( " union all ");

                strSQL.Append( "  SELECT Q1.* FROM (");
                strSQL.Append( " SELECT");
                strSQL.Append( "    JOB_TRN_FD_PK,\t");

                if (BizType == 1)
                {
                    strSQL.Append( "    0 CONTAINER_TYPE_MST_FK,");
                    strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.Append( "    COMM.COMMODITY_MST_PK CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.Append( "    JOB_TRN_FD.CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    cont.CONTAINER_TYPE_MST_ID,");
                    }
                }

                strSQL.Append( "    freight.freight_element_id,");
                strSQL.Append( "    freight.freight_element_name,");
                strSQL.Append( "    freight.freight_element_mst_pk,\t");

                if (BizType == 1)
                {
                    strSQL.Append( "    DECODE(job_trn_fd.basis,0,' ',1,'%',2,'Flat rate',3,'Kgs',4,'Unit') basis,");
                    //strSQL.Append(vbCrLf & "    job_trn_fd.basis,")
                }
                else
                {
                    strSQL.Append( "    job_trn_fd.basis,");
                }

                strSQL.Append( "    job_trn_fd.quantity,");
                if (jobProfit == 1)
                {
                    strSQL.Append( "   JOB_TRN_FD.FREIGHT_TYPE,");
                }
                else
                {
                    strSQL.Append( "   DECODE(JOB_TRN_FD.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') FREIGHT_TYPE,");
                }
                strSQL.Append( "    job_trn_fd.location_mst_fk, ");
                strSQL.Append( "    lmt.location_id ,");
                strSQL.Append( "    job_trn_fd.frtpayer_cust_mst_fk,");
                strSQL.Append( "   NVL(cmt.customer_id,TEMP_CUST.CUSTOMER_ID) AS customer_id, ");
                //  strSQL.Append(vbCrLf & "    cmt.customer_id, ")
                //strSQL.Append(vbCrLf & "    curr.currency_id currency_mst_fk,")
                strSQL.Append( "    job_trn_fd.Currency_Mst_Fk,");
                strSQL.Append( "  nvl(job_trn_fd.Rateperbasis, 0) Rateperbasis,");
                strSQL.Append( "  nvl(job_trn_fd.freight_amt, 0) freight_amt,");
                if (Convert.ToInt32(BaseCurrFk) != 0)
                {
                    strSQL.Append("        NVL(GET_EX_RATE(job_trn_fd.CURRENCY_MST_FK, " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0) AS ROE,");
                    strSQL.Append( "    (JOB_TRN_FD.FREIGHT_AMT* NVL(GET_EX_RATE(job_trn_fd.CURRENCY_MST_FK, " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0)) total_amt,");
                }
                else
                {
                    strSQL.Append( "    job_trn_fd.exchange_rate AS ROE ,");
                    strSQL.Append( "    (JOB_TRN_FD.FREIGHT_AMT*JOB_TRN_FD.EXCHANGE_RATE) total_amt,");
                }

                strSQL.Append( "    'false' as \"Delete\", job_trn_fd.PRINT_ON_MBL \"Print\",freight.Credit,dmt.dimention_id, ");

                if (CargoType == 4)
                {
                    strSQL.Append( " CNT.CHARGEABLE_WEIGHT, CNT.VOLUME_IN_CBM ");
                }
                else
                {
                    strSQL.Append( " 0 CHARGEABLE_WEIGHT, 0 VOLUME_IN_CBM ");
                }

                strSQL.Append( "    FROM");
                strSQL.Append( "  TEMP_CUSTOMER_TBL TEMP_CUST,");
                strSQL.Append( "    JOB_TRN_FD job_trn_fd,");
                strSQL.Append( "    container_type_mst_tbl cont,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    freight_element_mst_tbl freight,");
                strSQL.Append( "    parameters_tbl prm,");
                strSQL.Append( "    JOB_CARD_trn job_exp,");
                strSQL.Append( "    location_mst_tbl lmt,");
                strSQL.Append( "    customer_mst_tbl cmt,dimention_unit_mst_tbl dmt");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( ", JOB_TRN_CONT CNT, COMMODITY_MST_TBL COMM ");
                }

                strSQL.Append( "    WHERE");
                strSQL.Append( "    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.Append( "    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk");
                strSQL.Append( "    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk");
                strSQL.Append( "    AND job_trn_fd.freight_element_mst_fk not in  prm.frt_bof_fk");
                strSQL.Append( "   AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+)");
                strSQL.Append( "   AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
                strSQL.Append( "  AND job_trn_fd.Frtpayer_Cust_Mst_Fk=TEMP_CUST.CUSTOMER_MST_PK(+) ");
                strSQL.Append( "    and  dmt.dimention_unit_mst_pk(+) = job_trn_fd.basis");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.Append( "    AND NVL(job_trn_fd.SERVICE_TYPE_FLAG,0) <>1");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( "    AND COMM.COMMODITY_MST_PK = CNT.COMMODITY_MST_FK ");
                    strSQL.Append( "    AND JOB_EXP.JOB_CARD_TRN_PK = cnt.job_card_trn_fk(+) AND CNT.BASIS_FK = JOB_TRN_FD.BASIS ");
                }

                strSQL.Append( "    ) Q1");
                strSQL.Append( "   )Qry,freight_element_mst_tbl femt,container_type_mst_tbl ctmt");
                strSQL.Append( "   WHERE qry.container_type_mst_fk=ctmt.CONTAINER_TYPE_MST_PK(+)");
                strSQL.Append( "   AND qry.freight_element_mst_pk=femt.freight_element_mst_pk");
                strSQL.Append( "   ORDER BY QRY.BASIS, ctmt.preferences,femt.preference");
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet FetchFreightDataExpForAgent(string jobCardPK = "0", string BaseCurrFk = "0", Int64 BizType = 0, Int64 CargoType = 0)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.AppendLine(" SELECT QRY.JOB_TRN_FD_PK,");
                strSQL.AppendLine(" QRY.CONTAINER_TYPE_MST_FK,");
                strSQL.AppendLine(" QRY.CONTAINER_TYPE_MST_ID,");
                strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_ID,");
                strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_NAME,");
                strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_MST_PK,");
                strSQL.AppendLine(" QRY.BASIS,");
                strSQL.AppendLine(" QRY.QUANTITY,");
                strSQL.AppendLine(" QRY.FREIGHT_TYPE,");
                strSQL.AppendLine(" QRY.LOCATION_MST_FK,");
                strSQL.AppendLine(" QRY.LOCATION_ID,");
                strSQL.AppendLine(" QRY.FRTPAYER_CUST_MST_FK,");
                strSQL.AppendLine(" QRY.CUSTOMER_ID,");
                strSQL.AppendLine(" QRY.CURRENCY_MST_FK,");
                strSQL.AppendLine(" QRY.RATEPERBASIS,");
                strSQL.AppendLine(" QRY.FREIGHT_AMT,");
                strSQL.AppendLine(" QRY.ROE,");
                strSQL.AppendLine(" QRY.TOTAL_AMT,");
                strSQL.AppendLine(" QRY.\"Delete\",");
                strSQL.AppendLine(" QRY.\"Print\",");
                strSQL.AppendLine(" QRY.CREDIT,");
                strSQL.AppendLine(" QRY.DIMENTION_ID, ");
                strSQL.AppendLine(" QRY.CHARGEABLE_WEIGHT, ");
                strSQL.AppendLine(" QRY.VOLUME_IN_CBM ");

                strSQL.AppendLine(" FROM(");

                strSQL.AppendLine(" SELECT Q.* FROM (");
                strSQL.AppendLine(" SELECT");
                strSQL.AppendLine("    JOB_TRN_FD_PK,\t");

                if (BizType == 1)
                {
                    strSQL.AppendLine("    0 CONTAINER_TYPE_MST_FK,");
                    strSQL.AppendLine("    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.AppendLine("    COMM.COMMODITY_MST_PK CONTAINER_TYPE_MST_FK,");
                        strSQL.AppendLine("    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.AppendLine("    JOB_TRN_FD.CONTAINER_TYPE_MST_FK,");
                        strSQL.AppendLine("    cont.CONTAINER_TYPE_MST_ID,");
                    }
                }

                strSQL.AppendLine("    freight.freight_element_id,");
                strSQL.AppendLine("    freight.freight_element_name,");
                strSQL.AppendLine("    freight.freight_element_mst_pk,\t");

                if (BizType == 1)
                {
                    strSQL.AppendLine("    DECODE(job_trn_fd.basis,0,' ',1,'%',2,'Flat rate',3,'Kgs',4,'Unit') basis,");
                    //strSQL.AppendLine("    job_trn_fd.basis,")
                }
                else
                {
                    strSQL.AppendLine("    job_trn_fd.basis,");
                }

                strSQL.AppendLine("    job_trn_fd.quantity,");
                strSQL.AppendLine("   CASE WHEN FREIGHT.FREIGHT_ELEMENT_ID = 'THD' THEN 'Collect' ");
                strSQL.AppendLine("   ELSE DECODE(JOB_TRN_FD.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') ");
                strSQL.AppendLine("  END FREIGHT_TYPE, ");
                strSQL.AppendLine("    job_trn_fd.location_mst_fk, ");
                strSQL.AppendLine("    lmt.location_id ,");
                strSQL.AppendLine("    job_trn_fd.frtpayer_cust_mst_fk,");
                strSQL.AppendLine("    cmt.customer_id, ");
                strSQL.AppendLine("    NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk) Currency_Mst_Fk,");
                strSQL.AppendLine("  nvl(job_trn_fd.AGENT_RATEPERBASIS,job_trn_fd.Rateperbasis) Rateperbasis,");
                strSQL.AppendLine("  nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt) freight_amt,");
                if (Convert.ToInt32(BaseCurrFk) != 0)
                {
                    strSQL.AppendLine("       NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0) AS ROE,");
                    strSQL.AppendLine("    (nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt)* NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0)) total_amt,");
                }
                else
                {
                    strSQL.AppendLine("    job_trn_fd.exchange_rate AS ROE ,");
                    strSQL.AppendLine("    (JOB_TRN_FD.FREIGHT_AMT*JOB_TRN_FD.EXCHANGE_RATE) total_amt,");
                }
                strSQL.AppendLine("    'false' as \"Delete\", job_trn_fd.PRINT_ON_MBL \"Print\",FREIGHT.Credit , dmt.dimention_id, ");

                if (CargoType == 4)
                {
                    strSQL.AppendLine(" CNT.CHARGEABLE_WEIGHT, CNT.VOLUME_IN_CBM ");
                }
                else
                {
                    strSQL.AppendLine(" 0 CHARGEABLE_WEIGHT, 0 VOLUME_IN_CBM ");
                }

                strSQL.AppendLine("    FROM");
                strSQL.AppendLine("    JOB_TRN_FD job_trn_fd,");
                strSQL.AppendLine("    container_type_mst_tbl cont,");
                strSQL.AppendLine("    currency_type_mst_tbl curr,");
                strSQL.AppendLine("    freight_element_mst_tbl freight,");
                strSQL.AppendLine("    parameters_tbl prm,");
                strSQL.AppendLine("    JOB_CARD_trn job_exp,");
                strSQL.AppendLine("    location_mst_tbl lmt,");
                strSQL.AppendLine("    customer_mst_tbl cmt, dimention_unit_mst_tbl dmt");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.AppendLine(", JOB_TRN_CONT CNT, COMMODITY_MST_TBL COMM ");
                }

                strSQL.AppendLine("    WHERE");
                strSQL.AppendLine("    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.AppendLine("    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.AppendLine("    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk");
                strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk");
                strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk = prm.frt_bof_fk");
                strSQL.AppendLine("   AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+)");
                strSQL.AppendLine("   AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
                strSQL.AppendLine("    and  dmt.dimention_unit_mst_pk(+) = job_trn_fd.basis");
                strSQL.AppendLine("    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.AppendLine("    AND NVL(job_trn_fd.SERVICE_TYPE_FLAG,0) <>1");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.AppendLine("    AND COMM.COMMODITY_MST_PK = CNT.COMMODITY_MST_FK ");
                    strSQL.AppendLine("    AND JOB_EXP.JOB_CARD_TRN_PK = cnt.job_card_trn_fk(+) ");
                }

                strSQL.AppendLine("    ) Q");

                strSQL.AppendLine(" union all ");

                strSQL.AppendLine("  SELECT Q1.* FROM (");
                strSQL.AppendLine(" SELECT");
                strSQL.AppendLine("    JOB_TRN_FD_PK,\t");

                if (BizType == 1)
                {
                    strSQL.AppendLine("    0 CONTAINER_TYPE_MST_FK,");
                    strSQL.AppendLine("    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.AppendLine("    COMM.COMMODITY_MST_PK CONTAINER_TYPE_MST_FK,");
                        strSQL.AppendLine("    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.AppendLine("    JOB_TRN_FD.CONTAINER_TYPE_MST_FK,");
                        strSQL.AppendLine("    cont.CONTAINER_TYPE_MST_ID,");
                    }
                }

                strSQL.AppendLine("    freight.freight_element_id,");
                strSQL.AppendLine("    freight.freight_element_name,");
                strSQL.AppendLine("    freight.freight_element_mst_pk,\t");

                if (BizType == 1)
                {
                    strSQL.AppendLine("    DECODE(job_trn_fd.basis,0,' ',1,'%',2,'Flat rate',3,'Kgs',4,'Unit') basis,");
                    //strSQL.AppendLine("    job_trn_fd.basis,")
                }
                else
                {
                    strSQL.AppendLine("    job_trn_fd.basis,");
                }

                strSQL.AppendLine("    job_trn_fd.quantity,");
                strSQL.AppendLine("   CASE WHEN FREIGHT.FREIGHT_ELEMENT_ID = 'THD' THEN 'Collect' ");
                strSQL.AppendLine("   ELSE DECODE(JOB_TRN_FD.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') ");
                strSQL.AppendLine("  END FREIGHT_TYPE, ");
                strSQL.AppendLine("    job_trn_fd.location_mst_fk, ");
                strSQL.AppendLine("    lmt.location_id ,");
                strSQL.AppendLine("    job_trn_fd.frtpayer_cust_mst_fk,");
                strSQL.AppendLine("    cmt.customer_id, ");
                //strSQL.AppendLine("    curr.currency_id currency_mst_fk,")
                strSQL.AppendLine("    NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk) Currency_Mst_Fk,");
                strSQL.AppendLine("  nvl(job_trn_fd.AGENT_RATEPERBASIS,job_trn_fd.Rateperbasis) Rateperbasis,");
                strSQL.AppendLine("  nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt) freight_amt,");
                if (Convert.ToInt32(BaseCurrFk) != 0)
                {
                    strSQL.AppendLine("       NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0) AS ROE,");
                    strSQL.AppendLine("    (nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt)* NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " + BaseCurrFk + ", job_exp.JOBCARD_DATE),0)) total_amt,");
                }
                else
                {
                    strSQL.AppendLine("    job_trn_fd.exchange_rate AS ROE ,");
                    strSQL.AppendLine("    (JOB_TRN_FD.FREIGHT_AMT*JOB_TRN_FD.EXCHANGE_RATE) total_amt,");
                }

                strSQL.AppendLine("    'false' as \"Delete\", job_trn_fd.PRINT_ON_MBL \"Print\",freight.Credit,dmt.dimention_id, ");

                if (CargoType == 4)
                {
                    strSQL.AppendLine(" CNT.CHARGEABLE_WEIGHT, CNT.VOLUME_IN_CBM ");
                }
                else
                {
                    strSQL.AppendLine(" 0 CHARGEABLE_WEIGHT, 0 VOLUME_IN_CBM ");
                }

                strSQL.AppendLine("    FROM");
                strSQL.AppendLine("    JOB_TRN_FD job_trn_fd,");
                strSQL.AppendLine("    container_type_mst_tbl cont,");
                strSQL.AppendLine("    currency_type_mst_tbl curr,");
                strSQL.AppendLine("    freight_element_mst_tbl freight,");
                strSQL.AppendLine("    parameters_tbl prm,");
                strSQL.AppendLine("    JOB_CARD_trn job_exp,");
                strSQL.AppendLine("    location_mst_tbl lmt,");
                strSQL.AppendLine("    customer_mst_tbl cmt,dimention_unit_mst_tbl dmt");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.AppendLine(", JOB_TRN_CONT CNT, COMMODITY_MST_TBL COMM ");
                }

                strSQL.AppendLine("    WHERE");
                strSQL.AppendLine("    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.AppendLine("    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)");
                strSQL.AppendLine("    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk");
                strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk");
                strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk not in  prm.frt_bof_fk");
                strSQL.AppendLine("   AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+)");
                strSQL.AppendLine("   AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
                strSQL.AppendLine("    and  dmt.dimention_unit_mst_pk(+) = job_trn_fd.basis");
                strSQL.AppendLine("    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.AppendLine("    AND NVL(job_trn_fd.SERVICE_TYPE_FLAG,0) <>1");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.AppendLine("    AND COMM.COMMODITY_MST_PK = CNT.COMMODITY_MST_FK ");
                    strSQL.AppendLine("    AND JOB_EXP.JOB_CARD_TRN_PK = cnt.job_card_trn_fk(+) ");
                }

                strSQL.AppendLine("    ) Q1");
                strSQL.AppendLine("   )Qry,freight_element_mst_tbl femt,container_type_mst_tbl ctmt");
                strSQL.AppendLine("   WHERE qry.container_type_mst_fk=ctmt.CONTAINER_TYPE_MST_PK(+)");
                strSQL.AppendLine("   AND qry.freight_element_mst_pk=femt.freight_element_mst_pk");
                strSQL.AppendLine("   ORDER BY ctmt.preferences,femt.preference");
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet FetchJobAgentContractDet(string jobCardPK, string BaseCurrFk, Int64 BizType = 0, Int64 CargoType = 0)
        {
            //Dim strSQL As StringBuilder = New StringBuilder
            DataSet dsDet = new DataSet();
            WorkFlow objWF = new WorkFlow();
            objWF.OpenConnection();
            try
            {
                objWF.MyCommand = new OracleCommand();
                var _with93 = objWF.MyCommand;
                _with93.CommandType = CommandType.StoredProcedure;
                _with93.Parameters.Clear();
                _with93.Parameters.Add("JOB_CARD_TRN_PK_IN", jobCardPK).Direction = ParameterDirection.Input;
                _with93.Parameters.Add("BASE_CURRENCY_FK_IN", BaseCurrFk).Direction = ParameterDirection.Input;
                _with93.Parameters.Add("FETCH_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dsDet = objWF.GetDataSet("AGENCY_MST_TBL_PKG", "FETCH_JOB_AGENT_CONTRACT_DET");

                //strSQL.AppendLine(" SELECT QRY.JOB_TRN_FD_PK,")
                //strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_ID,")
                //strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_NAME,")
                //strSQL.AppendLine(" QRY.FREIGHT_ELEMENT_MST_PK,")
                //strSQL.AppendLine(" QRY.JOB_freight_amt,")
                //strSQL.AppendLine(" QRY.AGENT_freight_amt,")
                //strSQL.AppendLine(" QRY.JOB_total_amt,")
                //strSQL.AppendLine(" QRY.AGENT_total_amt,")
                //strSQL.AppendLine("(SELECT ROUND(ELEM_FT.VALUE,2) FROM AGENT_MST_TBL AG,")
                //strSQL.AppendLine("                       AGENT_CNT_ELEM ELEM,")
                //strSQL.AppendLine("                       AGENT_CNT_ELEM_FRT_TRN ELEM_FT ")
                //strSQL.AppendLine("                       WHERE AG.AGENT_MST_PK =QRY.DP_AGENT_MST_FK ")
                //strSQL.AppendLine("                       AND ELEM_FT.PROCESS_TYPE=QRY.PROCESS_TYPE")
                //strSQL.AppendLine("                   AND AG.AGENT_MST_PK=ELEM.AGENT_MST_FK ")
                //strSQL.AppendLine("                   AND ELEM.AGENT_CNT_ELEM_PK=ELEM_FT.AGENT_CNT_ELEM_FK ")
                //strSQL.AppendLine("                   AND ELEM_FT.FREIGHT_ELEMENT_MST_FK=QRY.FREIGHT_ELEMENT_MST_PK ")
                //strSQL.AppendLine("                   AND ELEM.PROFIT_COMM=1 AND ELEM.LOCAL_NOMINATED=1")
                //strSQL.AppendLine("                   AND TO_DATE(QRY.JOBCARD_DATE,DATEFORMAT) BETWEEN TO_DATE(ELEM.VALID_FROM,DATEFORMAT) ")
                //strSQL.AppendLine("                   AND TO_DATE(NVL(ELEM.VALID_TO,'01/01/9999'),DATEFORMAT)) CONTRACT_VALUE,")
                //strSQL.AppendLine("       ROUND(fn_get_agent_prof_comm(QRY.JOB_CARD_TRN_PK,QRY.FREIGHT_ELEMENT_MST_PK," & BaseCurrFk & ",1),2) PS_AMT")

                //strSQL.AppendLine(" FROM( ")
                //strSQL.AppendLine(" SELECT Q.* FROM (")
                //strSQL.AppendLine(" SELECT JOB_TRN_FD_PK,	")
                //strSQL.AppendLine("     JOB_EXP.DP_AGENT_MST_FK,	")
                //strSQL.AppendLine("     JOB_EXP.JOB_CARD_TRN_PK,	")
                //strSQL.AppendLine("     JOB_EXP.PROCESS_TYPE,	")
                //strSQL.AppendLine("     JOB_EXP.JOBCARD_DATE,	")
                //strSQL.AppendLine("    freight.freight_element_id,")
                //strSQL.AppendLine("    freight.freight_element_name,")
                //strSQL.AppendLine("    freight.freight_element_mst_pk,	")
                //strSQL.AppendLine("    job_trn_fd.Currency_Mst_Fk Job_Currency_Mst_Fk,")
                //strSQL.AppendLine("    NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk) Agent_Currency_Mst_Fk,")
                //strSQL.AppendLine("  nvl(job_trn_fd.Rateperbasis,0) JOB_Rateperbasis,")
                //strSQL.AppendLine("  nvl(job_trn_fd.AGENT_RATEPERBASIS,job_trn_fd.Rateperbasis) AGENT_Rateperbasis,")
                //strSQL.AppendLine("  nvl(job_trn_fd.freight_amt,0) JOB_freight_amt,")
                //strSQL.AppendLine("  nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt) AGENT_freight_amt,")
                //strSQL.AppendLine("  NVL(GET_EX_RATE(job_trn_fd.Currency_Mst_Fk, " & BaseCurrFk & ", job_exp.JOBCARD_DATE),0) AS JOB_ROE,")
                //strSQL.AppendLine("  NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " & BaseCurrFk & ", job_exp.JOBCARD_DATE),0) AS AGENT_ROE,")
                //strSQL.AppendLine("    (job_trn_fd.freight_amt* NVL(GET_EX_RATE(job_trn_fd.Currency_Mst_Fk, " & BaseCurrFk & ", job_exp.JOBCARD_DATE),0)) JOB_total_amt,")
                //strSQL.AppendLine("    (nvl(job_trn_fd.AGENT_FREIGHT_AMT, job_trn_fd.freight_amt)* NVL(GET_EX_RATE(NVL(job_trn_fd.AGENT_CURRENCY_MST_FK,job_trn_fd.Currency_Mst_Fk), " & BaseCurrFk & ", job_exp.JOBCARD_DATE),0)) AGENT_total_amt ")
                //strSQL.AppendLine("    FROM ")
                //strSQL.AppendLine("    JOB_TRN_FD job_trn_fd,")
                //'strSQL.AppendLine("    container_type_mst_tbl cont,")
                //strSQL.AppendLine("    currency_type_mst_tbl curr,")
                //strSQL.AppendLine("    freight_element_mst_tbl freight,")
                //'strSQL.AppendLine("    parameters_tbl prm,")
                //strSQL.AppendLine("    JOB_CARD_trn job_exp,")
                //strSQL.AppendLine("    location_mst_tbl lmt")
                //'strSQL.AppendLine("   ,customer_mst_tbl cmt, dimention_unit_mst_tbl dmt")

                //If BizType = 2 And CargoType = 4 Then
                //    strSQL.AppendLine(", JOB_TRN_CONT CNT, COMMODITY_MST_TBL COMM ")
                //End If

                //strSQL.AppendLine("    WHERE")
                //strSQL.AppendLine("    job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK")
                //'strSQL.AppendLine("    AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+)")
                //strSQL.AppendLine("    AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk")
                //strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk")
                //'strSQL.AppendLine("    AND job_trn_fd.freight_element_mst_fk = prm.frt_bof_fk")
                //strSQL.AppendLine("   AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+)")
                //'strSQL.AppendLine("   AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)")
                //'strSQL.AppendLine("    and  dmt.dimention_unit_mst_pk(+) = job_trn_fd.basis")
                //strSQL.AppendLine("    AND job_exp.JOB_CARD_TRN_PK =" & jobCardPK)
                //strSQL.AppendLine("    AND NVL(job_trn_fd.SERVICE_TYPE_FLAG,0) <>1")

                //If BizType = 2 And CargoType = 4 Then
                //    strSQL.AppendLine("    AND COMM.COMMODITY_MST_PK = CNT.COMMODITY_MST_FK ")
                //    strSQL.AppendLine("    AND JOB_EXP.JOB_CARD_TRN_PK = cnt.job_card_trn_fk(+) ")
                //End If

                //strSQL.AppendLine("    ) Q")
                //strSQL.AppendLine("   )Qry,freight_element_mst_tbl femt")
                //strSQL.AppendLine("   WHERE qry.freight_element_mst_pk=femt.freight_element_mst_pk")
                //strSQL.AppendLine("   ORDER BY femt.preference")
                //Return objWF.GetDataSet(strSQL.ToString)
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
            return dsDet;
        }
        #endregion

        #region " Fetch Purchase Inventory data export"
        public DataSet FetchPurchaseInvDataExp(string jobCardPK = "0", Int64 BizType = 0, Int64 CargoType = 0)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT distinct");
                strSQL.Append( "    JOB_TRN_PIA_PK,");
                strSQL.Append( "    'CBJC' jobtype,");
                strSQL.Append( "    invoice_number,\t");
                strSQL.Append( "    to_char(job_trn_pia.invoice_date, dateformat) invoice_date,");
                strSQL.Append( "    job_trn_pia.vendor_key,\t");
                strSQL.Append( "    cost_element_id,\t");
                if (BizType == 1)
                {
                    strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                        // ctmt.CONTAINER_TYPE_MST_ID
                    }
                }
                strSQL.Append( "    job_trn_pia.currency_mst_fk,");
                strSQL.Append( "    job_trn_pia.invoice_amt,\t");
                strSQL.Append( "    job_trn_pia.tax_percentage,");
                strSQL.Append( "    job_trn_pia.tax_amt,\t");
                strSQL.Append( "    job_trn_pia.estimated_amt,");
                //strSQL.Append(vbCrLf & "    NVL(invoice_amt,0) - NVL(estimated_amt,0) diff_amt,")
                strSQL.Append( "    job_trn_pia.invoice_amt - NVL(job_trn_pia.estimated_amt,0) diff_amt,");
                strSQL.Append( "    job_trn_pia.vendor_mst_fk, ");
                strSQL.Append( "    job_trn_pia.cost_element_mst_fk,");
                strSQL.Append( "    job_trn_pia.attached_file_name,'false' as \"Delete\", MJC_TRN_PIA_FK ");

                strSQL.Append( "FROM");
                strSQL.Append( "    JOB_TRN_PIA  job_trn_pia,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    cost_element_mst_tbl cost_ele,");
                strSQL.Append( "    CBJC_TRN_COST   CTC,");
                //  strSQL.Append(vbCrLf & "    JOB_TRN_COST JCOST,")
                strSQL.Append( "     CBJC_TBL CT ");
                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( ",COMMODITY_MST_TBL COMM ");
                }
                strSQL.Append( "WHERE");
                strSQL.Append( "    job_trn_pia.JOB_CARD_TRN_FK =  CT.CBJC_PK ");
                strSQL.Append( "    AND job_trn_pia.cost_element_mst_fk =cost_ele.cost_element_mst_pk");
                strSQL.Append( "    AND job_trn_pia.currency_mst_fk =curr.currency_mst_pk");
                strSQL.Append( "    AND CT.JC_FK =" + jobCardPK);
                strSQL.Append( "    AND (SELECT distinct ist.approved from inv_supplier_tbl ist , inv_supplier_trn_tbl ISTR where ISTR.INV_SUPPLIER_TBL_FK = IST.INV_SUPPLIER_PK AND ISTR.JOB_CARD_PIA_FK  = job_trn_pia.JOB_TRN_PIA_PK AND ROWNUM=1) <>2");
                strSQL.Append( "    AND CT.CBJC_PK = CTC.CBJC_FK ");
                strSQL.Append( "    AND CTC.COST_ELEMENT_MST_FK = JOB_TRN_PIA.COST_ELEMENT_MST_FK ");

                // strSQL.Append(vbCrLf & "    AND JCOST.COST_ELEMENT_MST_FK = job_trn_pia.cost_element_mst_fk ")
                // strSQL.Append(vbCrLf & "    AND JCOST.container_type_mst_fk = ctmt.Container_Type_Mst_Pk(+)")
                //If BizType = 2 And CargoType = 4 Then
                //    strSQL.Append(vbCrLf & "   AND JCOST.container_type_mst_fk = COMM.COMMODITY_MST_PK(+) ")
                //End If

                strSQL.Append( "UNION");

                strSQL.Append( "SELECT distinct");
                strSQL.Append( "    JOB_TRN_PIA_PK,");
                strSQL.Append( "    'JC' jobtype,");
                strSQL.Append( "    invoice_number,\t");
                strSQL.Append( "    to_char(job_trn_pia.invoice_date, dateformat) invoice_date,");
                strSQL.Append( "    job_trn_pia.vendor_key,\t");
                strSQL.Append( "    cost_element_id,\t");
                if (BizType == 1)
                {
                    strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.Append( "    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.Append( "    ctmt.CONTAINER_TYPE_MST_ID,");
                    }
                }
                strSQL.Append( "    job_trn_pia.currency_mst_fk,");
                strSQL.Append( "    job_trn_pia.invoice_amt,\t");
                strSQL.Append( "    job_trn_pia.tax_percentage,");
                strSQL.Append( "    job_trn_pia.tax_amt,\t");
                strSQL.Append( "    job_trn_pia.estimated_amt,");
                //strSQL.Append(vbCrLf & "    NVL(invoice_amt,0) - NVL(estimated_amt,0) diff_amt,")
                strSQL.Append( "    job_trn_pia.invoice_amt - NVL(job_trn_pia.estimated_amt,0) diff_amt,");
                strSQL.Append( "    job_trn_pia.vendor_mst_fk, ");
                strSQL.Append( "    job_trn_pia.cost_element_mst_fk,");
                strSQL.Append( "    job_trn_pia.attached_file_name,'false' as \"Delete\", MJC_TRN_PIA_FK ");

                strSQL.Append( "FROM");
                strSQL.Append( "    JOB_TRN_PIA  job_trn_pia,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    cost_element_mst_tbl cost_ele,");
                strSQL.Append( "    container_type_mst_tbl ctmt,");
                strSQL.Append( "    JOB_TRN_COST JCOST,");
                strSQL.Append( "    JOB_CARD_TRN job_exp");
                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( ",COMMODITY_MST_TBL COMM ");
                }
                strSQL.Append( "WHERE");
                strSQL.Append( "    job_trn_pia.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_pia.cost_element_mst_fk =cost_ele.cost_element_mst_pk");
                strSQL.Append( "    AND job_trn_pia.currency_mst_fk =curr.currency_mst_pk");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.Append( "    AND (SELECT ist.approved from inv_supplier_tbl ist , inv_supplier_trn_tbl ISTR where ISTR.INV_SUPPLIER_TBL_FK = IST.INV_SUPPLIER_PK AND ISTR.JOB_CARD_PIA_FK  = job_trn_pia.JOB_TRN_PIA_PK) <>2");
                strSQL.Append( "    AND job_exp.job_card_trn_pk = JCOST.JOB_CARD_TRN_FK ");
                strSQL.Append( "    AND JCOST.COST_ELEMENT_MST_FK = job_trn_pia.cost_element_mst_fk ");
                strSQL.Append( "    AND JCOST.container_type_mst_fk = ctmt.Container_Type_Mst_Pk(+)");

                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( "   AND JCOST.container_type_mst_fk = COMM.COMMODITY_MST_PK(+) ");
                }

                strSQL.Append( "       UNION ");

                strSQL.Append( "    SELECT DISTINCT JOB_TRN_PIA_PK,");
                strSQL.Append( "    'TPT' JOBTYPE,");
                strSQL.Append( "        INVOICE_NUMBER,");
                strSQL.Append( "     TO_CHAR(JOB_TRN_PIA.INVOICE_DATE, DATEFORMAT) INVOICE_DATE,");
                strSQL.Append( "        JOB_TRN_PIA.VENDOR_KEY,");
                strSQL.Append( "         COST_ELEMENT_ID,");
                strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                strSQL.Append( "       JOB_TRN_PIA.CURRENCY_MST_FK,");
                strSQL.Append( "        JOB_TRN_PIA.INVOICE_AMT,");
                strSQL.Append( "      JOB_TRN_PIA.TAX_PERCENTAGE,");
                strSQL.Append( "       JOB_TRN_PIA.TAX_AMT,");
                strSQL.Append( "      JOB_TRN_PIA.ESTIMATED_AMT,");
                strSQL.Append( "    JOB_TRN_PIA.INVOICE_AMT - NVL(JOB_TRN_PIA.ESTIMATED_AMT, 0) DIFF_AMT,");
                strSQL.Append( "    JOB_TRN_PIA.VENDOR_MST_FK,");
                strSQL.Append( "    JOB_TRN_PIA.COST_ELEMENT_MST_FK,");
                strSQL.Append( "     JOB_TRN_PIA.ATTACHED_FILE_NAME,");
                strSQL.Append( "   'FALSE' AS \"DELETE\",");
                strSQL.Append( "    MJC_TRN_PIA_FK");
                strSQL.Append( "   FROM JOB_TRN_PIA            JOB_TRN_PIA,");
                strSQL.Append( "    CURRENCY_TYPE_MST_TBL  CURR,");
                strSQL.Append( "    COST_ELEMENT_MST_TBL   COST_ELE,");
                strSQL.Append( "     TRANSPORT_INST_SEA_TBL TIST,");
                strSQL.Append( "              TRANSPORT_TRN_COST TCST");
                strSQL.Append( "            WHERE JOB_TRN_PIA.JOB_CARD_TRN_FK = TIST.TRANSPORT_INST_SEA_PK ");
                strSQL.Append( "   AND JOB_TRN_PIA.COST_ELEMENT_MST_FK = COST_ELE.COST_ELEMENT_MST_PK  ");
                strSQL.Append( "    AND JOB_TRN_PIA.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK  ");
                strSQL.Append( "    AND TIST.JOB_CARD_FK IN (SELECT TO_CHAR(C.CBJC_PK) FROM CBJC_TBL C WHERE C.JC_FK=" + jobCardPK);
                strSQL.Append( " )");
                strSQL.Append( "    AND TIST.TP_CBJC_JC=1 ");
                strSQL.Append( "    AND (SELECT distinct ist.approved from inv_supplier_tbl ist , inv_supplier_trn_tbl ISTR where ISTR.INV_SUPPLIER_TBL_FK = IST.INV_SUPPLIER_PK AND ISTR.JOB_CARD_PIA_FK  = job_trn_pia.JOB_TRN_PIA_PK) <>2");
                strSQL.Append( "  AND TIST.TRANSPORT_INST_SEA_PK = TCST.TRANSPORT_INST_FK  ");
                strSQL.Append( " AND TCST.COST_ELEMENT_MST_FK = JOB_TRN_PIA.COST_ELEMENT_MST_FK  ");

                strSQL.Append( "       UNION ");
                strSQL.Append( " SELECT DISTINCT JOB_TRN_PIA_PK, ");
                strSQL.Append( "  'TPT' JOBTYPE, ");
                strSQL.Append( "   INVOICE_NUMBER, ");
                strSQL.Append( "   TO_CHAR(JOB_TRN_PIA.INVOICE_DATE, DATEFORMAT) INVOICE_DATE, ");
                strSQL.Append( " JOB_TRN_PIA.VENDOR_KEY, ");
                strSQL.Append( "    COST_ELEMENT_ID, ");
                strSQL.Append( "   '' CONTAINER_TYPE_MST_ID, ");
                strSQL.Append( "   JOB_TRN_PIA.CURRENCY_MST_FK, ");
                strSQL.Append( "   JOB_TRN_PIA.INVOICE_AMT, ");
                strSQL.Append( "  JOB_TRN_PIA.TAX_PERCENTAGE, ");
                strSQL.Append( "  JOB_TRN_PIA.TAX_AMT, ");
                strSQL.Append( "  JOB_TRN_PIA.ESTIMATED_AMT, ");
                strSQL.Append( "  JOB_TRN_PIA.INVOICE_AMT - NVL(JOB_TRN_PIA.ESTIMATED_AMT, 0) DIFF_AMT,");
                strSQL.Append( "    JOB_TRN_PIA.VENDOR_MST_FK,");
                strSQL.Append( "    JOB_TRN_PIA.COST_ELEMENT_MST_FK,");
                strSQL.Append( "    JOB_TRN_PIA.ATTACHED_FILE_NAME,");
                strSQL.Append( "  'FALSE' AS \"DELETE\",");
                strSQL.Append( "    MJC_TRN_PIA_FK");
                strSQL.Append( "   FROM JOB_TRN_PIA            JOB_TRN_PIA,");
                strSQL.Append( "    CURRENCY_TYPE_MST_TBL  CURR,");
                strSQL.Append( "     COST_ELEMENT_MST_TBL   COST_ELE,");
                strSQL.Append( "    TRANSPORT_INST_SEA_TBL TIST,");
                strSQL.Append( "             TRANSPORT_TRN_COST TCST ");
                strSQL.Append( "   WHERE JOB_TRN_PIA.JOB_CARD_TRN_FK = TIST.TRANSPORT_INST_SEA_PK ");
                strSQL.Append( " AND JOB_TRN_PIA.COST_ELEMENT_MST_FK = COST_ELE.COST_ELEMENT_MST_PK ");
                strSQL.Append( "  AND JOB_TRN_PIA.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK ");
                strSQL.Append( "  AND TIST.JOB_CARD_FK IN  ");
                strSQL.Append( " ('" + jobCardPK + "')");
                strSQL.Append( "  AND TIST.TP_CBJC_JC=2 ");
                strSQL.Append( "    AND (SELECT distinct ist.approved from inv_supplier_tbl ist , inv_supplier_trn_tbl ISTR where ISTR.INV_SUPPLIER_TBL_FK = IST.INV_SUPPLIER_PK AND ISTR.JOB_CARD_PIA_FK  = job_trn_pia.JOB_TRN_PIA_PK) <>2");
                strSQL.Append( "  AND TIST.TRANSPORT_INST_SEA_PK = TCST.TRANSPORT_INST_FK ");
                strSQL.Append( " AND TCST.COST_ELEMENT_MST_FK = JOB_TRN_PIA.COST_ELEMENT_MST_FK ");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        public DataSet FetchPIA(string jobCardPK = "0")
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT");
                strSQL.Append( "    JOB_TRN_PIA_PK,");
                strSQL.Append( "    Inv_Agent_Trn_Fk,");
                strSQL.Append( "    inv_supplier_fk");
                strSQL.Append( "FROM");
                strSQL.Append( "    job_trn_pia  job_trn_pia,");
                strSQL.Append( "    currency_type_mst_tbl curr,");
                strSQL.Append( "    cost_element_mst_tbl cost_ele,");
                strSQL.Append( "    JOB_CARD_TRN job_exp");
                strSQL.Append( "WHERE");
                strSQL.Append( "    job_trn_pia.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_pia.cost_element_mst_fk =cost_ele.cost_element_mst_pk");
                strSQL.Append( "    AND job_trn_pia.currency_mst_fk =curr.currency_mst_pk");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        #endregion

        #region " Fetch Cost details data export"
        public DataSet FetchCostDetailDataExp(string jobCardPK = "0", int basecurrency = 0, int BizType = 2, int CargoType = 1)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append("SELECT JEC.JOB_TRN_COST_PK,");
                strSQL.Append("       JEC.JOB_CARD_TRN_FK,");
                if (BizType == 1)
                {
                    strSQL.Append( "    0 CONTAINER_TYPE_MST_FK,");
                    strSQL.Append( "    '' CONTAINER_TYPE_MST_ID,");
                }
                else
                {
                    if (CargoType == 4)
                    {
                        strSQL.Append( "    COMM.COMMODITY_MST_PK CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    COMM.COMMODITY_NAME CONTAINER_TYPE_MST_ID,");
                    }
                    else
                    {
                        strSQL.Append( "    JEC.CONTAINER_TYPE_MST_FK,");
                        strSQL.Append( "    CTMT.CONTAINER_TYPE_MST_ID,");
                    }
                }

                strSQL.Append("       VMT.VENDOR_MST_PK,");
                strSQL.Append("       CMT.COST_ELEMENT_MST_PK,");
                strSQL.Append("       JEC.VENDOR_KEY,");
                strSQL.Append("       CMT.COST_ELEMENT_ID,");
                strSQL.Append("       CMT.COST_ELEMENT_NAME,");
                strSQL.Append("       DECODE(JEC.PTMT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign')PTMT_TYPE,");
                strSQL.Append("       LMT.LOCATION_ID,");
                strSQL.Append("       JEC.BASIS_FK,  ");
                strSQL.Append("       BASIS.DD_ID BASIS_ID ,");
                strSQL.Append("       NVL(JEC.QUANTITY,1) QUANTITY,");
                strSQL.Append("       CURR.CURRENCY_ID,");
                strSQL.Append("       NVL(JEC.RATEPERBASIS,JEC.ESTIMATED_COST) ESTIMATED_RATE,");
                strSQL.Append("       JEC.ESTIMATED_COST,");
                strSQL.Append("       JEC.EXCHANGE_RATE AS ROE,");
                strSQL.Append("       ((NVL(JEC.RATEPERBASIS, JEC.ESTIMATED_COST)*NVL(JEC.QUANTITY, 1)) * JEC.EXCHANGE_RATE) TOTAL_COST,  ");
                //strSQL.Append("       JEC.TOTAL_COST,")
                strSQL.Append("       ''DEL_FLAG,");
                strSQL.Append("       'true' SEL_FLAG,");
                strSQL.Append("       JEC.LOCATION_MST_FK,");
                strSQL.Append("       JEC.CURRENCY_MST_FK");
                strSQL.Append("  FROM JOB_TRN_COST      JEC,");
                strSQL.Append("       JOB_CARD_TRN  JOB,");
                strSQL.Append("       VENDOR_MST_TBL        VMT,");
                strSQL.Append("       COST_ELEMENT_MST_TBL  CMT,");
                strSQL.Append("       CURRENCY_TYPE_MST_TBL CURR,");
                strSQL.Append("       LOCATION_MST_TBL      LMT,");
                strSQL.Append("      (SELECT QD.DD_ID, QD.DD_VALUE ");
                strSQL.Append("        FROM QFOR_DROP_DOWN_TBL QD ");
                strSQL.Append("        WHERE QD.CONFIG_ID = 'QFOR4458' ");
                strSQL.Append("          AND QD.DD_FLAG = 'BASIS') BASIS, ");
                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append( " COMMODITY_MST_TBL COMM, ");
                }
                strSQL.Append("     CONTAINER_TYPE_MST_TBL CTMT  ");
                strSQL.Append(" WHERE JEC.JOB_CARD_TRN_FK = JOB.JOB_CARD_TRN_PK");
                strSQL.Append("   AND JEC.COST_ELEMENT_MST_FK = CMT.COST_ELEMENT_MST_PK");
                strSQL.Append("   AND JEC.VENDOR_MST_FK = VMT.VENDOR_MST_PK");
                strSQL.Append("   AND JEC.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
                strSQL.Append("   AND JEC.LOCATION_MST_FK = LMT.LOCATION_MST_PK");
                strSQL.Append("   AND JOB.JOB_CARD_TRN_PK = " + jobCardPK);
                strSQL.Append("   AND NVL(JEC.SERVICE_TYPE_FLAG,0)<>1");
                strSQL.Append("   AND JEC.BASIS_FK = BASIS.DD_VALUE(+)");
                strSQL.Append("   AND JEC.CONTAINER_TYPE_MST_FK = CTMT.CONTAINER_TYPE_MST_PK(+)");
                if (BizType == 2 & CargoType == 4)
                {
                    strSQL.Append("    AND JEC.CONTAINER_TYPE_MST_FK  = COMM.COMMODITY_MST_PK(+)");
                    //strSQL.Append("    AND JOB.JOB_CARD_TRN_PK = CTMT.CONTAINER_TYPE_MST_PK(+) ")
                }
                strSQL.Append("   ORDER BY CMT.PREFERENCE");
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region " Fetch TP data export"
        public DataSet FetchTPDataExp(string jobCardPK = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT");
                strSQL.Append( "    job_trn_tp.JOB_CARD_TRN_FK,");
                strSQL.Append( "    job_trn_tp.transhipment_no,");
                strSQL.Append( "    job_trn_tp.port_mst_fk,");
                strSQL.Append( "    port.port_id,");
                strSQL.Append( "    port.port_name,");
                strSQL.Append( "    job_trn_tp.vessel_name,");
                strSQL.Append( "    job_trn_tp.voyage,");
                strSQL.Append( "    TO_CHAR(job_trn_tp.eta_date,DATEFORMAT ) eta_date,");
                strSQL.Append( "    TO_CHAR(job_trn_tp.etd_date,DATEFORMAT ) etd_date,");
                strSQL.Append( "    agt.agent_id,");
                strSQL.Append( "    agt.agent_name,");
                strSQL.Append( "    'false' \"Delete\",");
                strSQL.Append( "    job_trn_tp.VOYAGE_AIRLINE_TRN_FK \"GridVoyagePK\", ");
                strSQL.Append( "    job_trn_tp.agent_fk \"AgentPK\" ");
                strSQL.Append( " FROM");
                strSQL.Append( "    JOB_TRN_TP  job_trn_tp,");
                strSQL.Append( "    port_mst_tbl port,");
                strSQL.Append( "    agent_mst_tbl agt,");
                strSQL.Append( "    vessel_voyage_trn vvt,");
                strSQL.Append( "    JOB_CARD_TRN job_exp");
                strSQL.Append( "WHERE");
                strSQL.Append( "    job_trn_tp.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK");
                strSQL.Append( "    AND job_trn_tp.port_mst_fk = port.port_mst_pk");
                strSQL.Append( "    AND JOB_TRN_TP.AGENT_FK = AGT.AGENT_MST_PK(+)");
                strSQL.Append( "    AND job_trn_tp.VOYAGE_AIRLINE_TRN_FK = vvt.voyage_trn_pk(+)");
                strSQL.Append( "    AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
                strSQL.Append( "    ORDER BY transhipment_no");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Fetch For Transhipment"
        public DataSet FetchAgentPK(string AgentPK = "0", decimal TEU = 0)
        {
            WorkFlow objWF = new WorkFlow();
            try
            {
                StringBuilder sb = new StringBuilder(5000);
                sb.Append("SELECT '' JOB_TRN_PIA_PK,");
                sb.Append("       AMT.AGENT_ID VENDOR_KEY,");
                sb.Append("       CEM.COST_ELEMENT_ID COST_ELEMENT_ID,");
                sb.Append("       '' INVOICE_NUMBER,");
                sb.Append("       '' INVOICE_DATE,");
                sb.Append("       A.CURRENCY_TYPE_MST_FK CURRENCY_MST_FK,");
                sb.Append("       A.AMOUNT INVOICE_AMT,");
                sb.Append("       '' TAX_PERCENTAGE,");
                sb.Append("       '' TAX_AMT,");
                sb.Append("       NVL((A.AMOUNT * " + TEU + "), 0) ESTIMATED_AMT,");
                sb.Append("       NVL(A.AMOUNT - NVL((A.AMOUNT * " + TEU + "), 0), 0) DIFF_AMT,");
                sb.Append("       A.AGENT_MST_FK VENDOR_MST_FK,");
                sb.Append("       A.COST_ELEMENT_MST_FK COST_ELEMENT_MST_FK,");
                sb.Append("       '' ATTACHED_FILE_NAME,");
                sb.Append("       '0' AS \"Delete\",");
                sb.Append("       '' MJC_TRN_SEA_EXP_PIA_FK,");
                sb.Append("       '' UpdFlag");
                sb.Append("  FROM AGENT_TRANSHIP_TRN A, AGENT_MST_TBL AMT, COST_ELEMENT_MST_TBL CEM");
                sb.Append(" WHERE A.AGENT_MST_FK = " + AgentPK);
                sb.Append("   AND AMT.AGENT_MST_PK = A.AGENT_MST_FK");
                sb.Append("   AND A.COST_ELEMENT_MST_FK = CEM.COST_ELEMENT_MST_PK");

                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        #endregion

        #region "Calculate_TAX" ''Added by subhransu for tax calculation
        public object Calculate_TAX(string jobCardID = "0")
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();

            try
            {
                sb.Append(" SELECT  NVL(SUM(JP.TAX_AMT), 0) AS COST_TAX");
                sb.Append("   FROM JOB_CARD_TRN   JC,");
                sb.Append("        job_trn_pia    JP");
                sb.Append("  WHERE ");
                sb.Append("     JC.JOB_CARD_TRN_PK = " + jobCardID + "");
                sb.Append("    AND JC.JOB_CARD_TRN_PK = JP.JOB_CARD_TRN_FK(+)");

                return (objWF.GetDataSet(sb.ToString()));

            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public object Calculate_TAX_Cost(string jobCardID = "0")
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();

            try
            {
                sb.Append(" SELECT NVL(SUM(CI.TAX_AMT), 0) AS REVENUE_TAX");
                sb.Append("   FROM JOB_CARD_TRN   JC,");
                sb.Append("        CONSOL_INVOICE_TRN_TBL CI");

                sb.Append("  WHERE JC.JOB_CARD_TRN_PK = CI.JOB_CARD_FK(+)");
                sb.Append("    AND JC.JOB_CARD_TRN_PK = " + jobCardID + "");

                return (objWF.GetDataSet(sb.ToString()));

            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "GetRevenueDetails"

        public DataSet GetRevenueDetails(decimal actualCost, decimal actualRevenue, decimal estimatedCost, decimal estimatedRevenue, string jobCardPK, int LocationPK = 0)
        {

            //Dim SQL As New StringBuilder
            WorkFlow objWF = new WorkFlow();
            //Snigdharani - 10/11/2008 - making the values same as consolidation screen.
            try
            {
                DataSet DS = new DataSet();
                var _with94 = objWF.MyCommand.Parameters;
                _with94.Add("JCPK", jobCardPK).Direction = ParameterDirection.Input;
                _with94.Add("CURRPK", HttpContext.Current.Session["CURRENCY_MST_PK"]).Direction = ParameterDirection.Input;
                _with94.Add("JOB", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                DS = objWF.GetDataSet("FETCH_COST_REVENUE_PROFIT", "FETCH_JOB");
                return DS;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
          
        }
        #endregion

        #region "Get Invoice PK"
        //0 - means no invoice exists.
        //-1 - means more then one invoice extists
        //pk value of invoice

        //invice Type: 1-Invoice to customer.
        //invice Type: 2-Invoice to CB Agent.
        //invice Type: 3-Invoice to DP Agent.
        public long GetCustInvoice(string jobCardPK, Int16 invoiceType = 1)
        {

            StringBuilder SQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            OracleDataReader oraReader = null;
            int invoiceCount = 0;
            long invoicePK = 0;

            if (invoiceType == 1)
            {
                SQL.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK");
                SQL.Append("  FROM JOB_CARD_TRN   JOB,");
                SQL.Append("       CONSOL_INVOICE_TBL     INV,");
                SQL.Append("       CONSOL_INVOICE_TRN_TBL INVTRN ");
                SQL.Append(" WHERE JOB.JOB_CARD_TRN_PK = INVTRN.JOB_CARD_FK");
                SQL.Append("   AND INVTRN.CONSOL_INVOICE_FK = INV.CONSOL_INVOICE_PK");
                SQL.Append("   AND INVTRN.JOB_TYPE = 1 ");
                SQL.Append("   AND JOB.JOB_CARD_TRN_PK = " + jobCardPK);
            }
            else if (invoiceType == 2)
            {
                SQL.Append( "select i.INV_AGENT_PK from INV_AGENT_TBL i where i.CB_DP_LOAD_AGENT=1 AND  i.JOB_CARD_FK in (" + jobCardPK + ")");
            }
            else if (invoiceType == 3)
            {
                SQL.Append( "select i.INV_AGENT_PK from INV_AGENT_TBL i where  i.CB_DP_LOAD_AGENT=2 AND i.JOB_CARD_FK = " + jobCardPK);
            }
            else if (invoiceType == 4)
            {
                SQL.Append( "select i.INV_AGENT_PK from INV_AGENT_TBL i where  i.CB_DP_LOAD_AGENT=4 AND i.JOB_CARD_FK = " + jobCardPK);
            }

            oraReader = objWF.GetDataReader(SQL.ToString());

            while (oraReader.Read())
            {
                if ((!object.ReferenceEquals(oraReader[0], DBNull.Value)))
                {
                    invoicePK = Convert.ToInt64(oraReader[0]);
                    invoiceCount += 1;
                }
            }

            if (invoiceCount == 0)
            {
                return 0;
            }
            else if (invoiceCount > 1)
            {
                return -1;
            }
            else
            {
                return invoicePK;
            }

            oraReader.Close();

            try
            {
                return invoicePK;

            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        public void UpdatePlacesRefDel(string SQLQuery)
        {
            WorkFlow objWF = new WorkFlow();
            objWF.ExecuteScaler(SQLQuery);
        }
        public long GetCustInvoiceCBJC(string jobCardPK, Int16 JobType)
        {

            StringBuilder SQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            OracleDataReader oraReader = null;
            int invoiceCount = 0;
            long invoicePK = 0;

            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK");
            if (JobType == 2)
            {
                sb.Append("  FROM CBJC_TBL   JOB,");
            }
            else if (JobType == 3)
            {
                sb.Append("  FROM TRANSPORT_INST_SEA_TBL   JOB,");
            }
            sb.Append("       CONSOL_INVOICE_TBL     INV,");
            sb.Append("       CONSOL_INVOICE_TRN_TBL INVTRN ");
            sb.Append(" WHERE INVTRN.CONSOL_INVOICE_FK = INV.CONSOL_INVOICE_PK");
            if (JobType == 2)
            {
                sb.Append("   AND JOB.CBJC_PK = INVTRN.JOB_CARD_FK");
                sb.Append("   AND INVTRN.JOB_TYPE=2");
                sb.Append("   AND JOB.CBJC_PK = " + jobCardPK);
            }
            else if (JobType == 3)
            {
                sb.Append("   AND JOB.TRANSPORT_INST_SEA_PK = INVTRN.JOB_CARD_FK");
                sb.Append("   AND INVTRN.JOB_TYPE=3");
                sb.Append("   AND JOB.TRANSPORT_INST_SEA_PK = " + jobCardPK);
            }

            oraReader = objWF.GetDataReader(sb.ToString());

            while (oraReader.Read())
            {
                if ((!object.ReferenceEquals(oraReader[0], DBNull.Value)))
                {
                    invoicePK = Convert.ToInt32(oraReader[0]);
                    invoiceCount += 1;
                }
            }

            if (invoiceCount == 0)
            {
                return 0;
            }
            else if (invoiceCount > 1)
            {
                return -1;
            }
            else
            {
                return invoicePK;
            }

            oraReader.Close();

            try
            {
                return invoicePK;

            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region " Fetch ROE data export"
        public DataSet FetchAirFrt()
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( " SELECT -1 AIRFREIGHT_SLABS_TBL_PK, ");
                strSQL.Append( "    ' ' BREAKPOINT_ID, ");
                strSQL.Append( "    ' ' BREAKPOINT_DESC ");
                strSQL.Append( "    FROM DUAL UNION ");

                strSQL.Append( " SELECT A.AIRFREIGHT_SLABS_TBL_PK, ");
                strSQL.Append( "    A.BREAKPOINT_ID, ");
                strSQL.Append( "    A.BREAKPOINT_DESC ");
                strSQL.Append( "    FROM AIRFREIGHT_SLABS_TBL A ");
                strSQL.Append( " WHERE ");
                strSQL.Append( "    A.ACTIVE_FLAG = 1 AND A.BASIS = 2   AND A.BREAKPOINT_TYPE = 2 ");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Fill Combo"
        public DataSet FillCargoMoveCode()
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT 0 CARGO_MOVE_PK, 'SELECT' CARGO_MOVE_CODE FROM CARGO_MOVE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 UNION ");
            strSQL.Append(" SELECT CARGO_MOVE_PK, CARGO_MOVE_CODE FROM (SELECT ROWNUM SLNR, Q.* FROM (SELECT C.CARGO_MOVE_PK, ");
            strSQL.Append(" C.CARGO_MOVE_CODE FROM CARGO_MOVE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 ORDER BY CARGO_MOVE_CODE) Q ) ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        public DataSet FillShippingTermsCombo()
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT 0 SHIPPING_TERMS_MST_PK, 'SELECT' INCO_CODE FROM SHIPPING_TERMS_MST_TBL S WHERE S.ACTIVE_FLAG = 1 UNION ");
            strSQL.Append(" SELECT SHIPPING_TERMS_MST_PK, INCO_CODE FROM (SELECT ROWNUM SLNR, Q.* FROM (SELECT S.SHIPPING_TERMS_MST_PK, ");
            strSQL.Append(" S.INCO_CODE FROM SHIPPING_TERMS_MST_TBL S WHERE S.ACTIVE_FLAG = 1 ORDER BY INCO_CODE) Q ) ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet FillCurrencyCombo()
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT 0 CURRENCY_MST_PK, 'SELECT' CURRENCY_ID FROM CURRENCY_TYPE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 UNION ");
            strSQL.Append(" SELECT CURRENCY_MST_PK, CURRENCY_ID FROM (SELECT ROWNUM SLNR, Q.* FROM (SELECT C.CURRENCY_MST_PK, ");
            strSQL.Append(" C.CURRENCY_ID FROM CURRENCY_TYPE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 ORDER BY CURRENCY_ID) Q ) ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }


        #endregion

        #region "Fetch Revenue data export"
        public DataSet FetchRevenueData(string jobCardPK = "0")
        {
            //Dim strSQL As StringBuilder = New StringBuilder
            WorkFlow objWF = new WorkFlow();

            try
            {
                objWF.MyCommand.Parameters.Clear();
                var _with95 = objWF.MyCommand.Parameters;
                _with95.Add("JOBCARD_PK", jobCardPK).Direction = ParameterDirection.Input;
                _with95.Add("JOB_SEA_EXP_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                return objWF.GetDataSet("FETCH_JOB_CARD_REVENUE_DATA", "FETCH_JOB_CARD");
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        #endregion

        #region "GenerateUCRNumber"
        public string GenerateUCRNumber(string customerID)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            try
            {
                strSQL.Append( "SELECT (SELECT TO_CHAR(SYSDATE,'yy')  FROM dual)||country.country_id||cmt.vat_no");
                strSQL.Append( "    FROM");
                strSQL.Append( "    customer_contact_dtls cust_det,");
                strSQL.Append( "    customer_mst_tbl cmt,");
                strSQL.Append( "    country_mst_tbl country,");
                strSQL.Append( "    location_mst_tbl lmt");
                strSQL.Append( "    WHERE");
                strSQL.Append( "    cmt.customer_mst_pk =" + customerID);
                strSQL.Append( "    AND cust_det.customer_mst_fk = cmt.customer_mst_pk(+)");
                strSQL.Append( "    AND cust_det.adm_location_mst_fk = lmt.location_mst_pk(+)");
                strSQL.Append( "    AND lmt.country_mst_fk = country.country_mst_pk(+)");

                return Convert.ToString(objWF.ExecuteScaler(strSQL.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        public DataSet FillContainerTypeDataSet(long JobCardPK)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            if (JobCardPK > 0)
            {
                strSQL.Append( " SELECT -1 CONTAINER_TYPE_MST_PK,");
                strSQL.Append( " ' ' CONTAINER_TYPE_MST_ID,");
                strSQL.Append( " -1 PREFERENCES");
                strSQL.Append( " FROM");
                strSQL.Append( " DUAL UNION ");

                strSQL.Append( " SELECT DISTINCT");
                strSQL.Append( " CONT.CONTAINER_TYPE_MST_PK,");
                strSQL.Append( " CONT.CONTAINER_TYPE_MST_ID,");
                strSQL.Append( " CONT.PREFERENCES");
                strSQL.Append( " FROM");
                strSQL.Append( " JOB_TRN_CONT JOB_TRN,");
                strSQL.Append( " CONTAINER_TYPE_MST_TBL CONT");
                strSQL.Append( " WHERE");
                strSQL.Append( " JOB_TRN.CONTAINER_TYPE_MST_FK = CONT.CONTAINER_TYPE_MST_PK");
                strSQL.Append( " AND JOB_TRN.JOB_CARD_TRN_FK =" + JobCardPK);
                strSQL.Append( " ORDER BY PREFERENCES");
            }
            else
            {
                strSQL.Append( " SELECT -1 CONTAINER_TYPE_MST_PK,");
                strSQL.Append( " ' ' CONTAINER_TYPE_MST_ID,");
                strSQL.Append( " -1 PREFERENCES");
                strSQL.Append( " FROM");
                strSQL.Append( " DUAL UNION ");

                strSQL.Append( " SELECT CONT.CONTAINER_TYPE_MST_PK,");
                strSQL.Append( " CONT.CONTAINER_TYPE_MST_ID,");
                strSQL.Append( " CONT.PREFERENCES ");
                strSQL.Append( " FROM ");
                strSQL.Append( " CONTAINER_TYPE_MST_TBL CONT ");
                strSQL.Append( " WHERE CONT.ACTIVE_FLAG = 1 ORDER BY PREFERENCES ");
            }

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        public DataSet FillBookingOtherChargesDataSet(string pk = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append( "SELECT");
            strSQL.Append( "         '' JOB_TRN_SEA_EXP_OTH_PK,");
            strSQL.Append( "         frt.freight_element_mst_pk,");
            strSQL.Append( "         frt.freight_element_id,");
            strSQL.Append( "         frt.freight_element_name,");
            strSQL.Append( "         curr.currency_mst_pk, '' \"ROE\",");
            strSQL.Append( "         oth_chrg.amount amount,");
            strSQL.Append( "         'false' \"Delete\", 1 \"Print\" ");
            strSQL.Append( "FROM");
            strSQL.Append( "         BOOKING_TRN_OTH_CHRG oth_chrg,");
            strSQL.Append( "         BOOKING_MST_TBL  booking_mst,");
            strSQL.Append( "         freight_element_mst_tbl frt,");
            strSQL.Append( "         currency_type_mst_tbl curr");
            strSQL.Append( "WHERE");
            strSQL.Append( "         oth_chrg.BOOKING_MST_FK = booking_mst.BOOKING_MST_PK");
            strSQL.Append( "         AND oth_chrg.freight_element_mst_fk = frt.freight_element_mst_pk(+)");
            strSQL.Append( "         AND oth_chrg.currency_mst_fk        = curr.currency_mst_pk(+)");
            strSQL.Append( "         AND oth_chrg.BOOKING_MST_FK         = " + pk);
            strSQL.Append( "ORDER BY freight_element_id ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }

        public DataSet FillJobCardOtherChargesDataSet(string pk = "0", Int64 baseCurrency = 1, Int16 CheckBkgJC = 0, string BKGPK = "")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();


            if (CheckBkgJC == 0)
            {
                strSQL.Append( "         SELECT");
                strSQL.Append( "         oth_chrg.job_trn_oth_pk,");
                strSQL.Append( "         frt.freight_element_mst_pk,");
                strSQL.Append( "         frt.freight_element_id,");
                strSQL.Append( "         frt.freight_element_name,");
                strSQL.Append( "         DECODE(oth_chrg.freight_type,1,'Prepaid',2,'Collect', 3,'Foreign') Payment_Type, ");
                // By Amit on 26-April-2007
                //To introduced LOCATION & FREIGHT PAYER Column 
                //By Amit Singh on 23-May-07
                strSQL.Append( "         oth_chrg.location_mst_fk,");
                //strSQL.Append(vbCrLf & "         (CASE WHEN  oth_chrg.freight_type=1 THEN lmt.location_id ELSE pmt.port_id END) ""location_id"",")
                strSQL.Append( "         lmt.location_id ,");
                strSQL.Append( "         oth_chrg.frtpayer_cust_mst_fk,");
                strSQL.Append( "         cmt.customer_id,");
                //End
                strSQL.Append( "         curr.currency_id currency_mst_pk, ");
                //strSQL.Append(vbCrLf & "        ROUND(GET_EX_RATE(oth_chrg.currency_mst_fk," & HttpContext.Current.Session("currency_mst_pk") & ",round(sysdate - .5)),4) AS ROE ,") 'Code added by gopi for converting ROE into BaseCurrency Ref No:EQA 2045
                strSQL.Append( "         oth_chrg.exchange_rate ROE, ");
                //adding by thiyagarajan on 12/12/08 
                strSQL.Append( "         oth_chrg.amount amount,");
                strSQL.Append( "         'false' \"Delete\", oth_chrg.PRINT_ON_MBL \"Print\" ");
                strSQL.Append( "FROM");
                strSQL.Append( "         job_trn_oth_chrg oth_chrg,");
                strSQL.Append( "         job_card_trn jobcard_mst,");
                strSQL.Append( "         freight_element_mst_tbl frt,");
                strSQL.Append( "         currency_type_mst_tbl curr,");
                //To introduced LOCATION & FREIGHT PAYER Column 
                //By Amit Singh on 23-May-07
                strSQL.Append( "         location_mst_tbl lmt,");
                //strSQL.Append(vbCrLf & "         port_mst_tbl pmt,")
                strSQL.Append( "         customer_mst_tbl cmt");
                //End
                strSQL.Append( "WHERE");
                strSQL.Append( "         oth_chrg.job_card_trn_fk = jobcard_mst.job_card_trn_pk");
                strSQL.Append( "         AND oth_chrg.freight_element_mst_fk = frt.freight_element_mst_pk(+)");
                strSQL.Append( "         AND oth_chrg.currency_mst_fk        = curr.currency_mst_pk(+)");
                //To introduced LOCATION & FREIGHT PAYER Column 
                //By Amit Singh on 23-May-07
                strSQL.Append( "         AND oth_chrg.location_mst_fk = lmt.location_mst_pk (+)");
                //strSQL.Append(vbCrLf & "         AND oth_chrg.location_mst_fk = pmt.port_mst_pk (+)")
                strSQL.Append( "         AND oth_chrg.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
                //End
                strSQL.Append( "         AND oth_chrg.job_card_trn_fk = " + pk);
                strSQL.Append( "ORDER BY freight_element_id ");


            }
            else
            {
                strSQL.Append( "         SELECT");
                strSQL.Append( "         '' JOB_TRN_OTH_PK,");
                strSQL.Append( "         frt.freight_element_mst_pk,");
                strSQL.Append( "         frt.freight_element_id,");
                strSQL.Append( "         frt.freight_element_name,");
                strSQL.Append( "         DECODE(oth_chrg.freight_type,1,'Prepaid',2,'Collect',3,'Foreign') Payment_Type, ");
                // By Amit on 26-April-2007
                //To introduced LOCATION & FREIGHT PAYER Column 
                //By Amit Singh on 23-May-07
                strSQL.Append( "         '' location_mst_fk,");
                //strSQL.Append(vbCrLf & "         (CASE WHEN  oth_chrg.freight_type=1 THEN lmt.location_id ELSE pmt.port_id END) ""location_id"",")
                strSQL.Append( "         '' location_id ,");
                strSQL.Append( "         booking_mst.cust_customer_mst_fk frtpayer_cust_mst_fk,");
                strSQL.Append( "         cmt.customer_id,");
                //End
                strSQL.Append( "         curr.currency_id currency_mst_pk, ");
                strSQL.Append( "    ROUND(GET_EX_RATE(oth_chrg.currency_mst_fk," + baseCurrency + ",round(sysdate - .5)),4) AS ROE ,");
                //Code added by gopi for converting ROE into BaseCurrency Ref No:EQA 2045
                strSQL.Append( "         oth_chrg.amount amount,");
                strSQL.Append( "         'false' \"Delete\", 1 \"Print\" ");
                strSQL.Append( "FROM");
                strSQL.Append( "         booking_trn_oth_chrg oth_chrg,");
                strSQL.Append( "         bookin_mst_tbl booking_mst,");
                strSQL.Append( "         freight_element_mst_tbl frt,");
                strSQL.Append( "         currency_type_mst_tbl curr,");
                strSQL.Append( "         customer_mst_tbl cmt");
                strSQL.Append( "WHERE");
                strSQL.Append( "         oth_chrg.booking_mst_fk = booking_mst.booking_mst_pk");
                strSQL.Append( "         and booking_mst.cust_customer_mst_fk=cmt.customer_mst_pk");
                strSQL.Append( "         AND oth_chrg.freight_element_mst_fk = frt.freight_element_mst_pk(+)");
                strSQL.Append( "         AND oth_chrg.currency_mst_fk        = curr.currency_mst_pk(+)");

                strSQL.Append( "         AND oth_chrg.booking_mst_fk    = " + BKGPK);
                strSQL.Append( "ORDER BY freight_element_id ");

            }
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        public DataSet FillJobOthChargesForAgent(string JobPk = "0", Int64 BaseCurrency = 1)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.AppendLine("         SELECT");
            strSQL.AppendLine("         oth_chrg.job_trn_oth_pk,");
            strSQL.AppendLine("         frt.freight_element_mst_pk,");
            strSQL.AppendLine("         frt.freight_element_id,");
            strSQL.AppendLine("         frt.freight_element_name,");
            strSQL.AppendLine("         DECODE(oth_chrg.freight_type,1,'Prepaid',2,'Collect',3,'Foreign') Payment_Type, ");
            strSQL.AppendLine("         oth_chrg.location_mst_fk,");
            strSQL.AppendLine("         lmt.location_id ,");
            strSQL.AppendLine("         oth_chrg.frtpayer_cust_mst_fk,");
            strSQL.AppendLine("         cmt.customer_id,");
            strSQL.AppendLine("         NVL(AGENT_CURRENCY_MST_FK,oth_chrg.currency_mst_fk) currency_mst_pk, ");
            if (BaseCurrency > 0)
            {
                strSQL.AppendLine("         GET_EX_RATE(NVL(AGENT_CURRENCY_MST_FK,oth_chrg.currency_mst_fk)," + BaseCurrency + ",JOBCARD_MST.JOBCARD_DATE) ROE, ");
                strSQL.AppendLine("         ROUND(NVL(oth_chrg.AGENT_AMOUNT,oth_chrg.amount)*GET_EX_RATE(NVL(AGENT_CURRENCY_MST_FK,oth_chrg.currency_mst_fk)," + BaseCurrency + ",JOBCARD_MST.JOBCARD_DATE),2) amount,");
            }
            else
            {
                strSQL.AppendLine("         oth_chrg.exchange_rate ROE, ");
                strSQL.AppendLine("         oth_chrg.amount amount,");
            }

            strSQL.AppendLine("         'false' \"Delete\", oth_chrg.PRINT_ON_MBL \"Print\" ");
            strSQL.AppendLine(" FROM ");
            strSQL.AppendLine("         job_trn_oth_chrg oth_chrg,");
            strSQL.AppendLine("         job_card_trn jobcard_mst,");
            strSQL.AppendLine("         freight_element_mst_tbl frt,");
            strSQL.AppendLine("         currency_type_mst_tbl curr,");
            strSQL.AppendLine("         location_mst_tbl lmt,");
            strSQL.AppendLine("         customer_mst_tbl cmt");
            strSQL.AppendLine(" WHERE ");
            strSQL.AppendLine("         oth_chrg.job_card_trn_fk = jobcard_mst.job_card_trn_pk");
            strSQL.AppendLine("         AND oth_chrg.freight_element_mst_fk = frt.freight_element_mst_pk(+)");
            strSQL.AppendLine("         AND oth_chrg.currency_mst_fk        = curr.currency_mst_pk(+)");
            strSQL.AppendLine("         AND oth_chrg.location_mst_fk = lmt.location_mst_pk (+)");
            strSQL.AppendLine("         AND oth_chrg.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+)");
            strSQL.AppendLine("         AND oth_chrg.job_card_trn_fk = " + JobPk);
            strSQL.AppendLine(" ORDER BY freight_element_id ");
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetCurrencyDetails(string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWf = new WorkFlow();
            sb.Append("SELECT C.CURRENCY_MST_PK,");
            sb.Append("       C.CURRENCY_ID,");
            sb.Append("       C.CURRENCY_NAME,");
            sb.Append("       C.ACTIVE_FLAG,");
            sb.Append("       C.CREATED_BY_FK,");
            sb.Append("       C.CREATED_DT,");
            sb.Append("       C.LAST_MODIFIED_BY_FK,");
            sb.Append("       C.LAST_MODIFIED_DT,");
            sb.Append("       C.VERSION_NO");
            sb.Append("  FROM CURRENCY_TYPE_MST_TBL C");
            sb.Append("     WHERE 1=1 ");
            try
            {
                Currency = Convert.ToString(Currency);
                sb.Append("     AND C.CURRENCY_MST_PK = " + Currency);
            }
            catch (Exception ex)
            {
                sb.Append("     AND UPPER(C.CURRENCY_ID) ='" + Currency.ToUpper() + "' ");
            }
            try
            {
                return objWf.GetDataSet(sb.ToString());
            }
            catch (Exception ex)
            {
            }
            return new DataSet();
        }
        public DataSet fillJcOthChrg(string pk = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append( "         SELECT");
            strSQL.Append( "         oth_chrg.Inv_Cust_Trn_Fk,");
            strSQL.Append( "         oth_chrg.Inv_Agent_Trn_Fk,");
            strSQL.Append( "         oth_chrg.consol_invoice_trn_fk");
            strSQL.Append( "FROM");
            strSQL.Append( "         job_trn_oth_chrg oth_chrg,");
            strSQL.Append( "         JOB_CARD_TRN jobcard_mst,");
            strSQL.Append( "         freight_element_mst_tbl frt,");
            strSQL.Append( "         currency_type_mst_tbl curr");
            strSQL.Append( "WHERE");
            strSQL.Append( "         oth_chrg.JOB_CARD_TRN_FK = jobcard_mst.JOB_CARD_TRN_PK");
            strSQL.Append( "         AND oth_chrg.freight_element_mst_fk = frt.freight_element_mst_pk(+)");
            strSQL.Append( "         AND oth_chrg.currency_mst_fk        = curr.currency_mst_pk(+)");
            strSQL.Append( "         AND oth_chrg.JOB_CARD_TRN_FK    = " + pk);
            strSQL.Append( "ORDER BY freight_element_id ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        //added by surya prasad for implementing multiple commodity task
        public string FetchBookingPk(string Jobpk)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            strSQL.Append( " select bkg.BOOKING_MST_PK from ");
            strSQL.Append( " BOOKING_MST_TBL bkg, ");
            strSQL.Append( " JOB_CARD_TRN  jsea ");
            strSQL.Append( " where jsea.BOOKING_MST_FK = bkg.BOOKING_MST_PK ");
            strSQL.Append( " and jsea.JOB_CARD_TRN_PK = " + Jobpk + " ");
            try
            {
                return objWF.ExecuteScaler(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public int FetchEsiFlg(string Jobpk)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            strSQL.Append( "SELECT JC.ESI_FLAG ");
            strSQL.Append( " FROM JOB_CARD_TRN JC WHERE JC.JOB_CARD_TRN_PK =" + Jobpk + "  ");
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(strSQL.ToString()));
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        //end
        public string FetchCostEleDesc(string CostElefk)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            strSQL.Append( "SELECT CMT.COST_ELEMENT_NAME ");
            strSQL.Append( " FROM COST_ELEMENT_MST_TBL CMT");
            strSQL.Append( " WHERE CMT.COST_ELEMENT_MST_PK= " + CostElefk + "");
            try
            {
                return objWF.ExecuteScaler(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Certificate of Insurance -- Exports Sea"
        public DataSet FetchCISExpSea(Int32 JobPk)
        {
            string Strsql = null;
            WorkFlow ObjWk = new WorkFlow();

            Strsql = "  SELECT JS.JOB_CARD_TRN_PK AS JOBPK," ;
            Strsql += " JS.JOBCARD_REF_NO AS JOBREFNO," ;
            Strsql += " JS.VESSEL_NAME AS CONVEYANCE," ;
            Strsql += " COLL.PLACE_NAME AS FRM," ;
            Strsql += " DEL.PLACE_NAME AS VIATO," ;
            Strsql += " NVL(JS.INSURANCE_AMT,0) AS INSUREDVALUE, " ;
            Strsql += " C.CURRENCY_NAME," ;
            Strsql += " H.MARKS_NUMBERS," ;
            Strsql += " H.GOODS_DESCRIPTION AS INTEREST ," ;
            Strsql += " SHP.CUSTOMER_NAME AS SHIPPER" ;
            Strsql += " FROM JOB_CARD_TRN JS," ;
            Strsql += " BOOKING_MST_TBL BS," ;
            Strsql += " HBL_EXP_TBL H," ;
            Strsql += " PLACE_MST_TBL COLL," ;
            Strsql += " PLACE_MST_TBL DEL," ;
            Strsql += " CURRENCY_TYPE_MST_TBL C," ;
            Strsql += " CUSTOMER_MST_TBL SHP" ;
            Strsql += " WHERE JS.BOOKING_MST_FK = BS.BOOKING_MST_PK" ;
            Strsql += " AND H.JOB_CARD_TRN_FK(+)=JS.JOB_CARD_TRN_PK" ;
            Strsql += " AND COLL.PLACE_PK(+)=BS.COL_PLACE_MST_FK" ;
            Strsql += " AND DEL.PLACE_PK(+)=BS.DEL_PLACE_MST_FK" ;
            Strsql += " AND C.CURRENCY_MST_PK(+)=JS.INSURANCE_CURRENCY" ;
            Strsql += " AND SHP.CUSTOMER_MST_PK(+)=JS.SHIPPER_CUST_MST_FK" ;
            Strsql += " AND JS.JOB_CARD_TRN_PK=" + JobPk ;
            try
            {
                return ObjWk.GetDataSet(Strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " Fetch base currency Exchange rate export"
        public DataSet FetchROE(Int64 baseCurrency)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT");
                strSQL.Append( "    CURR.CURRENCY_MST_PK,");
                strSQL.Append( "    CURR.CURRENCY_ID,");
                //"corporate_mst_tbl" removed by thiyagarajan on 21/11/08 for location based currency task
                strSQL.Append( "    ROUND(GET_EX_RATE(CURR.CURRENCY_MST_PK," + baseCurrency + ",round(sysdate - .5)),6) AS ROE");
                strSQL.Append( "FROM");
                strSQL.Append( "    CURRENCY_TYPE_MST_TBL CURR");
                strSQL.Append( "WHERE");
                strSQL.Append( "    CURR.ACTIVE_FLAG = 1");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region " Fetch base currency Exchange rate export"
        public DataSet FetchVesselVoyageROE(Int64 voyage)
        {
            string strSQL = null;
            WorkFlow objWF = new WorkFlow();
            try
            {
                //modified by thiyagarajan on 2/12/08 for location based currency task
                strSQL = " SELECT C.CURRENCY_MST_PK," + " 1  ROE" + " FROM CURRENCY_TYPE_MST_TBL C" + " WHERE C.CURRENCY_MST_PK =" + HttpContext.Current.Session["currency_mst_pk"] + " AND C.ACTIVE_FLAG = 1" + " UNION" + " SELECT CURR.CURRENCY_MST_PK," + " EXCHANGE_RATE ROE" + " FROM CURRENCY_TYPE_MST_TBL CURR, Exchange_Rate_Trn EXC" + " WHERE EXC.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK" + " AND CURR.ACTIVE_FLAG = 1" + " AND EXC.Voyage_Trn_Fk is not null" + " AND exc.voyage_trn_fk = " + voyage + " AND EXC.CURRENCY_MST_BASE_FK =" + HttpContext.Current.Session["currency_mst_pk"] + " AND EXC.CURRENCY_MST_BASE_FK <> EXC.CURRENCY_MST_FK" + " UNION" + " SELECT T.CURRENCY_MST_PK," + " TO_NUMBER(NULL) ROE" + " FROM CURRENCY_TYPE_MST_TBL T " + " WHERE T.CURRENCY_MST_PK NOT IN" + " ( SELECT CURRENCY_MST_PK" + " FROM CURRENCY_TYPE_MST_TBL , Exchange_Rate_Trn " + " WHERE CURRENCY_MST_FK = CURRENCY_MST_PK" + " AND ACTIVE_FLAG = 1" + " AND voyage_trn_fk = " + voyage + " AND CURRENCY_MST_BASE_FK = " + HttpContext.Current.Session["currency_mst_pk"] + " AND CURRENCY_MST_BASE_FK <> CURRENCY_MST_FK )" + " AND T.CURRENCY_MST_PK <> " + HttpContext.Current.Session["currency_mst_pk"];
                return objWF.GetDataSet(strSQL);
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Fetch Freight Type"
        public DataSet FetchFrtType(Int64 baseFrt = 0)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT");
                strSQL.Append( "    STMT.SHIPPING_TERMS_MST_PK, STMT.FREIGHT_TYPE");
                strSQL.Append( "FROM");
                strSQL.Append( "    SHIPPING_TERMS_MST_TBL STMT");

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region " Fetch Data for Standard Shipping Note"
        public DataSet FetchSSN(string JOBPK)
        {
            string Strsql = null;
            WorkFlow ObjWF = new WorkFlow();
            try
            {
                Strsql = " SELECT ";
                Strsql +=  " JAE.JOB_CARD_TRN_PK JOBPK,                     ";
                Strsql +=  " JAE.JOBCARD_REF_NO JOBREFNO,                       ";
                Strsql +=  " BAT.BOOKING_MST_PK BKGPK,                          ";
                Strsql +=  " BAT.BOOKING_REF_NO BKGREFNO,                       ";
                Strsql +=  " BAT.BOOKING_DATE BKGDATE, ";
                Strsql +=  " JAE.SHIPPER_CUST_MST_FK EXPORTERPK,";
                Strsql +=  " CUSTOMER.CUSTOMER_NAME EXPORTERNAME,";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_1 EXPORTERADD1,";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_2 EXPORTERADD2,";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_3 EXPORTERADD3,";
                Strsql +=  " CUSTDTLS.ADM_CITY EXPORTERCITY,";
                Strsql +=  " CUSTDTLS.ADM_LOCATION_MST_FK EXPORTERLOCFK,";
                Strsql +=  " EXPORTERLOC.LOCATION_NAME EXPORTERLOCNAME,";
                Strsql +=  " CUSTDTLS.ADM_COUNTRY_MST_FK EXPORTERCOUNTRYFK,";
                Strsql +=  " EXPORTERCOUNTRY.COUNTRY_NAME EXPORTERCOUNTRYNAME,";
                Strsql +=  " BAT.CUSTOMER_REF_NO EXPORTERSREF,";
                Strsql +=  " CUSTDTLS.ADM_ZIP_CODE EXPORTERZIP,";
                Strsql +=  " CUSTDTLS.ADM_PHONE_NO_1 EXPORTERPHONE1,";
                Strsql +=  " CUSTDTLS.ADM_PHONE_NO_2 EXPORTERPHONE2,";
                Strsql +=  " CUSTDTLS.ADM_FAX_NO     EXPORTERFAX,";
                Strsql +=  " CUSTDTLS.ADM_EMAIL_ID   EXPORTEREMAIL,";
                Strsql +=  " CUSTDTLS.ADM_URL        EXPORTERURL,";
                Strsql +=  " ' ' CUSTOMSFK,                 ";
                Strsql +=  " JAE.UCR_NO  CUSTOMSCODE,       ";
                Strsql +=  " BAT.CUSTOMER_REF_NO EXPORTERREF,                                   ";
                Strsql +=  " CORP.CORPORATE_NAME CORPNAME,                      ";
                Strsql +=  " CORP.ADDRESS_LINE1 CORPADD1,                       ";
                Strsql +=  " CORP.ADDRESS_LINE2 CORPADD2,                       ";
                Strsql +=  " CORP.ADDRESS_LINE3 CORPADD3,                       ";
                Strsql +=  " CORP.CITY          CORPCITY,  ";
                Strsql +=  " CORP.STATE_MST_FK CORPSTATEFK,";
                Strsql +=  " STATE.STATE_NAME CORPSTATENAME,                         ";
                Strsql +=  " CORP.COUNTRY_MST_FK CORPCOUNTRYFK,";
                Strsql +=  " COUNTRY.COUNTRY_NAME CORPCOUNTRY,                  ";
                Strsql +=  " CORP.POST_CODE       CORPZIP, ";
                Strsql +=  " CORP.PHONE           CORPPHONE,";
                Strsql +=  " CORP.FAX             CORPFAX,";
                Strsql +=  " CORP.EMAIL           CORPEMAIL,";
                Strsql +=  " CORP.HOME_PAGE       CORPURL,                     ";
                Strsql +=  " BAT.CARRIER_MST_FK INTLCARRFK,                     ";
                Strsql +=  " OPERAT.OPERATOR_NAME INTLCARRNAME,                 ";
                Strsql +=  " ' ' OTHUKTRANS,                                    ";
                Strsql +=  " (JAE.VESSEL_NAME || '/' || JAE.VOYAGE_FLIGHT_NO) VSL_OR_FLIGHT_NO,                    ";
                Strsql +=  " TO_CHAR(JAE.ETD_DATE,'" + dateFormat + "') VSL_OR_FLIGHT_DATE ,                           ";
                Strsql +=  " BAT.PORT_MST_POL_FK PORTOFLANDFK ,                 ";
                Strsql +=  " PORTOFLANDING.PORT_NAME PORTOFLANDNAME,            ";
                Strsql +=  " BAT.PORT_MST_POD_FK PORTOFDISCHFK,                 ";
                Strsql +=  " PORTOFDISCHARGE.PORT_NAME PORTOFDISCHNAME,         ";
                Strsql +=  " BAT.DEL_PLACE_MST_FK DELPLACEFK,                   ";
                Strsql +=  " PLD.PLACE_NAME DELPLACENAME,                       ";
                Strsql +=  " (CASE                                              ";
                Strsql +=  " WHEN JAE.MARKS_NUMBERS IS NOT NULL THEN          ";
                Strsql +=  " jAE.MARKS_NUMBERS";
                Strsql +=  " ELSE                                               ";
                Strsql +=  " JAE.MARKS_NUMBERS";
                Strsql +=  " END) MARKS,                                        ";
                Strsql +=  " (CASE                                              ";
                Strsql +=  " WHEN JAE.GOODS_DESCRIPTION IS NOT NULL THEN          ";
                Strsql +=  " JAE.GOODS_DESCRIPTION";
                Strsql +=  " ELSE                                               ";
                Strsql +=  " JAE.GOODS_DESCRIPTION";
                Strsql +=  " END) GOODS,                                        ";
                Strsql +=  " SUM(JTAEC.GROSS_WEIGHT) GROSSWT,                   ";
                Strsql +=  " SUM(JTAEC.VOLUME_IN_CBM) VOL_IN_CBM,               ";
                Strsql +=  " SUM(JTAEC.GROSS_WEIGHT) TOTGROSSWT,                ";
                Strsql +=  " SUM(JTAEC.VOLUME_IN_CBM) TOT_VOL_IN_CBM,";
                Strsql +=  " JTAEC.CONTAINER_NUMBER CONTAINERNO,                    ";
                Strsql +=  " JTAEC.SEAL_NUMBER SEALNO,";
                Strsql +=  " COUNT(CONTAINER.CONTAINER_TYPE_MST_ID) || ' X ' || CONTAINER.CONTAINER_TYPE_MST_ID CONTAINERSIZE, ";
                Strsql +=  " CONTAINER.CONTAINER_TAREWEIGHT_TONE TAREWT,                                        ";
                Strsql +=  " JTAEC.PACK_COUNT TOTOFBOXES,                       ";
                Strsql +=  " CORP.CORPORATE_NAME NAMEOFCOMP,                    ";
                Strsql +=  " TO_CHAR(SYSDATE,'" + dateFormat + "') TODAYSDATE ,         ";
                Strsql +=  " JAE.TRANSPORTER_CARRIER_FK HAULIERFK,              ";
                Strsql +=  " TRANSPORTER.VENDOR_NAME HAULIERNAME,               ";
                Strsql +=  " ' ' VEHICLEREGNO                                   ";
                Strsql +=  " FROM JOB_CARD_TRN    JAE,                  ";
                Strsql +=  " job_trn_cont    JTAEC,                     ";
                Strsql +=  " BOOKING_MST_TBL         BAT,                       ";
                Strsql +=  " PLACE_MST_TBL           PLD,                       ";
                Strsql +=  " COMMODITY_GROUP_MST_TBL CGMST,                     ";
                Strsql +=  " CORPORATE_MST_TBL       CORP,                      ";
                Strsql +=  " COUNTRY_MST_TBL         COUNTRY,                   ";
                Strsql +=  " PORT_MST_TBL            PORTOFLANDING,             ";
                Strsql +=  " PORT_MST_TBL            PORTOFDISCHARGE,           ";
                Strsql +=  " VENDOR_MST_TBL TRANSPORTER,";
                Strsql +=  " STATE_MST_TBL STATE,";
                Strsql +=  " CUSTOMER_MST_TBL CUSTOMER,";
                Strsql +=  " CUSTOMER_CONTACT_DTLS CUSTDTLS,";
                Strsql +=  " LOCATION_MST_TBL EXPORTERLOC,";
                Strsql +=  " COUNTRY_MST_TBL EXPORTERCOUNTRY,";
                Strsql +=  " OPERATOR_MST_TBL OPERAT,";
                Strsql +=  " CONTAINER_TYPE_MST_TBL CONTAINER";
                Strsql +=  " WHERE JAE.JOB_CARD_TRN_PK IN(" + JOBPK + " )   ";
                Strsql +=  " AND JTAEC.JOB_CARD_TRN_FK(+) = JAE.JOB_CARD_TRN_PK";
                Strsql +=  " AND JAE.BOOKING_MST_FK = BAT.BOOKING_MST_PK(+)";
                Strsql +=  " AND BAT.CARRIER_MST_FK = OPERAT.OPERATOR_MST_PK(+)";
                Strsql +=  " AND JAE.COMMODITY_GROUP_FK = CGMST.COMMODITY_GROUP_PK(+)";
                Strsql +=  " AND CORP.COUNTRY_MST_FK     = COUNTRY.COUNTRY_MST_PK(+)";
                Strsql +=  " AND BAT.PORT_MST_POL_FK     = PORTOFLANDING.PORT_MST_PK(+)";
                Strsql +=  " AND BAT.PORT_MST_POD_FK     = PORTOFDISCHARGE.PORT_MST_PK(+)";
                Strsql +=  " AND BAT.DEL_PLACE_MST_FK    = PLD.PLACE_PK(+)";
                Strsql +=  " AND JAE.TRANSPORTER_CARRIER_FK = TRANSPORTER.VENDOR_MST_PK(+)";
                Strsql +=  " AND CORP.STATE_MST_FK          = STATE.STATE_MST_PK(+)";
                Strsql +=  " AND JAE.SHIPPER_CUST_MST_FK    = CUSTOMER.CUSTOMER_MST_PK";
                Strsql +=  " AND CUSTDTLS.CUSTOMER_MST_FK   = CUSTOMER.CUSTOMER_MST_PK(+)";
                Strsql +=  " AND CUSTDTLS.ADM_LOCATION_MST_FK = EXPORTERLOC.LOCATION_MST_PK(+)";
                Strsql +=  " AND CUSTDTLS.ADM_COUNTRY_MST_FK  = EXPORTERCOUNTRY.COUNTRY_MST_PK(+)";
                Strsql +=  " AND JTAEC.CONTAINER_TYPE_MST_FK  = CONTAINER.CONTAINER_TYPE_MST_PK(+)";
                Strsql +=  " and CGMST.COMMODITY_GROUP_CODE NOT LIKE 'DGS'   ";
                Strsql +=  " GROUP BY JAE.JOB_CARD_TRN_PK,               ";
                Strsql +=  " JAE.JOBCARD_REF_NO,                             ";
                Strsql +=  " BAT.BOOKING_MST_PK,                             ";
                Strsql +=  " BAT.BOOKING_REF_NO,                             ";
                Strsql +=  " BAT.BOOKING_DATE,  ";
                Strsql +=  " JAE.SHIPPER_CUST_MST_FK ,      ";
                Strsql +=  " CUSTOMER.CUSTOMER_NAME ,       ";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_1 ,       ";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_2 ,       ";
                Strsql +=  " CUSTDTLS.ADM_ADDRESS_3 ,       ";
                Strsql +=  " CUSTDTLS.ADM_CITY ,            ";
                Strsql +=  " JAE.UCR_NO,                    ";
                Strsql +=  " CUSTDTLS.ADM_LOCATION_MST_FK , ";
                Strsql +=  " EXPORTERLOC.LOCATION_NAME ,    ";
                Strsql +=  " CUSTDTLS.ADM_COUNTRY_MST_FK ,  ";
                Strsql +=  " EXPORTERCOUNTRY.COUNTRY_NAME , ";
                Strsql +=  " BAT.CUSTOMER_REF_NO,          ";
                Strsql +=  " CUSTDTLS.ADM_ZIP_CODE ,    ";
                Strsql +=  " CUSTDTLS.ADM_PHONE_NO_1 ,  ";
                Strsql +=  " CUSTDTLS.ADM_PHONE_NO_2 ,  ";
                Strsql +=  " CUSTDTLS.ADM_FAX_NO     ,  ";
                Strsql +=  " CUSTDTLS.ADM_EMAIL_ID   ,  ";
                Strsql +=  " CUSTDTLS.ADM_URL,                              ";
                Strsql +=  " ' ',                                           ";
                Strsql +=  " ' ' ,                                          ";
                Strsql +=  " ' ' ,                                          ";
                Strsql +=  " CORP.CORPORATE_NAME ,                          ";
                Strsql +=  " CORP.ADDRESS_LINE1 ,                           ";
                Strsql +=  " CORP.ADDRESS_LINE2 ,                           ";
                Strsql +=  " CORP.ADDRESS_LINE3 ,                           ";
                Strsql +=  " CORP.CITY          ,                           ";
                Strsql +=  " CORP.STATE_MST_FK ,                            ";
                Strsql +=  " STATE.STATE_NAME ,                             ";
                Strsql +=  " CORP.COUNTRY_MST_FK ,                          ";
                Strsql +=  " COUNTRY.COUNTRY_NAME ,                         ";
                Strsql +=  " CORP.POST_CODE       ,                         ";
                Strsql +=  " CORP.PHONE           ,                         ";
                Strsql +=  " CORP.FAX             ,                         ";
                Strsql +=  " CORP.EMAIL           ,                         ";
                Strsql +=  " CORP.HOME_PAGE       ,                         ";
                Strsql +=  " BAT.CARRIER_MST_FK OPERATOR_MST_FK ,                          ";
                Strsql +=  " OPERAT.OPERATOR_NAME ,                         ";
                Strsql +=  " ' ',                                           ";
                Strsql +=  " (JAE.VESSEL_NAME || '/'|| JAE.VOYAGE_FLIGHT_NO) ,        ";
                Strsql +=  " TO_CHAR(JAE.ETD_DATE,'" + dateFormat + "'),            ";
                Strsql +=  " BAT.PORT_MST_POL_FK,                           ";
                Strsql +=  " PORTOFLANDING.PORT_NAME,                       ";
                Strsql +=  " BAT.PORT_MST_POD_FK ,                          ";
                Strsql +=  " PORTOFDISCHARGE.PORT_NAME,                     ";
                Strsql +=  " BAT.DEL_PLACE_MST_FK,                          ";
                Strsql +=  " PLD.PLACE_NAME,                                ";
                Strsql +=  " (CASE                                          ";
                Strsql +=  " WHEN JAE.MARKS_NUMBERS IS NOT NULL THEN        ";
                Strsql +=  " JAE.MARKS_NUMBERS                              ";
                Strsql +=  " ELSE                                           ";
                Strsql +=  " JAE.MARKS_NUMBERS                              ";
                Strsql +=  " END),                                          ";
                Strsql +=  " (CASE                                          ";
                Strsql +=  " WHEN JAE.GOODS_DESCRIPTION IS NOT NULL THEN    ";
                Strsql +=  " JAE.GOODS_DESCRIPTION                          ";
                Strsql +=  " ELSE                                           ";
                Strsql +=  " JAE.GOODS_DESCRIPTION                          ";
                Strsql +=  " END),                                          ";
                Strsql +=  " JTAEC.CONTAINER_NUMBER,                        ";
                Strsql +=  " JTAEC.SEAL_NUMBER,                             ";
                Strsql +=  " CONTAINER.CONTAINER_TYPE_MST_ID,                ";
                Strsql +=  " CONTAINER.CONTAINER_TAREWEIGHT_TONE,            ";
                Strsql +=  " JTAEC.PACK_COUNT,                               ";
                Strsql +=  " CORP.CORPORATE_NAME,                            ";
                Strsql +=  " TO_CHAR(SYSDATE,'" + dateFormat + "') ,                 ";
                Strsql +=  " JAE.TRANSPORTER_CARRIER_FK ,                    ";
                Strsql +=  " TRANSPORTER.VENDOR_NAME ,                       ";
                Strsql +=  "  ' '                                            ";

                return ObjWF.GetDataSet(Strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch Volume and Gross Weight"
        public Int32 FetchVolume(string JOBPK)
        {
            string Strsql = null;
            Int32 TotVol = 0;
            WorkFlow ObjWF = new WorkFlow();
            try
            {
                Strsql = " select sum(nvl(j.volume_in_cbm,0)) ";
                Strsql +=  " from job_trn_cont j where j.JOB_CARD_TRN_FK=" + JOBPK;
                TotVol = Convert.ToInt32(ObjWF.ExecuteScaler(Strsql));
                return TotVol;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Int32 FetchGrossWt(string JOBPK)
        {
            string Strsql = null;
            Int32 TotGrossWt = 0;
            WorkFlow ObjWF = new WorkFlow();
            try
            {
                Strsql = " select sum(nvl(j.gross_weight,0)) ";
                Strsql +=  " from job_trn_cont j where j.JOB_CARD_TRN_FK=" + JOBPK;
                TotGrossWt = Convert.ToInt32(ObjWF.ExecuteScaler(Strsql));
                return TotGrossWt;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Enhance Search Function"
        public string FetchMasterJobCardAir(string strCond)
        {

            WorkFlow objWF = new WorkFlow();
            OracleCommand selectCommand = new OracleCommand();
            string strReturn = null;
            Array arr = null;
            string strSERACH_IN = null;
            string strReq = null;
            string POL = null;
            string POD = null;
            string operatorPK = null;


            var strNull = DBNull.Value;

            arr = strCond.Split('~');

            strReq = Convert.ToString(arr.GetValue(0));
            strSERACH_IN = Convert.ToString(arr.GetValue(1));

            POL = Convert.ToString(arr.GetValue(2));
            POD = Convert.ToString(arr.GetValue(3));
            operatorPK = Convert.ToString(arr.GetValue(4));
            try
            {
                objWF.OpenConnection();
                selectCommand.Connection = objWF.MyConnection;
                selectCommand.CommandType = CommandType.StoredProcedure;
                selectCommand.CommandText = objWF.MyUserName + ".EN_JOBCARD_MASTER_PKG.GET_MASTERJOBCARDAIR";

                var _with96 = selectCommand.Parameters;
                _with96.Add("SEARCH_IN", (!string.IsNullOrEmpty(strSERACH_IN) ? strSERACH_IN : "")).Direction = ParameterDirection.Input;
                _with96.Add("LOOKUP_VALUE_IN", (!string.IsNullOrEmpty(strReq) ? strReq : "")).Direction = ParameterDirection.Input;
                _with96.Add("POL_IN", (!string.IsNullOrEmpty(POL) ? POL : "")).Direction = ParameterDirection.Input;
                _with96.Add("POD_IN", (!string.IsNullOrEmpty(POD) ? POD : "")).Direction = ParameterDirection.Input;
                _with96.Add("LOC_FK_IN", HttpContext.Current.Session["USER_PK"]).Direction = ParameterDirection.Input;
                _with96.Add("RETURN_VALUE", OracleDbType.Clob).Direction = ParameterDirection.Output;
                selectCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
               
                selectCommand.ExecuteNonQuery();
                OracleClob clob = null;
                clob = (OracleClob)selectCommand.Parameters["RETURN_VALUE"].Value;
                System.IO.StreamReader strReader = new System.IO.StreamReader(clob, Encoding.Unicode);
                strReturn = strReader.ReadToEnd();
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                selectCommand.Connection.Close();
            }
        }
        #endregion

        #region " Enhance Search Function "
        public string FetchMasterJobCardSea(string strCond)
        {
            WorkFlow objWF = new WorkFlow();
            OracleCommand selectCommand = new OracleCommand();
            string strReturn = null;
            Array arr = null;
            string strSERACH_IN = null;
            string strReq = null;
            string POL = null;
            string POD = null;
            string operatorPK = null;

            var strNull = DBNull.Value;

            arr = strCond.Split('~');

            strReq = Convert.ToString(arr.GetValue(0));
            strSERACH_IN = Convert.ToString(arr.GetValue(1));

            POL = Convert.ToString(arr.GetValue(2));
            POD = Convert.ToString(arr.GetValue(3));
            operatorPK = Convert.ToString(arr.GetValue(4));
            try
            {
                objWF.OpenConnection();
                selectCommand.Connection = objWF.MyConnection;
                selectCommand.CommandType = CommandType.StoredProcedure;
                selectCommand.CommandText = objWF.MyUserName + ".EN_JOBCARD_MASTER_PKG.GET_MASTERJOBCARDSEA";

                var _with97 = selectCommand.Parameters;
                _with97.Add("SEARCH_IN", (!string.IsNullOrEmpty(strSERACH_IN) ? strSERACH_IN : "")).Direction = ParameterDirection.Input;
                _with97.Add("LOOKUP_VALUE_IN", (!string.IsNullOrEmpty(strReq) ? strReq : "")).Direction = ParameterDirection.Input;
                _with97.Add("POL_IN", (!string.IsNullOrEmpty(POL) ? POL : "")).Direction = ParameterDirection.Input;
                _with97.Add("POD_IN", (!string.IsNullOrEmpty(POD) ? POD : "")).Direction = ParameterDirection.Input;
                _with97.Add("OPERATOR_IN", (!string.IsNullOrEmpty(operatorPK) ? operatorPK : "")).Direction = ParameterDirection.Input;
                _with97.Add("LOC_FK_IN", HttpContext.Current.Session["USER_PK"]).Direction = ParameterDirection.Input;
                //Snigdharani - 15/12/2008
                _with97.Add("RETURN_VALUE", OracleDbType.Clob).Direction = ParameterDirection.Output;
                selectCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                selectCommand.ExecuteNonQuery();
                //strReturn = CStr(selectCommand.Parameters["RETURN_VALUE").Value)
                OracleClob clob = null;
                clob = (OracleClob)selectCommand.Parameters["RETURN_VALUE"].Value;
                System.IO.StreamReader strReader = new System.IO.StreamReader(clob, Encoding.Unicode);
                strReturn = strReader.ReadToEnd();
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                selectCommand.Connection.Close();
            }
        }
        #endregion

        #region " Fetch Max Contract No."
        public string FetchJobCardReferenceNo(string strMasterJobCardNo)
        {
            try
            {
                string strSQL = null;
                WorkFlow objWF = new WorkFlow();
                string strResult = null;

                strSQL = " SELECT NVL(MAX(T.jobcard_ref_no),0) FROM JOB_CARD_TRN T "  + " WHERE t.master_jc_sea_exp_fk = " + strMasterJobCardNo  + " ORDER BY T.jobcard_ref_no ";

                strResult = objWF.ExecuteScaler(strSQL);

                if (strResult == "0")
                {
                    strSQL = " select m.master_jc_ref_no from master_jc_sea_exp_tbl m " + " where m.master_jc_sea_exp_pk = " + strMasterJobCardNo;
                    strResult = objWF.ExecuteScaler(strSQL);
                }

                return strResult;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " Fetch VAT percentage "
        public double FetchVATPercentage()
        {
            try
            {
                string strSQL = "select nvl(c.vat_percentage,0) from corporate_mst_tbl c";
                WorkFlow objWK = new WorkFlow();
                return Convert.ToDouble(objWK.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch EnableDisableOprStatus & Save Operator Booking"

        public string funEDisableOprStatus(string strBookingRefNo)
        {
            StringBuilder strBuilder = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            string strReturn = null;
            strBuilder.Append(" SELECT ");
            strBuilder.Append(" BST.BOOKING_MST_PK");
            strBuilder.Append(" FROM");
            strBuilder.Append(" BOOKING_MST_TBL BST ,");
            strBuilder.Append(" JOB_CARD_TRN JHDR");
            strBuilder.Append(" WHERE");
            strBuilder.Append(" BST.VSL_AIR_OPR_UPD_STATUS=1 ");
            strBuilder.Append(" AND JHDR.BOOKING_MST_FK=BST.BOOKING_MST_PK");
            strBuilder.Append(" AND (JHDR.HBL_HAWB_FK IS NULL AND JHDR.MBL_MAWB_FK IS NULL)");
            strBuilder.Append(" AND BST.BOOKING_REF_NO='" + strBookingRefNo + "'");
            try
            {
                strReturn = objWF.ExecuteScaler(strBuilder.ToString());
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private object funUpStreamUpdationBookingOpr(string strBookingRefNo, string strOperatorPk, OracleTransaction TRAN)
        {
            try
            {
                arrMessage.Clear();
                WorkFlow objWF = new WorkFlow();
                StringBuilder strBuilder = new StringBuilder();
                OracleCommand OCUpdCmd = new OracleCommand();
                Int16 intReturn = default(Int16);
                var _with98 = OCUpdCmd;
                _with98.CommandType = CommandType.StoredProcedure;
                _with98.CommandText = objWF.MyUserName + ".JOB_CARD_TRN_PKG.UPDATE_UPSTREAM_BOOKINGOPR";
                _with98.Connection = TRAN.Connection;
                _with98.Transaction = TRAN;

                _with98.Parameters.Clear();
                _with98.Parameters.Add("BOOKING_REFNO_IN", strBookingRefNo).Direction = ParameterDirection.Input;
                _with98.Parameters.Add("OPERATOR_FK_IN", strOperatorPk).Direction = ParameterDirection.Input;
                _with98.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 100, "RETURN_VALUE").Direction = ParameterDirection.Output;
                intReturn = Convert.ToInt16(_with98.ExecuteNonQuery());



                if (intReturn == 1)
                {
                    arrMessage.Add("All Data Saved Successfully");
                }
                else
                {
                    arrMessage.Add("Upstream updation failed, Check Operator");
                }
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                throw oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region "Fetch MJCPK"
        //Added by rabbani
        public string FetchMJCPK(string jobCardPK = "0")
        {
            string strSQL = null;
            strSQL = " SELECT JC.MASTER_JC_FK FROM JOB_CARD_TRN JC WHERE JC.JOB_CARD_TRN_PK = " + jobCardPK;
            try
            {
                return (new WorkFlow()).ExecuteScaler(strSQL);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region "Export to XML"         ' Manoharan 04June2008 for Qfor-Qfin
        public DataSet Export2XML(string jobCardPK = "0")
        {

            WorkFlow objWF = new WorkFlow();
            DataTable dtSale = null;
            DataTable dtFrt = null;
            DataTable dtCost = null;
            DataSet MainDs = new DataSet();

            try
            {
                dtSale = getSalesHeader(jobCardPK);
                dtFrt = getSalesFreight(jobCardPK);
                dtCost = getSalesCost(jobCardPK);
                MainDs.Tables.Add(dtSale);
                MainDs.Tables.Add(dtFrt);
                MainDs.Tables.Add(dtCost);

                MainDs.Tables[0].TableName = "SALES";
                MainDs.Tables[1].TableName = "CHARGEDETAILS";
                MainDs.Tables[2].TableName = "COSTDETAILS";

                DataRelation relJc_Frt = new DataRelation("relJcFrt", new DataColumn[] { MainDs.Tables["SALES"].Columns["JOB_PK"] }, new DataColumn[] { MainDs.Tables["CHARGEDETAILS"].Columns["JOB_PK"] });
                DataRelation relJc_Cost = new DataRelation("relJcCost", new DataColumn[] { MainDs.Tables["SALES"].Columns["JOB_PK"] }, new DataColumn[] { MainDs.Tables["COSTDETAILS"].Columns["JOB_PK"] });

                relJc_Frt.Nested = true;
                relJc_Cost.Nested = true;

                MainDs.Relations.Add(relJc_Frt);
                MainDs.Relations.Add(relJc_Cost);
                MainDs.DataSetName = "JOBCARDSALES";

                return MainDs;

            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataTable getSalesHeader(string jobCardPK = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT  ");
            strSQL.Append(" ' ' AS \"SALENR\",' ' AS \"SALEDT\",' ' AS \"ACTIVITYDT\",' ' AS \"ROEBASIS\", ");
            strSQL.Append(" Q.jobcard_ref_no as \"JCNUMBER\", Q.jobcard_date as \"JCDATE\", Q.booking_ref_no as \"BKGNUMBER\", ");
            strSQL.Append(" Q.booking_date AS \"BKGDATE\", Q.hbl_ref_no as \"BLNUMBER\", Q.hbl_date as \"BLDATE\", ");
            strSQL.Append(" Q.customer_id  as \"PARTYID\", Q.customer_name  as \"PARTYNAME\", 'CUSTOMER' AS \"PARTYFLAG\", ");
            strSQL.Append(" 'SEA' AS \"BIZTYPE\", Q.place_code  as \"POR\", Q.POL as \"POL\", Q.POD as \"POD\", ");
            strSQL.Append(" Q.PFD as \"PFD\", 'EXPORT' AS \"PROCESSTYPE\", Q.cargo_move_code as \"SHIPMENTTERMS\" , ");
            strSQL.Append(" Q.VSL_VOYAGE AS \"VSLVOYAGE\", 'CONTAINER' AS \"SHIPMENTTYPE\", Q.JOB_CARD_TRN_PK AS \"JOB_PK\" FROM (SELECT ");
            strSQL.Append(" job_exp.JOB_CARD_TRN_PK, job_exp.BOOKING_MST_FK, job_exp.jobcard_ref_no , ");
            strSQL.Append(" to_char(job_exp.jobcard_date,'dd-Mon-yyyy') jobcard_date, bst.booking_ref_no, to_char(bst.booking_date,'dd-Mon-yyyy') booking_date, ");
            strSQL.Append(" job_exp.HBL_HAWB_FK, nvl(hbl.hbl_ref_no,' ') hbl_ref_no, nvl(to_char(hbl.hbl_date, 'dd-Mon-yyyy'), ' ') hbl_date, job_exp.shipper_cust_mst_fk, shipper.customer_id, ");
            strSQL.Append(" shipper.customer_name,bst.col_place_mst_fk, nvl(col_place.place_code,' ') place_code, bst.port_mst_pol_fk, ");
            strSQL.Append(" pol.port_id as \"POL\",bst.port_mst_pod_fk, pod.port_id as \"POD\",bst.del_place_mst_fk, ");
            strSQL.Append(" nvl(del_place.place_code,' ')  as \"PFD\", job_exp.cargo_move_fk, stm.cargo_move_code, ");
            strSQL.Append(" VVT.VOYAGE_TRN_PK \"VoyagePK\", CASE WHEN V.VESSEL_ID IS NULL THEN ' ' ELSE ");
            strSQL.Append(" V.VESSEL_ID || '/' || VVT.VOYAGE END AS \"VSL_VOYAGE\" ");
            strSQL.Append(" FROM ");
            strSQL.Append(" JOB_CARD_TRN job_exp,BOOKING_MST_TBL bst,port_mst_tbl POD,port_mst_tbl POL, ");
            strSQL.Append(" cargo_move_mst_tbl stm,customer_mst_tbl shipper,place_mst_tbl col_place, ");
            strSQL.Append(" place_mst_tbl del_place,VESSEL_VOYAGE_TBL V,  VESSEL_VOYAGE_TRN VVT, hbl_exp_tbl hbl ");
            strSQL.Append(" WHERE ");
            strSQL.Append(" job_exp.JOB_CARD_TRN_PK = " + jobCardPK);
            strSQL.Append(" AND job_exp.BOOKING_MST_FK   =  bst.BOOKING_MST_PK ");
            strSQL.Append(" AND bst.port_mst_pol_fk  =  pol.port_mst_pk ");
            strSQL.Append(" AND bst.port_mst_pod_fk  =  pod.port_mst_pk ");
            strSQL.Append(" AND bst.col_place_mst_fk =  col_place.place_pk(+) ");
            strSQL.Append(" AND bst.del_place_mst_fk =  del_place.place_pk(+) ");
            strSQL.Append(" AND job_exp.shipper_cust_mst_fk  =  shipper.customer_mst_pk(+) ");
            strSQL.Append(" AND VVT.VESSEL_VOYAGE_TBL_FK =  V.VESSEL_VOYAGE_TBL_PK(+)  ");
            strSQL.Append(" AND JOB_EXP.VOYAGE_TRN_FK = VVT.VOYAGE_TRN_PK(+) ");
            strSQL.Append(" and hbl.hbl_exp_tbl_pk(+) = job_exp.HBL_HAWB_FK ");
            strSQL.Append(" and job_exp.cargo_move_fk = stm.cargo_move_pk(+)) Q ");
            try
            {
                return objWF.GetDataTable(strSQL.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable getSalesFreight(string jobCardPK = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            //Dim AmountFormat As String = ""

            strSQL.Append(" SELECT ");
            strSQL.Append(" Q.freight_element_id  AS \"CHARGECODE\",' ' AS \"PACKAGETYPE\", ");
            strSQL.Append(" Q.container_type_mst_id AS \"CONTAINERTYPE\",Q.currency_id AS \"CURRENCY\", ");

            //strSQL.Append(" Q.QUANTITY AS ""QUANTITY"",Q.freight_amt/Q.QUANTITY AS ""RATE"", ")
            strSQL.Append(" Q.QUANTITY AS \"QUANTITY\",");
            strSQL.Append(" case when (Q.QUANTITY=0 or Q.freight_amt=0) then 0 ");
            strSQL.Append(" else ");
            strSQL.Append(" ROUND(Q.freight_amt/Q.QUANTITY,2) ");
            strSQL.Append(" END \"RATE\",");

            strSQL.Append(" Q.freight_type AS \"PCFLAG\",Q.freight_amt AS \"AMOUNT\", ");
            strSQL.Append(" ' ' AS \"VATPERCENTAGE\",' ' AS \"VATAMOUNT\", ");
            strSQL.Append(" Q.location_id AS \"COLLECTLOCATION\",Q.customer_id AS \"COLLECTPARTY\", ");
            strSQL.Append(" ' ' AS \"ROE\",' ' AS \"ROEBASIS\",' ' AS \"AMT_IN_BASE\",' ' as \"STATUS\", Q.JOB_CARD_TRN_FK AS \"JOB_PK\" ");
            strSQL.Append(" FROM (SELECT ");
            strSQL.Append(" JOB_TRN_FD_pk, JOB_CARD_TRN_FK,\tcontainer_type_mst_fk, freight.freight_element_id, ");
            strSQL.Append(" freight.freight_element_mst_pk,\tcont.container_type_mst_id, job_trn_fd.currency_mst_fk, ");
            strSQL.Append(" curr.currency_id, (select Count(*) FROM job_trn_cont job_trn_cont ");
            strSQL.Append(" where job_trn_cont.JOB_CARD_TRN_FK = " + jobCardPK);
            strSQL.Append(" and job_trn_cont.container_type_mst_fk = container_type_mst_fk) as \"QUANTITY\", ");
            strSQL.Append(" DECODE(job_trn_fd.freight_type,1,'Prepaid',2,'Collect',3,'Foreign') freight_type,  ");
            strSQL.Append(" job_trn_fd.freight_amt, job_trn_fd.location_mst_fk, lmt.location_id , ");
            strSQL.Append(" job_trn_fd.frtpayer_cust_mst_fk, cmt.customer_id ");
            strSQL.Append(" FROM ");
            strSQL.Append(" job_trn_fd job_trn_fd, container_type_mst_tbl cont, currency_type_mst_tbl curr, ");
            strSQL.Append(" freight_element_mst_tbl freight, parameters_tbl prm, JOB_CARD_TRN job_exp, ");
            strSQL.Append(" location_mst_tbl lmt, customer_mst_tbl cmt ");
            strSQL.Append(" WHERE ");
            strSQL.Append(" job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK ");
            strSQL.Append(" AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+) ");
            strSQL.Append(" AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk ");
            strSQL.Append(" AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk ");
            strSQL.Append(" AND job_trn_fd.freight_element_mst_fk = prm.frt_bof_fk ");
            strSQL.Append(" AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+) ");
            strSQL.Append(" AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+) ");
            strSQL.Append(" AND job_exp.JOB_CARD_TRN_PK =" + jobCardPK);
            strSQL.Append("  union all  ");
            strSQL.Append("  SELECT ");
            strSQL.Append(" JOB_TRN_FD_pk, JOB_CARD_TRN_FK, container_type_mst_fk, freight.freight_element_id, ");
            strSQL.Append(" freight.freight_element_mst_pk,\tcont.container_type_mst_id, job_trn_fd.currency_mst_fk, ");
            strSQL.Append(" curr.currency_id, (select Count(*) FROM job_trn_cont job_trn_cont ");
            strSQL.Append(" where job_trn_cont.JOB_CARD_TRN_FK = " + jobCardPK);
            strSQL.Append(" and job_trn_cont.container_type_mst_fk = container_type_mst_fk) as \"QUANTITY\", ");
            strSQL.Append(" DECODE(job_trn_fd.freight_type,1,'Prepaid',2,'Collect',3,'Foreign') freight_type, ");
            strSQL.Append(" job_trn_fd.freight_amt, job_trn_fd.location_mst_fk, lmt.location_id , ");
            strSQL.Append(" job_trn_fd.frtpayer_cust_mst_fk, cmt.customer_id ");
            strSQL.Append(" FROM ");
            strSQL.Append(" job_trn_fd job_trn_fd, container_type_mst_tbl cont, currency_type_mst_tbl curr, ");
            strSQL.Append(" freight_element_mst_tbl freight, parameters_tbl prm, JOB_CARD_TRN job_exp, ");
            strSQL.Append(" location_mst_tbl lmt, customer_mst_tbl cmt ");
            strSQL.Append(" WHERE ");
            strSQL.Append(" job_trn_fd.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK ");
            strSQL.Append(" AND job_trn_fd.container_type_mst_fk = cont.container_type_mst_pk(+) ");
            strSQL.Append(" AND job_trn_fd.Currency_Mst_Fk = curr.currency_mst_pk ");
            strSQL.Append(" AND job_trn_fd.freight_element_mst_fk = freight.freight_element_mst_pk ");
            strSQL.Append(" AND job_trn_fd.freight_element_mst_fk not in  prm.frt_bof_fk ");
            strSQL.Append("  AND job_trn_fd.location_mst_fk = lmt.location_mst_pk (+) ");
            strSQL.Append(" AND job_trn_fd.frtpayer_cust_mst_fk = cmt.customer_mst_pk(+) ");
            strSQL.Append(" AND job_exp.JOB_CARD_TRN_PK = " + jobCardPK);
            strSQL.Append(" )Q");
            try
            {
                return objWF.GetDataTable(strSQL.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable getSalesCost(string jobCardPK = "0")
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT ");
            strSQL.Append(" Q.vendor_key AS \"PARTYID\", Q.VENDOR_NAME AS \"PARTYNAME\", 'VENDOR' AS \"PARTYTYPE\", ");
            strSQL.Append(" Q.cost_element_id AS \"COSTCODE\", Q.LOCATION_ID AS \"COSTCENTER\", Q.CONT_TYPE AS \"CONTAINERTYPE\", ");
            //
            strSQL.Append(" ' ' AS \"PACKAGETYPE\", Q.CURRENCY_ID AS \"CURRENCY\" , Q.QUANTITY AS \"QUANTITY\", ");

            //strSQL.Append(" (Q.estimated_amt/QUANTITY) AS ""RATE"", Q.estimated_amt AS ""AMOUNT"", ")
            strSQL.Append(" case when (Q.estimated_amt=0 or QUANTITY=0) then 0 ");
            strSQL.Append(" else ");
            strSQL.Append(" Q.estimated_amt/QUANTITY");
            strSQL.Append(" END \"RATE\",");

            strSQL.Append(" Q.tax_percentage AS \"VATPERCENTAGE\", Q.tax_amt AS \"VATAMOUNT\", Q.invoice_amt AS \"TOTALAMOUNT\", ");
            strSQL.Append(" ' ' AS \"ROE\", ' ' AS \"ROEBASIS\", ' ' AS \"AMT_IN_BASE\", ");
            strSQL.Append(" Q.JOB_CARD_TRN_FK AS \"JOB_PK\" ");
            strSQL.Append(" FROM (SELECT ");
            strSQL.Append(" JOB_TRN_PIA_PK, JOB_CARD_TRN_FK, vendor_mst_fk, vendor_key, ");
            strSQL.Append(" VENDOR.VENDOR_NAME, cost_element_mst_fk, cost_element_id, LMT.LOCATION_ID,");
            //
            strSQL.Append(" (select DISTINCT CONT.CONTAINER_TYPE_MST_ID FROM job_trn_cont job_trn_cont, ");
            strSQL.Append(" container_type_mst_tbl cont where ");
            strSQL.Append(" CONT.CONTAINER_TYPE_MST_PK = job_trn_cont.container_type_mst_fk ");
            strSQL.Append(" AND job_trn_cont.JOB_CARD_TRN_FK= " + jobCardPK);
            strSQL.Append(" ) AS \"CONT_TYPE\", ");
            strSQL.Append(" currency_mst_fk, CURR.CURRENCY_ID, (select Count(*) FROM job_trn_cont job_trn_cont, ");
            strSQL.Append(" container_type_mst_tbl cont where ");
            strSQL.Append(" CONT.CONTAINER_TYPE_MST_PK = job_trn_cont.container_type_mst_fk ");
            strSQL.Append(" AND job_trn_cont.JOB_CARD_TRN_FK = " + jobCardPK);
            strSQL.Append(" ) as \"QUANTITY\", ");
            strSQL.Append(" estimated_amt, tax_percentage, tax_amt,\tinvoice_amt ");
            strSQL.Append(" FROM ");
            strSQL.Append(" job_trn_pia  job_trn_pia, ");
            strSQL.Append(" currency_type_mst_tbl curr, ");
            strSQL.Append(" cost_element_mst_tbl cost_ele, ");
            strSQL.Append(" JOB_CARD_TRN job_exp, USER_MST_TBL  UMT, LOCATION_MST_TBL      LMT,");
            //
            strSQL.Append(" VENDOR_MST_TBL VENDOR ");
            strSQL.Append(" WHERE ");
            strSQL.Append(" job_trn_pia.JOB_CARD_TRN_FK = job_exp.JOB_CARD_TRN_PK ");
            strSQL.Append(" AND job_trn_pia.cost_element_mst_fk =cost_ele.cost_element_mst_pk ");
            strSQL.Append(" AND job_trn_pia.currency_mst_fk =curr.currency_mst_pk ");
            strSQL.Append(" AND VENDOR.VENDOR_MST_PK = job_trn_pia.Vendor_Mst_Fk AND JOB_EXP.CREATED_BY_FK = UMT.USER_MST_PK AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            //
            strSQL.Append(" AND job_exp.JOB_CARD_TRN_PK = " + jobCardPK);
            strSQL.Append(" ) Q");
            try
            {
                return objWF.GetDataTable(strSQL.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //adding by thiyagarajan on 10/11/08 to display PDF through JOBCARD Entry Screen :PTS Task
        public string AgentType(string Refno, Int32 process, Int32 biztype)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append(" select decode(inv.cb_or_dp_agent,1,'CB',2,'DP') from INV_AGENT_TBL inv where ");
                strSQL.Append(" inv.invoice_ref_no like '" + Refno + "' ");
                if (process == 2)
                {
                    strSQL.Replace("EXP", "IMP");
                    strSQL.Replace("cb_or_dp_agent", "CB_OR_LOAD_AGENT");
                }
                if (biztype == 1)
                {
                    strSQL.Replace("SEA", "AIR");
                }
                return objWF.ExecuteScaler(strSQL.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ArrayList CreditType(string Refno, Int32 process, Int32 biztype)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            ArrayList result = new ArrayList();
            OracleDataReader cmdreader = null;
            try
            {
                strSQL.Append(" select CR.CR_AGENT_SEA_EXP_PK PK,decode(CR.CB_OR_DP_AGENT,1,'CB',2,'DP') CRType ");
                strSQL.Append(" from CR_AGENT_SEA_EXP_TBL CR WHERE CR.CREDIT_NOTE_REF_NO LIKE '" + Refno + "' ");
                if (process == 2)
                {
                    strSQL.Replace("EXP", "IMP");
                    strSQL.Replace("CB_OR_DP_AGENT", "CB_OR_LOAD_AGENT");
                }
                if (biztype == 1)
                {
                    strSQL.Replace("SEA", "AIR");
                }
                cmdreader = objWF.GetDataReader(strSQL.ToString());
                while (cmdreader.Read())
                {
                    result.Add(cmdreader[0]);
                    result.Add(cmdreader[1]);
                }
                cmdreader.Close();
                objWF.MyConnection.Close();
                return result;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public Int32 CrCustomer(string Refno, Int32 process, Int32 biztype)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            int CRPK = 0;
            try
            {
                strSQL.Append(" select cust.cr_cust_sea_exp_pk from CR_CUST_SEA_EXP_TBL cust where cust.credit_note_ref_no like '" + Refno + "' ");
                if (biztype == 1)
                {
                    strSQL.Replace("SEA", "AIR");
                }
                CRPK = Convert.ToInt32(objWF.ExecuteScaler(strSQL.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return CRPK;
        }
        public Int32 CrCustomer(string Refno)
        {
            string strSQL = null;
            WorkFlow objWF = new WorkFlow();
            int CRPK = 0;
            try
            {
                strSQL = "SELECT CRN.CRN_TBL_PK FROM CREDIT_NOTE_TBL CRN WHERE UPPER(CRN.CREDIT_NOTE_REF_NR)=UPPER('" + Refno + "')";
                CRPK = Convert.ToInt32(objWF.ExecuteScaler(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return CRPK;
        }
        public string CRAgentType(string Refno, Int32 process, Int32 biztype)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append(" select decode(inv.cb_or_dp_agent,1,'CB',2,'DP') from CR_AGENT_SEA_EXP_TBL inv where ");
                strSQL.Append(" inv.credit_note_ref_no like '" + Refno + "' ");
                if (process == 2)
                {
                    strSQL.Replace("EXP", "IMP");
                    strSQL.Replace("cb_or_dp_agent", "CB_OR_LOAD_AGENT");
                }
                if (biztype == 1)
                {
                    strSQL.Replace("SEA", "AIR");
                }
                return objWF.ExecuteScaler(strSQL.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public Int32 GetCRPk(string Refno, Int32 process, Int32 biztype)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append(" select inv.cr_agent_SEA_EXP_pk from CR_AGENT_SEA_EXP_TBL inv where ");
                strSQL.Append(" inv.credit_note_ref_no like '" + Refno + "' ");
                if (process == 2)
                {
                    strSQL.Replace("EXP", "IMP");
                }
                if (biztype == 1)
                {
                    strSQL.Replace("SEA", "AIR");
                }
                return Convert.ToInt32(objWF.ExecuteScaler(strSQL.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //end by thiyagarajan
        #endregion

        #region "CLP Report MainDS"
        public DataSet FetchRptDS(string JOBPK)
        {
            string strSQL = null;
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL = "select rownum as slnr,";
                strSQL +=  "job_exp.JOB_CARD_TRN_PK,";
                strSQL +=  "job_exp.BOOKING_MST_FK,";
                strSQL +=  "job_exp.jobcard_ref_no,";
                strSQL +=  "job_exp.vessel_name,";
                strSQL +=  "job_exp.VOYAGE_FLIGHT_NO voyage,";
                strSQL +=  "job_exp.survey_ref_nr,";
                strSQL +=  "job_exp.survey_date,";
                strSQL +=  "job_exp.stuff_loc,";
                strSQL +=  "chaagent.agent_id,";
                strSQL +=  "chaagent.agent_name,";
                strSQL +=  "job_cont.container_number,";
                strSQL +=  "cont_type.container_type_mst_id,";
                strSQL +=  "cont_type.container_type_name,";
                strSQL +=  "cont_type.container_tareweight_tone,";
                strSQL +=  "'' agent_seal_no,";
                strSQL +=  "job_cont.seal_number customs_seal_no,";
                strSQL +=  "pod.port_name,";
                strSQL +=  "del_place.place_code,";
                strSQL +=  "del_place.place_name,";
                strSQL +=  "job_exp.sb_number,";
                strSQL +=  "job_exp.sb_date,";
                strSQL +=  "shipper.customer_name shipper,";
                strSQL +=  "job_cont.pack_count,";
                strSQL +=  "job_cont.gross_weight,";
                strSQL +=  "job_exp.marks_numbers,";
                strSQL +=  "job_exp.goods_description,";
                strSQL +=  "consignee.customer_name consignee,";
                strSQL +=  "job_cont.volume_in_cbm,";
                strSQL +=  "chaagent.agent_name chaagent,";
                strSQL +=  "'' csno,'' grno,";
                strSQL +=  "pod.port_id as sbpod,";
                strSQL +=  "job_exp.remarks,";
                strSQL +=  "'' invnr";
                strSQL +=  "from JOB_CARD_TRN   job_exp,";
                strSQL +=  "agent_mst_tbl          chaagent,";
                strSQL +=  "job_trn_cont   job_cont,";
                strSQL +=  "container_type_mst_tbl cont_type,";
                strSQL +=  "port_mst_tbl           pod,";
                strSQL +=  "BOOKING_MST_TBL        bkg_sea,";
                strSQL +=  "place_mst_tbl          del_place,";
                strSQL +=  "customer_mst_tbl       shipper,";
                strSQL +=  "customer_mst_tbl       consignee";
                strSQL +=  "where job_exp.JOB_CARD_TRN_PK IN( " + JOBPK + " )";
                strSQL +=  "and job_exp.cha_agent_mst_fk = chaagent.agent_mst_pk(+)";
                strSQL +=  "and job_exp.JOB_CARD_TRN_PK(+) = job_cont.JOB_CARD_TRN_FK";
                strSQL +=  "and cont_type.container_type_mst_pk(+) = job_cont.container_type_mst_fk";
                strSQL +=  "and job_exp.BOOKING_MST_FK = bkg_sea.BOOKING_MST_PK";
                strSQL +=  "and bkg_sea.port_mst_pod_fk = pod.port_mst_pk";
                strSQL +=  "and bkg_sea.del_place_mst_fk = del_place.place_pk(+)";
                strSQL +=  "and job_exp.shipper_cust_mst_fk =  shipper.customer_mst_pk(+)";
                strSQL +=  "and job_exp.consignee_cust_mst_fk =  consignee.customer_mst_pk(+)";
                return (objWF.GetDataSet(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Stuffing Report"
        public DataSet FetchBkgPk(string BookingNr)
        {
            string strSQL = null;
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL = " SELECT BST.BOOKING_MST_PK ";
                strSQL +=  " FROM BOOKING_MST_TBL BST ";
                strSQL +=  " WHERE BST.BOOKING_REF_NO = '" + BookingNr + "'";
                return (objWF.GetDataSet(strSQL));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchBookingDetails(int SeaBkgPK)
        {
            string strSql = null;
            WorkFlow Objwk = new WorkFlow();
            strSql = "SELECT JSE.JOB_CARD_TRN_PK JOBPK, ";
            strSql +=  "JSE.JOBCARD_REF_NO JOBREFNO, ";
            strSql +=  "BST.BOOKING_MST_PK BKGPK, ";
            strSql +=  "BST.BOOKING_REF_NO BKGREFNO, ";
            strSql +=  "BST.BOOKING_DATE BKGDATE, ";
            //strSql &= vbCrLf & "(CASE WHEN BST.VOYAGE IS NOT NULL THEN "
            //strSql &= vbCrLf & "BST.VESSEL_NAME ||'-' || BST.VOYAGE "
            //strSql &= vbCrLf & "ELSE"
            //strSql &= vbCrLf & "BST.VESSEL_NAME END ) VESFLIGHT,"
            strSql +=  "(CASE";
            strSql +=  "WHEN JSE.VOYAGE_TRN_FK IS NOT NULL THEN";
            strSql +=  "JSE.VESSEL_NAME || '-' || JSE.VOYAGE_FLIGHT_NO";
            strSql +=  "ELSE";
            strSql +=  "JSE.VESSEL_NAME ";
            strSql +=  "END) VESFLIGHT,";
            strSql +=  "HBL.HBL_REF_NO HBLREFNO,";
            strSql +=  " MBL.MBL_REF_NO  MBLREFNO,";
            strSql +=  " JSE.MARKS_NUMBERS MARKS,";

            strSql +=  " JSE.GOODS_DESCRIPTION GOODS,";
            strSql +=  "BST.CARGO_TYPE,";
            //strSql &= vbCrLf & "JSE.UCR_NO UCRN0,"
            strSql +=  "OPTA.OPERATOR_NAME UCRN0,";
            strSql +=  "JSE.STUFF_LOC CLEARANCEPOINT,";
            //strSql &= vbCrLf & " BST.ETD_DATE ETD,"
            strSql +=  " JSE.ETD_DATE ETD,";
            strSql +=  "BST.CUST_CUSTOMER_MST_FK,";
            strSql +=  "CMST.CUSTOMER_NAME SHIPNAME,";
            strSql +=  "CMST.ACCOUNT_NO SHIPREFNO,";
            strSql +=  "CDTLS.ADM_ADDRESS_1 SHIPADD1,";
            strSql +=  "CDTLS.ADM_ADDRESS_2 SHIPADD2,";
            strSql +=  "CDTLS.ADM_ADDRESS_3 SHIPADD3,";
            strSql +=  "CDTLS.ADM_CITY SHIPCITY,";
            strSql +=  "CDTLS.ADM_ZIP_CODE SHIPZIP,";
            strSql +=  "CDTLS.ADM_EMAIL_ID AS SHIPEMAIL,";
            strSql +=  "CDTLS.ADM_PHONE_NO_1 SHIPPHONE,";
            strSql +=  "CDTLS.ADM_FAX_NO SHIPFAX,";
            strSql +=  " SHIPCOUNTRY.COUNTRY_NAME SHIPCOUNTRY,";
            strSql +=  " CONSIGNEE.CUSTOMER_NAME CONSIGNEENAME,";
            strSql +=  "CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGADD1,";
            strSql +=  "CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGADD2,";
            strSql +=  "CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGADD3,";
            strSql +=  "CONSIGNEEDTLS.ADM_CITY CONSIGCITY,";
            strSql +=  "CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGZIP,";
            strSql +=  "CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGEMAIL,";
            strSql +=  "CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGPHONE,";
            strSql +=  "CONSIGNEEDTLS.ADM_FAX_NO CONSIGFAX,";
            strSql +=  " CONSIGCOUNTRY.COUNTRY_NAME CONSICOUNTRY,";
            strSql +=  " POL.PORT_NAME POLNAME,";
            strSql +=  " POD.PORT_NAME PODNAME,";
            strSql +=  " PLD.PLACE_NAME DELNAME,";
            strSql +=  " COLPLD.PLACE_NAME COLNAME,";

            strSql +=  " DBAMST.AGENT_MST_PK DBAGENTPK,";
            strSql +=  " DBAMST.AGENT_NAME  DBAGENTNAME,";
            strSql +=  " DBADTLS.ADM_ADDRESS_1  DBAGENTADD1,";
            strSql +=  " DBADTLS.ADM_ADDRESS_2  DBAGENTADD2,";
            strSql +=  " DBADTLS.ADM_ADDRESS_3  DBAGENTADD3,";
            strSql +=  " DBADTLS.ADM_CITY  DBAGENTCITY,";
            strSql +=  " DBADTLS.ADM_ZIP_CODE DBAGENTZIP,";
            strSql +=  " DBADTLS.ADM_EMAIL_ID DBAGENTEMAIL,";
            strSql +=  " DBADTLS.ADM_PHONE_NO_1 DBAGENTPHONE,";
            strSql +=  " DBADTLS.ADM_FAX_NO DBAGENTFAX,";
            strSql +=  " DBCOUNTRY.COUNTRY_NAME DBCOUNTRY,";
            strSql +=  "STMST.INCO_CODE TERMS,";
            strSql +=  " NVL(JSE.INSURANCE_AMT,0) INSURANCE,";
            strSql +=  " BST.PYMT_TYPE ,";
            strSql +=  " CGMST.commodity_group_desc COMMCODE,";
            //strSql &= vbCrLf & " BST.ETA_DATE ETA,"
            strSql +=  " JSE.ETA_DATE ETA,";
            strSql +=  " BST.GROSS_WEIGHT GROSS,";
            strSql +=  " BST.CHARGEABLE_WEIGHT CHARWT,";
            strSql +=  " BST.NET_WEIGHT NETWT,";
            strSql +=  " BST.VOLUME_IN_CBM VOLUME";

            strSql +=  "FROM   JOB_CARD_TRN JSE,";
            strSql +=  " BOOKING_MST_TBL BST,";
            strSql +=  " CUSTOMER_MST_TBL CMST,";
            strSql +=  " OPERATOR_MST_TBL        OPTA,";
            strSql +=  " VESSEL_VOYAGE_TBL       VVT,";
            strSql +=  " VESSEL_VOYAGE_TRN       VVTT,";
            strSql +=  " CUSTOMER_MST_TBL CONSIGNEE,";
            strSql +=  " CUSTOMER_CONTACT_DTLS CDTLS,";
            strSql +=  " CUSTOMER_CONTACT_DTLS CONSIGNEEDTLS,";
            strSql +=  " COUNTRY_MST_TBL SHIPCOUNTRY,";
            strSql +=  " COUNTRY_MST_TBL CONSIGCOUNTRY,";
            strSql +=  " PORT_MST_TBL POL,";
            strSql +=  " PORT_MST_TBL POD,";
            strSql +=  " PLACE_MST_TBL PLD,";
            strSql +=  " PLACE_MST_TBL COLPLD,";
            strSql +=  "AGENT_MST_TBL DBAMST,";
            strSql +=  "AGENT_CONTACT_DTLS DBADTLS,";
            strSql +=  "COUNTRY_MST_TBL DBCOUNTRY,";
            strSql +=  "SHIPPING_TERMS_MST_TBL STMST,";
            strSql +=  " COMMODITY_GROUP_MST_TBL CGMST,";
            strSql +=  "HBL_EXP_TBL HBL,";
            strSql +=  "MBL_EXP_TBL MBL";

            strSql +=  "WHERE BST.BOOKING_MST_PK IN ('" + SeaBkgPK + "')";
            strSql +=  "AND JSE.HBL_HAWB_FK=HBL.HBL_EXP_TBL_PK(+)";
            strSql +=  "AND JSE.MBL_MAWB_FK=MBL.MBL_EXP_TBL_PK(+)";
            strSql +=  "AND   CMST.CUSTOMER_MST_PK(+)=BST.CUST_CUSTOMER_MST_FK";
            strSql +=  "AND   (CONSIGNEE.CUSTOMER_MST_PK=BST.CONS_CUSTOMER_MST_FK OR CONSIGNEE.CUSTOMER_MST_PK=JSE.CONSIGNEE_CUST_MST_FK)";
            strSql +=  "AND   CDTLS.CUSTOMER_MST_FK(+)=CMST.CUSTOMER_MST_PK";
            strSql +=  "AND CONSIGNEE.CUSTOMER_MST_PK=CONSIGNEEDTLS.CUSTOMER_MST_FK(+)";
            strSql +=  " AND SHIPCOUNTRY.COUNTRY_MST_PK(+)=CDTLS.ADM_COUNTRY_MST_FK";
            strSql +=  " AND CONSIGCOUNTRY.COUNTRY_MST_PK(+)=CONSIGNEEDTLS.ADM_COUNTRY_MST_FK";
            strSql +=  " AND   JSE.BOOKING_MST_FK(+)=BST.BOOKING_MST_PK";
            strSql +=  " AND JSE.VOYAGE_TRN_FK = VVTT.VOYAGE_TRN_PK(+)";
            strSql +=  " AND VVTT.VESSEL_VOYAGE_TBL_FK= VVT.VESSEL_VOYAGE_TBL_PK(+)";
            strSql +=  " AND VVT.OPERATOR_MST_FK = OPTA.OPERATOR_MST_PK(+)";
            strSql +=  " AND   BST.PORT_MST_POL_FK=POL.PORT_MST_PK(+)";
            strSql +=  " AND   BST.PORT_MST_POD_FK=POD.PORT_MST_PK(+)";
            strSql +=  " AND   BST.DEL_PLACE_MST_FK=PLD.PLACE_PK(+)";
            strSql +=  " AND   BST.COL_PLACE_MST_FK=COLPLD.PLACE_PK(+)";
            strSql +=  " AND   BST.DP_AGENT_MST_FK=DBAMST.AGENT_MST_PK(+)";
            strSql +=  " AND   DBAMST.AGENT_MST_PK=DBADTLS.AGENT_MST_FK(+)";
            strSql +=  "AND DBCOUNTRY.COUNTRY_MST_PK(+)=DBADTLS.ADM_COUNTRY_MST_FK";
            strSql +=  " AND  STMST.SHIPPING_TERMS_MST_PK(+)=BST.CUST_CUSTOMER_MST_FK";
            strSql +=  " AND  BST.COMMODITY_GROUP_FK=CGMST.COMMODITY_GROUP_PK(+)";
            // strSql &= vbCrLf & "AND  BST.BOOKING_MST_PK IN ('" & SeaBkgPK & "')"
            try
            {
                return Objwk.GetDataSet(strSql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchSeaContainers(string BkgPK)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            Strsql = " SELECT BST.BOOKING_MST_PK BKGPK, JSE.CONTAINER_NUMBER CONTAINER";
            Strsql +=  "FROM job_trn_cont JSE,BOOKING_MST_TBL BST,JOB_CARD_TRN JS";
            Strsql +=  "WHERE BST.BOOKING_MST_PK = JS.BOOKING_MST_FK";
            Strsql +=  "AND JSE.JOB_CARD_TRN_FK=JS.JOB_CARD_TRN_PK";
            Strsql +=  " AND BST.BOOKING_MST_PK IN (" + BkgPK + ")";
            try
            {
                return Objwk.GetDataSet(Strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet Get_ConDet(string JBPk)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            try
            {
                Strsql = "SELECT J.JOB_CARD_TRN_FK," ;
                Strsql += " J.CONTAINER_NUMBER," ;
                Strsql += " CTYPE.CONTAINER_TYPE_MST_ID," ;
                Strsql += " CMT.COMMODITY_NAME," ;
                Strsql += " J.SEAL_NUMBER , " ;
                Strsql += " CASE WHEN JS.CARGO_TYPE = 4 THEN PTMT.PACK_TYPE_DESC " ;
                Strsql += " ELSE NVL((SELECT ROWTOCOL('SELECT PT.PACK_TYPE_DESC FROM PACK_TYPE_MST_TBL PT  " ;
                Strsql += " WHERE PT.PACK_TYPE_MST_PK IN (SELECT  DISTINCT JC.PACK_TYPE_FK FROM JOB_TRN_CONT JOB,JOB_TRN_COMMODITY JC  " ;
                Strsql += " WHERE JOB.JOB_TRN_CONT_PK = JC.JOB_TRN_CONT_FK  AND JOB.JOB_TRN_CONT_PK = ' || J.JOB_TRN_CONT_PK || ')') " ;
                Strsql += " FROM DUAL), PTMT.PACK_TYPE_DESC) END PACK_TYPE_ID," ;
                Strsql += " J.PACK_COUNT, " ;
                Strsql += " J.GROSS_WEIGHT, " ;
                Strsql += " J.VOLUME_IN_CBM," ;
                Strsql += " J.NET_WEIGHT " ;
                Strsql += "FROM job_trn_cont   J,JOB_CARD_TRN   JS," ;
                Strsql += " COMMODITY_MST_TBL      CMT,       PACK_TYPE_MST_TBL      PTMT," ;
                Strsql += "CONTAINER_TYPE_MST_TBL CTYPE" ;
                Strsql += "WHERE JS.JOB_CARD_TRN_PK = J.JOB_CARD_TRN_FK" ;
                Strsql += "AND CTYPE.CONTAINER_TYPE_MST_PK(+) = J.CONTAINER_TYPE_MST_FK" ;
                Strsql += "AND J.COMMODITY_MST_FK= CMT.COMMODITY_MST_PK(+)" ;
                Strsql += "AND J.PACK_TYPE_MST_FK = PTMT.PACK_TYPE_MST_PK(+)" ;
                Strsql += "AND J.JOB_CARD_TRN_FK in(" + JBPk + ")" ;
                return Objwk.GetDataSet(Strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            //End
        }
        public DataSet FetchTransportNote(string JBPk)
        {
            string Strsql = null;
            WorkFlow Objwk = new WorkFlow();
            try
            {
                Strsql = "SELECT JCSE.JOB_CARD_TRN_PK JOB_CARD_SEA_EXP_PK," ;
                Strsql += "TIST.TRANSPORT_INST_SEA_PK," ;
                Strsql += "TIST.TRANS_INST_REF_NO," ;
                Strsql += "TIST.MT_CTR_PICKUP_REF," ;
                Strsql += "TIST.MT_CTR_PICKUP_BY," ;
                Strsql += "TIST.CARGO_PICKUP_REF_NO," ;
                Strsql += "TIST.CARGO_PICKUP_BY," ;
                Strsql += "TIST.DELIVERY_REF_NO," ;
                Strsql += "TIST.DELIVERY_BY" ;
                Strsql += "FROM TRANSPORT_INST_SEA_TBL TIST, JOB_CARD_TRN JCSE" ;
                Strsql += "  WHERE TIST.JOB_CARD_FK = TO_CHAR(JCSE.JOB_CARD_TRN_PK) " ;
                Strsql += " AND JCSE.JOB_CARD_TRN_PK in(" + JBPk + ")" ;

                return Objwk.GetDataSet(Strsql);
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "FETCH FREIGHT"
        public DataSet FetchFreightElemet(string JOBPK, string BKGPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("SELECT DISTINCT JFD.FREIGHT_ELEMENT_MST_FK, QFT.CHECK_ADVATOS");
                sb.Append("  FROM job_trn_fd         JFD,");
                sb.Append("       FREIGHT_ELEMENT_MST_TBL    FMT,");
                sb.Append("       QUOTATION_FREIGHT_TRN QFT,");
                sb.Append("       QUOTATION_MST_TBL          QST,");
                sb.Append("       QUOTATION_DTL_TBL  QTS,");
                sb.Append("       JOB_CARD_TRN JOB,");
                sb.Append("       BOOKING_MST_TBL            BKG,");
                sb.Append("       BOOKING_TRN    BTS");
                sb.Append(" WHERE JFD.FREIGHT_ELEMENT_MST_FK = FMT.FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND QFT.FREIGHT_ELEMENT_MST_FK = FMT.FREIGHT_ELEMENT_MST_PK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK=JFD.JOB_CARD_TRN_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK=BKG.BOOKING_MST_PK");
                sb.Append("   AND BTS.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                sb.Append("   AND QST.QUOTATION_MST_PK = QTS.QUOTATION_MST_FK");
                sb.Append("   AND QFT.QUOTATION_DTL_FK = QTS.QUOTE_DTL_PK");
                sb.Append("   AND BTS.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND JFD.JOB_CARD_TRN_FK = " + JOBPK);
                sb.Append("   AND QFT.CHECK_ADVATOS = 1");
                sb.Append("   AND JFD.ADVATOS_FLAG = 0 ");
                sb.Append("   AND BKG.BOOKING_MST_PK=" + BKGPK);
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #region "FETCH FREIGHT AMOUNT"
        public DataSet FetchFreightAmount(string JOBPK, string BKGPK, int Cargo_Type, int PolFK, int PodFK, int ContFK, int BasisFK, int RefFrom = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();

            try
            {
                //'For Opr.Tariff and Gen.Tariff
                if ((RefFrom == 5 | RefFrom == 6))
                {
                    sb.Append("SELECT DISTINCT '' SLNO,");
                    sb.Append("                JOB.JOB_CARD_TRN_PK,");
                    sb.Append("                TNS.FREIGHT_ELEMENT_MST_FK,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_ID,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_NAME,");
                    sb.Append("                TNS.CURRENCY_MST_FK,");
                    sb.Append("                CMT.CURRENCY_ID,");
                    //'FCL
                    if (Cargo_Type == 1)
                    {
                        sb.Append("   TFT.FCL_REQ_RATE RATE,");
                        //'LCL
                    }
                    else
                    {
                        sb.Append("   TNS.LCL_TARIFF_RATE RATE,");
                    }
                    sb.Append("                '' SEL");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("       TARIFF_MAIN_SEA_TBL       TMS,");
                    sb.Append("       TARIFF_TRN_SEA_FCL_LCL    TNS,");
                    //'FCL
                    if (Cargo_Type == 1)
                    {
                        sb.Append("       TARIFF_TRN_SEA_CONT_DTL TFT,");
                    }
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL   FMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL     CMT");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND TMS.TARIFF_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND TNS.TARIFF_MAIN_SEA_FK = TMS.TARIFF_MAIN_SEA_PK");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("  AND TNS.TARIFF_TRN_SEA_PK=TFT.TARIFF_TRN_SEA_FK");
                    }
                    sb.Append("   AND CMT.CURRENCY_MST_PK = TNS.CURRENCY_MST_FK");
                    sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK = TNS.FREIGHT_ELEMENT_MST_FK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");
                    sb.Append("   AND TNS.PORT_MST_POL_FK = " + PolFK + "");
                    sb.Append("   AND TNS.PORT_MST_POD_FK = " + PodFK + "");
                    //Fcl
                    if (Cargo_Type == 1)
                    {
                        if (ContFK != 0)
                        {
                            sb.Append("   AND TFT.CONTAINER_TYPE_MST_FK = " + ContFK + "");
                        }
                        //'Lcl
                    }
                    else
                    {
                        if (BasisFK != 0)
                        {
                            sb.Append("   AND TNS.LCL_BASIS=" + BasisFK + "");
                        }
                    }

                    //For Spot Rate
                }
                else if ((RefFrom == 1))
                {
                    sb.Append("SELECT DISTINCT '' SLNO,");
                    sb.Append("                JOB.JOB_CARD_TRN_PK,");
                    sb.Append("                RFQ.FREIGHT_ELEMENT_MST_FK,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_ID,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_NAME,");
                    sb.Append("                RFQ.CURRENCY_MST_FK,");
                    sb.Append("                CMT.CURRENCY_ID,");
                    //Fcl
                    if (Cargo_Type == 1)
                    {
                        sb.Append("    RFD.FCL_APP_RATE RATE,");
                        //Lcl
                    }
                    else
                    {
                        sb.Append("    RFQ.LCL_APPROVED_RATE RATE,");
                    }
                    sb.Append("                '' SEL");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("       RFQ_SPOT_RATE_SEA_TBL RFM, ");
                    sb.Append("       RFQ_SPOT_TRN_SEA_FCL_LCL   RFQ,");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("       RFQ_SPOT_TRN_SEA_CONT_DET RFD,");
                    }
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL   FMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL     CMT");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND RFM.RFQ_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND RFM.RFQ_SPOT_SEA_PK = RFQ.RFQ_SPOT_SEA_FK");
                    sb.Append("   AND CMT.CURRENCY_MST_PK = RFQ.CURRENCY_MST_FK");
                    sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK = RFQ.FREIGHT_ELEMENT_MST_FK");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("   AND RFD.RFQ_SPOT_SEA_TRN_FK=RFQ.RFQ_SPOT_SEA_TRN_PK ");
                    }
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");

                    //For Customer Contract
                }
                else if ((RefFrom == 2))
                {
                    sb.Append("SELECT DISTINCT '' SLNO,");
                    sb.Append("                JOB.JOB_CARD_TRN_PK,");
                    sb.Append("                JFD.FREIGHT_ELEMENT_MST_FK,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_ID,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_NAME,");
                    sb.Append("                CTN.CURRENCY_MST_FK,");
                    sb.Append("                CMT.CURRENCY_ID,");
                    sb.Append("                (Case");
                    sb.Append("                  When NVL(CTN.APPROVED_ALL_IN_RATE, 0) > 0 Then");
                    sb.Append("                   CTN.CURRENT_BOF_RATE");
                    sb.Append("                  else");
                    sb.Append("                   CTN.APPROVED_BOF_RATE");
                    sb.Append("                End) RATE,");
                    sb.Append("                '' SEL");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("       CONT_CUST_SEA_TBL         CST,");
                    sb.Append("       CONT_CUST_TRN_SEA_TBL     CTN,");
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL   FMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL     CMT");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND CST.CONT_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND CST.CONT_CUST_SEA_PK = CTN.CONT_CUST_SEA_FK");
                    sb.Append("   AND CMT.CURRENCY_MST_PK = CTN.CURRENCY_MST_FK");
                    sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK = JFD.FREIGHT_ELEMENT_MST_FK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");

                    //'Getting Freight Amount from Gen.Tariff...
                }
                else
                {
                    sb.Append("SELECT DISTINCT '' SLNO,");
                    sb.Append("                JOB.JOB_CARD_TRN_PK,");
                    sb.Append("                TNS.FREIGHT_ELEMENT_MST_FK,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_ID,");
                    sb.Append("                FMT.FREIGHT_ELEMENT_NAME,");
                    sb.Append("                TNS.CURRENCY_MST_FK,");
                    sb.Append("                CMT.CURRENCY_ID,");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("     TNF.FCL_REQ_RATE,");
                    }
                    else
                    {
                        sb.Append("     TNS.LCL_TARIFF_RATE,");
                    }
                    sb.Append("                '' SEL");
                    sb.Append("  FROM TARIFF_MAIN_SEA_TBL     TMS,");
                    sb.Append("       TARIFF_TRN_SEA_FCL_LCL  TNS,");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("       TARIFF_TRN_SEA_CONT_DTL TNF,");
                    }
                    sb.Append("       BOOKING_MST_TBL         BKG,");
                    sb.Append("       BOOKING_TRN BTF,");
                    sb.Append("       JOB_CARD_TRN    JOB,");
                    sb.Append("       job_trn_fd      JFD,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL FMT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL   CMT");
                    sb.Append(" WHERE BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND TNS.TARIFF_MAIN_SEA_FK = TMS.TARIFF_MAIN_SEA_PK");
                    sb.Append("   AND CMT.CURRENCY_MST_PK = TNS.CURRENCY_MST_FK");
                    sb.Append("   AND FMT.FREIGHT_ELEMENT_MST_PK = TNS.FREIGHT_ELEMENT_MST_FK");
                    sb.Append("   AND TMS.ACTIVE = 1");
                    sb.Append("   AND TMS.CARGO_TYPE =" + Cargo_Type);
                    sb.Append("   AND TMS.TARIFF_TYPE = 2");
                    if (Cargo_Type == 1)
                    {
                        sb.Append("   AND TNF.TARIFF_TRN_SEA_FK = TNS.TARIFF_TRN_SEA_PK");
                    }
                    sb.Append("   AND TNS.PORT_MST_POL_FK = " + PolFK + "");
                    sb.Append("   AND TNS.PORT_MST_POD_FK = " + PodFK + "");
                    //Fcl
                    if (Cargo_Type == 1)
                    {
                        if (ContFK != 0)
                        {
                            sb.Append("   AND TNF.CONTAINER_TYPE_MST_FK = " + ContFK + "");
                        }
                        //'Lcl
                    }
                    else
                    {
                        if (BasisFK != 0)
                        {
                            sb.Append("   AND TNS.LCL_BASIS=" + BasisFK + "");
                        }
                    }
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("  AND BKG.BOOKING_MST_PK = " + BKGPK + "");
                }
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetHeaderDetails(string JOBPK, string BKGPK, int RefFrom, int PolFK, int PodFK, int ContFK, int BasisFK, int Cargotype)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                //'For SL tariff && Gen.Tariff
                if ((RefFrom == 5 | RefFrom == 6))
                {
                    sb.Append("SELECT DISTINCT QTN.TRANS_REF_NO REFNR,");
                    sb.Append("                TMS.TARIFF_DATE REFDATE,");
                    sb.Append("                TMS.VALID_FROM,");
                    sb.Append("                TMS.VALID_TO,");
                    sb.Append("                QTN.TRANS_REFERED_FROM");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("       TARIFF_MAIN_SEA_TBL       TMS,");
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND TMS.TARIFF_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");

                    //For Spot Rate 
                }
                else if (RefFrom == 1)
                {
                    sb.Append("SELECT DISTINCT QTN.TRANS_REF_NO REFNR,");
                    sb.Append("                RFQ.RFQ_DATE REFDATE,");
                    sb.Append("                RFQ.VALID_FROM,");
                    sb.Append("                RFQ.VALID_TO,");
                    sb.Append("                QTN.TRANS_REFERED_FROM");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("        RFQ_SPOT_RATE_SEA_TBL     RFQ,");
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND RFQ.RFQ_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");
                    //'For Customer Contract
                }
                else if (RefFrom == 2)
                {
                    sb.Append("SELECT DISTINCT QTN.TRANS_REF_NO REFNR,");
                    sb.Append("                CST.CONT_DATE REFDATE,");
                    sb.Append("                CST.VALID_FROM,");
                    sb.Append("                CST.VALID_TO,");
                    sb.Append("                QTN.TRANS_REFERED_FROM");
                    sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                    sb.Append("       QUOTATION_DTL_TBL QTN,");
                    sb.Append("       CONT_CUST_SEA_TBL         CST,");
                    sb.Append("       BOOKING_MST_TBL           BKG,");
                    sb.Append("       BOOKING_TRN   BTF,");
                    sb.Append("       JOB_CARD_TRN      JOB,");
                    sb.Append("       job_trn_fd        JFD");
                    sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                    sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                    sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                    sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                    sb.Append("   AND CST.CONT_REF_NO = QTN.TRANS_REF_NO");
                    sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                    sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");

                    //'Getting Detalis From Gen.Tariff
                }
                else
                {
                    sb.Append("SELECT DISTINCT TMS.TARIFF_REF_NO REFNR,");
                    sb.Append("                TMS.TARIFF_DATE REFDATE,");
                    sb.Append("                TMS.VALID_FROM,");
                    sb.Append("                TMS.VALID_TO");
                    sb.Append("  FROM TARIFF_MAIN_SEA_TBL     TMS,");
                    sb.Append("       TARIFF_TRN_SEA_FCL_LCL  TNS");
                    if (Cargotype == 1)
                    {
                        sb.Append("    ,TARIFF_TRN_SEA_CONT_DTL TNF");
                    }
                    sb.Append(" WHERE TMS.TARIFF_MAIN_SEA_PK = TNS.TARIFF_MAIN_SEA_FK");
                    if (Cargotype == 1)
                    {
                        sb.Append("     AND TNS.TARIFF_TRN_SEA_PK = TNF.TARIFF_TRN_SEA_FK");
                    }
                    sb.Append("     AND TMS.ACTIVE=1");
                    if (Cargotype != 0)
                    {
                        sb.Append("     AND TMS.CARGO_TYPE=" + Cargotype);
                    }
                    sb.Append("     AND TMS.TARIFF_TYPE=2");
                    sb.Append("     AND (TMS.VALID_TO >= TO_DATE(SYSDATE,'" + dateFormat + "') OR TMS.VALID_TO IS NULL)");
                    if (PolFK != 0)
                    {
                        sb.Append("   AND TNS.PORT_MST_POL_FK = " + PolFK + "");
                    }
                    if (PodFK != 0)
                    {
                        sb.Append("   AND TNS.PORT_MST_POD_FK = " + PodFK + "");
                    }

                    //Fcl
                    if (Cargotype == 1)
                    {
                        if (ContFK != 0)
                        {
                            sb.Append("   AND TNF.CONTAINER_TYPE_MST_FK = " + ContFK + "");
                        }
                        //'Lcl
                    }
                    else
                    {
                        if (BasisFK != 0)
                        {
                            sb.Append("   AND TNS.LCL_BASIS=" + BasisFK + "");
                        }
                    }

                }
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        public DataSet GetDetails(string JOBPK, string BKGPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("SELECT DISTINCT QTN.TRANS_REF_NO,");
                sb.Append("           QTN.TRANS_REFERED_FROM");
                sb.Append("  FROM QUOTATION_MST_TBL         QST,");
                sb.Append("       QUOTATION_DTL_TBL QTN,");
                sb.Append("       BOOKING_MST_TBL           BKG,");
                sb.Append("       BOOKING_TRN   BTF,");
                sb.Append("       JOB_CARD_TRN      JOB,");
                sb.Append("       job_trn_fd        JFD");
                sb.Append(" WHERE BTF.TRANS_REF_NO = QST.QUOTATION_REF_NO");
                sb.Append("   AND BKG.BOOKING_MST_PK = BTF.BOOKING_MST_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                sb.Append("   AND QST.QUOTATION_MST_PK = QTN.QUOTATION_MST_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                sb.Append("   AND BKG.BOOKING_MST_PK = " + BKGPK + "");
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public DataSet GetJobDetails(string JOBPK, string BKGPK)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("SELECT DISTINCT BKG.PORT_MST_POD_FK,");
                sb.Append("                BKG.PORT_MST_POL_FK,");
                sb.Append("                JCT.CONTAINER_TYPE_MST_FK,");
                sb.Append("                JFD.BASIS");
                sb.Append("  FROM BOOKING_MST_TBL      BKG,");
                sb.Append("       JOB_CARD_TRN JOB,");
                sb.Append("       job_trn_fd   JFD,");
                sb.Append("       job_trn_cont JCT");
                sb.Append(" WHERE JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = JCT.JOB_CARD_TRN_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = JFD.JOB_CARD_TRN_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK + "");
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion
        #endregion

        public void UpdateADVATOS(string JobPK, int FrtPK)
        {
            try
            {
                WorkFlow ObjWk = new WorkFlow();
                OracleCommand objCommand = new OracleCommand();
                OracleTransaction TRAN = null;
                int nRecAfct = 0;
                string strSQL = null;
                string strSQL1 = null;
                Int16 upd = default(Int16);
                if (string.IsNullOrEmpty(JobPK) | string.IsNullOrEmpty(JobPK))
                {
                    return;
                }

                ObjWk.OpenConnection();
                TRAN = ObjWk.MyConnection.BeginTransaction();
                var _with99 = objCommand;
                _with99.Connection = ObjWk.MyConnection;
                _with99.CommandType = CommandType.Text;
                _with99.CommandText = strSQL;
                _with99.Transaction = TRAN;
                //nRecAfct = .ExecuteNonQuery()
                strSQL1 = "update job_trn_fd J set J.ADVATOS_FLAG = 1 where J.JOB_CARD_TRN_FK= " + JobPK;
                strSQL1 += " AND J.FREIGHT_ELEMENT_MST_FK=" + FrtPK;
                _with99.CommandText = strSQL1;
                upd = Convert.ToInt16(_with99.ExecuteNonQuery());
                if (upd > 0)
                {
                    TRAN.Commit();
                }
                else
                {
                    TRAN.Rollback();
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                //ObjWk.MyConnection.Close()
            }
        }

        #region "Fetch Tariff for VATOS"
        public string FetchOperatorTariff(Int32 OprPk, Int32 CommdityPk, Int32 Cargo, string strCondition)
        {
            WorkFlow objWF = new WorkFlow();
            OracleCommand selectCommand = new OracleCommand();
            string strReturn = null;
            string ValidFrom = null;
            string ValidTo = null;
            try
            {
                objWF.OpenConnection();
                selectCommand.Connection = objWF.MyConnection;
                selectCommand.CommandType = CommandType.StoredProcedure;
                selectCommand.CommandText = objWF.MyUserName + ".JOB_CARD_TRN_PKG.GETOPERATORTARIFF_SEA_VATOS";
                var _with100 = selectCommand.Parameters;
                _with100.Add("OPR_PK_IN", OprPk).Direction = ParameterDirection.Input;
                _with100.Add("CARGO_TYPE_IN", Cargo).Direction = ParameterDirection.Input;
                _with100.Add("COMMODITY_GROUP_PK_IN", CommdityPk).Direction = ParameterDirection.Input;
                _with100.Add("LOOKUP_VALUE_IN", "E").Direction = ParameterDirection.Input;
                _with100.Add("CONDITION_IN", strCondition).Direction = ParameterDirection.Input;
                _with100.Add("RETURN_VALUE", OracleDbType.NVarchar2, 5000, "RETURN_VALUE").Direction = ParameterDirection.Output;
                selectCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                selectCommand.ExecuteNonQuery();
                strReturn = Convert.ToString(selectCommand.Parameters["RETURN_VALUE"].Value);
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                return '~' + ex.Message;
            }
            finally
            {
                selectCommand.Connection.Close();
            }
        }

        public DataSet FetchOperatorTariffRates(Int64 TariffPK, string strCondition, Int64 CargoType)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                strCondition = "(" + strCondition + ")";
                if (CargoType == 1)
                {
                    sb.Append("SELECT CTMT.CONTAINER_TYPE_MST_PK,FRT.FREIGHT_ELEMENT_MST_PK,");
                    sb.Append("       FRT.FREIGHT_ELEMENT_ID,");
                    sb.Append("       CURR.CURRENCY_ID,");
                    sb.Append("       CTMT.CONTAINER_TYPE_MST_ID AS CONT_BASIS,");
                    sb.Append("       NVL(CONT.FCL_REQ_RATE, 0.00) AS APPROVED_RATE,");
                    sb.Append("       CURR.CURRENCY_MST_PK,");
                    sb.Append("       GET_EX_RATE(CURR.CURRENCY_MST_PK, 1, SYSDATE) ROE,");
                    sb.Append("       (NVL(CONT.FCL_REQ_RATE, 0.00) *");
                    sb.Append("       GET_EX_RATE(CURR.CURRENCY_MST_PK, 1, SYSDATE)) FINAL_RATE");
                    sb.Append("  FROM TARIFF_TRN_SEA_FCL_LCL  T,");
                    sb.Append("       TARIFF_MAIN_SEA_TBL TM,");
                    sb.Append("       TARIFF_TRN_SEA_CONT_DTL CONT,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,");
                    sb.Append("       CONTAINER_TYPE_MST_TBL  CTMT,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL FRT");
                    sb.Append(" WHERE T.TARIFF_MAIN_SEA_FK = " + TariffPK);
                    sb.Append("   AND T.TARIFF_MAIN_SEA_FK = TM.TARIFF_MAIN_SEA_PK");
                    sb.Append("   AND T.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
                    sb.Append("   AND CONT.CONTAINER_TYPE_MST_FK = CTMT.CONTAINER_TYPE_MST_PK");
                    sb.Append("   AND CONT.TARIFF_TRN_SEA_FK = T.TARIFF_TRN_SEA_PK");
                    sb.Append("   AND T.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK");
                    sb.Append("   AND FRT.FREIGHT_ELEMENT_ID <> 'BOF'");
                    sb.Append("   AND CONT.FCL_REQ_RATE > 0");
                    sb.Append("   AND TM.STATUS = 1");
                    sb.Append("   AND (T.PORT_MST_POL_FK, T.PORT_MST_POD_FK, CONT.CONTAINER_TYPE_MST_FK) IN");
                    sb.Append("      " + strCondition + "  ");
                    sb.Append(" ORDER BY FRT.PREFERENCE");
                }
                else
                {
                    sb.Append("SELECT UOM.DIMENTION_UNIT_MST_PK CONTAINER_TYPE_MST_PK,");
                    sb.Append("       FRT.FREIGHT_ELEMENT_MST_PK,");
                    sb.Append("       FRT.FREIGHT_ELEMENT_ID,");
                    sb.Append("       CURR.CURRENCY_ID,");
                    sb.Append("       UOM.DIMENTION_ID AS CONT_BASIS,");
                    sb.Append("       NVL(T.LCL_TARIFF_RATE, 0.00) AS APPROVED_RATE,");
                    sb.Append("       CURR.CURRENCY_MST_PK,");
                    sb.Append("       GET_EX_RATE(CURR.CURRENCY_MST_PK, 1, SYSDATE) ROE,");
                    sb.Append("       (NVL(T.LCL_TARIFF_RATE, 0.00) *");
                    sb.Append("       GET_EX_RATE(CURR.CURRENCY_MST_PK, 1, SYSDATE)) FINAL_RATE");
                    sb.Append("  FROM TARIFF_TRN_SEA_FCL_LCL  T,");
                    sb.Append("       TARIFF_MAIN_SEA_TBL TM,");
                    sb.Append("       DIMENTION_UNIT_MST_TBL  UOM,");
                    sb.Append("       CURRENCY_TYPE_MST_TBL   CURR,");
                    sb.Append("       FREIGHT_ELEMENT_MST_TBL FRT");
                    sb.Append(" WHERE T.TARIFF_MAIN_SEA_FK = " + TariffPK);
                    sb.Append("   AND T.TARIFF_MAIN_SEA_FK = TM.TARIFF_MAIN_SEA_PK");
                    sb.Append("   AND T.CURRENCY_MST_FK = CURR.CURRENCY_MST_PK");
                    sb.Append("   AND T.LCL_BASIS = UOM.DIMENTION_UNIT_MST_PK");
                    sb.Append("   AND T.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK");
                    sb.Append("   AND FRT.FREIGHT_ELEMENT_ID <> 'BOF'");
                    sb.Append("   AND T.LCL_BASIS > 0");
                    sb.Append("   AND TM.STATUS = 1");
                    sb.Append("   AND (T.PORT_MST_POL_FK, T.PORT_MST_POD_FK, T.LCL_BASIS) IN");
                    sb.Append("      " + strCondition + "  ");
                }
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchBasis(Int64 JobPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append(" SELECT DISTINCT F.BASIS FROM job_trn_fd F ");
                sb.Append(" WHERE F.JOB_CARD_TRN_FK = " + JobPK);
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchJobcardCloseStatus(int JobCardPk)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append("SELECT (CASE");
            sb.Append("         WHEN J.COLLECTION_DATE > J.PAYEMENT_DATE THEN");
            sb.Append("         ");
            sb.Append("          TO_CHAR(J.COLLECTION_DATE, 'dd/MM/yyyy')");
            sb.Append("         ELSE");
            sb.Append("         ");
            sb.Append("          TO_CHAR(J.PAYEMENT_DATE, 'dd/MM/yyyy')");
            sb.Append("       END) JOCARDCLOSEDATE");
            sb.Append("  FROM JOB_CARD_TRN J");
            sb.Append(" WHERE J.JOB_CARD_TRN_PK = " + JobCardPk);
            sb.Append("   AND J.COLLECTION_STATUS = 1");
            sb.Append("   AND J.PAYEMENT_STATUS = 1");
            sb.Append("");
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        public int FetchQuotStatus(int JobCardPK)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT CASE");
            sb.Append("         WHEN QTN_DATE < SYSDATE THEN");
            sb.Append("          1");
            sb.Append("         ELSE");
            sb.Append("          0");
            sb.Append("       END QUOTFLAG");
            sb.Append("  FROM (SELECT J.JOB_CARD_TRN_PK,");
            sb.Append("               F.TRANS_REFERED_FROM,");
            sb.Append("               NVL((SELECT Q.EXPECTED_SHIPMENT_DT + Q.VALID_FOR");
            sb.Append("                     FROM QUOTATION_MST_TBL Q");
            sb.Append("                    WHERE Q.QUOTATION_REF_NO = F.TRANS_REF_NO),");
            sb.Append("                   '') QTN_DATE");
            sb.Append("          FROM JOB_CARD_TRN    J,");
            sb.Append("               BOOKING_MST_TBL         B,");
            sb.Append("               BOOKING_TRN F");
            sb.Append("         WHERE J.BOOKING_MST_FK = B.BOOKING_MST_PK");
            sb.Append("           AND B.BOOKING_MST_PK = F.BOOKING_MST_FK");
            sb.Append("           AND J.JOB_CARD_TRN_PK =  " + JobCardPK);
            sb.Append(" ) ");
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch Consol Inv Pk"
        public DataSet CheckInv(Int64 JobPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append(" SELECT COUNT(*) ");
                sb.Append(" FROM (SELECT JF.FREIGHT_ELEMENT_MST_FK");
                sb.Append(" FROM JOB_CARD_TRN J, job_trn_fd JF");
                sb.Append(" WHERE J.JOB_CARD_TRN_PK =" + JobPK);
                sb.Append(" AND JF.JOB_CARD_TRN_FK = J.JOB_CARD_TRN_PK");
                sb.Append(" AND JF.CONSOL_INVOICE_TRN_FK IS NULL");
                sb.Append(" UNION");
                sb.Append(" SELECT JO.FREIGHT_ELEMENT_MST_FK");
                sb.Append(" FROM JOB_CARD_TRN J, job_trn_oth_chrg JO");
                sb.Append(" WHERE J.JOB_CARD_TRN_PK = " + JobPK);
                sb.Append(" AND J.JOB_CARD_TRN_PK = JO.JOB_CARD_TRN_FK");
                sb.Append(" AND JO.CONSOL_INVOICE_TRN_FK IS NULL) ");
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Get HBL"
        public object GetHBL(int JobPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append(" SELECT HBL.HBL_EXP_TBL_PK");
                sb.Append(" FROM JOB_CARD_TRN JOB, HBL_EXP_TBL HBL ");
                sb.Append(" WHERE JOB.JOB_CARD_TRN_PK = HBL.JOB_CARD_SEA_EXP_FK");
                sb.Append(" AND JOB.JOB_CARD_TRN_PK =" + JobPK);
                sb.Append(" AND HBL.HBL_STATUS IN (1, 2)");
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch Grid Details"
        public DataSet FecthGridDetails(string Jobpk, string BizType, string ProcessType, string CargoType)
        {
            WorkFlow objWF = new WorkFlow();
            try
            {
                //'Sea
                if (Convert.ToInt32(BizType) == 2)
                {
                    //'Export
                    if (Convert.ToInt32(ProcessType) == 1)
                    {
                        if (Convert.ToInt32(CargoType) == 1)
                        {
                            var _with101 = objWF.MyCommand.Parameters;
                            _with101.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with101.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with101.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_GRIDDETAILS");
                        }
                        else if (Convert.ToInt32(CargoType) == 2)
                        {
                            var _with103 = objWF.MyCommand.Parameters;
                            _with103.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with103.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with103.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_LCLGRIDDETAILS");
                        }
                        else
                        {
                            var _with102 = objWF.MyCommand.Parameters;
                            _with102.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with102.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with102.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_BBCGRIDDETAILS");
                        }
                    }
                    else
                    {
                        if (Convert.ToInt32(CargoType) == 1)
                        {
                            var _with104 = objWF.MyCommand.Parameters;
                            _with104.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with104.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with104.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_IMPFCLDETAILS");
                        }
                        else if (Convert.ToInt32(CargoType) == 2)
                        {
                            var _with106 = objWF.MyCommand.Parameters;
                            _with106.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with106.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with106.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_IMPLCLGRIDDETAILS");
                        }
                        else
                        {
                            var _with105 = objWF.MyCommand.Parameters;
                            _with105.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                            _with105.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            _with105.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                            return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_IMPBBCGRIDDETAILS");
                        }
                    }
                    //'Air
                }
                else
                {
                    //'Export
                    if (Convert.ToInt32(ProcessType) == 1)
                    {
                        var _with107 = objWF.MyCommand.Parameters;
                        _with107.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                        _with107.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        _with107.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_AIRDETAILS");
                    }
                    else
                    {
                        var _with108 = objWF.MyCommand.Parameters;
                        _with108.Add("JOB_CARD_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                        _with108.Add("GET_DS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        _with108.Add("GETSUM_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        return objWF.GetDataSet("FETCH_JOBCARD_PROFITABILITY", "FETCH_IMPAIRDETAILS");
                    }
                }

            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
        }
        #endregion

        #region "Fetch Header Details"
        public DataSet GetHeaderDetails(string JOBPK, string BizType, string ProcType)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("SELECT JOB.JOBCARD_REF_NO,");
                sb.Append("       TO_DATE(JOB.JOBCARD_DATE,DATEFORMAT)JOBCARD_DATE,");
                sb.Append("       CMT.CUSTOMER_NAME   SHIPPER,");
                sb.Append("       CONSG.CUSTOMER_NAME CONSIGNEE,");
                if (Convert.ToInt32(BizType) == 1)
                {
                    sb.Append("       OPR.AIRLINE_NAME OPERATOR_NAME,");
                }
                else
                {
                    sb.Append("       OPR.OPERATOR_NAME,");
                }
                sb.Append("       AMT.AGENT_NAME,");
                sb.Append("       JOB.SHIPPER_CUST_MST_FK");
                sb.Append("  FROM JOB_CARD_TRN JOB,");
                sb.Append("       CUSTOMER_MST_TBL     CMT,");
                sb.Append("       CUSTOMER_MST_TBL     CONSG,");
                if (Convert.ToInt32(BizType) == 1)
                {
                    sb.Append("       AIRLINE_MST_TBL     OPR,");
                }
                else
                {
                    sb.Append("       OPERATOR_MST_TBL     OPR,");
                }
                sb.Append("       AGENT_MST_TBL        AMT");
                sb.Append(" WHERE JOB.SHIPPER_CUST_MST_FK = CMT.CUSTOMER_MST_PK");
                sb.Append("   AND JOB.CONSIGNEE_CUST_MST_FK = CONSG.CUSTOMER_MST_PK(+)");
                if (Convert.ToInt32(BizType) == 1)
                {
                    sb.Append("   AND JOB.CARRIER_MST_FK = OPR.AIRLINE_MST_PK");
                }
                else
                {
                    sb.Append("   AND JOB.CARRIER_MST_FK = OPR.OPERATOR_MST_PK");
                }
                if (Convert.ToInt32(ProcType) == 1)
                {
                    sb.Append("   AND JOB.DP_AGENT_MST_FK = AMT.AGENT_MST_PK(+)");
                }
                else
                {
                    sb.Append("   AND JOB.CB_AGENT_MST_FK = AMT.AGENT_MST_PK(+)");
                }
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK);

                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Save JobDetails"
        public ArrayList SaveJobDetails(string JobCardPK, DataSet dsFreightDetails, DataSet dsCostDetails)
        {
            WorkFlow objWK = new WorkFlow();
            objWK.OpenConnection();
            OracleTransaction TRAN = null;
            Int32 RecAfct = default(Int32);
            TRAN = objWK.MyConnection.BeginTransaction();
            arrMessage.Clear();
            OracleCommand insFreightDetails = new OracleCommand();
            OracleCommand updFreightDetails = new OracleCommand();

            OracleCommand insCostDetails = new OracleCommand();
            OracleCommand updCostDetails = new OracleCommand();

            try
            {
                var _with109 = insFreightDetails;
                _with109.Connection = objWK.MyConnection;
                _with109.CommandType = CommandType.StoredProcedure;
                _with109.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_INS";
                var _with110 = _with109.Parameters;

                insFreightDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insFreightDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FREIGHT_TYPE_IN", OracleDbType.Int32, 1, "freight_type").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("FREIGHT_AMT_IN", OracleDbType.Int32, 10, "freight_amt").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("BASIS_IN", OracleDbType.Int32, 10, "basis").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["BASIS_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "roe").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("RATE_PERBASIS_IN", OracleDbType.Int32, 10, "Rateperbasis").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["RATE_PERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("surcharge_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["surcharge_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "quantity").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;
                insFreightDetails.Parameters.Add("JOB_TRN_CONT_fk_in", DBNull.Value).Direction = ParameterDirection.Input;

                insFreightDetails.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                insFreightDetails.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;

                insFreightDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_FD_PK").Direction = ParameterDirection.Output;
                insFreightDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;



                var _with111 = updFreightDetails;
                _with111.Connection = objWK.MyConnection;
                _with111.CommandType = CommandType.StoredProcedure;
                _with111.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_FD_UPD";
                var _with112 = _with111.Parameters;

                updFreightDetails.Parameters.Add("JOB_TRN_FD_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_FD_pk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["JOB_TRN_FD_PK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updFreightDetails.Parameters.Add("CONTAINER_TYPE_MST_FK_IN", OracleDbType.Int32, 10, "container_type_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["CONTAINER_TYPE_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FREIGHT_ELEMENT_MST_FK_IN", OracleDbType.Int32, 10, "freight_element_mst_pk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_ELEMENT_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FREIGHT_TYPE_IN", OracleDbType.Int32, 1, "freight_type").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("RATE_PERBASIS_IN", OracleDbType.Int32, 10, "Rateperbasis").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["RATE_PERBASIS_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("SURCHARGE_IN", OracleDbType.Varchar2, 100, "SURCHARGE").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["SURCHARGE_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("LOCATION_MST_FK_IN", OracleDbType.Int32, 10, "location_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["LOCATION_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FRTPAYER_CUST_MST_FK_IN", OracleDbType.Int32, 10, "frtpayer_cust_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FRTPAYER_CUST_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("FREIGHT_AMT_IN", OracleDbType.Int32, 10, "freight_amt").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["FREIGHT_AMT_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "currency_mst_fk").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("BASIS_IN", OracleDbType.Int32, 10, "basis").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["BASIS_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("EXCHANGE_RATE_IN", OracleDbType.Int32, 10, "roe").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["EXCHANGE_RATE_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("QUANTITY_IN", OracleDbType.Int32, 10, "quantity").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["QUANTITY_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("PRINT_ON_MBL_IN", OracleDbType.Int32, 1, "Print").Direction = ParameterDirection.Input;
                updFreightDetails.Parameters["PRINT_ON_MBL_IN"].SourceVersion = DataRowVersion.Current;

                updFreightDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updFreightDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                var _with113 = objWK.MyDataAdapter;

                _with113.InsertCommand = insFreightDetails;
                _with113.InsertCommand.Transaction = TRAN;
                _with113.UpdateCommand = updFreightDetails;
                _with113.UpdateCommand.Transaction = TRAN;

                RecAfct = _with113.Update(dsFreightDetails);
                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                //'
                var _with114 = insCostDetails;
                _with114.Connection = objWK.MyConnection;
                _with114.CommandType = CommandType.StoredProcedure;
                _with114.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_SEA_EXP_COST_INS";
                var _with115 = _with114.Parameters;
                insCostDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                insCostDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "VENDOR_MST_PK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("COST_ELEMENT_FK_IN", OracleDbType.Int32, 10, "COST_ELEMENT_MST_PK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["COST_ELEMENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("LOCATION_FK_IN", OracleDbType.Int32, 10, "LOCATION_MST_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["LOCATION_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "VENDOR_KEY").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("PTMT_TYPE_IN", OracleDbType.Int32, 1, "PTMT_TYPE").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["PTMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("ESTIMATED_COST_IN", OracleDbType.Int32, 20, "ESTIMATED_COST").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["ESTIMATED_COST_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("TOTAL_COST_IN", OracleDbType.Int32, 20, "TOTAL_COST").Direction = ParameterDirection.Input;
                insCostDetails.Parameters["TOTAL_COST_IN"].SourceVersion = DataRowVersion.Current;

                insCostDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10, "JOB_TRN_COST_PK").Direction = ParameterDirection.Output;
                insCostDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with116 = updCostDetails;
                _with116.Connection = objWK.MyConnection;
                _with116.CommandType = CommandType.StoredProcedure;
                _with116.CommandText = objWK.MyUserName + ".JOB_CARD_TRN_PKG.JOB_TRN_SEA_EXP_COST_UPD";
                var _with117 = _with116.Parameters;

                updCostDetails.Parameters.Add("JOB_TRN_EST_PK_IN", OracleDbType.Int32, 10, "JOB_TRN_COST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["JOB_TRN_EST_PK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("JOB_CARD_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;

                updCostDetails.Parameters.Add("VENDOR_MST_FK_IN", OracleDbType.Int32, 10, "VENDOR_MST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["VENDOR_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("COST_ELEMENT_FK_IN", OracleDbType.Int32, 50, "COST_ELEMENT_MST_PK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["COST_ELEMENT_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("LOCATION_FK_IN", OracleDbType.Int32, 10, "LOCATION_MST_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["LOCATION_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("VENDOR_KEY_IN", OracleDbType.Varchar2, 50, "VENDOR_KEY").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["VENDOR_KEY_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("PTMT_TYPE_IN", OracleDbType.Int32, 1, "PTMT_TYPE").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["PTMT_TYPE_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("CURRENCY_MST_FK_IN", OracleDbType.Int32, 10, "CURRENCY_MST_FK").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["CURRENCY_MST_FK_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("ESTIMATED_COST_IN", OracleDbType.Int32, 20, "ESTIMATED_COST").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["ESTIMATED_COST_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("TOTAL_COST_IN", OracleDbType.Int32, 20, "TOTAL_COST").Direction = ParameterDirection.Input;
                updCostDetails.Parameters["TOTAL_COST_IN"].SourceVersion = DataRowVersion.Current;

                updCostDetails.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 50, "RETURN_VALUE").Direction = ParameterDirection.Output;
                updCostDetails.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                var _with118 = objWK.MyDataAdapter;
                _with118.InsertCommand = insCostDetails;
                _with118.InsertCommand.Transaction = TRAN;
                _with118.UpdateCommand = updCostDetails;
                _with118.UpdateCommand.Transaction = TRAN;

                RecAfct = _with118.Update(dsCostDetails.Tables[0]);
                if (arrMessage.Count > 0)
                {
                    TRAN.Rollback();
                    return arrMessage;
                }
                else
                {
                    TRAN.Commit();
                    arrMessage.Add("All Data Saved Successfully");
                    return arrMessage;
                }
            }
            catch (OracleException oraexp)
            {
                TRAN.Rollback();
                throw oraexp;
            }
            catch (Exception ex)
            {
                TRAN.Rollback();
                throw ex;
                //added by suryaprasad for implementing session management
            }
            finally
            {
                objWK.CloseConnection();
            }
        }
        #endregion

        #region "Fetch Income and Expense Details"
        public DataSet FetchSecSerIncomeDetails(string Jobpk, int CurFK = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataTable dtTotalAmt = new DataTable();
            DataTable dtChargeDet = new DataTable();
            DataSet dsIncomeDet = new DataSet();
            int CurrencyPK = 0;
            if (CurFK > 0)
            {
                CurrencyPK = CurFK;
            }
            else
            {
                CurrencyPK = Convert.ToInt32(HttpContext.Current.Session["CURRENCY_MST_PK"]);
            }
            //Parent Details
            try
            {
                var _with119 = objWF.MyCommand.Parameters;
                _with119.Clear();
                _with119.Add("JOB_CARD_TRN_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                _with119.Add("BASE_CURRENCY_FK_IN", CurrencyPK).Direction = ParameterDirection.Input;
                _with119.Add("SEC_SRVC_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dtTotalAmt = objWF.GetDataTable("JOBCARD_SEC_SERVICE_PKG", "INCOME_MAIN");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }

            //Child Details
            try
            {
                var _with120 = objWF.MyCommand.Parameters;
                _with120.Clear();
                _with120.Add("JOB_CARD_TRN_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                _with120.Add("BASE_CURRENCY_FK_IN", CurrencyPK).Direction = ParameterDirection.Input;
                _with120.Add("SEC_SRVC_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dtChargeDet = objWF.GetDataTable("JOBCARD_SEC_SERVICE_PKG", "INCOME_CHILD");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }

            try
            {
                dsIncomeDet.Tables.Add(dtTotalAmt);
                dsIncomeDet.Tables.Add(dtChargeDet);
                dsIncomeDet.Tables[0].TableName = "TOTAL_AMOUNT";
                dsIncomeDet.Tables[1].TableName = "CHARGE_DETAILS";
                var rel_TotAmtAndCharge = new DataRelation("rel1", dsIncomeDet.Tables["TOTAL_AMOUNT"].Columns["FLAG"], dsIncomeDet.Tables["CHARGE_DETAILS"].Columns["FLAG"]);
                dsIncomeDet.Relations.Add(rel_TotAmtAndCharge);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
            return dsIncomeDet;
        }
        public DataSet FetchSecSerExpenseDetails(string Jobpk, int CurFK = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataTable dtTotalAmt = new DataTable();
            DataTable dtChargeDet = new DataTable();
            DataSet dsExpenseDet = new DataSet();
            int CurrencyPK = 0;
            if (CurFK > 0)
            {
                CurrencyPK = CurFK;
            }
            else
            {
                CurrencyPK = Convert.ToInt32(HttpContext.Current.Session["CURRENCY_MST_PK"]);
            }

            //Parent Details
            try
            {
                var _with121 = objWF.MyCommand.Parameters;
                _with121.Add("JOB_CARD_TRN_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                _with121.Add("BASE_CURRENCY_FK_IN", CurrencyPK).Direction = ParameterDirection.Input;
                _with121.Add("SEC_SRVC_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dtTotalAmt = objWF.GetDataTable("JOBCARD_SEC_SERVICE_PKG", "EXPENSE_MAIN");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }

            //Child Details
            try
            {
                var _with122 = objWF.MyCommand.Parameters;
                _with122.Clear();
                _with122.Add("JOB_CARD_TRN_PK_IN", Jobpk).Direction = ParameterDirection.Input;
                _with122.Add("BASE_CURRENCY_FK_IN", CurrencyPK).Direction = ParameterDirection.Input;
                _with122.Add("SEC_SRVC_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dtChargeDet = objWF.GetDataTable("JOBCARD_SEC_SERVICE_PKG", "EXPENSE_CHILD");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }

            try
            {
                dsExpenseDet.Tables.Add(dtTotalAmt);
                dsExpenseDet.Tables.Add(dtChargeDet);
                dsExpenseDet.Tables[0].TableName = "TOTAL_AMOUNT";
                dsExpenseDet.Tables[1].TableName = "CHARGE_DETAILS";
                var rel_TotAmtAndCharge = new DataRelation("rel1", dsExpenseDet.Tables["TOTAL_AMOUNT"].Columns["FLAG"], dsExpenseDet.Tables["CHARGE_DETAILS"].Columns["FLAG"]);
                dsExpenseDet.Relations.Add(rel_TotAmtAndCharge);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dsExpenseDet;
        }
        public DataSet FetchServices(string From = "")
        {
            WorkFlow objWF = new WorkFlow();
            string sql = null;
            sql = "SELECT SMT.SERVICE_MST_PK,SMT.SERVICE_ID,SMT.SERVICE_NAME FROM SERVICES_MST_TBL SMT";
            try
            {
                return objWF.GetDataSet(sql);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet FetchServiceWiseCharges(int SERVICE_TYPE_FK = 0, string CHARGE_MST_PKS = "", bool SHOW_RECORDS = true, short BIZ_TYPE = 2)
        {
            return FetchSelectedServices(SERVICE_TYPE_FK, CHARGE_MST_PKS, SHOW_RECORDS, BIZ_TYPE);
        }
        public DataSet FetchSelectedServices(int SERVICE_TYPE_FK = 0, string CHARGE_MST_PKS = "", bool SHOW_RECORDS = true, short BIZ_TYPE = 2)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet dsChargesDet = new DataSet();
            try
            {
                var _with123 = objWF.MyCommand.Parameters;
                _with123.Add("SERVICE_TYPE_FK_IN", (SERVICE_TYPE_FK > 0 ? SERVICE_TYPE_FK : 0)).Direction = ParameterDirection.Input;
                _with123.Add("CHARGE_MST_PKS_IN", (string.IsNullOrEmpty(CHARGE_MST_PKS.Trim()) ? "" : CHARGE_MST_PKS)).Direction = ParameterDirection.Input;
                _with123.Add("BIZ_TYPE_IN", BIZ_TYPE).Direction = ParameterDirection.Input;
                _with123.Add("SHOW_RECORDS_IN", (SHOW_RECORDS ? 1 : 0)).Direction = ParameterDirection.Input;
                _with123.Add("SEC_SRVC_CURSOR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                dsChargesDet = objWF.GetDataSet("JOBCARD_SEC_SERVICE_PKG", "FETCH_SERVICEWISE_CHARGES");
            }
            catch (Exception sqlExp)
            {
                throw sqlExp;
            }
            finally
            {
                objWF.MyConnection.Close();
            }
            try
            {
                return dsChargesDet;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Get ESI PK"
        public string FetchESIPK(int BkgPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append(" SELECT ESI.ESI_HDR_PK");
                sb.Append(" FROM SYN_EBKG_ESI_HDR_TBL ESI, BOOKING_MST_TBL BKG ");
                sb.Append(" WHERE BKG.BOOKING_MST_PK = ESI.BOOKING_SEA_FK");
                sb.Append(" AND BKG.BOOKING_MST_PK=" + BkgPK);
                return Convert.ToString(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "GET FAC INVOICE"
        public int GetFacInvCnt(string JOBPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append("SELECT COUNT(INV.INVOICE_REF_NO) CNT");
                sb.Append("  FROM CONSOL_INVOICE_TBL INV, CONSOL_INVOICE_TRN_TBL INVTRN");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND INV.IS_FAC_INV = 1");
                sb.Append("   AND INVTRN.JOB_CARD_FK =" + JOBPK);
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int GetFacColCnt(string JOBPK)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append("SELECT DISTINCT COUNT(COL.COLLECTIONS_REF_NO)COLCNT  ");
                sb.Append("  FROM CONSOL_INVOICE_TBL     INV,");
                sb.Append("       CONSOL_INVOICE_TRN_TBL INVTRN,");
                sb.Append("       COLLECTIONS_TBL        COL,");
                sb.Append("       COLLECTIONS_TRN_TBL    COLTRN");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND COL.COLLECTIONS_TBL_PK = COLTRN.COLLECTIONS_TBL_FK");
                sb.Append("   AND COLTRN.INVOICE_REF_NR = INV.INVOICE_REF_NO");
                sb.Append("   AND INV.IS_FAC_INV = 1");
                sb.Append("    AND INVTRN.JOB_CARD_FK =" + JOBPK);
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int GetFacSetUp(string JOBPK, int BizType)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append("SELECT OPR.FAC_INVOICE");
                sb.Append("  FROM OPERATOR_MST_TBL OPR, BOOKING_MST_TBL BKG, JOB_CARD_TRN JOB");
                sb.Append(" WHERE OPR.OPERATOR_MST_PK = BKG.CARRIER_MST_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK);
                if (BizType == 1)
                {
                    sb.Replace("OPERATOR", "AIRLINE");
                }
                return Convert.ToInt32(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string GetFacAmt(string JOBPK, int BizType)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                WorkFlow objWF = new WorkFlow();
                sb.Append("SELECT SUM(NVL(GET_EX_RATE_BUY(JCOST.CURRENCY_MST_FK, " + HttpContext.Current.Session["CURRENCY_MST_PK"] + ", JOB.JOBCARD_DATE) *");
                sb.Append("           ((FAC.COMMISSION / 100) * JCOST.ESTIMATED_COST),0)) FACAMT");
                sb.Append("  FROM JOB_CARD_TRN JOB,");
                sb.Append("       JOB_TRN_COST JCOST,");
                sb.Append("       FAC_SETUP_TBL        FAC,");
                sb.Append("       BOOKING_MST_TBL      BKG,");
                sb.Append("       OPERATOR_MST_TBL     OPR");
                sb.Append(" WHERE JOB.JOB_CARD_TRN_PK = JCOST.JOB_CARD_TRN_FK");
                sb.Append("   AND JCOST.COST_ELEMENT_MST_FK = FAC.COST_ELEMENT_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND BKG.CARRIER_MST_FK = OPR.OPERATOR_MST_PK");
                sb.Append("   AND FAC.OPERATOR_MST_FK = OPR.OPERATOR_MST_PK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = " + JOBPK);
                if (BizType == 1)
                {
                    sb.Replace("OPERATOR", "AIRLINE");
                }
                return Convert.ToString(objWF.ExecuteScaler(sb.ToString()));
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region "Get Doc List"
        public DataSet FetchDocList(int JC_TRN_FK)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet ds = new DataSet();


            try
            {
                objWF.OpenConnection();
                objWF.MyDataAdapter = new OracleDataAdapter();
                var _with124 = objWF.MyDataAdapter;
                _with124.SelectCommand = new OracleCommand();
                _with124.SelectCommand.Connection = objWF.MyConnection;
                _with124.SelectCommand.CommandText = objWF.MyUserName + ".JOB_DOC_TRN_PKG.JOB_DOC_TRN_LIST";
                _with124.SelectCommand.CommandType = CommandType.StoredProcedure;
                _with124.SelectCommand.Parameters.Add("JOB_TRN_FK_IN", JC_TRN_FK).Direction = ParameterDirection.Input;
                _with124.SelectCommand.Parameters.Add("BAND0_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with124.Fill(ds);

                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }
        #endregion

        #region "Update Document to Job Card"
        public object SaveJobCardDoc(string JobCardPK, OracleTransaction TRAN, DataSet dsDoc, int BizType, int ProcessType)
        {
            try
            {
                arrMessage.Clear();
                WorkFlow objWF = new WorkFlow();
                StringBuilder strBuilder = new StringBuilder();
                OracleCommand insCommand = new OracleCommand();
                OracleCommand updCommand = new OracleCommand();
                OracleCommand delCommand = new OracleCommand();
                int RowCnt = 0;
                int intReturn = 0;
                intReturn = 1;

                if ((dsDoc != null))
                {
                    for (RowCnt = 0; RowCnt <= dsDoc.Tables[0].Rows.Count - 1; RowCnt++)
                    {
                        if (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"].ToString()))
                        {
                            dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"] = 0;
                        }
                        if (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"]) == 0 & (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"] )== 0 | Convert.ToBoolean(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"]) == false))
                        {
                            var _with125 = insCommand;
                            _with125.Connection = TRAN.Connection;
                            _with125.Transaction = TRAN;
                            _with125.CommandType = CommandType.StoredProcedure;
                            _with125.CommandText = objWF.MyUserName + ".JOB_DOC_TRN_PKG.JOB_DOC_TRN_INS";
                            _with125.Parameters.Clear();
                            _with125.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REF_NO_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_REF_NO"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_REF_NO"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("CB_DOC_MST_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_TYPE_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_TYPE_FK"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_DATE_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_DATE"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_DATE"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_IDENTITY_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_IDENTITY_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_IDENTITY_FK"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_CURRENCY_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_CUR_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_CUR_FK"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_AMOUNT_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_AMOUNT"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_AMOUNT"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REC_FROM_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_FROM"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_FROM"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REC_THROUGH_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_THROUGH_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_THROUGH_FK"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REC_BY_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_BY_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_BY_FK"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REC_ON_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_ON"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_ON"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("DOC_REC_REMARKS_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["REMARKS"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["REMARKS"])).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("PROCESS_TYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("CONFIG_MST_FK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                            _with125.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 500, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with125.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                            var _with126 = objWF.MyDataAdapter;
                            _with126.InsertCommand = insCommand;
                            _with126.InsertCommand.Transaction = TRAN;
                            intReturn = _with126.InsertCommand.ExecuteNonQuery();
                        }
                        else if (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"]) > 0 & (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"]) == 0 | Convert.ToBoolean(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"]) == false))
                        {
                            var _with127 = updCommand;
                            _with127.Connection = TRAN.Connection;
                            _with127.Transaction = TRAN;
                            _with127.CommandType = CommandType.StoredProcedure;
                            _with127.CommandText = objWF.MyUserName + ".JOB_DOC_TRN_PKG.JOB_DOC_TRN_UPD";
                            _with127.Parameters.Clear();
                            _with127.Parameters.Add("JOB_TRN_DOC_PK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("JOB_TRN_FK_IN", JobCardPK).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REF_NO_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_REF_NO"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_REF_NO"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("CB_DOC_MST_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_TYPE_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_TYPE_FK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_DATE_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_DATE"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_DATE"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_IDENTITY_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_IDENTITY_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_IDENTITY_FK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_CURRENCY_FK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_CUR_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_CUR_FK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_AMOUNT_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["DOC_AMOUNT"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["DOC_AMOUNT"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REC_FROM_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_FROM"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_FROM"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REC_THROUGH_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_THROUGH_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_THROUGH_FK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REC_BY_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_BY_FK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_BY_FK"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REC_ON_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_ON"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["RECEIVED_ON"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("DOC_REC_REMARKS_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["REMARKS"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["REMARKS"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("VERSION_NO_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["VERSION_NO"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["VERSION_NO"])).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("PROCESS_TYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("LAST_MODIFIED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("CONFIG_MST_FK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                            _with127.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 500, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with127.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                            var _with128 = objWF.MyDataAdapter;
                            _with128.UpdateCommand = updCommand;
                            _with128.UpdateCommand.Transaction = TRAN;
                            intReturn = _with128.UpdateCommand.ExecuteNonQuery();
                        }
                        else if (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"]) > 0 & (Convert.ToInt32(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"]) == 1 | Convert.ToBoolean(dsDoc.Tables[0].Rows[RowCnt]["DELFLAG"]) == true))
                        {
                            var _with129 = delCommand;
                            _with129.Connection = TRAN.Connection;
                            _with129.Transaction = TRAN;
                            _with129.CommandType = CommandType.StoredProcedure;
                            _with129.CommandText = objWF.MyUserName + ".JOB_DOC_TRN_PKG.JOB_DOC_TRN_DEL";
                            _with129.Parameters.Clear();
                            _with129.Parameters.Add("JOB_TRN_DOC_PK_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["JC_DOC_PK"])).Direction = ParameterDirection.Input;
                            _with129.Parameters.Add("VERSION_NO_IN", (string.IsNullOrEmpty(dsDoc.Tables[0].Rows[RowCnt]["VERSION_NO"].ToString()) ? DBNull.Value : dsDoc.Tables[0].Rows[RowCnt]["VERSION_NO"])).Direction = ParameterDirection.Input;
                            _with129.Parameters.Add("DELETED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                            _with129.Parameters.Add("CONFIG_MST_FK_IN", M_Configuration_PK).Direction = ParameterDirection.Input;
                            _with129.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 500, "RETURN_VALUE").Direction = ParameterDirection.Output;
                            _with129.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                            var _with130 = objWF.MyDataAdapter;
                            _with130.DeleteCommand = delCommand;
                            _with130.DeleteCommand.Transaction = TRAN;
                            intReturn = _with130.DeleteCommand.ExecuteNonQuery();
                        }
                    }
                }

                if (intReturn == 1 & arrMessage.Count == 0)
                {
                    arrMessage.Add("All Data Saved Successfully");
                }
                else
                {
                    arrMessage.Add("Error while Updating Document Details");
                }
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                throw oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Fetch IMDG and UNO"
        public DataSet COMMODITY_IMDG_FETCH(string CommPKs = "")
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder();

            sb.Append(" SELECT IMDG_CLASS_CODE,UN_NO");
            sb.Append("  FROM COMMODITY_MST_TBL CM");
            sb.Append("  WHERE CM.COMMODITY_MST_PK in (" + CommPKs + ")");
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        public ArrayList SaveAckUpdate(DataSet dsAckXML, int BizType, int ProcessType, string fiName)
        {
            WorkFlow objWf = new WorkFlow();
            OracleTransaction TRAN = null;
            objWf.OpenConnection();
            TRAN = objWf.MyConnection.BeginTransaction();
            objWf.MyCommand.Transaction = TRAN;
            objWf.MyCommand.Connection = objWf.MyConnection;
            int RESULT = 0;

            try
            {
                var _with131 = objWf.MyCommand.Parameters;
                objWf.MyCommand.Parameters.Clear();
                objWf.MyCommand.CommandType = CommandType.StoredProcedure;
                objWf.MyCommand.CommandText = objWf.MyUserName + ".ACKNOWLEDGEMENT_RECEVIED_PKG.ACKNOWLEDGEMENT_RECEVIED";
                _with131.Add("BIZ_TYPE_IN", BizType).Direction = ParameterDirection.Input;
                _with131.Add("PROCESS_TYPE_IN", ProcessType).Direction = ParameterDirection.Input;
                _with131.Add("RECEIVED_MESSAGENAME_IN", dsAckXML.Tables["Details"].Rows[0]["Received_MessageName"]).Direction = ParameterDirection.Input;
                _with131.Add("MESSAGE_ID_IN", dsAckXML.Tables["Details"].Rows[0]["Message_ID"]).Direction = ParameterDirection.Input;
                if (dsAckXML.Tables["Header"].Columns.Contains("Unique_ReferenceID"))
                {
                    if (!string.IsNullOrEmpty(dsAckXML.Tables["Header"].Rows[0]["Unique_ReferenceID"].ToString()))
                    {
                        _with131.Add("UNIQUE_REFERENCEID_IN", dsAckXML.Tables["Header"].Rows[0]["Unique_ReferenceID"]).Direction = ParameterDirection.Input;
                    }
                    else
                    {
                        _with131.Add("UNIQUE_REFERENCEID_IN", DBNull.Value).Direction = ParameterDirection.Input;
                    }
                }
                else
                {
                    _with131.Add("UNIQUE_REFERENCEID_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                _with131.Add("FILE_NAME_IN", fiName).Direction = ParameterDirection.Input;
                _with131.Add("RESPONSE_TIME_IN", dsAckXML.Tables["Details"].Rows[0]["Response_Time"]).Direction = ParameterDirection.Input;
                _with131.Add("TRANSACTION_FLAG_IN", dsAckXML.Tables["Details"].Rows[0]["Transaction_Flag"]).Direction = ParameterDirection.Input;
                _with131.Add("SYSTEM_MESSAGE_IN", dsAckXML.Tables["Details"].Rows[0]["System_Message"]).Direction = ParameterDirection.Input;

                RESULT = objWf.MyCommand.ExecuteNonQuery();
                arrMessage.Add("All data saved successfully");
                TRAN.Commit();
                return arrMessage;
            }
            catch (OracleException sqlExp)
            {
                TRAN.Rollback();
                ErrorMessage = sqlExp.Message;
                arrMessage.Add(sqlExp.Message);
                return arrMessage;
            }
            catch (Exception exp)
            {
                TRAN.Rollback();
                ErrorMessage = exp.Message;
                arrMessage.Add(exp.Message);
                return arrMessage;
            }
        }
        public DataSet GetEmptyDataSet()
        {
            WorkFlow objWf = new WorkFlow();
            DataTable dtHeader = null;
            DataTable dtDetails = null;
            DataSet dsEmpty = new DataSet();
            try
            {
                var _with132 = objWf.MyCommand.Parameters;
                _with132.Clear();
                _with132.Add("HEADER", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                dtHeader = objWf.GetDataTable("ACKNOWLEDGEMENT_RECEVIED_PKG", "GET_EMPTY_HEADER");
                dtHeader.TableName = "Header";
                var _with133 = objWf.MyCommand.Parameters;
                _with133.Clear();
                _with133.Add("DETAILS", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                dtDetails = objWf.GetDataTable("ACKNOWLEDGEMENT_RECEVIED_PKG", "GET_EMPTY_DETAILS");
                dtDetails.TableName = "Details";

                dsEmpty.Tables.Add(dtHeader);
                dsEmpty.Tables.Add(dtDetails);
                return dsEmpty;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
            }
            return new DataSet();
        }

        public DataSet GetFileName(long JobCardPK, int BizType, int ProcessType)
        {

            string strSQL = null;
            strSQL = "SELECT JCSET.WIN_ACK_FILE_NAME FROM JOB_CARD_TRN JCSET WHERE JCSET.JOB_CARD_TRN_PK = " + JobCardPK;
            strSQL += " AND JCSET.PROCESS_TYPE = " + ProcessType + " AND JCSET.BUSINESS_TYPE = " + BizType;

            WorkFlow objWF = new WorkFlow();
            try
            {
                return objWF.GetDataSet(strSQL);
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
            }
            return new DataSet();
        }

        //Added By Anand G to Reflect ATD and ETD to the master job card and vice versa
        #region "Fetch MasterJobFK"
        public string FetchMSTFK(string JCPK)
        {
            string strSQL = null;
            string MSTJobFK = "0";
            strSQL = "select v.master_jc_fk "  + "from job_card_trn v"  + "where v.JOB_CARD_TRN_PK = " + JCPK;
            try
            {
                MSTJobFK = Convert.ToString(getDefault((new WorkFlow()).ExecuteScaler(strSQL), 0));
                return MSTJobFK;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        public string SaveATDETD(Int32 MSTJobPk, string POLETD, string POLATD, int ProcessType, int BizType)
        {
            WorkFlow objWK = new WorkFlow();

            objWK.OpenConnection();

            string strSQL = "";
            string strSQL1 = "";
            System.DateTime ETDDate = default(System.DateTime);
            System.DateTime ATDDate = default(System.DateTime);

            if (ProcessType == 1 & BizType == 1)
            {
                if (!string.IsNullOrEmpty(POLETD) & !string.IsNullOrEmpty(POLATD))
                {
                    POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                    POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;

                    strSQL = "update MASTER_JC_AIR_EXP_TBL t ";
                    strSQL = strSQL  + " set t.AOO_ATD = to_date('" + POLATD + "','" + dateFormat + "') ";
                    strSQL = strSQL  + ", t.AOO_ETD = to_date('" + POLETD + "','" + dateFormat + "')";
                    strSQL = strSQL  + " where t.MASTER_JC_AIR_EXP_PK = '" + MSTJobPk + "'";

                    strSQL1 = "update job_card_trn jc";
                    strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + ", jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                }
                else
                {
                    if (!string.IsNullOrEmpty(POLATD))
                    {
                        POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;
                        strSQL = "update MASTER_JC_AIR_EXP_TBL t";
                        strSQL = strSQL  + " set t.AOO_ATD = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_AIR_EXP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK = '" + MSTJobPk + "'";
                    }

                    if (!string.IsNullOrEmpty(POLETD))
                    {
                        POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                        strSQL = "update MASTER_JC_AIR_EXP_TBL t";
                        strSQL = strSQL  + " set t.AOO_ETD = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_AIR_EXP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                    }
                }
            }
            else if (ProcessType == 1 & BizType == 2)
            {
                if (!string.IsNullOrEmpty(POLETD) & !string.IsNullOrEmpty(POLATD))
                {
                    //POLETD = CDate(POLETD).Day & "\" & CDate(POLETD).Month & "\" & CDate(POLETD).Year
                    //POLATD = CDate(POLATD).Day & "\" & CDate(POLATD).Month & "\" & CDate(POLATD).Year

                    strSQL = "update MASTER_JC_SEA_EXP_TBL t ";
                    strSQL = strSQL  + " set t.POL_ATD = to_date('" + POLATD + "', datetimeformat24)";
                    strSQL = strSQL  + ", t.POL_ETD = to_date('" + POLETD + "', datetimeformat24)";
                    strSQL = strSQL  + " where t.MASTER_JC_SEA_EXP_PK = '" + MSTJobPk + "'";

                    strSQL1 = "update job_card_trn jc";
                    strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "', datetimeformat24)";
                    strSQL1 = strSQL1  + ", jc.DEPARTURE_DATE = to_date('" + POLATD + "', datetimeformat24)";
                    strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                }
                else
                {
                    if (!string.IsNullOrEmpty(POLATD))
                    {
                        //POLATD = CDate(POLATD).Day & "\" & CDate(POLATD).Month & "\" & CDate(POLATD).Year
                        strSQL = "update MASTER_JC_SEA_EXP_TBL t";
                        strSQL = strSQL  + " set t.POL_ATD = to_date('" + POLATD + "', datetimeformat24)";
                        strSQL = strSQL  + " where t.MASTER_JC_SEA_EXP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.DEPARTURE_DATE = to_date('" + POLATD + "', datetimeformat24)";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK = '" + MSTJobPk + "'";
                    }

                    if (!string.IsNullOrEmpty(POLETD))
                    {
                        //POLETD = CDate(POLETD).Day & "\" & CDate(POLETD).Month & "\" & CDate(POLETD).Year
                        strSQL = "update MASTER_JC_SEA_EXP_TBL t";
                        strSQL = strSQL  + " set t.POL_ETD = to_date('" + POLETD + "', datetimeformat24)";
                        strSQL = strSQL  + " where t.MASTER_JC_SEA_EXP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "', datetimeformat24)";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                    }
                }
            }
            else if (ProcessType == 2 & BizType == 1)
            {
                if (!string.IsNullOrEmpty(POLETD) & !string.IsNullOrEmpty(POLATD))
                {
                    POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                    POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;

                    strSQL = "update MASTER_JC_AIR_IMP_TBL t ";
                    strSQL = strSQL  + " set t.AOD_ETA = to_date('" + POLATD + "','" + dateFormat + "') ";
                    strSQL = strSQL  + " where t.MASTER_JC_IMP_EXP_PK = '" + MSTJobPk + "'";

                    strSQL1 = "update job_card_trn jc";
                    strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + ", jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                }
                else
                {
                    if (!string.IsNullOrEmpty(POLATD))
                    {
                        POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;
                        strSQL = "update MASTER_JC_AIR_IMP_TBL t";
                        strSQL = strSQL  + " set t.AOD_ATD = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_IMP_EXP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK = '" + MSTJobPk + "'";
                    }

                    if (!string.IsNullOrEmpty(POLETD))
                    {
                        POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                        strSQL = "update MASTER_JC_AIR_IMP_TBL t";
                        strSQL = strSQL  + " set t.AOD_ETD = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_AIR_IMP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                    }
                }
            }
            else if (ProcessType == 2 & BizType == 2)
            {
                if (!string.IsNullOrEmpty(POLETD) & !string.IsNullOrEmpty(POLATD))
                {
                    POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                    POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;

                    strSQL = "update MASTER_JC_SEA_IMP_TBL t ";
                    strSQL = strSQL  + " set t.POL_ATD = to_date('" + POLATD + "','" + dateFormat + "')";
                    strSQL = strSQL  + ", t.POL_ETD = to_date('" + POLETD + "','" + dateFormat + "')";
                    strSQL = strSQL  + " where t.MASTER_JC_SEA_IMP_PK = '" + MSTJobPk + "'";

                    strSQL1 = "update job_card_trn jc";
                    strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + ", jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                    strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                }
                else
                {
                    if (!string.IsNullOrEmpty(POLATD))
                    {
                        POLATD = Convert.ToDateTime(POLATD).Day + "\\" + Convert.ToDateTime(POLATD).Month + "\\" + Convert.ToDateTime(POLATD).Year;
                        strSQL = "update MASTER_JC_SEA_IMP_TBL t";
                        strSQL = strSQL  + " set t.POL_ATD = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_SEA_IMP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.DEPARTURE_DATE = to_date('" + POLATD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK = '" + MSTJobPk + "'";
                    }

                    if (!string.IsNullOrEmpty(POLETD))
                    {
                        POLETD = Convert.ToDateTime(POLETD).Day + "\\" + Convert.ToDateTime(POLETD).Month + "\\" + Convert.ToDateTime(POLETD).Year;
                        strSQL = "update MASTER_JC_SEA_IMP_TBL t";
                        strSQL = strSQL  + " set t.POL_ETD = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL = strSQL  + " where t.MASTER_JC_SEA_IMP_PK = '" + MSTJobPk + "'";

                        strSQL1 = "update job_card_trn jc";
                        strSQL1 = strSQL1  + " set jc.ETD_DATE = to_date('" + POLETD + "','" + dateFormat + "')";
                        strSQL1 = strSQL1  + " where jc.MASTER_JC_FK='" + MSTJobPk + "'";
                    }
                }
            }


            try
            {
                if (!string.IsNullOrEmpty(strSQL) & !string.IsNullOrEmpty(strSQL1))
                {
                    objWK.ExecuteScaler(strSQL.ToString());
                    return objWK.ExecuteScaler(strSQL1.ToString());
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return "";
        }

        #region " Fetch Job Card "
        public DataSet FetchJobCard(Int64 JobCardPK)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            try
            {
                strSQL.Append(" SELECT JCT.BOOKING_MST_FK, JCT.PROCESS_TYPE, JCT.BUSINESS_TYPE, JCT.CARGO_TYPE , JCT.COMMODITY_GROUP_FK FROM JOB_CARD_TRN JCT WHERE JCT.JOB_CARD_TRN_PK = " + JobCardPK);

                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion
        #region "Getting Grid Details"
        public DataSet FetchGridDetails(string Doctype = "", string Cargotype = "", string bizType = "", string lblDocPK = "", string lblCarrierPK = "", string POLPK = "", string PODPK = "", string FromDate = "", string ToDate = "", Int32 CurrentPage = 0,
        Int32 TotalPage = 0, Int32 flag = 0, int Process = 0, int EDIStatus = 0, string VslName = "", string VoyageNr = "", Int32 ChkONLD = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            Int32 TotalRecords = default(Int32);
            Int32 last = default(Int32);
            Int32 start = default(Int32);
            string strSQL = null;
            string strCondition = null;
            string strCondition1 = null;
            string strCondition2 = null;
            string strCondition3 = null;
            string strCondition4 = null;

            if (ChkONLD == 0)
            {
                strCondition = strCondition + "  AND 1=2";
                strCondition1 = strCondition1 + "  AND 1=2";
                strCondition2 = strCondition2 + "  AND 1=2";
                strCondition3 = strCondition3 + "  AND 1=2";
            }
            if (Convert.ToInt32(lblDocPK )> 0)
            {
                strCondition = strCondition + " AND BST.BOOKING_MST_PK=" + lblDocPK;
                strCondition1 = strCondition1 + " AND HBL.HBL_EXP_TBL_PK=" + lblDocPK;
                strCondition2 = strCondition2 + " AND INV.CONSOL_INVOICE_PK=" + lblDocPK;
                strCondition3 = strCondition3 + " AND MET.MBL_EXP_TBL_PK=" + lblDocPK;
            }
            if (Convert.ToInt32(lblCarrierPK) > 0)
            {
                strCondition = strCondition + " AND BST.CARRIER_MST_FK=" + lblCarrierPK;
                strCondition1 = strCondition1 + " AND BOOK.CARRIER_MST_FK=" + lblCarrierPK;
                //Export
                if (Process == 1)
                {
                    strCondition2 = strCondition2 + " AND BKG.CARRIER_MST_FK=" + lblCarrierPK;
                    //Import
                }
                else if (Process == 2)
                {
                    strCondition2 = strCondition2 + " AND JOB.CARRIER_MST_FK=" + lblCarrierPK;
                }
                strCondition3 = strCondition3 + " AND MET.OPERATOR_MST_FK=" + lblCarrierPK;
            }
            if (Convert.ToInt32(POLPK) > 0)
            {
                strCondition = strCondition + "  AND PMTL.PORT_MST_PK= " + POLPK;
                strCondition1 = strCondition1 + "  AND PO.PORT_MST_PK= " + POLPK;
                strCondition2 = strCondition2 + "  AND POL.PORT_MST_PK= " + POLPK;
                strCondition3 = strCondition3 + "  AND POL.PORT_MST_PK= " + POLPK;
            }
            if (Convert.ToInt32(PODPK )> 0)
            {
                strCondition = strCondition + " AND PMTD.PORT_MST_PK = " + PODPK;
                strCondition1 = strCondition1 + " AND PO1.PORT_MST_PK = " + PODPK;
                strCondition2 = strCondition2 + " AND POD.PORT_MST_PK = " + PODPK;
                strCondition3 = strCondition3 + " AND POD.PORT_MST_PK = " + PODPK;
            }
            if (bizType == "2")
            {
                if (Convert.ToInt32(Cargotype) != 0)
                {
                    strCondition = strCondition + " AND BST.CARGO_TYPE=" + Cargotype;
                    strCondition1 = strCondition1 + " AND BOOK.CARGO_TYPE=" + Cargotype;
                    //Export
                    if (Process == 1)
                    {
                        strCondition2 = strCondition2 + " AND BKG.CARGO_TYPE=" + Cargotype;
                        //Import
                    }
                    else if (Process == 2)
                    {
                        strCondition2 = strCondition2 + " AND JOB.CARGO_TYPE=" + Cargotype;
                    }
                    strCondition3 = strCondition3 + " AND MET.CARGO_TYPE=" + Cargotype;
                }
            }
            if ((FromDate != null))
            {
                if (!string.IsNullOrEmpty(FromDate))
                {
                    strCondition = strCondition + " AND BST.BOOKING_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition1 = strCondition1 + " AND HBL.HBL_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition2 = strCondition2 + " AND INV.INVOICE_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition3 = strCondition3 + " AND MET.MBL_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                }
            }
            if ((ToDate != null))
            {
                if (!string.IsNullOrEmpty(ToDate))
                {
                    strCondition = strCondition + " AND BST.BOOKING_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition1 = strCondition1 + " AND HBL.HBL_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition2 = strCondition2 + " AND INV.INVOICE_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition3 = strCondition3 + " AND MET.MBL_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                }
            }
            if (EDIStatus != 2)
            {
                strCondition = strCondition + " AND BST.EDI_STATUS = " + EDIStatus + " ";
                strCondition2 = strCondition2 + " AND INV.EDI_STATUS = " + EDIStatus + " ";
                strCondition3 = strCondition3 + " AND MET.EDI_STATUS = " + EDIStatus + " ";
            }
            VslName = VslName.Trim().ToUpper();
            if (!string.IsNullOrEmpty(VslName.Trim()))
            {
                strCondition += " AND UPPER(BST.VESSEL_NAME) LIKE '%" + VslName + "%'";
                strCondition2 += " AND UPPER(JOB.VESSEL_NAME) LIKE '%" + VslName + "%'";
                strCondition3 += " AND UPPER(VOY.VESSEL_NAME) LIKE '%" + VslName + "%'";
            }
            VoyageNr = VoyageNr.Trim().ToUpper();
            if (!string.IsNullOrEmpty(VoyageNr.Trim()))
            {
                strCondition += " AND UPPER(BST.VOYAGE_FLIGHT_NO) LIKE '%" + VoyageNr + "%'";
                strCondition2 += " AND UPPER(JOB.VOYAGE_FLIGHT_NO) LIKE '%" + VoyageNr + "%'";
                strCondition3 += " AND UPPER(JSE.VOYAGE_FLIGHT_NO) LIKE '%" + VoyageNr + "%'";
            }
            //'BOOKING
            if (Convert.ToInt32(Doctype) == 1)
            {
                sb.Append(GetGridBookingSeaQuery(strCondition));
                //'INVOICE
            }
            else if (Convert.ToInt32(Doctype) == 2)
            {
                sb.Append(GetInvoiceSeaQuery(strCondition2, Process));
                //'CARGO/FREIGHT MANIFEST
            }
            else if (Convert.ToInt32(Doctype) == 3 | Convert.ToInt32(Doctype) == 4)
            {
                sb.Append(GetCargoFreightManifestSeaQuery(strCondition3));
            }
            StringBuilder strCount = new StringBuilder();
            strSQL = sb.ToString();
            strCount.Append(" SELECT COUNT(*)  from  ");
            strCount.Append((" (" + sb.ToString() + ")"));
            TotalRecords = Convert.ToInt32(objWF.ExecuteScaler(strCount.ToString()));
            TotalPage = TotalRecords / RecordsPerPage;
            if (TotalRecords % RecordsPerPage != 0)
            {
                TotalPage += 1;
            }
            if (CurrentPage > TotalPage)
                CurrentPage = 1;
            if (TotalRecords == 0)
                CurrentPage = 0;
            last = CurrentPage * RecordsPerPage;
            start = (CurrentPage - 1) * RecordsPerPage + 1;
            strCount.Remove(0, strCount.Length);

            StringBuilder sqlstr2 = new StringBuilder();
            sqlstr2.Append(" Select * from ");
            sqlstr2.Append( "  ( Select ROWNUM SR_NO, q.* from ");
            sqlstr2.Append("  (" + sb.ToString() + " ");
            sqlstr2.Append("  ) q )  WHERE \"SR_NO\"  BETWEEN " + start + " AND " + last + "");
            strSQL = sqlstr2.ToString();
            try
            {
                return objWF.GetDataSet(strSQL);
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public string GetGridBookingSeaQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("  SELECT DISTINCT BST.BOOKING_MST_PK PK,");
            sb.Append("       BST.BOOKING_REF_NO DOCUMENTNR,");
            sb.Append("       BST.BOOKING_DATE DOCDATE,");
            sb.Append("       PMTL.PORT_ID AS POL,");
            sb.Append("       PMTD.PORT_ID AS POD,");
            sb.Append("       OPR.OPERATOR_NAME CARRIER,");
            sb.Append(" (CASE");
            sb.Append(" WHEN (NVL(BST.VESSEL_NAME, '') || '/' ||");
            sb.Append(" NVL(BST.VOYAGE_FLIGHT_NO, '') = '/') THEN");
            sb.Append(" ''");
            sb.Append(" ELSE");
            sb.Append(" NVL(BST.VESSEL_NAME, '') || '/' || NVL(BST.VOYAGE_FLIGHT_NO, '')");
            sb.Append(" END) AS VESVOYAGE,");
            sb.Append("       CMT.CUSTOMER_NAME SHIPPER,");
            sb.Append("       CST.CUSTOMER_NAME CONSIGNEE,");
            sb.Append("       OPR.OPERATOR_NAME,");
            sb.Append("     DECODE(BST.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            sb.Append("       CGT.COMMODITY_GROUP_CODE,");
            sb.Append("       DECODE(BST.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
            sb.Append("       '' SELFLAG,");
            sb.Append("      CMT.CUSTOMER_MST_PK");
            sb.Append("  FROM BOOKING_MST_TBL  BST,");
            sb.Append("       USER_MST_TBL      UMT,");
            sb.Append("       CUSTOMER_MST_TBL CMT,");
            sb.Append("       CUSTOMER_MST_TBL CST,");
            sb.Append("       PORT_MST_TBL     PMTL,");
            sb.Append("       PORT_MST_TBL     PMTD,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGT,");
            sb.Append("       OPERATOR_MST_TBL OPR");
            sb.Append(" WHERE BST.CUST_CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
            sb.Append("   AND BST.CONS_CUSTOMER_MST_FK = CST.CUSTOMER_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = PMTL.PORT_MST_PK");
            sb.Append("   AND BST.PORT_MST_POD_FK = PMTD.PORT_MST_PK");
            sb.Append("   AND CGT.COMMODITY_GROUP_PK(+)=BST.COMMODITY_GROUP_FK");
            sb.Append("   AND OPR.OPERATOR_MST_PK=BST.CARRIER_MST_FK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND BST.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND BST.STATUS <> 3 ");
            sb.Append("   AND BST.BUSINESS_TYPE = 2 ");
            sb.Append(" " + Condition + "");
            sb.Append("     order by BOOKING_DATE DESC, BOOKING_REF_NO DESC");
            return sb.ToString();
        }
        public string GetHBLQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT DISTINCT HBL.HBL_EXP_TBL_PK BOOKING_MST_PK,");
            sb.Append("   HBL.HBL_REF_NO BOOKING_REF_NO,");
            sb.Append("   HBL.HBL_DATE BOOKING_DATE,");
            sb.Append("   PO.PORT_ID         AS POL,");
            sb.Append("   PO1.PORT_ID        AS POD,");
            sb.Append("   OPR.OPERATOR_NAME CARRIER,");
            sb.Append("   (CASE");
            sb.Append("   WHEN (NVL(V.VESSEL_NAME, '') || '/' ||");
            sb.Append("   NVL(VVT.VOYAGE, '') = '/') THEN");
            sb.Append("    ''");
            sb.Append("   ELSE");
            sb.Append("   NVL(V.VESSEL_NAME, '') || '/' ||");
            sb.Append("   NVL(VVT.VOYAGE, '')");
            sb.Append("   END) AS VESVOYAGE,");
            sb.Append("   CMT.CUSTOMER_ID SHIPPER,");
            sb.Append("   CST.CUSTOMER_ID CONSIGNEE,");
            sb.Append("   OPR.OPERATOR_ID,");
            sb.Append("   DECODE(BOOK.CARGO_TYPE,");
            sb.Append("   '1',");
            sb.Append("   'FCL',");
            sb.Append("   '2',");
            sb.Append("   'LCL',");
            sb.Append("   '4',");
            sb.Append("   'BBC') CARGO_TYPE,");
            sb.Append("   CGT.COMMODITY_GROUP_CODE,");
            sb.Append("   '' SELFLAG,");
            sb.Append("  CMT.CUSTOMER_MST_PK");
            sb.Append("   FROM HBL_EXP_TBL          HBL,");
            sb.Append("   JOB_CARD_TRN JOB,");
            sb.Append("   CUSTOMER_MST_TBL     CMT,");
            sb.Append("   CUSTOMER_MST_TBL     CST,");
            sb.Append("   BOOKING_MST_TBL      BOOK,");
            sb.Append("   PORT_MST_TBL         PO,");
            sb.Append("   OPERATOR_MST_TBL     OPR,");
            sb.Append("   PORT_MST_TBL         PO1,");
            sb.Append("   USER_MST_TBL         UMT,");
            sb.Append("   VESSEL_VOYAGE_TBL    V,");
            sb.Append("   VESSEL_VOYAGE_TRN    VVT,");
            sb.Append("   COMMODITY_GROUP_MST_TBL CGT");
            sb.Append("   WHERE OPR.OPERATOR_MST_PK = BOOK.CARRIER_MST_FK");
            sb.Append("   AND CMT.CUSTOMER_MST_PK = JOB.SHIPPER_CUST_MST_FK");
            sb.Append("   AND CST.CUSTOMER_MST_PK=JOB.CONSIGNEE_CUST_MST_FK");
            sb.Append("   AND JOB.BOOKING_MST_FK = BOOK.BOOKING_MST_PK");
            sb.Append("   AND BOOK.PORT_MST_POL_FK = PO.PORT_MST_PK");
            sb.Append("   AND BOOK.PORT_MST_POD_FK = PO1.PORT_MST_PK");
            sb.Append("   AND HBL.JOB_CARD_SEA_EXP_FK = JOB.JOB_CARD_TRN_PK");
            sb.Append("   AND VVT.VESSEL_VOYAGE_TBL_FK = V.VESSEL_VOYAGE_TBL_PK(+)");
            sb.Append("   AND HBL.VOYAGE_TRN_FK = VVT.VOYAGE_TRN_PK(+)");
            sb.Append("   AND JOB.COMMODITY_GROUP_FK=CGT.COMMODITY_GROUP_PK(+)");
            sb.Append("   AND HBL.HBL_STATUS = 1");
            sb.Append("   AND HBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append(" " + Condition + "");
            sb.Append("    order by HBL_DATE DESC, HBL_REF_NO DESC");
            return sb.ToString();
        }
        public string GetInvoiceSeaQuery(string Condition = "", int Process = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            //IMPORT
            if (Process == 2)
            {
                sb.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK PK,");
                sb.Append("       INV.INVOICE_REF_NO DOCUMENTNR,");
                sb.Append("       INV.INVOICE_DATE DOCDATE,");
                sb.Append("       POL.PORT_ID POL,");
                sb.Append("       POD.PORT_ID POD,");
                sb.Append("       OPR.OPERATOR_NAME CARRIER,");
                sb.Append("       (CASE");
                sb.Append("         WHEN (NVL(JOB.VESSEL_NAME, '') || '/' || NVL(JOB.VOYAGE_FLIGHT_NO, '') = '/') THEN");
                sb.Append("          ''");
                sb.Append("         ELSE");
                sb.Append("          NVL(JOB.VESSEL_NAME, '') || '/' || NVL(JOB.VOYAGE_FLIGHT_NO, '')");
                sb.Append("       END) AS VESVOYAGE,");
                sb.Append("       CMT.CUSTOMER_ID SHIPPER,");
                sb.Append("       CST.CUSTOMER_ID CONSIGNEE,");
                sb.Append("       OPR.OPERATOR_ID OPERATOR_NAME,");
                sb.Append("       DECODE(JOB.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
                sb.Append("       CGM.COMMODITY_GROUP_CODE, DECODE(INV.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
                sb.Append("       '' SELFLAG,");
                sb.Append("       CMT.CUSTOMER_MST_PK");
                sb.Append("  FROM CONSOL_INVOICE_TBL      INV,");
                sb.Append("       CONSOL_INVOICE_TRN_TBL  INVTRN,");
                sb.Append("       JOB_CARD_TRN    JOB,");
                //sb.Append("       BOOKING_MST_TBL         BKG,")
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CUSTOMER_MST_TBL        CMT,");
                sb.Append("       CUSTOMER_MST_TBL        CST,");
                sb.Append("       OPERATOR_MST_TBL        OPR,");
                sb.Append("       COMMODITY_GROUP_MST_TBL CGM,");
                sb.Append("       USER_MST_TBL      UMT ");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = INVTRN.JOB_CARD_FK");
                //sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK")
                sb.Append("   AND POL.PORT_MST_PK = JOB.PORT_MST_POL_FK");
                sb.Append("   AND POD.PORT_MST_PK = JOB.PORT_MST_POD_FK");
                sb.Append("   AND INV.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
                sb.Append("   AND JOB.CONSIGNEE_CUST_MST_FK = CST.CUSTOMER_MST_PK");
                sb.Append("   AND OPR.OPERATOR_MST_PK = JOB.CARRIER_MST_FK");
                sb.Append("   AND CGM.COMMODITY_GROUP_PK(+) = JOB.COMMODITY_GROUP_FK");
                sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND POD.LOCATION_MST_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND INV.CREATED_BY_FK = UMT.USER_MST_PK");
                sb.Append("   AND JOB.BUSINESS_TYPE = 2 ");
                sb.Append("   AND JOB.PROCESS_TYPE = 2 ");
                sb.Append(" " + Condition + "");
                sb.Append("     order by INVOICE_DATE DESC, INVOICE_REF_NO DESC");
                //EXPORT
            }
            else
            {
                sb.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK PK,");
                sb.Append("       INV.INVOICE_REF_NO DOCUMENTNR,");
                sb.Append("       INV.INVOICE_DATE DOCDATE,");
                sb.Append("       POL.PORT_ID POL,");
                sb.Append("       POD.PORT_ID POD,");
                sb.Append("       OPR.OPERATOR_NAME CARRIER,");
                sb.Append("       (CASE");
                sb.Append("         WHEN (NVL(JOB.VESSEL_NAME, '') || '/' || NVL(JOB.VOYAGE_FLIGHT_NO, '') = '/') THEN");
                sb.Append("          ''");
                sb.Append("         ELSE");
                sb.Append("          NVL(JOB.VESSEL_NAME, '') || '/' || NVL(JOB.VOYAGE_FLIGHT_NO, '')");
                sb.Append("       END) AS VESVOYAGE,");
                sb.Append("       CMT.CUSTOMER_ID SHIPPER,");
                sb.Append("       CST.CUSTOMER_ID CONSIGNEE,");
                sb.Append("       OPR.OPERATOR_ID,");
                sb.Append("       DECODE(BKG.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
                sb.Append("       CGM.COMMODITY_GROUP_CODE,DECODE(INV.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
                sb.Append("       '' SELFLAG,");
                sb.Append("       CMT.CUSTOMER_MST_PK");
                sb.Append("  FROM CONSOL_INVOICE_TBL      INV,");
                sb.Append("       CONSOL_INVOICE_TRN_TBL  INVTRN,");
                sb.Append("       JOB_CARD_TRN    JOB,");
                sb.Append("       BOOKING_MST_TBL         BKG,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CUSTOMER_MST_TBL        CMT,");
                sb.Append("       CUSTOMER_MST_TBL        CST,");
                sb.Append("       OPERATOR_MST_TBL        OPR,");
                sb.Append("       COMMODITY_GROUP_MST_TBL CGM,");
                sb.Append("       USER_MST_TBL      UMT ");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = INVTRN.JOB_CARD_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND POL.PORT_MST_PK = BKG.PORT_MST_POL_FK");
                sb.Append("   AND POD.PORT_MST_PK = BKG.PORT_MST_POD_FK");
                sb.Append("   AND INV.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
                sb.Append("   AND JOB.CONSIGNEE_CUST_MST_FK = CST.CUSTOMER_MST_PK");
                sb.Append("   AND OPR.OPERATOR_MST_PK = BKG.CARRIER_MST_FK");
                sb.Append("   AND CGM.COMMODITY_GROUP_PK(+) = JOB.COMMODITY_GROUP_FK");
                sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND POL.LOCATION_MST_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND INV.CREATED_BY_FK = UMT.USER_MST_PK");
                sb.Append("   AND JOB.BUSINESS_TYPE = 2 ");
                sb.Append("   AND JOB.PROCESS_TYPE = 1 ");
                sb.Append(" " + Condition + "");
                sb.Append("     order by INVOICE_DATE DESC, INVOICE_REF_NO DESC");
            }
            return sb.ToString();
        }
        public string GetCargoFreightManifestSeaQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MET.MBL_EXP_TBL_PK PK,");
            sb.Append("       MET.MBL_REF_NO DOCUMENTNR,");
            sb.Append("       MET.MBL_DATE DOCDATE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       OMT.OPERATOR_NAME CARRIER,");
            sb.Append(" (CASE");
            sb.Append(" WHEN (NVL(VOY.VESSEL_NAME, '') || '/' ||");
            sb.Append(" NVL(VVT.VOYAGE, '') = '/') THEN");
            sb.Append(" ''");
            sb.Append(" ELSE");
            sb.Append(" NVL(VOY.VESSEL_NAME, '') || '/' || NVL(VVT.VOYAGE, '')");
            sb.Append(" END) AS VESVOYAGE,");
            //sb.Append("       (VOY.VESSEL_NAME || ' / ' || VVT.VOYAGE) VESSEL_VOY,")
            sb.Append("       MET.SHIPPER_NAME SHIPPER,");
            sb.Append("       MET.CONSIGNEE_NAME CONSIGNEE,");
            sb.Append("       OMT.OPERATOR_NAME,");
            sb.Append("       DECODE(MET.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE,");
            sb.Append("       DECODE(MET.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
            sb.Append("       '' SELFLAG,");
            sb.Append("       CMT.CUSTOMER_MST_PK CUSTOMER_MST_PK");
            sb.Append("  FROM MBL_EXP_TBL       MET,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       USER_MST_TBL      UMT,");
            sb.Append("       CUSTOMER_MST_TBL  CMT,");
            sb.Append("       PORT_MST_TBL      POL,");
            sb.Append("       PORT_MST_TBL      POD,");
            sb.Append("       OPERATOR_MST_TBL  OMT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT,");
            sb.Append("       VESSEL_VOYAGE_TBL VOY, ");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT");
            sb.Append(" WHERE UMT.USER_MST_PK = MET.CREATED_BY_FK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MET.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = CMT.CUSTOMER_MST_PK");
            sb.Append("   AND POL.PORT_MST_PK = MET.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = MET.PORT_MST_POD_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = MET.OPERATOR_MST_FK");
            sb.Append("   AND VVT.VOYAGE_TRN_PK(+) = MET.VOYAGE_TRN_FK");
            sb.Append("   AND VOY.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = MET.COMMODITY_GROUP_FK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MET.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND MET.MBL_REF_NO IS NOT NULL ");
            sb.Append("   AND JSE.BUSINESS_TYPE = 2 ");
            sb.Append("   AND JSE.PROCESS_TYPE = 1 ");
            sb.Append("  " + Condition + " ");
            sb.Append("     order by MBL_DATE DESC, MBL_REF_NO DESC");
            sb.Append("");

            return sb.ToString();
        }
        public DataSet FetchGridDetailsAir(string Doctype = "", string Cargotype = "", string bizType = "", string lblDocPK = "", string lblCarrierPK = "", string POLPK = "", string PODPK = "", string FromDate = "", string ToDate = "", Int32 CurrentPage = 0,
        Int32 TotalPage = 0, Int32 flag = 0, int Process = 0, int EDIStatus = 0, string VslVoy = "", Int32 ChkONLD = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            Int32 TotalRecords = default(Int32);
            Int32 last = default(Int32);
            Int32 start = default(Int32);
            string strSQL = null;
            string strCondition = null;
            string strCondition1 = null;
            string strCondition2 = null;
            string strCondition3 = null;

            if (ChkONLD == 0)
            {
                strCondition = strCondition + "  AND 1=2";
                strCondition1 = strCondition1 + "  AND 1=2";
                strCondition2 = strCondition2 + "  AND 1=2";
                strCondition3 = strCondition3 + "  AND 1=2";
            }
            //If flag = 0 Then
            //    strCondition = strCondition & "  AND 1=2"
            //    strCondition1 = strCondition1 & "  AND 1=2"
            //    strCondition2 = strCondition2 & "  AND 1=2"
            //    strCondition3 = strCondition3 & "  AND 1=2"
            //End If
            if (Convert.ToInt32(lblDocPK) > 0)
            {
                strCondition = strCondition + " AND BRT.BOOKING_MST_PK=" + lblDocPK;
                strCondition1 = strCondition1 + " AND HAWB.HAWB_EXP_TBL_PK=" + lblDocPK;
                strCondition2 = strCondition2 + " AND INV.CONSOL_INVOICE_PK=" + lblDocPK;
                strCondition3 = strCondition3 + " AND MET.MAWB_EXP_TBL_PK=" + lblDocPK;
            }
            if (Convert.ToInt32(lblCarrierPK) > 0)
            {
                strCondition = strCondition + " AND BRT.CARRIER_MST_FK=" + lblCarrierPK;
                strCondition1 = strCondition1 + " AND BOOK.CARRIER_MST_FK=" + lblCarrierPK;
                //Export
                if (Process == 1)
                {
                    strCondition2 = strCondition2 + " AND BKG.CARRIER_MST_FK=" + lblCarrierPK;
                    //Import
                }
                else if (Process == 2)
                {
                    strCondition2 = strCondition2 + " AND JOB.CARRIER_MST_FK=" + lblCarrierPK;
                }
                strCondition3 = strCondition3 + " AND MET.AIRLINE_MST_FK=" + lblCarrierPK;
            }
            if (Convert.ToInt32(POLPK) > 0)
            {
                strCondition = strCondition + "  AND PMTL.PORT_MST_PK= " + POLPK;
                strCondition1 = strCondition1 + "  AND PO.PORT_MST_PK= " + POLPK;
                strCondition2 = strCondition2 + "  AND POL.PORT_MST_PK= " + POLPK;
                strCondition3 = strCondition3 + "  AND POL.PORT_MST_PK= " + POLPK;
            }
            if (Convert.ToInt32(PODPK) > 0)
            {
                strCondition = strCondition + " AND PMTD.PORT_MST_PK = " + PODPK;
                strCondition1 = strCondition1 + " AND PO1.PORT_MST_PK = " + PODPK;
                strCondition2 = strCondition2 + " AND POD.PORT_MST_PK = " + PODPK;
                strCondition3 = strCondition3 + " AND POD.PORT_MST_PK = " + PODPK;
            }
            if ((FromDate != null))
            {
                if (!string.IsNullOrEmpty(FromDate))
                {
                    strCondition = strCondition + " AND BRT.BOOKING_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition1 = strCondition1 + " AND HAWB.HAWB_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition2 = strCondition2 + " AND INV.INVOICE_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                    strCondition3 = strCondition3 + " AND MET.MAWB_DATE >= TO_DATE('" + FromDate + "',dateformat) ";
                }
            }
            if ((ToDate != null))
            {
                if (!string.IsNullOrEmpty(ToDate))
                {
                    strCondition = strCondition + " AND BRT.BOOKING_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition1 = strCondition1 + " AND HAWB.HAWB_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition2 = strCondition2 + " AND INV.INVOICE_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                    strCondition3 = strCondition3 + " AND MET.MAWB_DATE <= TO_DATE('" + ToDate + "',dateformat) ";
                }
            }
            if (EDIStatus != 2)
            {
                strCondition = strCondition + " AND BRT.EDI_STATUS = " + EDIStatus + " ";
                //strCondition1 = strCondition1 & " AND HBL.HBL_DATE <= TO_DATE('" & ToDate & "',dateformat) "
                strCondition2 = strCondition2 + " AND INV.EDI_STATUS = " + EDIStatus + " ";
                strCondition3 = strCondition3 + " AND MET.EDI_STATUS = " + EDIStatus + " ";
            }
            VslVoy = VslVoy.Trim().ToUpper();
            if (!string.IsNullOrEmpty(VslVoy.Trim()))
            {
                strCondition += " AND UPPER(BRT.VOYAGE_FLIGHT_NO) LIKE '%" + VslVoy + "%'";
                //strCondition1 &= " "
                strCondition2 += " AND UPPER(JOB.VOYAGE_FLIGHT_NO) LIKE '%" + VslVoy + "%'";
                strCondition3 += " AND UPPER(JSE.VOYAGE_FLIGHT_NO) LIKE '%" + VslVoy + "%'";
            }
            //'BOOKING
            if (Convert.ToInt32(Doctype) == 1)
            {
                sb.Append(GetGridBookingAirQuery(strCondition));
                //'INVOICE
            }
            else if (Convert.ToInt32(Doctype) == 2)
            {
                sb.Append(GetInvoiceAirQuery(strCondition2, Process));
                //'CARGO/FREIGHT MANIFEST
            }
            else if (Convert.ToInt32(Doctype) == 3 | Convert.ToInt32(Doctype) == 4)
            {
                sb.Append(GetGridCargoFreightManifestAirQuery(strCondition3));
            }
            StringBuilder strCount = new StringBuilder();
            strSQL = sb.ToString();
            strCount.Append(" SELECT COUNT(*)  from  ");
            strCount.Append((" (" + sb.ToString() + ")"));
            TotalRecords = Convert.ToInt32(objWF.ExecuteScaler(strCount.ToString()));
            TotalPage = TotalRecords / RecordsPerPage;
            if (TotalRecords % RecordsPerPage != 0)
            {
                TotalPage += 1;
            }
            if (CurrentPage > TotalPage)
                CurrentPage = 1;
            if (TotalRecords == 0)
                CurrentPage = 0;
            last = CurrentPage * RecordsPerPage;
            start = (CurrentPage - 1) * RecordsPerPage + 1;
            strCount.Remove(0, strCount.Length);

            StringBuilder sqlstr2 = new StringBuilder();
            sqlstr2.Append(" Select * from ");
            sqlstr2.Append( "  ( Select ROWNUM SR_NO, q.* from ");
            sqlstr2.Append("  (" + sb.ToString() + " ");
            sqlstr2.Append("  ) q )  WHERE \"SR_NO\"  BETWEEN " + start + " AND " + last + "");
            strSQL = sqlstr2.ToString();
            try
            {
                return objWF.GetDataSet(strSQL);
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public string GetGridBookingAirQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("  SELECT DISTINCT BRT.BOOKING_MST_PK PK,");
            sb.Append("       BRT.BOOKING_REF_NO DOCUMENTNR,");
            sb.Append("       BRT.BOOKING_DATE DOCDATE,");
            sb.Append("       PMTL.PORT_ID AS POL,");
            sb.Append("       PMTD.PORT_ID AS POD,");
            sb.Append("       AMT.AIRLINE_NAME CARRIER,");
            sb.Append("       BRT.VOYAGE_FLIGHT_NO VESVOYAGE,");
            sb.Append("       CMT.CUSTOMER_NAME SHIPPER,");
            sb.Append("       CST.CUSTOMER_NAME CONSIGNEE,");
            sb.Append("       AMT.AIRLINE_ID,");
            sb.Append("     DECODE(BRT.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            sb.Append("       CGT.COMMODITY_GROUP_CODE,");
            sb.Append("       DECODE(BRT.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
            sb.Append("       '' SELFLAG,");
            sb.Append("      CMT.CUSTOMER_MST_PK");
            sb.Append("  FROM BOOKING_MST_TBL  BRT,");
            sb.Append("       USER_MST_TBL      UMT,");
            sb.Append("       CUSTOMER_MST_TBL CMT,");
            sb.Append("       CUSTOMER_MST_TBL CST,");
            sb.Append("       PORT_MST_TBL     PMTL,");
            sb.Append("       PORT_MST_TBL     PMTD,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGT,");
            sb.Append("       AIRLINE_MST_TBL         AMT");
            sb.Append(" WHERE BRT.CUST_CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
            sb.Append("   AND BRT.CONS_CUSTOMER_MST_FK = CST.CUSTOMER_MST_PK(+)");
            sb.Append("   AND BRT.PORT_MST_POL_FK = PMTL.PORT_MST_PK");
            sb.Append("   AND BRT.PORT_MST_POD_FK = PMTD.PORT_MST_PK");
            sb.Append("   AND CGT.COMMODITY_GROUP_PK(+)=BRT.COMMODITY_GROUP_FK");
            sb.Append("   AND AMT.AIRLINE_MST_PK=BRT.CARRIER_MST_FK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND BRT.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND BRT.STATUS <> 3 ");
            sb.Append("   AND BRT.BUSINESS_TYPE = 1 ");
            sb.Append(" " + Condition + "");
            sb.Append("     order by BOOKING_DATE DESC, BOOKING_REF_NO DESC");
            return sb.ToString();
        }
        public string GetHAWBQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT DISTINCT HAWB.HAWB_EXP_TBL_PK BOOKING_MST_PK,");
            sb.Append("   HAWB.HAWB_REF_NO BOOKING_REF_NO,");
            sb.Append("   HAWB.HAWB_DATE BOOKING_DATE,");
            sb.Append("   PO.PORT_ID         AS POL,");
            sb.Append("   PO1.PORT_ID        AS POD,");
            sb.Append("   AMT.AIRLINE_NAME CARRIER,");
            sb.Append("   BOOK.VOYAGE_FLIGHT_NO AS VESVOYAGE,");
            sb.Append("   CMT.CUSTOMER_ID SHIPPER,");
            sb.Append("   CST.CUSTOMER_ID CONSIGNEE,");
            sb.Append("   AMT.AIRLINE_ID,");
            sb.Append("   DECODE(BOOK.CARGO_TYPE,");
            sb.Append("   '1',");
            sb.Append("   'FCL',");
            sb.Append("   '2',");
            sb.Append("   'LCL',");
            sb.Append("   '4',");
            sb.Append("   'BBC') CARGO_TYPE,");
            sb.Append("   CGT.COMMODITY_GROUP_CODE,");
            sb.Append("   '' SELFLAG,");
            sb.Append("  CMT.CUSTOMER_MST_PK");
            sb.Append("   FROM HAWB_EXP_TBL          HAWB,");
            sb.Append("   JOB_CARD_TRN JOB,");
            sb.Append("   CUSTOMER_MST_TBL     CMT,");
            sb.Append("   CUSTOMER_MST_TBL     CST,");
            sb.Append("   BOOKING_MST_TBL      BOOK,");
            sb.Append("   PORT_MST_TBL         PO,");
            sb.Append("   AIRLINE_MST_TBL      AMT,");
            sb.Append("   PORT_MST_TBL         PO1,");
            sb.Append("   USER_MST_TBL         UMT,");
            sb.Append("   COMMODITY_GROUP_MST_TBL CGT");
            sb.Append("   WHERE AMT.AIRLINE_MST_PK=BOOK.CARRIER_MST_FK");
            sb.Append("   AND CMT.CUSTOMER_MST_PK = JOB.SHIPPER_CUST_MST_FK");
            sb.Append("   AND CST.CUSTOMER_MST_PK=JOB.CONSIGNEE_CUST_MST_FK");
            sb.Append("   AND JOB.BOOKING_MST_FK = BOOK.BOOKING_MST_PK");
            sb.Append("   AND BOOK.PORT_MST_POL_FK = PO.PORT_MST_PK");
            sb.Append("   AND BOOK.PORT_MST_POD_FK = PO1.PORT_MST_PK");
            sb.Append("   AND HAWB.JOB_CARD_AIR_EXP_FK = JOB.Job_Card_Trn_Pk");
            sb.Append("   AND JOB.COMMODITY_GROUP_FK=CGT.COMMODITY_GROUP_PK(+)");
            sb.Append("   AND HAWB.HAWB_STATUS = 1");
            sb.Append("   AND HAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append(" " + Condition + "");
            sb.Append("    order by HAWB_DATE DESC, HAWB_REF_NO DESC");
            return sb.ToString();
        }
        public string GetInvoiceAirQuery(string Condition = "", int Process = 0)
        {
            StringBuilder sb = new StringBuilder(5000);
            //IMPORT
            if (Process == 2)
            {
                sb.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK PK,");
                sb.Append("       INV.INVOICE_REF_NO DOCUMENTNR,");
                sb.Append("       INV.INVOICE_DATE DOCDATE,");
                sb.Append("       POL.PORT_ID POL,");
                sb.Append("       POD.PORT_ID POD,");
                sb.Append("       AMT.AIRLINE_NAME CARRIER,");
                sb.Append("       JOB.VOYAGE_FLIGHT_NO AS VESVOYAGE,");
                sb.Append("       CMT.CUSTOMER_ID SHIPPER,");
                sb.Append("       CST.CUSTOMER_ID CONSIGNEE,");
                sb.Append("       AMT.AIRLINE_ID,");
                sb.Append("       '' CARGO_TYPE,");
                sb.Append("       CGM.COMMODITY_GROUP_CODE,DECODE(INV.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
                sb.Append("       '' SELFLAG,");
                sb.Append("       CMT.CUSTOMER_MST_PK");
                sb.Append("  FROM CONSOL_INVOICE_TBL      INV,");
                sb.Append("       CONSOL_INVOICE_TRN_TBL  INVTRN,");
                sb.Append("       JOB_CARD_TRN    JOB,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CUSTOMER_MST_TBL        CMT,");
                sb.Append("       CUSTOMER_MST_TBL        CST,");
                sb.Append("       AIRLINE_MST_TBL         AMT,");
                sb.Append("       COMMODITY_GROUP_MST_TBL CGM,");
                sb.Append("       USER_MST_TBL      UMT ");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = INVTRN.JOB_CARD_FK");
                sb.Append("   AND POL.PORT_MST_PK = JOB.PORT_MST_POL_FK");
                sb.Append("   AND POD.PORT_MST_PK = JOB.PORT_MST_POD_FK");
                sb.Append("   AND INV.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
                sb.Append("   AND JOB.CONSIGNEE_CUST_MST_FK = CST.CUSTOMER_MST_PK");
                sb.Append("   AND AMT.AIRLINE_MST_PK = JOB.CARRIER_MST_FK");
                sb.Append("   AND CGM.COMMODITY_GROUP_PK(+) = JOB.COMMODITY_GROUP_FK");
                sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND POD.LOCATION_MST_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND INV.CREATED_BY_FK = UMT.USER_MST_PK");
                sb.Append("   AND JOB.BUSINESS_TYPE = 1 ");
                sb.Append("   AND JOB.PROCESS_TYPE = 2 ");
                sb.Append(" " + Condition + "");
                sb.Append("     order by INVOICE_DATE DESC, INVOICE_REF_NO DESC");
                //EXPORT
            }
            else
            {
                sb.Append("SELECT DISTINCT INV.CONSOL_INVOICE_PK PK,");
                sb.Append("       INV.INVOICE_REF_NO DOCUMENTNR,");
                sb.Append("       INV.INVOICE_DATE DOCDATE,");
                sb.Append("       POL.PORT_ID POL,");
                sb.Append("       POD.PORT_ID POD,");
                sb.Append("       AMT.AIRLINE_NAME CARRIER,");
                sb.Append("       JOB.VOYAGE_FLIGHT_NO AS VESVOYAGE,");
                sb.Append("       CMT.CUSTOMER_ID SHIPPER,");
                sb.Append("       CST.CUSTOMER_ID CONSIGNEE,");
                sb.Append("       AMT.AIRLINE_ID,");
                sb.Append("       DECODE(BKG.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
                sb.Append("       CGM.COMMODITY_GROUP_CODE,DECODE(INV.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
                sb.Append("       '' SELFLAG,");
                sb.Append("       CMT.CUSTOMER_MST_PK");
                sb.Append("  FROM CONSOL_INVOICE_TBL      INV,");
                sb.Append("       CONSOL_INVOICE_TRN_TBL  INVTRN,");
                sb.Append("       JOB_CARD_TRN    JOB,");
                sb.Append("       BOOKING_MST_TBL         BKG,");
                sb.Append("       PORT_MST_TBL            POL,");
                sb.Append("       PORT_MST_TBL            POD,");
                sb.Append("       CUSTOMER_MST_TBL        CMT,");
                sb.Append("       CUSTOMER_MST_TBL        CST,");
                sb.Append("       AIRLINE_MST_TBL         AMT,");
                sb.Append("       COMMODITY_GROUP_MST_TBL CGM,");
                sb.Append("       USER_MST_TBL      UMT ");
                sb.Append(" WHERE INV.CONSOL_INVOICE_PK = INVTRN.CONSOL_INVOICE_FK");
                sb.Append("   AND JOB.Job_Card_Trn_Pk = INVTRN.JOB_CARD_FK");
                sb.Append("   AND JOB.BOOKING_MST_FK = BKG.BOOKING_MST_PK");
                sb.Append("   AND POL.PORT_MST_PK = BKG.PORT_MST_POL_FK");
                sb.Append("   AND POD.PORT_MST_PK = BKG.PORT_MST_POD_FK");
                sb.Append("   AND INV.CUSTOMER_MST_FK = CMT.CUSTOMER_MST_PK");
                sb.Append("   AND JOB.CONSIGNEE_CUST_MST_FK = CST.CUSTOMER_MST_PK");
                sb.Append("   AND AMT.AIRLINE_MST_PK = BKG.CARRIER_MST_FK");
                sb.Append("   AND CGM.COMMODITY_GROUP_PK(+) = JOB.COMMODITY_GROUP_FK");
                sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND POL.LOCATION_MST_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
                sb.Append("   AND INV.CREATED_BY_FK = UMT.USER_MST_PK");
                sb.Append("   AND JOB.BUSINESS_TYPE = 1 ");
                sb.Append("   AND JOB.PROCESS_TYPE = 1 ");
                sb.Append(" " + Condition + "");
                sb.Append("     order by INVOICE_DATE DESC, INVOICE_REF_NO DESC");
            }
            return sb.ToString();
        }
        public string GetGridCargoFreightManifestAirQuery(string Condition = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("       SELECT DISTINCT MET.MAWB_EXP_TBL_PK PK,");
            sb.Append("       MET.MAWB_REF_NO DOCUMENTNR,");
            sb.Append("       MET.MAWB_DATE DOCDATE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       AMT.AIRLINE_NAME CARRIER,");
            //sb.Append("       '' VESVOYAGE1,")
            sb.Append("       JSE.VOYAGE_FLIGHT_NO VESVOYAGE,");
            sb.Append("       MET.SHIPPER_NAME SHIPPER,");
            sb.Append("       MET.CONSIGNEE_NAME CONSIGNEE,");
            sb.Append("       AMT.AIRLINE_ID OPERATOR_NAME,");
            sb.Append("       '' CARGO_TYPE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP_CODE,");
            sb.Append("       DECODE(MET.EDI_STATUS,0,'NG',1,'TM') EDI_STATUS,");
            sb.Append("       '' SELFLAG,");
            sb.Append("       CMT.CUSTOMER_MST_PK CUSTOMER_MST_PK");
            sb.Append("  FROM MAWB_EXP_TBL      MET,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       USER_MST_TBL      UMT,");
            sb.Append("       CUSTOMER_MST_TBL  CMT,");
            sb.Append("       PORT_MST_TBL      POL,");
            sb.Append("       PORT_MST_TBL      POD,");
            sb.Append("       AIRLINE_MST_TBL   AMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT");
            sb.Append(" WHERE UMT.USER_MST_PK = MET.CREATED_BY_FK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MET.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = CMT.CUSTOMER_MST_PK(+)");
            sb.Append("   AND POL.PORT_MST_PK = MET.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = MET.PORT_MST_POD_FK");
            sb.Append("   AND AMT.AIRLINE_MST_PK = MET.AIRLINE_MST_FK");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = MET.COMMODITY_GROUP_FK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MET.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND MET.MAWB_REF_NO IS NOT NULL");
            sb.Append("   AND JSE.BUSINESS_TYPE = 1 ");
            sb.Append("   AND JSE.PROCESS_TYPE = 1 ");
            sb.Append(" " + Condition + "");
            sb.Append("     order by MAWB_DATE DESC, MAWB_REF_NO DESC");
            sb.Append("       ");

            return sb.ToString();
        }
        #endregion
        public void updateEDIStatus(string strPK, string strBizType = "", string strDocType = "")
        {
            string strSql = "";
            WorkFlow objWF = new WorkFlow();

            try
            {
                if (Convert.ToInt32(strDocType) == 1)
                {
                    if (Convert.ToInt32(strBizType) == 2)
                    {
                        strSql = " UPDATE BOOKING_MST_TBL SET EDI_STATUS = 1 WHERE BOOKING_MST_PK IN (" + strPK + ") AND NVL(EDI_STATUS,0) = 0 ";
                        objWF.ExecuteCommands(strSql);
                    }
                    else if (Convert.ToInt32(strBizType) == 1)
                    {
                        strSql = " UPDATE BOOKING_MST_TBL SET EDI_STATUS = 1 WHERE BOOKING_MST_PK IN (" + strPK + ") AND NVL(EDI_STATUS,0) = 0 ";
                        objWF.ExecuteCommands(strSql);
                    }
                }
                else if (Convert.ToInt32(strDocType) == 3 | Convert.ToInt32(strDocType) == 4)
                {
                    if (Convert.ToInt32(strBizType) == 2)
                    {
                        strSql = " UPDATE MBL_EXP_TBL SET EDI_STATUS = 1 WHERE MBL_EXP_TBL_PK IN (" + strPK + ") AND NVL(EDI_STATUS,0) = 0 ";
                        objWF.ExecuteCommands(strSql);
                    }
                    else if (Convert.ToInt32(strBizType) == 1)
                    {
                        strSql = " UPDATE MAWB_EXP_TBL SET EDI_STATUS = 1 WHERE MAWB_EXP_TBL_PK IN (" + strPK + ") AND NVL(EDI_STATUS,0) = 0 ";
                        objWF.ExecuteCommands(strSql);
                    }
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region "Save Invoice Status"
        public string SaveInvStatus(string InvPks)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                sb.Append("UPDATE CONSOL_INVOICE_TBL CON ");
                sb.Append("SET CON.EDI_STATUS=1 ");
                sb.Append("WHERE CON.CONSOL_INVOICE_PK IN (" + InvPks + ")");
                objWF.ExecuteCommands(sb.ToString());
                return "Status changed to transmitted";
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        #endregion
        public DataSet GetInvJobDetails(string InvPks, int Biz, int Process, string CargoType = "")
        {
            DataSet dsInvoiceDetails = new DataSet();
            WorkFlow objWF = new WorkFlow();
            dsInvoiceDetails.Tables.Add();
            DataSet dsJob = new DataSet();
            dsJob = GetInvJobDetailsForXML(InvPks, Biz, Process);
            DataTable InvHeader = new DataTable();
            InvHeader = FetchInvoiceHdr(InvPks, Biz, Process);
            //Fetching Columns for Invoice freight details
            foreach (DataColumn col in InvHeader.Columns)
            {
                string ColName = col.ColumnName.ToUpper();
                try
                {
                    if (ColName == "CONSOL_INVOICE_PK")
                    {
                    }
                    else
                    {
                        dsInvoiceDetails.Tables[0].Columns.Add(col.ColumnName, col.DataType);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            DataTable InvDt = new DataTable();
            InvDt = FetchInvoiceData(InvPks, Convert.ToInt32(HttpContext.Current.Session["CURRENCY_MST_PK"]), Convert.ToInt16(Biz), Convert.ToInt16(Process));
            //Fetching Columns for Invoice freight details
            foreach (DataColumn col in InvDt.Columns)
            {
                string ColName = col.ColumnName.ToUpper();
                try
                {
                    // 
                    if (ColName == "PK" | ColName == "JOBCARD_FK" | ColName == "ELEMENT_FK" | ColName == "CURRENCY_MST_FK" | ColName == "REMARKS" | ColName == "MODE" | ColName == "CHK" | ColName == "FRT_BOF_FK" | ColName == "CONSOL_INVOICE_FK" | ColName == "CURR" | ColName == "FREIGHT_OR_OTH" | ColName == "TYPE")
                    {
                    }
                    else
                    {
                        dsInvoiceDetails.Tables[0].Columns.Add(col.ColumnName, col.DataType);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            DataTable InvAmtDet = new DataTable();
            InvAmtDet = InvoiceAmountSummary(InvPks);
            //Fetching overall amount summary
            foreach (DataColumn col in InvAmtDet.Columns)
            {
                string ColName = col.ColumnName.ToUpper();
                try
                {
                    if (ColName == "CONSOL_INVOICE_PK")
                    {
                    }
                    else
                    {
                        dsInvoiceDetails.Tables[0].Columns.Add(col.ColumnName, col.DataType);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            //---------------------------------------------------------------------
            foreach (DataRow drInvHdr in InvHeader.Rows)
            {
                int _invPk = Convert.ToInt32(drInvHdr["CONSOL_INVOICE_PK"]);
                InvDt = FetchInvoiceData(Convert.ToString(_invPk), Convert.ToInt32(HttpContext.Current.Session["CURRENCY_MST_PK"]), Convert.ToInt16(Biz), Convert.ToInt16(Process));
                InvAmtDet = InvoiceAmountSummary(Convert.ToString(_invPk));
                foreach (DataRow drInvFrtHdr in InvDt.Rows)
                {
                    foreach (DataRow drInvFooter in InvAmtDet.Rows)
                    {
                        DataRow drInvDt = null;
                        drInvDt = dsInvoiceDetails.Tables[0].NewRow();
                        foreach (DataColumn dcInvHdr in InvHeader.Columns)
                        {
                            try
                            {
                                drInvDt[dcInvHdr.ColumnName] = drInvHdr[dcInvHdr.ColumnName];
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                        foreach (DataColumn dcInvFrt in InvDt.Columns)
                        {
                            try
                            {
                                drInvDt[dcInvFrt.ColumnName] = drInvFrtHdr[dcInvFrt.ColumnName];
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                        foreach (DataColumn dcInvFooter in InvAmtDet.Columns)
                        {
                            try
                            {
                                drInvDt[dcInvFooter.ColumnName] = drInvFooter[dcInvFooter.ColumnName];
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                        //drInvDt("BANK_REF_NR") = "'" & drInvHdr("BANK_REF_NR")
                        dsInvoiceDetails.Tables[0].Rows.Add(drInvDt);
                    }
                }
            }
            return dsInvoiceDetails;
        }
        public DataSet GetInvJobDetailsForXML(string InvPks, int Biz, int Process, string CargoType = "")
        {
            //Dim Biz_Process As String = ""
            DataSet dsJobDetails = new DataSet();
            DataTable InvDetails = new DataTable();
            DataTable JobDetails = new DataTable();
            DataTable FreightDetails = new DataTable();
            DataTable FooterDetails = new DataTable();
            string JobcardPks = "";
            string AmountFormat = "#0.00";
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            //Get Invoice Header
            InvDetails = FetchInvoiceHdr(InvPks, Biz, Process);
            //-------------------------------------------------------------------------
            sb = new StringBuilder();
            sb.Append("SELECT DISTINCT HDR.CONSOL_INVOICE_PK ");
            sb.Append("  FROM CONSOL_INVOICE_TBL      HDR ");
            sb.Append(" WHERE HDR.CONSOL_INVOICE_PK IN (" + InvPks + ")");

            DataTable InvoiceFrtHDR = new DataTable();
            InvoiceFrtHDR = objWF.GetDataTable(sb.ToString());
            InvoiceFrtHDR.Columns["CONSOL_INVOICE_PK"].ColumnMapping = MappingType.Hidden;

            DataTable InvoiceFrtDetails = new DataTable();
            InvoiceFrtDetails = FetchInvoiceData(InvPks, Convert.ToInt32(HttpContext.Current.Session["CURRENCY_MST_PK"]), Convert.ToInt16(Biz), Convert.ToInt16(Process));
            InvoiceFrtDetails.Columns["TYPE"].ColumnMapping = MappingType.Hidden;
            //-------------------------------------------------------------------------

            //Footer Details
            FooterDetails = InvoiceAmountSummary(InvPks);
            //-------------------------------------------------------------------------

            dsJobDetails.Tables.Clear();
            dsJobDetails.Relations.Clear();
            dsJobDetails.Tables.Add(InvDetails);
            dsJobDetails.Tables[0].TableName = "Invoice_Header";

            dsJobDetails.Tables.Add(InvoiceFrtDetails);
            dsJobDetails.Tables[dsJobDetails.Tables.Count - 1].TableName = "Inv_Frt_Details";

            dsJobDetails.Tables.Add(FooterDetails);
            dsJobDetails.Tables[dsJobDetails.Tables.Count - 1].TableName = "Footer_Details";

            dsJobDetails.Tables.Add(InvoiceFrtHDR);
            dsJobDetails.Tables[dsJobDetails.Tables.Count - 1].TableName = "Invoice_Details";

            DataRelation rel2 = new DataRelation("InvFrt", dsJobDetails.Tables["Invoice_Header"].Columns["CONSOL_INVOICE_PK"], dsJobDetails.Tables["Invoice_Details"].Columns["CONSOL_INVOICE_PK"]);
            DataRelation rel3 = new DataRelation("InvFooter", dsJobDetails.Tables["Invoice_Header"].Columns["CONSOL_INVOICE_PK"], dsJobDetails.Tables["Footer_Details"].Columns["CONSOL_INVOICE_PK"]);
            DataRelation rel4 = new DataRelation("InvFrtHdr", dsJobDetails.Tables["Invoice_Details"].Columns["CONSOL_INVOICE_PK"], dsJobDetails.Tables["Inv_Frt_Details"].Columns["CONSOL_INVOICE_FK"]);
            rel2.Nested = true;
            rel3.Nested = true;
            rel4.Nested = true;
            dsJobDetails.Tables["Invoice_Header"].ChildRelations.Add(rel2);
            dsJobDetails.Tables["Invoice_Header"].ChildRelations.Add(rel3);
            dsJobDetails.Tables["Invoice_Details"].ChildRelations.Add(rel4);
            dsJobDetails.DataSetName = "INVOICE_EDI";
            dsJobDetails.AcceptChanges();
            return dsJobDetails;
        }
        public DataTable FetchInvoiceHdr(string InvPks, int BIZ, int Process)
        {
            StringBuilder sb = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            string Biz_Process = "";
            Biz_Process = "SELECT DISTINCT ";
            //Sea
            if (BIZ == 2)
            {
                Biz_Process = " 'SEA' BIZ_TYPE, ";
                //Air
            }
            else if (BIZ == 1)
            {
                Biz_Process = " 'AIR' BIZ_TYPE, ";
            }
            //Export
            if (Process == 1)
            {
                Biz_Process += " 'EXPORT' PROCESS_TYPE, ";
                //Import
            }
            else if (Process == 2)
            {
                Biz_Process += " 'IMPORT' PROCESS_TYPE, ";
            }
            //Get Invoice Details
            sb.Append("SELECT DISTINCT " + Biz_Process + " HDR.CONSOL_INVOICE_PK, HDR.INVOICE_REF_NO, ");
            sb.Append("                TO_CHAR(HDR.INVOICE_DATE,DATEFORMAT) INVOICE_DATE,");
            sb.Append("                TO_CHAR(HDR.INVOICE_DUE_DATE,DATEFORMAT) INVOICE_DUE_DATE,");
            sb.Append("                TO_CHAR(NVL(HDR.INV_UNIQUE_REF_NR,' ')) BANK_REF_NR,");
            sb.Append("                (SELECT CMT.CUSTOMER_ID FROM CUSTOMER_MST_TBL CMT WHERE CMT.CUSTOMER_MST_PK=HDR.CUSTOMER_MST_FK) CUSTOMER_CODE,");
            sb.Append("                (SELECT CMT.CUSTOMER_NAME FROM CUSTOMER_MST_TBL CMT WHERE CMT.CUSTOMER_MST_PK=HDR.CUSTOMER_MST_FK) CUSTOMER_NAME,");
            sb.Append("                (SELECT CTM.CURRENCY_ID FROM CURRENCY_TYPE_MST_TBL CTM WHERE CTM.CURRENCY_MST_PK=HDR.CURRENCY_MST_FK) INV_CURR,");
            sb.Append("                DECODE(HDR.CHK_INVOICE,0,'Pending',1,'Approved') STATUS");
            sb.Append("  FROM CONSOL_INVOICE_TBL      HDR,");
            sb.Append("       CURRENCY_TYPE_MST_TBL   CUMT ");
            sb.Append(" WHERE HDR.CURRENCY_MST_FK = CUMT.CURRENCY_MST_PK");
            sb.Append("   AND HDR.CONSOL_INVOICE_PK IN (" + InvPks + ")");

            DataTable InvDetails = new DataTable();
            InvDetails = objWF.GetDataTable(sb.ToString());
            foreach (DataRow _inv in InvDetails.Rows)
            {
                int _invPk = Convert.ToInt32(_inv["CONSOL_INVOICE_PK"]);
                string InvRefNo = Convert.ToString(_inv["INVOICE_REF_NO"]);
                DataTable dtHdr = new DataTable();
                dtHdr = objConsInv.FetchHeader(_invPk).Tables[0];
                var _with134 = dtHdr.Rows[0];
                if (Convert.ToInt32((string.IsNullOrEmpty(_with134["CRCUS"].ToString()) ? 0 : _with134["CRCUS"])) == 1)
                {
                    _inv["INVOICE_DUE_DATE"] = DateAndTime.DateAdd(DateInterval.Day, Convert.ToInt32((string.IsNullOrEmpty(_with134["CRDAYS"].ToString()) ? 0 : _with134["CRDAYS"])) + 15, Convert.ToDateTime(_with134["CDATE"])).ToString(dateFormat);
                }
                else
                {
                    _inv["INVOICE_DUE_DATE"] = DateAndTime.DateAdd(DateInterval.Day, 0 + 15, Convert.ToDateTime(_with134["CDATE"])).ToString(dateFormat);
                }
            }
            InvDetails.AcceptChanges();
            InvDetails.Columns["CONSOL_INVOICE_PK"].ColumnMapping = MappingType.Hidden;
            return InvDetails;
        }
        public DataTable FetchInvoiceData(string InvPks, int nBaseCurrPK, short BizType, short Process)
        {
            StringBuilder strQuery = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            string strsql = null;
            string vatcode = null;
            Int32 rowcunt = 0;
            Int32 Contpk = 0;
            string strJobPks = "";
            DataTable DT = new DataTable();
            DataTable dt1 = new DataTable();
            string frtType = Convert.ToString((Process == 1 ? "1" : "2"));
            foreach (string intInvPk in InvPks.Split(','))
            {
                strQuery = new StringBuilder();
                strJobPks = GetJobPksOfInvoice(intInvPk, BizType, Process);
                //-----------------------------------------------------------
                //    '1->Type        2->fdpk            3->jobcardfk    4->freightfk    5->currencyfk  
                //    '6->frieghtname 7->ElementSearch   8->Currency Id  9->Curr-Search  10->Frei. Amt.
                //    '11->Exchange Rate 12->Inv Amt     13->Tax Percent 14->Tax Amount  15->Total Amt
                //    '16->Remarks     17->Mode          18->Chk
                if (BizType == 2 & Process == 2 & Convert.ToInt32(intInvPk )> 0)
                {
                    rowcunt = objConsInv.FetchDetFrt(Convert.ToInt32(intInvPk));
                    if (rowcunt > 0)
                    {
                        Contpk = objConsInv.FetchDetContPk(Convert.ToInt32(strJobPks), Convert.ToInt32(intInvPk));
                        if (Contpk == 0)
                        {
                            strQuery.Append("SELECT 0 PK,J.JOBCARD_REF_NO Jobcard_ref_no , '' unit , TRN.CONSOL_INVOICE_TRN_PK PK,J.JOB_CARD_TRN_PK jobcard_fk, ");
                            strQuery.Append(" TRN.FRT_OTH_ELEMENT freight_or_oth ,TRN.FRT_OTH_ELEMENT_FK element_fk,TRN.CURRENCY_MST_FK currency_mst_fk,TRN.FRT_DESC element_name, ");
                            strQuery.Append(" '' AS ELEMENT,cur.currency_id,  '' AS CURR, TRN.ELEMENT_AMT AS AMOUNT, ROUND((CASE TRN.ELEMENT_AMT ");
                            strQuery.Append(" WHEN 0 THEN 1 ELSE  TRN.AMT_IN_INV_CURR /TRN.ELEMENT_AMT END),6) AS EXCHANGE_RATE,       TRN.AMT_IN_INV_CURR AS INV_AMOUNT, ");
                            strQuery.Append(" TRN.VAT_CODE AS VAT_CODE,TRN.TAX_PCNT AS VAT_PERCENT,TRN.TAX_AMT AS VAT_AMOUNT,TRN.TOT_AMT AS TOTAL_AMOUNT,TRN.REMARKS, ");
                            strQuery.Append(" 'EDIT' AS MODE1,'TRUE' AS CHK,''FRT_BOF_FK FROM CONSOL_INVOICE_TBL MAS,CONSOL_INVOICE_TRN_TBL TRN,JOB_CARD_TRN J,currency_type_mst_tbl cur ");
                            strQuery.Append(" where cur.currency_mst_pk=trn.currency_mst_fk and MAS.CONSOL_INVOICE_PK=" + intInvPk + " AND TRN.CONSOL_INVOICE_FK=MAS.CONSOL_INVOICE_PK AND trn.job_card_fk=j.JOB_CARD_TRN_PK ");

                            dt1 = objWF.GetDataTable(strQuery.ToString());
                            if (DT.Columns.Count == 0)
                            {
                                DT = dt1;
                            }
                            else
                            {
                                foreach (DataRow row in dt1.Rows)
                                {
                                    DataRow dr = null;
                                    dr = DT.NewRow();
                                    foreach (DataColumn col in dt1.Columns)
                                    {
                                        dr[col.ColumnName] = row[col.ColumnName];
                                    }
                                    DT.Rows.Add(dr);
                                }
                            }
                        }
                    }
                }
            }
            if (DT.Rows.Count > 0)
            {
                DT.Columns["CONSOL_INVOICE_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["PK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["JOBCARD_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["ELEMENT_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["CURRENCY_MST_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["MODE"].ColumnMapping = MappingType.Hidden;
                DT.Columns["CHK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["FRT_BOF_FK"].ColumnMapping = MappingType.Hidden;
                return DT;
            }
            foreach (string intInvPk in InvPks.Split(','))
            {
                strQuery = new StringBuilder();
                strQuery.Append(" select Q.* from ( ");
                strQuery.Append(" SELECT " + intInvPk + " CONSOL_INVOICE_FK,TYPE, JOBCARD_REF_NO, UNIT, PK, JOBCARD_FK, FREIGHT_OR_OTH, ELEMENT_FK, CURRENCY_MST_FK, ELEMENT_NAME, ");
                strQuery.Append(" ELEMENT, CURRENCY_ID, CURR, AMOUNT,  EXCHANGE_RATE, INV_AMOUNT, VAT_CODE, VAT_PERCENT, VAT_AMOUNT, TOTAL_AMOUNT, ");
                strQuery.Append(" REMARKS, MODE1 AS \"MODE\", CHK, FRT_BOF_FK FROM ( ");
                strQuery.Append(" select type,jobcard_ref_no,unit,pk,jobcard_fk,freight_or_oth,element_fk,currency_mst_fk,element_name,element,currency_id, ");
                strQuery.Append(" curr,amount,exchange_rate,inv_amount,vat_code,vat_percent VAT_PERCENT,vat_amount VAT_AMOUNT,total_amount,remarks,mode1 as \"MODE1\",chk,FRT_BOF_FK, PREFERENCE from ( ");
                if (BizType == 1)
                {
                    strQuery.Append(" SELECT  DECODE(TRN.FRT_OTH_ELEMENT_FK, 1, 'COST', 2, 'FREIGHT', 3, 'OTHER') AS TYPE," );
                }
                else
                {
                    strQuery.Append(" SELECT  distinct TRN.FRT_OTH_ELEMENT_FK AS ELEMENT_FK, DECODE(TRN.FRT_OTH_ELEMENT_FK, 1, 'COST', 2, 'FREIGHT', 3, 'OTHER') AS TYPE," );
                }
                strQuery.Append("     JOB.JOBCARD_REF_NO," );
                if (BizType == 1)
                {
                    strQuery.Append("       CON.CONTAINER_TYPE_MST_ID AS UNIT, " );
                }
                else
                {
                    strQuery.Append("  (case when jobfrt.container_type_mst_fk is not null then  con.container_type_mst_id  else '1' end) UNIT, " );
                }
                strQuery.Append(" TRN.CONSOL_INVOICE_TRN_PK AS PK," );
                strQuery.Append("       TRN.JOB_CARD_FK AS JOBCARD_FK," );
                strQuery.Append("       '' FREIGHT_OR_OTH," );

                if (BizType == 1)
                {
                    strQuery.Append("       TRN.FRT_OTH_ELEMENT_FK AS ELEMENT_FK," );
                }
                strQuery.Append("       TRN.CURRENCY_MST_FK," );
                // strQuery.Append("       (SELECT FREIGHT_ELEMENT_NAME" & vbCrLf)
                //  strQuery.Append("          FROM FREIGHT_ELEMENT_MST_TBL F" & vbCrLf)
                // strQuery.Append("         WHERE F.FREIGHT_ELEMENT_MST_PK = TRN.FRT_OTH_ELEMENT_FK) AS ELEMENT_NAME," & vbCrLf)
                //strQuery.Append("    FMT.FREIGHT_ELEMENT_NAME AS ELEMENT_NAME," & vbCrLf) 'Added By jitendra 
                //strQuery.Append("       FMT.FREIGHT_ELEMENT_ID AS ELEMENT," & vbCrLf)
                strQuery.Append("TRN.FRT_DESC AS ELEMENT_NAME,");
                strQuery.Append("                       CASE (SELECT FT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                           FROM FREIGHT_ELEMENT_MST_TBL FT");
                strQuery.Append("                          WHERE UPPER(FT.FREIGHT_ELEMENT_NAME) =");
                strQuery.Append("                                UPPER(TRN.FRT_DESC))");
                strQuery.Append("                         WHEN NULL THEN");
                strQuery.Append("                          FMT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                         WHEN '' THEN");
                strQuery.Append("                          FMT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                         ELSE");
                strQuery.Append("                          (SELECT FT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                             FROM FREIGHT_ELEMENT_MST_TBL FT");
                strQuery.Append("                            WHERE UPPER(FT.FREIGHT_ELEMENT_NAME) =");
                strQuery.Append("                                  UPPER(TRN.FRT_DESC))");
                strQuery.Append("                       END AS ELEMENT,");

                strQuery.Append("       CUMT.CURRENCY_ID," );
                strQuery.Append("       '' AS CURR," );
                strQuery.Append("       TRN.ELEMENT_AMT AS AMOUNT," );
                strQuery.Append("       ROUND((CASE TRN.ELEMENT_AMT" );
                strQuery.Append("               WHEN 0 THEN" );
                strQuery.Append("1" );
                strQuery.Append("               ELSE" );
                strQuery.Append("                TRN.AMT_IN_INV_CURR / TRN.ELEMENT_AMT" );
                strQuery.Append("             END)," );
                strQuery.Append("             6) AS EXCHANGE_RATE," );
                strQuery.Append("       TRN.AMT_IN_INV_CURR AS INV_AMOUNT," );
                //strQuery.Append("       TRN.VAT_CODE AS VAT_CODE," & vbCrLf) 'Added by Venkata 
                strQuery.Append("  (CASE " );
                strQuery.Append("  WHEN TRN.VAT_CODE = '0' THEN " );
                strQuery.Append("    '' " );
                strQuery.Append("   ELSE" );
                strQuery.Append("   TRN.VAT_CODE " );
                strQuery.Append("  END) VAT_CODE," );
                strQuery.Append("       TRN.TAX_PCNT AS VAT_PERCENT," );
                strQuery.Append("       TRN.TAX_AMT AS VAT_AMOUNT," );
                strQuery.Append("       TRN.TOT_AMT AS TOTAL_AMOUNT," );
                strQuery.Append("       TRN.REMARKS," );
                strQuery.Append("       'EDIT' AS \"MODE1\"," );
                strQuery.Append("       'TRUE' AS CHK,PAR.FRT_BOF_FK, FMT.PREFERENCE " );
                strQuery.Append("  FROM CONSOL_INVOICE_TRN_TBL TRN," );
                strQuery.Append("       CONSOL_INVOICE_TBL     HDR," );
                strQuery.Append("       CURRENCY_TYPE_MST_TBL  CUMT,freight_element_mst_tbl fmt,JOB_TRN_FD JOBFRT,CONTAINER_TYPE_MST_TBL CON,PARAMETERS_TBL PAR, " );
                strQuery.Append("        JOB_CARD_TRN JOB" );
                strQuery.Append(" WHERE TRN.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK" );
                strQuery.Append("   AND TRN.CURRENCY_MST_FK = CUMT.CURRENCY_MST_PK" );
                strQuery.Append("   AND JOB.JOB_CARD_TRN_PK=TRN.JOB_CARD_FK" );
                strQuery.Append("   AND JOBFRT.FREIGHT_ELEMENT_MST_FK = FMT.FREIGHT_ELEMENT_MST_PK ");
                //strQuery.Append("   AND TRN.FRT_OTH_ELEMENT_FK=FMT.FREIGHT_ELEMENT_MST_PK ")
                strQuery.Append("   and jobfrt.consol_invoice_trn_fk = trn.consol_invoice_trn_pk " );
                //Added By Prakash Chandra on 26/06/2008
                strQuery.Append(" AND TRN.JOB_CARD_FK  = JOBFRT.JOB_CARD_TRN_FK " );
                if (BizType == 1)
                {
                    strQuery.Append(" AND JOBFRT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK " );
                }
                else
                {
                    strQuery.Append("  AND ( JOBFRT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK or JOBFRT.CONTAINER_TYPE_MST_FK is null ) ");
                }
                if (rowcunt <= 0)
                {
                    strQuery.Append(" AND JOBFRT.FREIGHT_ELEMENT_MST_FK = TRN.FRT_OTH_ELEMENT_FK " );
                }
                else
                {
                    if (Contpk > 0)
                    {
                        strQuery.Append("  and jobfrt.JOB_TRN_FD_PK in ( " + Contpk + " )");
                    }
                }
                strQuery.Append(" AND TRN.FRT_OTH_ELEMENT_FK = PAR.FRT_BOF_FK(+) " );
                strQuery.Append("  AND HDR.CONSOL_INVOICE_PK = " + intInvPk + " ORDER BY FMT.PREFERENCE ) ");
                strQuery.Append(" UNION ");

                //To display othercharges in the grid
                strQuery.Append("  SELECT DECODE(TRN.FRT_OTH_ELEMENT_FK, 1, 'COST', 2, 'FREIGHT', 3, 'OTHER') AS TYPE," );
                strQuery.Append("       JOB.JOBCARD_REF_NO," );
                strQuery.Append("       'Oth.Chrg' AS UNIT, TRN.CONSOL_INVOICE_TRN_PK AS PK," );
                strQuery.Append("       TRN.JOB_CARD_FK AS JOBCARD_FK," );
                //strQuery.Append("       '' FREIGHT_OR_OTH," & vbCrLf)
                strQuery.Append("      upper(TRN.FRT_OTH_ELEMENT),");
                strQuery.Append("       TRN.FRT_OTH_ELEMENT_FK AS ELEMENT_FK," );
                strQuery.Append("       TRN.CURRENCY_MST_FK," );
                //strQuery.Append("      FMT.FREIGHT_ELEMENT_NAME AS ELEMENT_NAME," & vbCrLf)
                //strQuery.Append("       FMT.FREIGHT_ELEMENT_ID AS ELEMENT," & vbCrLf)
                strQuery.Append("       TRN.FRT_DESC AS ELEMENT_NAME,");
                strQuery.Append("                       CASE (SELECT FT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                           FROM FREIGHT_ELEMENT_MST_TBL FT");
                strQuery.Append("                          WHERE UPPER(FT.FREIGHT_ELEMENT_NAME) =");
                strQuery.Append("                                UPPER(TRN.FRT_DESC))");
                strQuery.Append("                         WHEN NULL THEN");
                strQuery.Append("                          FMT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                         WHEN '' THEN");
                strQuery.Append("                          FMT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                         ELSE");
                strQuery.Append("                          (SELECT FT.FREIGHT_ELEMENT_ID");
                strQuery.Append("                             FROM FREIGHT_ELEMENT_MST_TBL FT");
                strQuery.Append("                            WHERE UPPER(FT.FREIGHT_ELEMENT_NAME) =");
                strQuery.Append("                                  UPPER(TRN.FRT_DESC))");
                strQuery.Append("                       END AS ELEMENT,");
                strQuery.Append("       CUMT.CURRENCY_ID," );
                strQuery.Append("       '' AS CURR," );
                strQuery.Append("       TRN.ELEMENT_AMT AS AMOUNT," );
                strQuery.Append("       ROUND((CASE TRN.ELEMENT_AMT" );
                strQuery.Append("               WHEN 0 THEN" );
                strQuery.Append("1" );
                strQuery.Append("               ELSE" );
                strQuery.Append("                TRN.AMT_IN_INV_CURR / TRN.ELEMENT_AMT" );
                strQuery.Append("             END)," );
                strQuery.Append("             6) AS EXCHANGE_RATE," );
                strQuery.Append("       TRN.AMT_IN_INV_CURR AS INV_AMOUNT," );
                strQuery.Append("       TRN.VAT_CODE AS VAT_CODE," );
                strQuery.Append("       TRN.TAX_PCNT AS VAT_PERCENT," );
                strQuery.Append("       TRN.TAX_AMT AS VAT_AMOUNT," );
                strQuery.Append("       TRN.TOT_AMT AS TOTAL_AMOUNT," );
                strQuery.Append("       TRN.REMARKS," );
                strQuery.Append("       'EDIT' AS \"MODE1\"," );
                strQuery.Append("       'TRUE' AS CHK,PAR.FRT_BOF_FK, FMT.PREFERENCE AS PREFERENCE " );
                strQuery.Append("  FROM CONSOL_INVOICE_TRN_TBL TRN," );
                strQuery.Append("       CONSOL_INVOICE_TBL     HDR," );
                strQuery.Append("       CURRENCY_TYPE_MST_TBL  CUMT, FREIGHT_ELEMENT_MST_TBL  FMT, JOB_TRN_OTH_CHRG JOBoth,PARAMETERS_TBL PAR, " );
                strQuery.Append("        JOB_CARD_TRN JOB" );
                strQuery.Append(" WHERE TRN.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK" );
                strQuery.Append("   AND TRN.CURRENCY_MST_FK = CUMT.CURRENCY_MST_PK" );
                strQuery.Append("   AND JOBOTH.FREIGHT_ELEMENT_MST_FK = FMT.FREIGHT_ELEMENT_MST_PK " );
                strQuery.Append("   AND TRN.FRT_OTH_ELEMENT_FK=FMT.FREIGHT_ELEMENT_MST_PK " );
                strQuery.Append("   AND JOB.JOB_CARD_TRN_PK=TRN.JOB_CARD_FK" );
                strQuery.Append(" AND TRN.JOB_CARD_FK  = JOBoth.JOB_CARD_TRN_FK " );
                //strQuery.Append(" AND JOBFRT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK " & vbCrLf)
                if (rowcunt <= 0)
                {
                    strQuery.Append(" AND JOBoth.FREIGHT_ELEMENT_MST_FK = TRN.FRT_OTH_ELEMENT_FK " );
                }
                else
                {
                    if (Contpk > 0)
                    {
                        strQuery.Append("  and JOBoth.JOB_TRN_OTH_PK in (" + Contpk + " ) ");
                    }
                }
                //end
                strQuery.Append(" AND TRN.FRT_OTH_ELEMENT_FK = PAR.FRT_BOF_FK(+) " );
                strQuery.Append("   AND HDR.CONSOL_INVOICE_PK = " + intInvPk + "");
                //strQuery.Append("   ORDER BY PAR.FRT_BOF_FK ASC " & vbCrLf)
                strQuery.Append("  ORDER BY unit, PREFERENCE )) Q ");
                //strQuery.Append("  ORDER BY PREFERENCE )) Q order by FRT_BOF_FK ")
                ///'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                //If BizType = 1 And Process = 1 Then 'Sea Export
                //    strQuery.Replace("SEA", "AIR")
                //    strQuery.Replace("INVOICE_AIR_TBL_FK", "INV_CUST_TRN_AIR_EXP_FK")
                //Air import
                if (BizType == 1 & Process == 2)
                {
                    strQuery.Replace("SEA", "AIR");
                    strQuery.Replace("INVOICE_AIR_TBL_FK", "INV_CUST_TRN_AIR_IMP_FK");
                    strQuery.Replace("EXP", "IMP");
                    strQuery.Replace("CON.CONTAINER_TYPE_MST_ID", "upper(JOBFRT.QUANTITY)");
                    strQuery.Replace("FRT_BOF_FK", "FRT_AFC_FK");
                    strQuery.Replace("CONTAINER_TYPE_MST_TBL CON,", " ");
                    strQuery.Replace("AND JOBFRT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK", " ");
                    //strQuery.Replace("TRN.FRT_OTH_ELEMENT_FK", "JOBFRT.FREIGHT_ELEMENT_MST_FK")
                    //air export
                }
                else if (BizType == 1 & Process == 1)
                {
                    strQuery.Replace("SEA", "AIR");
                    strQuery.Replace("INVOICE_AIR_TBL_FK", "INV_CUST_TRN_AIR_EXP_FK");
                    strQuery.Replace("IMP", "EXP");
                    strQuery.Replace("CON.CONTAINER_TYPE_MST_ID", "upper(JOBFRT.QUANTITY)");
                    strQuery.Replace("FRT_BOF_FK", "FRT_AFC_FK");
                    strQuery.Replace("CONTAINER_TYPE_MST_TBL CON,", " ");
                    strQuery.Replace("AND JOBFRT.CONTAINER_TYPE_MST_FK = CON.CONTAINER_TYPE_MST_PK", " ");
                    // ImportSea
                }
                else if (BizType == 2 & Process == 2)
                {
                    strQuery.Replace("EXP", "IMP");
                }
                dt1 = objWF.GetDataTable(strQuery.ToString());
                if (DT.Columns.Count == 0)
                {
                    DT = dt1;
                }
                else
                {
                    foreach (DataRow row in dt1.Rows)
                    {
                        DataRow dr = null;
                        dr = DT.NewRow();
                        foreach (DataColumn col in dt1.Columns)
                        {
                            dr[col.ColumnName] = row[col.ColumnName];
                        }
                        DT.Rows.Add(dr);
                    }
                }
            }
            try
            {
                DT.Columns["CONSOL_INVOICE_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["PK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["JOBCARD_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["ELEMENT_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["CURRENCY_MST_FK"].ColumnMapping = MappingType.Hidden;
                DT.Columns["MODE"].ColumnMapping = MappingType.Hidden;
                DT.Columns[DT.Columns.Count - 2].ColumnMapping = MappingType.Hidden;
                //CHK
                DT.Columns[DT.Columns.Count - 1].ColumnMapping = MappingType.Hidden;
                //FRT_BOF_FK/FRT_AFC_FK
                return DT;
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string GetJobPksOfInvoice(string InvPks, int BIZ, int Process)
        {
            //Job Details
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT DISTINCT ");
            if (BIZ == 2 & Process == 1)
            {
                sb.Append(" JOB.JOB_CARD_TRN_PK JOB_CARD_PK, ");
            }
            else if (BIZ == 2 & Process == 2)
            {
                sb.Append(" JOB.JOB_CARD_TRN_PK JOB_CARD_PK, ");
            }
            else if (BIZ == 1 & Process == 1)
            {
                sb.Append(" JOB.Job_Card_Trn_Pk JOB_CARD_PK, ");
            }
            else if (BIZ == 1 & Process == 2)
            {
                sb.Append(" JOB.JOB_CARD_TRN_PK JOB_CARD_PK, ");
            }
            sb.Append("                NVL(JOB.JOBCARD_REF_NO,' ') JOBCARD_REF_NO");
            sb.Append("  FROM ");
            if (BIZ == 2 & Process == 1)
            {
                sb.Append("       JOB_CARD_TRN    JOB,");
            }
            else if (BIZ == 2 & Process == 2)
            {
                sb.Append("       JOB_CARD_TRN    JOB,");
            }
            else if (BIZ == 1 & Process == 1)
            {
                sb.Append("       JOB_CARD_TRN    JOB,");
            }
            else if (BIZ == 1 & Process == 2)
            {
                sb.Append("       JOB_CARD_TRN    JOB,");
            }
            sb.Append("       CONSOL_INVOICE_TRN_TBL  TRN");
            sb.Append(" WHERE 1=1 ");
            if (BIZ == 2 & Process == 1)
            {
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = TRN.JOB_CARD_FK");
            }
            else if (BIZ == 2 & Process == 2)
            {
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = TRN.JOB_CARD_FK");
            }
            else if (BIZ == 1 & Process == 1)
            {
                sb.Append("   AND JOB.Job_Card_Trn_Pk = TRN.JOB_CARD_FK");
            }
            else if (BIZ == 1 & Process == 2)
            {
                sb.Append("   AND JOB.JOB_CARD_TRN_PK = TRN.JOB_CARD_FK");
            }
            sb.Append("   AND TRN.CONSOL_INVOICE_FK IN (" + InvPks + ")");
            DataTable JobDet = new DataTable();
            JobDet = objWF.GetDataTable(sb.ToString());
            string JobPks = "";
            foreach (DataRow row in JobDet.Rows)
            {
                JobPks += row["JOB_CARD_PK"] + ",";
            }
            if (!string.IsNullOrEmpty(JobPks))
            {
                JobPks = JobPks.Substring(0, JobPks.Length - 1);
            }
            return JobPks;
        }
        #region "Generate Booking"
        public DataSet GenerateBooking(string BkgPks, int Biz, string CargoType = "", string Currency = "", int inc = 0, string ExportType = "")
        {
            //Air
            if (Biz == 1)
            {
                //XML
                if (Convert.ToInt32(ExportType) == 2)
                {
                    if (inc == 1)
                    {
                        dsBkg = GetExportAirBooking(BkgPks);
                        dsBkg = GetExportBookingAirHeaderQuery(BkgPks, Currency);
                    }
                    else if (inc == 2)
                    {
                        dsBkg = GetExportBookingAirAddressQuery(BkgPks, Currency);
                    }
                    else if (inc == 3)
                    {
                        dsBkg = GetExportBookingAirReferenceDtlsQuery(BkgPks, Currency);
                    }
                    else if (inc == 4)
                    {
                        dsBkg = GetExportBookingAirCommodityQuery(BkgPks, Currency);
                    }
                    else if (inc == 5)
                    {
                        dsBkg = GetExportBookingAirOthChrgQuery(BkgPks, Currency);
                    }
                    else if (inc == 6)
                    {
                        dsBkg = GetExportBookingAirFrtElementsQuery(BkgPks, Currency);
                    }
                    else if (inc == 7)
                    {
                        dsBkg = GetExportBookingAirFooterQuery(BkgPks, Currency);
                    }
                }
                else
                {
                    dsBkg = GetExportBookingAirQuery(BkgPks, Currency);
                }
                //Sea
            }
            else
            {
                //FCL
                if (Convert.ToInt32(CargoType) == 2)
                {
                    //XML
                    if (Convert.ToInt32(ExportType) == 2)
                    {
                        if (inc == 1)
                        {
                            dsBkg = GetExportSeaBooking(BkgPks);
                            dsBkg = GetExportBookingSeaHeaderFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 2)
                        {
                            dsBkg = GetExportBookingSeaOthChrgFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 3)
                        {
                            dsBkg = GetExportBookingSeaAddressFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 4)
                        {
                            dsBkg = GetExportBookingSeaReferenceDtlsFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 5)
                        {
                            dsBkg = GetExportBookingSeaCargoDtls1FCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 6)
                        {
                            dsBkg = GetExportBookingSeaCmdtyFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 7)
                        {
                            dsBkg = GetExportBookingSeaCmdtyDetailsFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 8)
                        {
                            dsBkg = GetExportBookingSeaFrtElementsFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 9)
                        {
                            dsBkg = GetExportBookingSeaFooterFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 10)
                        {
                            dsBkg = GetExportBookingSeaClauseFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 11)
                        {
                            dsBkg = GetExportBookingSeaCargoDtls2FCLQuery(BkgPks, Currency);
                        }
                    }
                    else
                    {
                        dsBkg = GetExportBookingSeaFCLQuery(BkgPks, Currency);
                    }
                    //LCL
                }
                else if (Convert.ToInt32(CargoType) == 3)
                {
                    //XML
                    if (Convert.ToInt32(ExportType) == 2)
                    {
                        if (inc == 1)
                        {
                            dsBkg = GetExportSeaBooking(BkgPks);
                            dsBkg = GetExportBookingSeaHeaderLCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 2)
                        {
                            dsBkg = GetExportBookingSeaOthChrgFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 3)
                        {
                            dsBkg = GetExportBookingSeaAddressFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 4)
                        {
                            dsBkg = GetExportBookingSeaReferenceDtlsLCLQuery(BkgPks, Currency);
                            //ElseIf inc = 6 Then
                            //    dsBkg = GetExportBookingSeaCmdtyFCLQuery(BkgPks, Currency)
                        }
                        else if (inc == 7)
                        {
                            dsBkg = GetExportBookingSeaCmdtyDetailsLCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 8)
                        {
                            dsBkg = GetExportBookingSeaFrtElementsFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 9)
                        {
                            dsBkg = GetExportBookingSeaFooterFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 10)
                        {
                            dsBkg = GetExportBookingSeaClauseFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 11)
                        {
                            dsBkg = GetExportBookingSeaCargoDtls2FCLQuery(BkgPks, Currency);
                        }
                    }
                    else
                    {
                        dsBkg = GetExportBookingSeaLCLQuery(BkgPks, Currency);
                    }
                    //BBC
                }
                else if (Convert.ToInt32(CargoType) == 4)
                {
                    //XML
                    if (Convert.ToInt32(ExportType) == 2)
                    {
                        if (inc == 1)
                        {
                            dsBkg = GetExportSeaBooking(BkgPks);
                            dsBkg = GetExportBookingSeaHeaderBBCQuery(BkgPks, Currency);
                        }
                        else if (inc == 2)
                        {
                            dsBkg = GetExportBookingSeaOthChrgFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 3)
                        {
                            dsBkg = GetExportBookingSeaAddressFCLQuery(BkgPks, Currency);
                        }
                        else if (inc == 4)
                        {
                            dsBkg = GetExportBookingSeaCommodityBBCQuery(BkgPks, Currency);
                        }
                        else if (inc == 6)
                        {
                            dsBkg = GetExportBookingSeaReferenceDtlsBBCQuery(BkgPks, Currency);
                            //ElseIf inc = 7 Then
                            //    dsBkg = GetExportBookingSeaCmdtyDetailsLCLQuery(BkgPks, Currency)
                        }
                        else if (inc == 8)
                        {
                            dsBkg = GetExportBookingSeaFrtElementsBBCQuery(BkgPks, Currency);
                        }
                        else if (inc == 9)
                        {
                            dsBkg = GetExportBookingSeaFooterBBCQuery(BkgPks, Currency);
                        }
                        else if (inc == 10)
                        {
                            dsBkg = GetExportBookingSeaClauseFCLQuery(BkgPks, Currency);
                            //ElseIf inc = 11 Then
                            //    dsBkg = GetExportBookingSeaCargoDtls2FCLQuery(BkgPks, Currency)
                        }
                    }
                    else
                    {
                        dsBkg = GetExportBookingSeaBBCQuery(BkgPks, Currency);
                    }
                }
            }
            try
            {
                return dsBkg;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #region "FCL"
        public DataSet GetExportBookingSeaFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT");
            sb.Append("       BTFD.PREFERENCE, BST.BOOKING_REF_NO,");
            sb.Append("       TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BST.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BST.CUSTOMER_REF_NO CUSTOMER_REF_NO,");
            sb.Append("       BST.CREDIT_DAYS CREDIT_DAYS,");
            sb.Append("       BST.CREDIT_LIMIT CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CMMT.CARGO_MOVE_CODE CARGO_MOVE_CODE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP_CODE,");
            sb.Append("       '" + Currency + "' CURRENCY,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BST.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3,'Foreign') PAY_TYPE,");
            //sb.Append("       PTMT.PACK_TYPE_ID PACK_TYPE,")
            sb.Append("       BST.PACK_COUNT PACK_COUNT,");
            sb.Append("       BST.GROSS_WEIGHT GROSS_WEIGHT,");
            sb.Append("       BST.NET_WEIGHT NET_WEIGHT,");
            sb.Append("       BST.VOLUME_IN_CBM VOLUME,");
            sb.Append("       BKGOTH.FREIGHT_ELEMENT_ID OTH_FREIGHT_ELEMENT,");
            sb.Append("       BKGOTH.CURRENCY_ID OTH_CURRENCY,");
            sb.Append("       BKGOTH.AMOUNT OTH_AMOUNT,");
            sb.Append("       DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect',3, 'Foreign') OTH_PYMT_TYPE,");
            sb.Append("       BST.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("       BST.DEL_ADDRESS DELIVERY_ADDRESS,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP,");
            sb.Append("       '' COMMODITY_ID,");
            sb.Append("       '' COMMODITY_NAME,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) REF_NR,");
            sb.Append("       OMT.OPERATOR_ID LINE,");
            sb.Append("       ' ' PACK,");
            sb.Append("       CONTTYPE.CONTAINER_TYPE_MST_ID TYPE,");
            //sb.Append("       BTSF.QUANTITY BOXES,")
            sb.Append("       TO_CHAR(BTSF.NO_OF_BOXES) BOXES,");
            sb.Append("       BTSF.ALL_IN_TARIFF BOOKING_RATE,");
            sb.Append("       BTSF.ALL_IN_TARIFF TOTAL_RATE,");
            sb.Append("       BKGCOMM.P1 QTY,");
            sb.Append("       BKGCOMM.N1 NET_WT,");
            sb.Append("       BKGCOMM.G1 GROSS_WT,");
            sb.Append("       BKGCOMM.V1 VOLUME,");
            sb.Append("       BKGCOMM.REMARK REMARKS,");
            sb.Append("       BKGCOMM.COMMODITY_ID COMMODITY,");
            sb.Append("       BKGCOMM.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       BKGCOMM.P2 QTY,");
            sb.Append("       BKGCOMM.N2 NET_WT,");
            sb.Append("       BKGCOMM.G2 GROSS_WT,");
            sb.Append("       BKGCOMM.V1 VOLUME,");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID ELEMENT,");
            sb.Append("       BTFD.CHARGE_BASIS,");
            sb.Append("       BTFD.CURRENCY_ID CURR,");
            sb.Append("       '' VALUE,");
            sb.Append("       BTFD.TARIFF_RATE BKG_RATE,");
            sb.Append("       '' EXRATE,");
            sb.Append("       BTFD.MIN_BASIS_RATE AMOUNT,");
            //sb.Append("       BTFD.PYMT_TYPE PAYMENT_TYPE,")
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect',3,'Foreign') PAYMENT_TYPE,");
            sb.Append("       0 FRIEGHT_CHARGES,");
            sb.Append("       0 OTH_FREIGHT_CHARGES,");
            sb.Append("       0 TOTAL_FREIGHT_CHARGES,");
            sb.Append("       VAT.VESSEL_ID VSL_CODE,");
            sb.Append("       VAT.VESSEL_NAME VSL_NAME,");
            sb.Append("       TO_CHAR('''' || BST.VOYAGE_FLIGHT_NO) VOY,");
            sb.Append("       TO_CHAR(BST.ETD_DATE, DATEFORMAT || ' HH24:MI') ETD_POL,");
            sb.Append("       TO_CHAR(BST.CUT_OFF_DATE, DATEFORMAT || ' HH24:MI') CUT_OFF,");
            sb.Append("       TO_CHAR(BST.ETA_DATE, DATEFORMAT || ' HH24:MI') ETA_POD,");
            sb.Append("       NVL(BST.LINE_BKG_NO,' ') LINE_BKG_NO,");
            sb.Append("       '' CLAUSE,");
            sb.Append("       CASE WHEN JCSET.MARKS_NUMBERS IS NOT NULL ");
            sb.Append("         OR JCSET.GOODS_DESCRIPTION IS NOT NULL THEN 'YES'");
            sb.Append("         ELSE");
            sb.Append("           'NO' END CARGO_DETAIL,");
            sb.Append("       JCSET.MARKS_NUMBERS MARKS_NUMBERS,");
            sb.Append("       JCSET.GOODS_DESCRIPTION GOODS_DESCRIPTION");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT,");
            sb.Append("       JOB_CARD_TRN JCSET,");
            sb.Append("       (SELECT BTOTH.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("       (SELECT BTCD.BOOKING_TRN_FK,");
            sb.Append("               BTCD.PACK_COUNT         P1,");
            sb.Append("               BTCD.NET_WEIGHT         N1,");
            sb.Append("               BTCD.GROSS_WEIGHT       G1,");
            sb.Append("               BTCD.REMARK,");
            sb.Append("               COMM.COMMODITY_ID,");
            sb.Append("               PACK.PACK_TYPE_ID,");
            sb.Append("               BCD.PACK_COUNT          P2,");
            sb.Append("               BCD.NET_WEIGHT          N2,");
            sb.Append("               BCD.GROSS_WEIGHT        G2,");
            sb.Append("               BCD.VOLUME_IN_CBM       V1");
            sb.Append("          FROM BOOKING_TRN_CARGO_DTL BTCD,");
            sb.Append("               BOOKING_COMMODITY_DTL BCD,");
            sb.Append("               COMMODITY_MST_TBL     COMM,");
            sb.Append("               PACK_TYPE_MST_TBL     PACK");
            sb.Append("         WHERE BTCD.BOOKING_TRN_CARGO_PK = BCD.BOOKING_CARGO_DTL_FK");
            sb.Append("           AND COMM.COMMODITY_MST_PK = BCD.COMMODITY_MST_FK");
            sb.Append("           AND PACK.PACK_TYPE_MST_PK = BCD.PACK_TYPE_FK) BKGCOMM,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE,");
            sb.Append("               FEMT.PREFERENCE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append(" WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BST.PACK_TYPE_MST_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = BKGOTH.BOOKING_TRN_FK(+)");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BST.COMMODITY_GROUP_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND BKGCOMM.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BST.VESSEL_VOYAGE_FK = VAT.VESSEL_VOYAGE_TBL_PK(+)");
            sb.Append("   AND VAT.VESSEL_VOYAGE_TBL_PK = VVT.VESSEL_VOYAGE_TBL_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JCSET.BOOKING_MST_FK(+)");
            sb.Append("   ORDER BY CONTTYPE.CONTAINER_TYPE_MST_ID, BTFD.PREFERENCE");
            sb.Append("");

            DataSet dsBkg = new DataSet();
            dsBkg = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in dsBkg.Tables[0].Rows)
                {
                    foreach (DataColumn col in dsBkg.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return dsBkg;
        }
        public DataSet GetExportSeaBooking(string BkgPks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT BST.BOOKING_MST_PK,BST.BOOKING_REF_NO ");
            sb.Append("  FROM BOOKING_MST_TBL BST ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "BOOKING");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaHeaderFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            

            sb.Append("SELECT DISTINCT BST.BOOKING_MST_PK,");
            sb.Append("                TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("                DECODE(BST.STATUS,");
            sb.Append("                       1,");
            sb.Append("                       'Provisional',");
            sb.Append("                       2,");
            sb.Append("                       'Confirmed',");
            sb.Append("                       3,");
            sb.Append("                       'Cancelled',");
            sb.Append("                       4,");
            sb.Append("                       'E-Booking',");
            sb.Append("                       5,");
            sb.Append("                       'Shipped',");
            sb.Append("                       6,");
            sb.Append("                       'Shipped') STATUS,");
            sb.Append("                DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("                TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("                DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("                POL.PORT_ID POL,");
            sb.Append("                POD.PORT_ID POD,");
            sb.Append("                SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("                CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("                BST.CUSTOMER_REF_NO CUSTOMER_REF_NO,");
            sb.Append("                TO_CHAR(BST.CREDIT_DAYS) CREDIT_DAYS,");
            sb.Append("                TO_CHAR(BST.CREDIT_LIMIT) CREDIT_LIMIT,");
            sb.Append("                'EUR' CREDIT_LIMIT_CURRENCY,");
            sb.Append("                DPAT.AGENT_ID DP_AGENT,");
            sb.Append("                CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("                CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("                CASE");
            sb.Append("                  WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("                   'YES'");
            sb.Append("                  ELSE");
            sb.Append("                   'NO'");
            sb.Append("                END X_BKG,");
            sb.Append("                CASE");
            sb.Append("                  WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("                   'YES'");
            sb.Append("                  ELSE");
            sb.Append("                   'NO'");
            sb.Append("                END CO_LOADING,");
            sb.Append("                CMMT.CARGO_MOVE_CODE CARGO_MOVE_CODE,");
            sb.Append("                CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP_CODE,");
            sb.Append("                'EUR' CURRENCY,");
            sb.Append("                STMT.INCO_CODE INCO_TERMS,");
            sb.Append("                DECODE(BST.PYMT_TYPE,");
            sb.Append("                       1,");
            sb.Append("                       'Prepaid',");
            sb.Append("                       2,");
            sb.Append("                       'Collect',");
            sb.Append("                       3,");
            sb.Append("                       'Foreign') PAY_TYPE,");
            sb.Append("                '' PACK_TYPE,");
            sb.Append("                TO_CHAR(BST.PACK_COUNT) PACK_COUNT,");
            sb.Append("                TO_CHAR(BST.GROSS_WEIGHT) GROSS_WEIGHT,");
            sb.Append("                TO_CHAR(BST.NET_WEIGHT) NET_WEIGHT,");
            sb.Append("                TO_CHAR(BST.VOLUME_IN_CBM) VOLUME");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT,");
            sb.Append("       JOB_CARD_TRN JCSET,");
            sb.Append("       (SELECT BTOTH.BOOKING_MST_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG    BTOTH,");
            sb.Append("               BOOKING_MST_TBL         BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL   CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("       (SELECT BTCD.BOOKING_TRN_FK,");
            sb.Append("               BTCD.PACK_COUNT     P1,");
            sb.Append("               BTCD.NET_WEIGHT     N1,");
            sb.Append("               BTCD.GROSS_WEIGHT   G1,");
            sb.Append("               BTCD.REMARK,");
            sb.Append("               COMM.COMMODITY_ID,");
            sb.Append("               PACK.PACK_TYPE_ID,");
            sb.Append("               BCD.PACK_COUNT      P2,");
            sb.Append("               BCD.NET_WEIGHT      N2,");
            sb.Append("               BCD.GROSS_WEIGHT    G2,");
            sb.Append("               BCD.VOLUME_IN_CBM   V1");
            sb.Append("          FROM BOOKING_TRN_CARGO_DTL BTCD,");
            sb.Append("               BOOKING_COMMODITY_DTL BCD,");
            sb.Append("               COMMODITY_MST_TBL     COMM,");
            sb.Append("               PACK_TYPE_MST_TBL     PACK");
            sb.Append("         WHERE BTCD.BOOKING_TRN_CARGO_PK = BCD.BOOKING_CARGO_DTL_FK");
            sb.Append("           AND COMM.COMMODITY_MST_PK = BCD.COMMODITY_MST_FK");
            sb.Append("           AND PACK.PACK_TYPE_MST_PK = BCD.PACK_TYPE_FK) BKGCOMM,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS    BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL   CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append(" WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = BKGOTH.BOOKING_MST_FK(+)");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BST.COMMODITY_GROUP_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND BKGCOMM.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BST.VESSEL_VOYAGE_FK = VVT.voyage_trn_pk(+)");
            sb.Append("   AND VAT.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = JCSET.BOOKING_MST_FK(+)");
            sb.Append("");


            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaOthChrgFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("       BKGOTH.FREIGHT_ELEMENT_ID OTH_FREIGHT_ELEMENT,");
            sb.Append("       BKGOTH.CURRENCY_ID OTH_CURRENCY,");
            sb.Append("       TO_CHAR(BKGOTH.AMOUNT) OTH_AMOUNT,");
            sb.Append("       DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3,'Foreign') OTH_PYMT_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       (SELECT BTOTH.BOOKING_MST_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BKGOTH.BOOKING_MST_FK ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "OTH_CHARGES");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaAddressFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("       BST.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("       BST.DEL_ADDRESS DELIVERY_ADDRESS ");
            sb.Append("  FROM BOOKING_MST_TBL BST ");
            sb.Append("  WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("     AND (BST.COL_ADDRESS IS NOT NULL OR BST.DEL_ADDRESS IS NOT NULL)  ");
            sb.Append(" ");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "ADDRESS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaReferenceDtlsFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REFERENCE_NR,");
            sb.Append("       OMT.OPERATOR_ID LINE,");
            sb.Append("       CONTTYPE.CONTAINER_TYPE_MST_ID TYPE,");
            sb.Append("       TO_CHAR(BTSF.NO_OF_BOXES) BOXES ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "REFERENCE_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaCargoDtls1FCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            sb.Append("       CONTTYPE.CONTAINER_TYPE_MST_ID CONTR_TYPE,");
            sb.Append("       TO_CHAR(BKGCOMM.P1) QTY,");
            sb.Append("       TO_CHAR(BKGCOMM.N1) NET_WT,");
            sb.Append("       TO_CHAR(BKGCOMM.G1) GROSS_WT,");
            sb.Append("       TO_CHAR(BKGCOMM.V1) VOLUME,");
            sb.Append("       BKGCOMM.REMARK REMARKS, ");
            sb.Append("       TO_CHAR(BTSF.ALL_IN_TARIFF) BOOKING_RATE,");
            sb.Append("       TO_CHAR(FETCH_FCL_LCL_TOTALBKGFRT(BTSF.BOOKING_TRN_PK,1," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",2)) AS TOTAL_RATE,");
            sb.Append("       BKGCOMM.BOOKING_TRN_CARGO_PK ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE,");
            sb.Append("       (SELECT BTCD.BOOKING_TRN_FK,");
            sb.Append("               BTCD.BOOKING_TRN_CARGO_PK,");
            sb.Append("               BTCD.PACK_COUNT         P1,");
            sb.Append("               BTCD.NET_WEIGHT         N1,");
            sb.Append("               BTCD.GROSS_WEIGHT       G1,");
            sb.Append("               BTCD.REMARK,");
            sb.Append("               COMM.COMMODITY_ID,");
            sb.Append("               PACK.PACK_TYPE_ID,");
            sb.Append("               BCD.PACK_COUNT          P2,");
            sb.Append("               BCD.NET_WEIGHT          N2,");
            sb.Append("               BCD.GROSS_WEIGHT        G2,");
            sb.Append("               BCD.VOLUME_IN_CBM       V1");
            sb.Append("          FROM BOOKING_TRN_CARGO_DTL BTCD,");
            sb.Append("               BOOKING_COMMODITY_DTL BCD,");
            sb.Append("               COMMODITY_MST_TBL     COMM,");
            sb.Append("               PACK_TYPE_MST_TBL     PACK");
            sb.Append("         WHERE BTCD.BOOKING_TRN_CARGO_PK = BCD.BOOKING_CARGO_DTL_FK");
            sb.Append("           AND COMM.COMMODITY_MST_PK = BCD.COMMODITY_MST_FK");
            sb.Append("           AND PACK.PACK_TYPE_MST_PK = BCD.PACK_TYPE_FK) BKGCOMM ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("    AND BKGCOMM.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append(" ");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CARGO_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaCmdtyFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT BST.BOOKING_MST_PK,");
            sb.Append("       BKGCOMM.COMMODITY_ID COMMODITY,");
            sb.Append("       BKGCOMM.BOOKING_TRN_CARGO_PK ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE,");
            sb.Append("       (SELECT BTCD.BOOKING_TRN_FK,");
            sb.Append("               BTCD.BOOKING_TRN_CARGO_PK,");
            sb.Append("               BTCD.PACK_COUNT         P1,");
            sb.Append("               BTCD.NET_WEIGHT         N1,");
            sb.Append("               BTCD.GROSS_WEIGHT       G1,");
            sb.Append("               BTCD.REMARK,");
            sb.Append("               COMM.COMMODITY_ID,");
            sb.Append("               PACK.PACK_TYPE_ID,");
            sb.Append("               BCD.PACK_COUNT          P2,");
            sb.Append("               BCD.NET_WEIGHT          N2,");
            sb.Append("               BCD.GROSS_WEIGHT        G2,");
            sb.Append("               BCD.VOLUME_IN_CBM       V1");
            sb.Append("          FROM BOOKING_TRN_CARGO_DTL BTCD,");
            sb.Append("               BOOKING_COMMODITY_DTL BCD,");
            sb.Append("               COMMODITY_MST_TBL     COMM,");
            sb.Append("               PACK_TYPE_MST_TBL     PACK");
            sb.Append("         WHERE BTCD.BOOKING_TRN_CARGO_PK = BCD.BOOKING_CARGO_DTL_FK");
            sb.Append("           AND COMM.COMMODITY_MST_PK = BCD.COMMODITY_MST_FK");
            sb.Append("           AND PACK.PACK_TYPE_MST_PK = BCD.PACK_TYPE_FK) BKGCOMM ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND BKGCOMM.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "COMMODITY");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaCmdtyDetailsFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("       BKGCOMM.COMMODITY_ID COMMODITY,");
            sb.Append("       BKGCOMM.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       TO_CHAR(BKGCOMM.P2) QTY,");
            sb.Append("       TO_CHAR(BKGCOMM.N2) NET_WT,");
            sb.Append("       TO_CHAR(BKGCOMM.G2) GROSS_WT,");
            sb.Append("       TO_CHAR(BKGCOMM.V1) VOLUME, ");
            sb.Append("       BKGCOMM.BOOKING_TRN_CARGO_PK ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CONTTYPE,");
            sb.Append("       (SELECT BTCD.BOOKING_TRN_FK,");
            sb.Append("               BTCD.BOOKING_TRN_CARGO_PK,");
            sb.Append("               BTCD.PACK_COUNT         P1,");
            sb.Append("               BTCD.NET_WEIGHT         N1,");
            sb.Append("               BTCD.GROSS_WEIGHT       G1,");
            sb.Append("               BTCD.REMARK,");
            sb.Append("               COMM.COMMODITY_ID,");
            sb.Append("               PACK.PACK_TYPE_ID,");
            sb.Append("               BCD.PACK_COUNT          P2,");
            sb.Append("               BCD.NET_WEIGHT          N2,");
            sb.Append("               BCD.GROSS_WEIGHT        G2,");
            sb.Append("               BCD.VOLUME_IN_CBM       V1");
            sb.Append("          FROM BOOKING_TRN_CARGO_DTL BTCD,");
            sb.Append("               BOOKING_COMMODITY_DTL BCD,");
            sb.Append("               COMMODITY_MST_TBL     COMM,");
            sb.Append("               PACK_TYPE_MST_TBL     PACK");
            sb.Append("         WHERE BTCD.BOOKING_TRN_CARGO_PK = BCD.BOOKING_CARGO_DTL_FK");
            sb.Append("           AND COMM.COMMODITY_MST_PK = BCD.COMMODITY_MST_FK");
            sb.Append("           AND PACK.PACK_TYPE_MST_PK = BCD.PACK_TYPE_FK) BKGCOMM ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND CONTTYPE.CONTAINER_TYPE_MST_PK = BTSF.CONTAINER_TYPE_MST_FK");
            sb.Append("   AND BKGCOMM.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "COMMODITY_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaFrtElementsFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID FREIGHT_ELEMENT,");
            sb.Append("       BTFD.CHARGE_BASIS CHARGE_BASIS,");
            sb.Append("       BTFD.CURRENCY_ID CURRENCY_ID,");
            sb.Append("       TO_CHAR(BTFD.TARIFF_RATE) BKG_RATE,");
            sb.Append("       TO_CHAR(BTFD.MIN_BASIS_RATE) AMOUNT,");
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3,'Foreign') PAYMENT_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE ");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND BTFD.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FREIGHT_ELEMENTS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaFooterFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("       VAT.VESSEL_ID VESSEL_CODE,");
            sb.Append("       VAT.VESSEL_NAME VESSEL_NAME,");
            sb.Append("       BST.VOYAGE_FLIGHT_NO VOYAGE,");
            sb.Append("       TO_CHAR(BST.ETD_DATE, DATEFORMAT || ' HH24:MI') ETD_POL,");
            sb.Append("       TO_CHAR(BST.CUT_OFF_DATE, DATEFORMAT || ' HH24:MI') CUT_OFF,");
            sb.Append("       TO_CHAR(BST.ETA_DATE, DATEFORMAT || ' HH24:MI') ETA_POD ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.VESSEL_VOYAGE_FK = VVT.voyage_trn_pk(+)");
            sb.Append("   AND VAT.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FOOTER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaClauseFCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("                       HBL.REFERENCE_NR CLAUSE_REFERENCE_NR ");
            sb.Append("                   FROM HBL_BL_CLAUSE_TBL HBL,");
            sb.Append("                       BL_CLAUSE_TBL     BLMST,");
            sb.Append("                       BOOKING_MST_TBL   BST ");
            sb.Append("                 WHERE BST.BOOKING_MST_PK = HBL.HBL_EXP_TBL_FK");
            sb.Append("                   AND BLMST.BL_CLAUSE_PK(+) = HBL.BL_CLAUSE_FK");
            sb.Append("                   AND HBL.CLAUSE_TYPE_FLAG = 3");
            sb.Append("                   AND TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CLAUSE");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaCargoDtls2FCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("       JCSET.MARKS_NUMBERS,");
            sb.Append("       JCSET.GOODS_DESCRIPTION ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       JOB_CARD_TRN JCSET ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = JCSET.BOOKING_MST_FK ");
            sb.Append("   AND (JCSET.MARKS_NUMBERS IS NOT NULL OR JCSET.GOODS_DESCRIPTION IS NOT NULL) ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CARGO_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        #endregion
        #region "LCL"
        public DataSet GetExportBookingSeaLCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT BTFD.PREFERENCE, BST.BOOKING_REF_NO,");
            sb.Append("       TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BST.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BST.CUSTOMER_REF_NO,");
            sb.Append("       BST.CREDIT_DAYS,");
            sb.Append("       BST.CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CMMT.CARGO_MOVE_CODE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE,");
            sb.Append("       '" + Currency + "' CURRENCY,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BST.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAY_TYPE,");
            sb.Append("       PTMT.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       BST.PACK_COUNT,");
            sb.Append("       BST.GROSS_WEIGHT,");
            sb.Append("       BST.CHARGEABLE_WEIGHT NET_WEIGHT,");
            sb.Append("       BST.VOLUME_IN_CBM VOLUME,");
            sb.Append("       BKGOTH.FREIGHT_ELEMENT_ID OTH_FREIGHT_ELEMENT,");
            sb.Append("       BKGOTH.CURRENCY_ID OTH_CURRENCY,");
            sb.Append("       BKGOTH.AMOUNT OTH_AMOUNT,");
            sb.Append("       DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') OTH_PYMT_TYPE,");
            sb.Append("       BST.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("       BST.DEL_ADDRESS DELIVERY_ADDRESS,");
            sb.Append("       '' COMMODITY_GROUP,");
            sb.Append("       '' COMMODITY_ID,");
            sb.Append("       '' COMMODITY_NAME,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REF_NR,");
            sb.Append("       OMT.OPERATOR_ID LINE,");
            sb.Append("       '' PACK,");
            sb.Append("       BASIS.DIMENTION_ID TYPE,");
            sb.Append("       BTSF.QUANTITY BOXES,");
            sb.Append("       BTSF.ALL_IN_TARIFF BOOKING_RATE,");
            //sb.Append("       BTSF.BUYING_RATE TOTAL_RATE,")
            sb.Append("       FETCH_FCL_LCL_TOTALBKGFRT(BTSF.BOOKING_TRN_PK,1," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",1)AS TOTAL_RATE, ");
            sb.Append("       BST.PACK_COUNT QTY,");
            sb.Append("       '' NET_WT,");
            sb.Append("       '' GROSS_WT,");
            sb.Append("       '' VOLUME,");
            sb.Append("       '' REMARKS,");
            sb.Append("       (SELECT C.COMMODITY_ID");
            sb.Append("         FROM COMMODITY_MST_TBL C");
            sb.Append("         WHERE C.COMMODITY_MST_PK IN");
            sb.Append("       (SELECT *");
            sb.Append("          FROM TABLE (SELECT FN_SPLIT(B.COMMODITY_MST_FKS)");
            sb.Append("                        FROM BOOKING_MST_TBL BST,");
            sb.Append("                        BOOKING_TRN B ");
            sb.Append("                       WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("                       AND BST.BOOKING_MST_PK = B.BOOKING_MST_FK))) COMMODITY,");
            sb.Append("       '' PACK_TYPE,");
            sb.Append("       '' QTY,");
            sb.Append("       '' NET_WT,");
            sb.Append("       '' VOLUME,");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID ELEMENT,");
            sb.Append("       BTFD.CHARGE_BASIS,");
            sb.Append("       BTFD.CURRENCY_ID CURR,");
            sb.Append("       '' VALUE,");
            sb.Append("       BTFD.TARIFF_RATE BKG_RATE,");
            sb.Append("       '' EXRATE,");
            sb.Append("       BTFD.MIN_BASIS_RATE AMOUNT,");
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("       0 FRIEGHT_CHARGES,");
            sb.Append("       0 OTH_FREIGHT_CHARGES,");
            sb.Append("       0 TOTAL_FREIGHT_CHARGES,");
            sb.Append("       VAT.VESSEL_ID VSL_CODE,");
            sb.Append("       VAT.VESSEL_NAME VSL_NAME,");
            sb.Append("       TO_CHAR('''' || BST.VOYAGE_FLIGHT_NO) VOY,");
            sb.Append("       TO_CHAR(BST.ETD_DATE, DATEFORMAT || ' HH24:MI') ETD_POL,");
            sb.Append("       TO_CHAR(BST.CUT_OFF_DATE, DATEFORMAT || ' HH24:MI') CUT_OFF,");
            sb.Append("       TO_CHAR(BST.ETA_DATE, DATEFORMAT || ' HH24:MI') ETA_POD,");
            sb.Append("       BST.LINE_BKG_NO,");
            sb.Append("       '' CLAUSE,");
            sb.Append("       CASE");
            sb.Append("         WHEN JCSET.MARKS_NUMBERS IS NOT NULL OR");
            sb.Append("              JCSET.GOODS_DESCRIPTION IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CARGO_DETAIL,");
            sb.Append("       JCSET.MARKS_NUMBERS,");
            sb.Append("       JCSET.GOODS_DESCRIPTION");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       DIMENTION_UNIT_MST_TBL BASIS,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT,");
            sb.Append("       JOB_CARD_TRN JCSET,");
            sb.Append("       (SELECT BTOTH.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE,");
            sb.Append("               FEMT.PREFERENCE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append(" WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BST.PACK_TYPE_MST_FK");
            sb.Append("   AND BTSF.BOOKING_TRN_PK = BKGOTH.BOOKING_TRN_FK(+)");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BST.COMMODITY_GROUP_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND BASIS.DIMENTION_UNIT_MST_PK = BTSF.BASIS");
            sb.Append("   AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BST.VESSEL_VOYAGE_FK = VVT.voyage_trn_pk(+)");
            sb.Append("   AND VAT.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = JCSET.BOOKING_MST_FK(+)");
            sb.Append("   ORDER BY BTFD.PREFERENCE");
            sb.Append("");

            DataSet dsBkg = new DataSet();
            dsBkg = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in dsBkg.Tables[0].Rows)
                {
                    foreach (DataColumn col in dsBkg.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return dsBkg;
        }
        public DataSet GetExportBookingSeaHeaderLCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT BST.BOOKING_MST_PK,");
            sb.Append("       TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BST.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BST.CUSTOMER_REF_NO,");
            sb.Append("       BST.CREDIT_DAYS,");
            sb.Append("       BST.CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CMMT.CARGO_MOVE_CODE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE,");
            sb.Append("       '" + Currency + "' CURRENCY,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BST.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3,'Foreign') PAY_TYPE,");
            sb.Append("       PTMT.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       BST.PACK_COUNT,");
            sb.Append("       BST.GROSS_WEIGHT,");
            sb.Append("       BST.CHARGEABLE_WEIGHT NET_WEIGHT,");
            sb.Append("       BST.VOLUME_IN_CBM VOLUME ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT ");
            sb.Append(" WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BST.PACK_TYP_MST_FK");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BST.COMMODITY_GROUP_FK");
            sb.Append("");

            //'
            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaReferenceDtlsLCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REFERENCE_NR,");
            sb.Append("       OMT.OPERATOR_ID LINE,");
            sb.Append("       BASIS.DIMENTION_ID TYPE,");
            sb.Append("       BTSF.QUANTITY BOXES,");
            sb.Append("       BST.PACK_COUNT QTY,");
            sb.Append("       BTSF.ALL_IN_TARIFF BOOKING_RATE,");
            sb.Append("       FETCH_FCL_LCL_TOTALBKGFRT(BTSF.BOOKING_TRN_PK,1," + HttpContext.Current.Session["CURRENCY_MST_PK"] + ",1)AS TOTAL_RATE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       DIMENTION_UNIT_MST_TBL BASIS ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND BASIS.DIMENTION_UNIT_MST_PK = BTSF.BASIS");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "REFERENCE_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        
        public DataSet GetExportBookingSeaCmdtyDetailsLCLQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT COMM.COMMODITY_ID,TRN.BOOKING_TRN_FK FROM");
            sb.Append("  BOOKING_MST_TBL BST,");
            sb.Append("  BOOKING_TRN TRN,");
            sb.Append("  COMMODITY_MST_TBL COMM");
            sb.Append("  WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("  AND BST.BOOKING_MST_PK = TRN.BOOKING_MST_FK AND");
            sb.Append("  COMM.COMMODITY_MST_PK IN");
            sb.Append("       (SELECT *");
            sb.Append("          FROM TABLE (SELECT FN_SPLIT(B.COMMODITY_MST_FKS)");
            sb.Append("                        FROM BOOKING_MST_TBL BST,");
            sb.Append("                        BOOKING_TRN B ");
            sb.Append("                       WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("                       AND BST.BOOKING_MST_PK = B.BOOKING_MST_FK))");
            sb.Append("");


            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "COMMODITY_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        #endregion
        #region "BBC"
        public DataSet GetExportBookingSeaBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT BTFD.PREFERENCE, BST.BOOKING_REF_NO,");
            sb.Append("       TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("                DECODE(BST.STATUS,");
            sb.Append("                       1,");
            sb.Append("                       'Provisional',");
            sb.Append("                       2,");
            sb.Append("                       'Confirmed',");
            sb.Append("                       3,");
            sb.Append("                       'Cancelled',");
            sb.Append("                       4,");
            sb.Append("                       'E-Booking',");
            sb.Append("                       5,");
            sb.Append("                       'Shipped',");
            sb.Append("                       6,");
            sb.Append("                       'Shipped') STATUS,");
            sb.Append("                DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("                TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("                DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("                POL.PORT_ID POL,");
            sb.Append("                POD.PORT_ID POD,");
            sb.Append("                SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("                CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("                BST.CUSTOMER_REF_NO,");
            sb.Append("                BST.CREDIT_DAYS,");
            sb.Append("                BST.CREDIT_LIMIT,");
            sb.Append("                '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("                DPAT.AGENT_ID DP_AGENT,");
            sb.Append("                CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("                CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("                CASE");
            sb.Append("                  WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("                   'YES'");
            sb.Append("                  ELSE");
            sb.Append("                   'NO'");
            sb.Append("                END X_BKG,");
            sb.Append("                CASE");
            sb.Append("                  WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("                   'YES'");
            sb.Append("                  ELSE");
            sb.Append("                   'NO'");
            sb.Append("                END CO_LOADING,");
            sb.Append("                CMMT.CARGO_MOVE_CODE,");
            sb.Append("                '' COMMODITY_GROUP_CODE,");
            sb.Append("                '" + Currency + "' CURRENCY,");
            sb.Append("                STMT.INCO_CODE INCO_TERMS,");
            sb.Append("                DECODE(BST.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAY_TYPE,");
            sb.Append("                PTMT.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("                '' PACK_COUNT,");
            sb.Append("                '' GROSS_WEIGHT,");
            sb.Append("                '' NET_WEIGHT,");
            sb.Append("                '' VOLUME,");
            sb.Append("                BKGOTH.FREIGHT_ELEMENT_ID OTH_FREIGHT_ELEMENT,");
            sb.Append("                BKGOTH.CURRENCY_ID OTH_CURRENCY,");
            sb.Append("                BKGOTH.AMOUNT OTH_AMOUNT,");
            sb.Append("                DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') OTH_PYMT_TYPE,");
            sb.Append("                BST.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("                BST.DEL_ADDRESS DELIVERY_ADDRESS,");
            sb.Append("                CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP,");
            sb.Append("                COMM.COMMODITY_ID,");
            sb.Append("                COMM.COMMODITY_NAME,");
            sb.Append("                DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("                BTSF.TRANS_REF_NO REF_NR,");
            sb.Append("                OMT.OPERATOR_ID LINE,");
            sb.Append("                PTMT.PACK_TYPE_ID PACK,");
            sb.Append("                BASIS.DIMENTION_ID TYPE,");
            sb.Append("                '' BOXES,");
            //sb.Append("                BTSF.ALL_IN_TARIFF BOOKING_RATE, ") '----MODIFICATION REQUIRED
            //sb.Append("                BTSF.BUYING_RATE TOTAL_RATE, ") '----MODIFICATION REQUIRED
            sb.Append("                 ROUND(FETCH_TOTALBKGFRT(BTSF.BOOKING_TRN_PK, 2),2) AS BOOKING_RATE, ");
            sb.Append("                 ROUND(FETCH_TOTALBKGFRT(BTSF.BOOKING_TRN_PK, 1),2) AS TOTAL_RATE, ");
            //sb.Append("                FETCH_FCL_LCL_TOTALBKGFRT(BTSF.BOOKING_TRN_PK,1," & HttpContext.Current.Session("CURRENCY_MST_PK") & ",2)AS TOTAL_RATE, ")
            sb.Append("                BTSF.QUANTITY QTY,");
            sb.Append("                '' NET_WT,");
            sb.Append("                BTSF.WEIGHT_MT GROSS_WT,");
            sb.Append("                BTSF.VOLUME_CBM VOLUME,");
            sb.Append("                '' REMARKS,");
            sb.Append("                COMM.COMMODITY_NAME COMMODITY,");
            sb.Append("                '' PACK_TYPE,");
            sb.Append("                '' QTY,");
            sb.Append("                '' NET_WT,");
            sb.Append("                '' VOLUME,");
            sb.Append("                ");
            sb.Append("                BTFD.FREIGHT_ELEMENT_ID ELEMENT,");
            sb.Append("                BTFD.CHARGE_BASIS,");
            sb.Append("                BTFD.CURRENCY_ID CURR,");
            sb.Append("                BTFD.MIN_BASIS_RATE VALUE,");
            sb.Append("                BTFD.TARIFF_RATE BKG_RATE,");
            sb.Append("                BTFD.EXCHANGE_RATE EXRATE,");
            sb.Append("                BTFD.TARIFF_RATE * BTFD.EXCHANGE_RATE AMOUNT,");
            sb.Append("                DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                SUM(NVL(BTFD.TARIFF_RATE,0) * NVL(BTFD.EXCHANGE_RATE,0)) FRIEGHT_CHARGES,");
            sb.Append("                SUM(NVL(BKGOTH.AMOUNT,0)) OTH_FREIGHT_CHARGES,");
            sb.Append("                SUM(NVL(BTFD.TARIFF_RATE,0) * NVL(BTFD.EXCHANGE_RATE,1)) +");
            sb.Append("                SUM(NVL(BKGOTH.AMOUNT,0)) TOTAL_FREIGHT_CHARGES,");
            sb.Append("                VAT.VESSEL_ID VSL_CODE,");
            sb.Append("                VAT.VESSEL_NAME VSL_NAME,");
            sb.Append("                TO_CHAR('''' || BST.VOYAGE_FLIGHT_NO) VOY,");
            sb.Append("                TO_CHAR(BST.ETD_DATE, DATEFORMAT || ' HH24:MI') ETD_POL,");
            sb.Append("                TO_CHAR(BST.CUT_OFF_DATE, DATEFORMAT || ' HH24:MI') CUT_OFF,");
            sb.Append("                TO_CHAR(BST.ETA_DATE, DATEFORMAT || ' HH24:MI') ETA_POD,");
            sb.Append("                BST.LINE_BKG_NO,");
            sb.Append("                '' CLAUSE,");
            sb.Append("                CASE");
            sb.Append("                  WHEN JCSET.MARKS_NUMBERS IS NOT NULL OR");
            sb.Append("                       JCSET.GOODS_DESCRIPTION IS NOT NULL THEN");
            sb.Append("                   'YES'");
            sb.Append("                  ELSE");
            sb.Append("                   'NO'");
            sb.Append("                END CARGO_DETAIL,");
            sb.Append("                JCSET.MARKS_NUMBERS,");
            sb.Append("                JCSET.GOODS_DESCRIPTION");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("       COMMODITY_MST_TBL COMM,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       DIMENTION_UNIT_MST_TBL BASIS,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT,");
            sb.Append("       JOB_CARD_TRN JCSET,");
            sb.Append("       (SELECT BTOTH.BOOKING_MST_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("       ");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.EXCHANGE_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE MIN_RATE,");
            sb.Append("               BTFD.PYMT_TYPE,");
            sb.Append("               FEMT.PREFERENCE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append("         WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("         AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BTSF.PACK_TYPE_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = BKGOTH.BOOKING_MST_FK(+)");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BST.COMMODITY_GROUP_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND BASIS.DIMENTION_UNIT_MST_PK = BTSF.BASIS");
            sb.Append("   AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BST.VESSEL_VOYAGE_FK = VVT.voyage_trn_pk(+)");
            sb.Append("   AND VAT.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND BST.BOOKING_MST_PK = JCSET.BOOKING_MST_FK(+)");
            sb.Append("   AND BTSF.COMMODITY_MST_FK = COMM.COMMODITY_MST_PK");
            sb.Append("     GROUP BY   BTFD.PREFERENCE, BST.BOOKING_REF_NO,");
            sb.Append("                BST.BOOKING_DATE,");
            sb.Append("                BST.STATUS,");
            sb.Append("                       ");
            sb.Append("                BTSF.TRANS_REFERED_FROM, ");
            sb.Append("                BST.SHIPMENT_DATE,");
            sb.Append("                BST.CARGO_TYPE,");
            sb.Append("                POL.PORT_ID ,");
            sb.Append("                POD.PORT_ID ,");
            sb.Append("                SHP.CUSTOMER_ID ,");
            sb.Append("                CONS.CUSTOMER_ID ,");
            sb.Append("                BST.CUSTOMER_REF_NO,");
            sb.Append("                BST.CREDIT_DAYS,");
            sb.Append("                BST.CREDIT_LIMIT,");
            sb.Append("                DPAT.AGENT_ID ,");
            sb.Append("                CBAT.AGENT_ID ,");
            sb.Append("                CLAT.AGENT_ID ,");
            sb.Append("                BST.CB_AGENT_MST_FK ,");
            sb.Append("                BST.CL_AGENT_MST_FK ,");
            sb.Append("                CMMT.CARGO_MOVE_CODE,");
            sb.Append("                STMT.INCO_CODE ,");
            sb.Append("                BST.PYMT_TYPE, ");
            sb.Append("                PTMT.PACK_TYPE_ID ,");
            sb.Append("                BKGOTH.FREIGHT_ELEMENT_ID ,");
            sb.Append("                BKGOTH.CURRENCY_ID ,");
            sb.Append("                BKGOTH.AMOUNT ,");
            sb.Append("                BKGOTH.FREIGHT_TYPE, ");
            sb.Append("                BST.COL_ADDRESS ,");
            sb.Append("                BST.DEL_ADDRESS ,");
            sb.Append("                CGMT.COMMODITY_GROUP_CODE ,");
            sb.Append("                COMM.COMMODITY_ID,");
            sb.Append("                COMM.COMMODITY_NAME,");
            sb.Append("                BTSF.TRANS_REFERED_FROM, ");
            sb.Append("                BTSF.TRANS_REFERED_FROM, ");
            sb.Append("                OMT.OPERATOR_ID ,");
            sb.Append("                PTMT.PACK_TYPE_ID ,");
            sb.Append("                BASIS.DIMENTION_ID ,");
            sb.Append("                BTSF.ALL_IN_TARIFF , ");
            //----MODIFICATION REQUIRED
            //sb.Append("                BTSF.BUYING_RATE , ") '----MODIFICATION REQUIRED
            sb.Append("                BTSF.QUANTITY ,");
            sb.Append("                BTSF.WEIGHT_MT ,");
            sb.Append("                BTSF.VOLUME_CBM ,");
            sb.Append("                COMM.COMMODITY_NAME ,");
            sb.Append("                BTFD.FREIGHT_ELEMENT_ID ,");
            sb.Append("                BTFD.CHARGE_BASIS,");
            sb.Append("                BTFD.CURRENCY_ID ,");
            sb.Append("                BTFD.MIN_BASIS_RATE ,");
            sb.Append("                BTFD.TARIFF_RATE ,");
            sb.Append("                BTFD.EXCHANGE_RATE ,");
            sb.Append("                BTFD.PYMT_TYPE ,");
            sb.Append("                VAT.VESSEL_ID ,");
            sb.Append("                VAT.VESSEL_NAME ,");
            sb.Append("                BST.VOYAGE_FLIGHT_NO,");
            sb.Append("                BST.ETD_DATE ,");
            sb.Append("                BST.CUT_OFF_DATE ,");
            sb.Append("                BST.ETA_DATE ,");
            sb.Append("                BST.LINE_BKG_NO,");
            sb.Append("                JCSET.MARKS_NUMBERS,");
            sb.Append("                JCSET.GOODS_DESCRIPTION,");
            sb.Append("                BTSF.TRANS_REF_NO,");
            sb.Append("                BTSF.BOOKING_TRN_PK");
            sb.Append("     ORDER BY COMM.COMMODITY_ID, BTFD.PREFERENCE ");
            sb.Append(" ");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CARGO_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaHeaderBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT BST.BOOKING_MST_PK,");
            sb.Append("       TO_CHAR(BST.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BST.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BST.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       DECODE(BST.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 4, 'BBC') CARGO_TYPE,");
            sb.Append("       POL.PORT_ID POL,");
            sb.Append("       POD.PORT_ID POD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BST.CUSTOMER_REF_NO,");
            sb.Append("       BST.CREDIT_DAYS,");
            sb.Append("       BST.CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BST.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CMMT.CARGO_MOVE_CODE,");
            sb.Append("       '" + Currency + "' CURRENCY,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BST.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAY_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT ");
            sb.Append(" WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BST.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BST.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BST.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BST.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BST.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BST.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BST.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BST.CARGO_MOVE_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BST.SHIPPING_TERMS_MST_FK");
            sb.Append("");

            //'
            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaCommodityBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("select bst.BOOKING_MST_PK,trn.BOOKING_TRN_FK,cgmt.commodity_group_code COMMODITY_GROUP, cmt.COMMODITY_ID, cmt.COMMODITY_NAME ");
            sb.Append("FROM BOOKING_MST_TBL bst,BOOKING_TRN trn , commodity_mst_tbl cmt, commodity_group_mst_tbl cgmt");
            sb.Append(" WHERE TO_CHAR(bst.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND bst.BOOKING_MST_PK = trn.BOOKING_MST_FK");
            sb.Append(" AND trn.commodity_mst_fk = cmt.commodity_mst_pk");
            sb.Append(" AND cgmt.commodity_group_pk(+) = cmt.commodity_group_fk");
            sb.Append("");

            //'
            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "COMMODITY_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaReferenceDtlsBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REFERENCE_NR,");
            sb.Append("       OMT.OPERATOR_ID LINE,");
            sb.Append("       COMM.COMMODITY_NAME COMMODITY,");
            sb.Append("       PTMT.PACK_TYPE_ID PACK,");
            sb.Append("       BASIS.DIMENTION_ID TYPE,");
            sb.Append("       BTSF.QUANTITY BOXES,");
            sb.Append("       BST.PACK_COUNT QTY,");
            sb.Append("       BTSF.WEIGHT_MT GROSS_WT,");
            sb.Append("       BTSF.VOLUME_CBM VOLUME,");
            sb.Append("       ROUND(FETCH_TOTALBKGFRT(BTSF.BOOKING_TRN_PK, 2),2) AS BOOKING_RATE, ");
            sb.Append("       ROUND(FETCH_TOTALBKGFRT(BTSF.BOOKING_TRN_PK, 1),2) AS TOTAL_RATE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       OPERATOR_MST_TBL OMT,");
            sb.Append("       COMMODITY_MST_TBL COMM,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       DIMENTION_UNIT_MST_TBL BASIS ");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = BST.CARRIER_MST_FK");
            sb.Append("   AND BTSF.COMMODITY_MST_FK = COMM.COMMODITY_MST_PK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK = BTSF.PACK_TYPE_FK");
            sb.Append("   AND BASIS.DIMENTION_UNIT_MST_PK = BTSF.BASIS");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "REFERENCE_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaFrtElementsBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BTSF.BOOKING_TRN_PK,");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID FREIGHT_ELEMENT,");
            sb.Append("       BTFD.CHARGE_BASIS,");
            sb.Append("       BTFD.CURRENCY_ID CURRENCY_ID,");
            sb.Append("       BTFD.TARIFF_RATE BKG_RATE,");
            sb.Append("       BTFD.TARIFF_RATE * BTFD.EXCHANGE_RATE AMOUNT,");
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAYMENT_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.EXCHANGE_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE ");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append("   WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND BTFD.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FREIGHT_ELEMENTS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingSeaFooterBBCQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BST.BOOKING_MST_PK,");
            sb.Append("SUM(NVL(BTFD.TARIFF_RATE,0) * NVL(BTFD.EXCHANGE_RATE,0)) FRIEGHT_CHARGES,");
            sb.Append("       SUM(NVL(BKGOTH.AMOUNT,0)) OTH_FREIGHT_CHARGES,");
            sb.Append("       SUM(NVL(BTFD.TARIFF_RATE,0) * NVL(BTFD.EXCHANGE_RATE,1)) +");
            sb.Append("       SUM(NVL(BKGOTH.AMOUNT,0)) TOTAL_FREIGHT_CHARGES,");
            sb.Append("       VAT.VESSEL_ID VESSEL_CODE,");
            sb.Append("       VAT.VESSEL_NAME VESSEL_NAME,");
            sb.Append("       BST.VOYAGE_FLIGHT_NO VOYAGE,");
            sb.Append("       TO_CHAR(BST.ETD_DATE, DATEFORMAT || ' HH24:MI') ETD_POL,");
            sb.Append("       TO_CHAR(BST.CUT_OFF_DATE, DATEFORMAT || ' HH24:MI') CUT_OFF,");
            sb.Append("       TO_CHAR(BST.ETA_DATE, DATEFORMAT || ' HH24:MI') ETA_POD ");
            sb.Append("  FROM BOOKING_MST_TBL BST,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       (SELECT BTOTH.BOOKING_MST_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BST,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.EXCHANGE_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD,");
            sb.Append("       VESSEL_VOYAGE_TBL VAT,");
            sb.Append("       VESSEL_VOYAGE_TRN VVT ");
            sb.Append("  WHERE TO_CHAR(BST.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("     AND BST.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("     AND BST.BOOKING_MST_PK = BKGOTH.BOOKING_MST_FK(+)");
            sb.Append("     AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("     AND BST.VESSEL_VOYAGE_FK = VVT.voyage_trn_pk(+)");
            sb.Append("     AND VAT.VESSEL_VOYAGE_TBL_PK(+) = VVT.VESSEL_VOYAGE_TBL_FK");
            sb.Append("     GROUP BY BST.BOOKING_MST_PK,");
            sb.Append("                VAT.VESSEL_ID,");
            sb.Append("                VAT.VESSEL_NAME, ");
            sb.Append("                BST.VOYAGE_FLIGHT_NO,");
            sb.Append("                BST.ETD_DATE,");
            sb.Append("                BST.CUT_OFF_DATE,");
            sb.Append("                BST.ETA_DATE ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FOOTER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        #endregion
        #region "AIR"
        public DataSet GetExportAirBooking(string BkgPks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT BAT.BOOKING_MST_PK,BAT.BOOKING_REF_NO ");
            sb.Append("  FROM BOOKING_MST_TBL BAT ");
            sb.Append("   WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "BOOKING");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT BAT.BOOKING_REF_NO,");
            sb.Append("       TO_CHAR(BAT.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BAT.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BAT.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       '' MAWB_NR,");
            sb.Append("       POL.PORT_ID AOO,");
            sb.Append("       POD.PORT_ID AOD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BAT.CUSTOMER_REF_NO,");
            sb.Append("       BAT.CREDIT_DAYS,");
            sb.Append("       BAT.CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BAT.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BAT.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CSMT.CUSTOMS_STATUS_CODE, ");
            sb.Append("       CMMT.CARGO_MOVE_CODE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BAT.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAY_TYPE,");
            sb.Append("       CASE WHEN BAT.CARGO_TYPE=1 THEN");
            sb.Append("         'YES'");
            sb.Append("       ELSE ");
            sb.Append("         'NO'");
            sb.Append("         END KGS,");
            sb.Append("       CASE WHEN BAT.CARGO_TYPE=2 THEN");
            sb.Append("         'YES'");
            sb.Append("       ELSE ");
            sb.Append("         'NO'");
            sb.Append("         END ULD,");
            //sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,")
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Cust Contract',4,'Air Tariff',5,'Gen Tariff',6,'SRR',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       '" + Currency + "' CURRENCY,");
            sb.Append("       BAT.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("       BAT.DEL_ADDRESS DELIVERY_ADDRESS,");
            sb.Append("       PTMT.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       BAT.PACK_COUNT,");
            sb.Append("       BAT.GROSS_WEIGHT ACTUAL_WT,");
            sb.Append("       BAT.VOLUME_WEIGHT,");
            sb.Append("       BAT.CHARGEABLE_WEIGHT,");
            sb.Append("       BAT.NO_OF_BOXES ULD_CNT,");
            sb.Append("       BAT.VOLUME_IN_CBM VOLUME,");
            sb.Append("       BAT.DENSITY,");
            //sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,")
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Cust Contract',4,'Air Tariff',5,'Gen Tariff',6,'SRR',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REF_NR,");
            sb.Append("       OMT.AIRLINE_ID AIRLINE,   ");
            sb.Append("       CONTTYPE.BREAKPOINT_ID SLAB,");
            sb.Append("       (SELECT C.COMMODITY_ID");
            sb.Append("  FROM COMMODITY_MST_TBL C");
            sb.Append(" WHERE C.COMMODITY_MST_PK IN");
            sb.Append("       (SELECT *");
            sb.Append("          FROM TABLE (SELECT FN_SPLIT(TRN.COMMODITY_MST_FKS)");
            sb.Append("                        FROM BOOKING_MST_TBL B,");
            sb.Append("                             BOOKING_TRN TRN ");
            sb.Append("                       WHERE TO_CHAR(B.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("                       AND B.BOOKING_MST_PK = TRN.BOOKING_MST_FK))) COMMODITY,");
            sb.Append("       BTSF.ALL_IN_TARIFF BKG_AMNT,");
            sb.Append("       BKGOTH.FREIGHT_ELEMENT_ID OTH_FRT_ELEMENT,");
            sb.Append("       BKGOTH.CURRENCY_ID OTH_CURR,");
            sb.Append("       BKGOTH.CHARGE_BASIS,");
            sb.Append("       BKGOTH.AMOUNT OTH_AMT,");
            sb.Append("       DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') OTH_PYMT_TYPE, ");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID FRT_ELEMENT,");
            sb.Append("       BTFD.CURRENCY_ID CURR,");
            sb.Append("       BTFD.CHARGE_BASIS,");
            sb.Append("       BTFD.BASIS_RATE RATE,");
            sb.Append("       BTFD.TARIFF_RATE BKG_AMT,");
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("       OMT.AIRLINE_ID,");
            sb.Append("       BAT.VOYAGE_FLIGHT_NO FLIGHT_NO,");
            sb.Append("       TO_CHAR(BAT.ETD_DATE, DATEFORMAT) ETD_AOO,");
            sb.Append("       TO_CHAR(BAT.CUT_OFF_DATE, DATEFORMAT) CUT_OFF,");
            sb.Append("       TO_CHAR(BAT.ETA_DATE, DATEFORMAT) ETA_AOD,");
            sb.Append("       BAT.LINE_BKG_NO,");
            sb.Append("       CASE WHEN JCSET.MARKS_NUMBERS IS NOT NULL ");
            sb.Append("         OR JCSET.GOODS_DESCRIPTION IS NOT NULL THEN 'YES'");
            sb.Append("         ELSE");
            sb.Append("           'NO' END OTHER_DETAILS,");
            sb.Append("       JCSET.MARKS_NUMBERS,");
            sb.Append("       JCSET.GOODS_DESCRIPTION");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       CUSTOMS_STATUS_MST_TBL CSMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("       AIRLINE_MST_TBL OMT,");
            sb.Append("       AIRFREIGHT_SLABS_TBL CONTTYPE,");
            sb.Append("       JOB_CARD_TRN JCSET,");
            sb.Append("       (SELECT BTOTH.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               BTOTH.CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BAT,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_TRN_FK = BAT.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH,");
            sb.Append("     ");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD ");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BAT.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BAT.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BAT.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BAT.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BAT.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BAT.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BAT.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BAT.CARGO_MOVE_FK");
            sb.Append("   AND CSMT.CUSTOMS_CODE_MST_PK(+) = BAT.CUSTOMS_CODE_MST_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BAT.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BAT.PACK_TYPE_MST_FK");
            sb.Append("   AND BTSF.BOOKING_TRN_PK = BKGOTH.BOOKING_TRN_FK(+)");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("   AND OMT.AIRLINE_MST_PK(+) = BAT.CARRIER_MST_FK");
            sb.Append("   AND CONTTYPE.AIRFREIGHT_SLABS_TBL_PK(+) = BTSF.BASIS");
            sb.Append("   AND BTFD.BOOKING_TRN_FK(+) = BTSF.BOOKING_TRN_PK");
            sb.Append("   AND BAT.BOOKING_MST_PK = JCSET.BOOKING_MST_FK(+)");
            sb.Append("");

            DataSet dsBkg = new DataSet();
            dsBkg = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in dsBkg.Tables[0].Rows)
                {
                    foreach (DataColumn col in dsBkg.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return dsBkg;
        }
        public DataSet GetExportBookingAirHeaderQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT BAT.BOOKING_MST_PK,");
            sb.Append("       TO_CHAR(BAT.BOOKING_DATE, DATEFORMAT) BOOKING_DATE,");
            sb.Append("       DECODE(BAT.STATUS,");
            sb.Append("              1,");
            sb.Append("              'Provisional',");
            sb.Append("              2,");
            sb.Append("              'Confirmed',");
            sb.Append("              3,");
            sb.Append("              'Cancelled',");
            sb.Append("              4,");
            sb.Append("              'E-Booking',");
            sb.Append("              5,");
            sb.Append("              'Shipped',");
            sb.Append("              6,");
            sb.Append("              'Shipped') STATUS,");
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1, BTSF.TRANS_REF_NO) QUOTE_REF_NR,");
            sb.Append("       TO_CHAR(BAT.SHIPMENT_DATE, DATEFORMAT) SHIPMENT_DATE,");
            sb.Append("       '' MAWB_NR,");
            sb.Append("       POL.PORT_ID AOO,");
            sb.Append("       POD.PORT_ID AOD,");
            sb.Append("       SHP.CUSTOMER_ID SHIPPER,");
            sb.Append("       CONS.CUSTOMER_ID CONSIGNEE,");
            sb.Append("       BAT.CUSTOMER_REF_NO,");
            sb.Append("       BAT.CREDIT_DAYS,");
            sb.Append("       BAT.CREDIT_LIMIT,");
            sb.Append("       '" + Currency + "' CREDIT_LIMIT_CURRENCY,");
            sb.Append("       DPAT.AGENT_ID DP_AGENT,");
            sb.Append("       CBAT.AGENT_ID XBKG_AGENT,");
            sb.Append("       CLAT.AGENT_ID COLOAD_AGENT,");
            sb.Append("       CASE");
            sb.Append("         WHEN BAT.CB_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END X_BKG,");
            sb.Append("       CASE");
            sb.Append("         WHEN BAT.CL_AGENT_MST_FK IS NOT NULL THEN");
            sb.Append("          'YES'");
            sb.Append("         ELSE");
            sb.Append("          'NO'");
            sb.Append("       END CO_LOADING,");
            sb.Append("       CSMT.CUSTOMS_STATUS_CODE, ");
            sb.Append("       CMMT.CARGO_MOVE_CODE,");
            sb.Append("       CGMT.COMMODITY_GROUP_CODE COMMODITY_GROUP,");
            sb.Append("       STMT.INCO_CODE INCO_TERMS,");
            sb.Append("       DECODE(BAT.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAY_TYPE,");
            sb.Append("       CASE WHEN BAT.CARGO_TYPE=1 THEN");
            sb.Append("         'YES'");
            sb.Append("       ELSE ");
            sb.Append("         'NO'");
            sb.Append("         END KGS,");
            sb.Append("       CASE WHEN BAT.CARGO_TYPE=2 THEN");
            sb.Append("         'YES'");
            sb.Append("       ELSE ");
            sb.Append("         'NO'");
            sb.Append("         END ULD,");
            sb.Append("       PTMT.PACK_TYPE_ID PACK_TYPE,");
            sb.Append("       BAT.PACK_COUNT,");
            sb.Append("       BAT.GROSS_WEIGHT ACTUAL_WT,");
            sb.Append("       BAT.VOLUME_WEIGHT,");
            sb.Append("       BAT.CHARGEABLE_WEIGHT,");
            sb.Append("       BAT.NO_OF_BOXES ULD_CNT,");
            sb.Append("       BAT.VOLUME_IN_CBM VOLUME,");
            sb.Append("       BAT.DENSITY,");
            sb.Append("       '" + Currency + "' CURRENCY ");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       PORT_MST_TBL POL,");
            sb.Append("       PORT_MST_TBL POD,");
            sb.Append("       CUSTOMER_MST_TBL SHP,");
            sb.Append("       CUSTOMER_MST_TBL CONS,");
            sb.Append("       AGENT_MST_TBL DPAT,");
            sb.Append("       AGENT_MST_TBL CBAT,");
            sb.Append("       AGENT_MST_TBL CLAT,");
            sb.Append("       CARGO_MOVE_MST_TBL CMMT,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMT,");
            sb.Append("       CUSTOMS_STATUS_MST_TBL CSMT,");
            sb.Append("       PACK_TYPE_MST_TBL PTMT,");
            sb.Append("       COMMODITY_GROUP_MST_TBL CGMT ");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND POL.PORT_MST_PK = BAT.PORT_MST_POL_FK");
            sb.Append("   AND POD.PORT_MST_PK = BAT.PORT_MST_POD_FK");
            sb.Append("   AND SHP.CUSTOMER_MST_PK = BAT.CUST_CUSTOMER_MST_FK");
            sb.Append("   AND CONS.CUSTOMER_MST_PK(+) = BAT.CONS_CUSTOMER_MST_FK");
            sb.Append("   AND DPAT.AGENT_MST_PK(+) = BAT.DP_AGENT_MST_FK");
            sb.Append("   AND CBAT.AGENT_MST_PK(+) = BAT.CB_AGENT_MST_FK");
            sb.Append("   AND CLAT.AGENT_MST_PK(+) = BAT.CL_AGENT_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = BAT.CARGO_MOVE_FK");
            sb.Append("   AND CSMT.CUSTOMS_CODE_MST_PK(+) = BAT.CUSTOMS_CODE_MST_FK");
            sb.Append("   AND STMT.SHIPPING_TERMS_MST_PK(+) = BAT.SHIPPING_TERMS_MST_FK");
            sb.Append("   AND PTMT.PACK_TYPE_MST_PK(+) = BAT.PACK_TYPE_MST_FK");
            sb.Append("   AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("");

            //'
            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirAddressQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BAT.BOOKING_MST_PK,");
            sb.Append("       BAT.COL_ADDRESS COLLECTION_ADDRESS,");
            sb.Append("       BAT.DEL_ADDRESS DELIVERY_ADDRESS ");
            sb.Append("  FROM BOOKING_MST_TBL BAT ");
            sb.Append("   WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append(" AND (BAT.COL_ADDRESS IS NOT NULL OR BAT.DEL_ADDRESS IS NOT NULL) ");
            sb.Append(" ");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "ADDRESS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirReferenceDtlsQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BAT.BOOKING_MST_PK,BTSF.BOOKING_TRN_PK,");
            //sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Customer Contract',4,'Operator Tariff',5,'SRR',6,'Gen Tariff',7,'Manual') REFERENCE_TYPE,")
            sb.Append("       DECODE(BTSF.TRANS_REFERED_FROM, 1,'Quotation',2,'Spot Rate',3,'Cust Contract',4,'Air Tariff',5,'Gen Tariff',6,'SRR',7,'Manual') REFERENCE_TYPE,");
            sb.Append("       BTSF.TRANS_REF_NO REF_NR,");
            sb.Append("       OMT.AIRLINE_ID AIRLINE,   ");
            sb.Append("       CONTTYPE.BREAKPOINT_ID SLAB,");
            sb.Append("       BTSF.ALL_IN_TARIFF BKG_AMNT ");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       AIRLINE_MST_TBL OMT,");
            sb.Append("       AIRFREIGHT_SLABS_TBL CONTTYPE ");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND OMT.AIRLINE_MST_PK = BAT.CARRIER_MST_FK");
            sb.Append("   AND CONTTYPE.AIRFREIGHT_SLABS_TBL_PK(+) = BTSF.BASIS");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "REFERENCE_DETAILS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirCommodityQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT COMM.COMMODITY_ID,COMM.COMMODITY_NAME,TRN.BOOKING_TRN_PK FROM");
            sb.Append("  BOOKING_MST_TBL BAT,");
            sb.Append("  BOOKING_TRN TRN,");
            sb.Append("  COMMODITY_MST_TBL COMM");
            sb.Append("  WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("  AND BAT.BOOKING_MST_PK = TRN.BOOKING_MST_FK AND");
            sb.Append("  COMM.COMMODITY_MST_PK IN");
            sb.Append("       (SELECT *");
            sb.Append("          FROM TABLE (SELECT FN_SPLIT(TRN.COMMODITY_MST_FKS)");
            sb.Append("                        FROM BOOKING_MST_TBL B,");
            sb.Append("                             BOOKING_TRN TRN ");
            sb.Append("                       WHERE TO_CHAR(B.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("                       AND B.BOOKING_MST_PK = TRN.BOOKING_MST_FK))");
            sb.Append("");


            //'
            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "COMMODITY");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirOthChrgQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BTSF.BOOKING_TRN_PK,");
            sb.Append("       BKGOTH.FREIGHT_ELEMENT_ID OTH_FREIGHT_ELEMENT,");
            sb.Append("       BKGOTH.CURRENCY_ID OTH_CURRENCY,");
            sb.Append("       BKGOTH.CHARGE_BASIS,");
            sb.Append("       BKGOTH.CHARGE_BASIS RATE,");
            sb.Append("       BKGOTH.AMOUNT OTH_AMOUNT,");
            sb.Append("       DECODE(BKGOTH.FREIGHT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') OTH_PYMT_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       (SELECT BTOTH.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               BTOTH.CHARGE_BASIS,");
            sb.Append("               BTOTH.BASIS_RATE,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTOTH.AMOUNT,");
            sb.Append("               BTOTH.FREIGHT_TYPE");
            sb.Append("          FROM BOOKING_TRN_OTH_CHRG BTOTH,");
            sb.Append("               BOOKING_MST_TBL          BAT,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE BTOTH.BOOKING_TRN_FK = BAT.BOOKING_MST_PK");
            sb.Append("           AND BTOTH.FREIGHT_ELEMENT_MST_FK = FEMT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("           AND BTOTH.CURRENCY_MST_FK = CTMT.CURRENCY_MST_PK) BKGOTH ");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND BTSF.BOOKING_TRN_PK = BKGOTH.BOOKING_TRN_FK ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "OTHER_CHARGES");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirFrtElementsQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BTSF.BOOKING_TRN_PK,");
            sb.Append("       BTFD.FREIGHT_ELEMENT_ID FRT_ELEMENT,");
            sb.Append("       BTFD.CURRENCY_ID CURR,");
            sb.Append("       BTFD.CHARGE_BASIS,");
            sb.Append("       BTFD.BASIS_RATE RATE,");
            sb.Append("       BTFD.TARIFF_RATE BKG_AMT,");
            sb.Append("       DECODE(BTFD.PYMT_TYPE, 1, 'Prepaid', 2, 'Collect', 3, 'Foreign') PAYMENT_TYPE ");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       (SELECT BTFD.BOOKING_TRN_FK,");
            sb.Append("               FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("               DECODE(FEMT.CHARGE_BASIS,");
            sb.Append("                      1,");
            sb.Append("                      '%',");
            sb.Append("                      2,");
            sb.Append("                      'Flat',");
            sb.Append("                      3,");
            sb.Append("                      'Kgs',");
            sb.Append("                      4,");
            sb.Append("                      'Unit') CHARGE_BASIS,");
            sb.Append("               CTMT.CURRENCY_ID,");
            sb.Append("               BTFD.TARIFF_RATE,");
            sb.Append("               BTFD.MIN_BASIS_RATE BASIS_RATE,");
            sb.Append("               BTFD.PYMT_TYPE");
            sb.Append("          FROM BOOKING_TRN_FRT_DTLS BTFD,");
            sb.Append("               FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("               CURRENCY_TYPE_MST_TBL    CTMT");
            sb.Append("         WHERE FEMT.FREIGHT_ELEMENT_MST_PK = BTFD.FREIGHT_ELEMENT_MST_FK");
            sb.Append("           AND CTMT.CURRENCY_MST_PK = BTFD.CURRENCY_MST_FK) BTFD");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND BTFD.BOOKING_TRN_FK = BTSF.BOOKING_TRN_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FREIGHT_ELEMENTS");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataSet GetExportBookingAirFooterQuery(string BkgPks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);
            sb.Append("SELECT BAT.BOOKING_MST_PK,");
            sb.Append("       OMT.AIRLINE_ID,");
            sb.Append("       BAT.VOYAGE_FLIGHT_NO FLIGHT_NO,");
            sb.Append("       TO_CHAR(BAT.ETD_DATE, DATEFORMAT) ETD_AOO,");
            sb.Append("       TO_CHAR(BAT.CUT_OFF_DATE, DATEFORMAT) CUT_OFF,");
            sb.Append("       TO_CHAR(BAT.ETA_DATE, DATEFORMAT) ETA_AOD,");
            sb.Append("       BAT.LINE_BKG_NO ");
            sb.Append("  FROM BOOKING_MST_TBL BAT,");
            sb.Append("       BOOKING_TRN BTSF,");
            sb.Append("       AIRLINE_MST_TBL OMT ");
            sb.Append(" WHERE TO_CHAR(BAT.BOOKING_MST_PK) IN (" + BkgPks + ")");
            sb.Append("   AND BAT.BOOKING_MST_PK = BTSF.BOOKING_MST_FK");
            sb.Append("   AND OMT.AIRLINE_MST_PK(+) = BAT.CARRIER_MST_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FOOTER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return MainDS;
        }
        public DataTable InvoiceAmountSummary(string InvPks)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT DISTINCT HDR.CONSOL_INVOICE_PK, ");
            sb.Append("                NVL(HDR.REMARKS,' ') REMARKS, ");
            sb.Append("                (SELECT SUM(NVL(TRN1.AMT_IN_INV_CURR,0))");
            sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1");
            sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS INV_TOTAL,");
            sb.Append("                (SELECT SUM(NVL(TRN1.TAX_AMT,0))");
            sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1");
            sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS VAT_TOTAL,");
            sb.Append("                (SELECT SUM(NVL(TRN1.TOT_AMT,0))");
            sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1");
            sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS TOTAL,");
            sb.Append("                NVL(HDR.DISCOUNT_AMT,0) DISCOUNT_AMT, ");
            sb.Append("                (SELECT SUM(NVL(TRN1.TOT_AMT,0))");
            sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1");
            sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS NET_REC");
            sb.Append("  FROM CONSOL_INVOICE_TBL      HDR,");
            sb.Append("       CURRENCY_TYPE_MST_TBL   CUMT ");
            sb.Append(" WHERE HDR.CURRENCY_MST_FK = CUMT.CURRENCY_MST_PK");
            sb.Append("   AND HDR.CONSOL_INVOICE_PK IN (" + InvPks + ")");
            //sb.Append(" UNION ")
            //sb.Append("SELECT HDR.CONSOL_INVOICE_PK,")
            //sb.Append("       NVL(HDR.REMARKS,' ') REMARKS, ")
            //sb.Append("       (SELECT SUM(NVL(TRN1.AMT_IN_INV_CURR,0))")
            //sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1")
            //sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS INV_TOTAL,")
            //sb.Append("       (SELECT SUM(NVL(TRN1.TAX_AMT,0))")
            //sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1")
            //sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS VAT_TOTAL,")
            //sb.Append("       (SELECT SUM(NVL(TRN1.TOT_AMT,0))")
            //sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1")
            //sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS TOTAL,")
            //sb.Append("       NVL(HDR.DISCOUNT_AMT,0) DISCOUNT_AMT, ")
            //sb.Append("                (SELECT SUM(NVL(TRN1.TOT_AMT,0))")
            //sb.Append("                   FROM CONSOL_INVOICE_TRN_TBL TRN1")
            //sb.Append("                   WHERE TRN1.CONSOL_INVOICE_FK = HDR.CONSOL_INVOICE_PK) AS NET_REC")
            //sb.Append("  FROM CONSOL_INVOICE_TBL       HDR,")
            //sb.Append("       CURRENCY_TYPE_MST_TBL    CUMT ")
            //sb.Append(" WHERE HDR.CURRENCY_MST_FK = CUMT.CURRENCY_MST_PK")
            //sb.Append("   AND HDR.CONSOL_INVOICE_PK IN (" & InvPks & ")")
            DataTable FooterDetails = new DataTable();
            FooterDetails = objWF.GetDataTable(sb.ToString());
            FooterDetails.Columns["CONSOL_INVOICE_PK"].ColumnMapping = MappingType.Hidden;
            FooterDetails.AcceptChanges();
            return FooterDetails;
        }
        #endregion

        #endregion
        #region "Generate Cargo Manifest"
        public DataSet GenerateCargoManifest(string Pks, int Biz, string CargoType = "", string Currency = "", int inc = 0, string ExportType = "", string DocType = "")
        {
            //Air
            if (Biz == 1)
            {
                //XML
                if (Convert.ToInt32(ExportType) == 2)
                {
                    if (inc == 1)
                    {
                        ds = GetExportAirCargoManifestMBLDetail(Pks);
                        ds = GetExportAirCargoManifestMBLHeader(Pks);
                    }
                    else if (inc == 2)
                    {
                        ds = GetExportAirCargoManifestHBLDetail(Pks);
                    }
                    else if (inc == 3)
                    {
                        ds = GetExportAirCargoManifestShipConsDetail(Pks);
                    }
                    else if (inc == 4)
                    {
                        ds = GetExportAirCargoManifestContCargoDetail(Pks);
                    }
                    else if (inc == 5)
                    {
                        ds = GetExportAirCargoManifestFreightDetail(Pks);
                    }
                }
                else
                {
                    if (Convert.ToInt32(DocType )== 3)
                    {
                        ds = GetExportCargoManifestAirQuery(Pks, Currency);
                    }
                    else if (Convert.ToInt32(DocType) == 4)
                    {
                        ds = GetExportFreightManifestAirQuery(Pks, Currency);
                    }
                }
                //Sea
            }
            else
            {
                //XML
                if (Convert.ToInt32(ExportType) == 2)
                {
                    if (inc == 1)
                    {
                        ds = GetExportSeaCargoManifestMBLDetail(Pks);
                        ds = GetExportSeaCargoManifestMBLHeader(Pks);
                    }
                    else if (inc == 2)
                    {
                        ds = GetExportSeaCargoManifestHBLDetail(Pks);
                    }
                    else if (inc == 3)
                    {
                        ds = GetExportSeaCargoManifestShipConsDetail(Pks);
                    }
                    else if (inc == 4)
                    {
                        ds = GetExportSeaCargoManifestContCargoDetail(Pks);
                    }
                    else if (inc == 5)
                    {
                        ds = GetExportSeaCargoManifestFreightDetail(Pks);
                    }
                }
                else
                {
                    if (Convert.ToInt32(DocType) == 3)
                    {
                        ds = GetExportCargoManifestSeaQuery(Pks, Currency);
                    }
                    else if (Convert.ToInt32(DocType) == 4)
                    {
                        ds = GetExportFreightManifestSeaQuery(Pks, Currency);
                    }
                }
            }
            try
            {
                return ds;
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }

        #region " CARGO/FREIGHT MANIFEST SEA "
        public DataSet GetExportCargoManifestSeaQuery(string Pks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT 'SEA' BIZ_TYPE,");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP POST_CODE,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID,");
            //sb.Append("                ------LOCATION----")
            sb.Append("                'CM' MANIFEST_TYPE,");
            //sb.Append("                ----AGENT--------")
            sb.Append("                AMT.AGENT_NAME POD_AGENT_NAME,");
            sb.Append("                ACD.ADM_ADDRESS_1 POD_AGENT_ADDRESS1,");
            sb.Append("                ACD.ADM_ADDRESS_2 POD_AGENT_ADDRESS2,");
            sb.Append("                ACD.ADM_ADDRESS_3 POD_AGENT_ADDRESS3,");
            sb.Append("                ACD.COR_CITY POD_CITY,");
            sb.Append("                ACD.ADM_ZIP_CODE POD_POST_CODE,");
            //sb.Append("                ACD.ADM_ZIP_CODE,")
            sb.Append("                ACMT.COUNTRY_NAME POD_COUNTRY_NAME,");
            //sb.Append("                -----AGENT------")
            sb.Append("                OMT.OPERATOR_ID CARRIER,");
            sb.Append("                VVT.VESSEL_NAME,");
            sb.Append("                VOY.VOYAGE,");
            sb.Append("                MBL.MBL_REF_NO,");
            sb.Append("                JSE.JOBCARD_REF_NO,");
            sb.Append("                DECODE(MBL.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            sb.Append("                POLMST.PORT_ID POL,");
            sb.Append("                PODMST.PORT_ID POD,");
            sb.Append("                CMMT.CARGO_MOVE_CODE MOVE_CODE,");
            sb.Append("                TO_CHAR(MBL.MBL_DATE, DATEFORMAT) MBL_DATE,");
            sb.Append("                DECODE(MBL.PYMT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                HBL.HBL_REF_NO,");
            //sb.Append("                STMST.INCO_CODE TERMS,")
            //sb.Append("                -----SHIPPER CONSIGNEE---")
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            //sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,")
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX,");
            //sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,")
            //sb.Append("                ----")
            sb.Append("                PFD.PORT_NAME PFD,");
            sb.Append("                JTSEC.SEAL_NUMBER,");
            sb.Append("                JTSEC.CONTAINER_NUMBER,");
            sb.Append("                JSE.MARKS_NUMBERS MARKS_NUMBER,");
            sb.Append("                PY.PACK_TYPE_DESC PACK_TYPE,");
            sb.Append("                JTSEC.PACK_COUNT COUNT,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM VOLUME,");
            sb.Append("                JSE.GOODS_DESCRIPTION GOODS_DESC,");
            sb.Append("                ");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                IPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("                OPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("                JTSESR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTSESR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTSESR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTSESR.MIN_TEMP,");
            sb.Append("                DECODE(JTSESR.MIN_TEMP_UOM,0,'C',1,'F') MINCF,");
            sb.Append("                JTSESR.MAX_TEMP,");
            sb.Append("                DECODE(JTSESR.MAX_TEMP_UOM,0,'C',1,'F') MAXCF,");
            sb.Append("                JTSESR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTSESR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTSESR.IS_PERSHIABLE_GOODS,1,'YES',0,'NO') ISPERISHABLE");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       JOB_TRN_SPL_REQ JTSESR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       OPERATOR_MST_TBL       OMT,");
            sb.Append("       VESSEL_VOYAGE_TBL      VVT,");
            sb.Append("       VESSEL_VOYAGE_TRN      VOY,");
            //sb.Append("       ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.JOB_CARD_TRN_PK = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PFD_FK = PFD.PORT_MST_PK(+)");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPING_TERMS_MST_FK = STMST.SHIPPING_TERMS_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("   AND MBL.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = MBL.OPERATOR_MST_FK");
            sb.Append("   AND VOY.VOYAGE_TRN_PK(+)  = MBL.VOYAGE_TRN_FK");
            sb.Append("   AND VVT.VESSEL_VOYAGE_TBL_PK(+) = VOY.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MBL.CARGO_MOVE_FK");
            //sb.Append("   ---")
            sb.Append("   AND JTSEC.JOB_TRN_CONT_PK = JTSESR.JOB_TRN_CONT_FK(+)");
            sb.Append("   AND IPACK.PACK_TYPE_MST_PK(+)  = JTSESR.INNER_PACK_TYPE_MST_FK ");
            sb.Append("   AND OPACK.PACK_TYPE_MST_PK(+) = JTSESR.OUTER_PACK_TYPE_MST_FK");
            sb.Append("   ORDER BY TO_CHAR(MBL.MBL_DATE, DATEFORMAT) DESC ");
            sb.Append("");

            DataSet ds = new DataSet();
            ds = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in ds.Tables[0].Rows)
                {
                    foreach (DataColumn col in ds.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return ds;
        }
        public DataSet GetExportFreightManifestSeaQuery(string Pks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT ");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP POST_CODE,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID,");
            //sb.Append("                ------LOCATION----")
            sb.Append("                'CM' MANIFEST_TYPE,");
            sb.Append("                OMT.OPERATOR_ID CARRIER,");
            sb.Append("                VVT.VESSEL_NAME,");
            sb.Append("                VOY.VOYAGE,");
            //--Nationality of ship
            //--POR
            sb.Append("                POLMST.PORT_ID POL,");
            sb.Append("                PODMST.PORT_ID POD,");
            sb.Append("                PFD.PORT_NAME PFD,");
            //--Sail Dt
            sb.Append("                MBL.MBL_REF_NO,");
            sb.Append("                TO_CHAR(MBL.MBL_DATE, DATEFORMAT) MBL_DATE,");
            sb.Append("                HBL.HBL_REF_NO,");
            sb.Append("                TO_CHAR(HBL.HBL_DATE, DATEFORMAT) HBL_DATE,");
            sb.Append("                DECODE(MBL.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            //sb.Append("                -----SHIPPER CONSIGNEE---")
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,");
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX,");
            sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,");
            //sb.Append("                ----")
            sb.Append("                JSE.MARKS_NUMBERS MARKS_NUMBER,");
            sb.Append("                JTSEC.PACK_COUNT NO_OF_PACKAGES,");
            sb.Append("                PY.PACK_TYPE_DESC PACK_TYPE,");
            sb.Append("                JTSEC.CONTAINER_NUMBER,");
            sb.Append("                JTSEC.SEAL_NUMBER,");
            sb.Append("                JSE.GOODS_DESCRIPTION GOODS_DESC,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM VOLUME,");
            //--Clause
            sb.Append("                ");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                IPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("                OPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("                JTSESR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTSESR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTSESR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTSESR.MIN_TEMP,");
            sb.Append("                DECODE(JTSESR.MIN_TEMP_UOM,0,'C',1,'F') MINCF,");
            sb.Append("                JTSESR.MAX_TEMP,");
            sb.Append("                DECODE(JTSESR.MAX_TEMP_UOM,0,'C',1,'F') MAXCF,");
            sb.Append("                JTSESR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTSESR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTSESR.IS_PERSHIABLE_GOODS,1,'YES',0,'NO') ISPERISHABLE,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_ID FREIGHT_TERMS,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_NAME FREIGHT_ELEMENT,");
            sb.Append("                DECODE(JTSEF.FREIGHT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                JTSEF.FREIGHT_AMT,");
            sb.Append("                CURR.CURRENCY_ID CURRENCY,");
            sb.Append("                ");
            sb.Append("                JTSEC.PACK_COUNT MANIFEST_PKG,");
            sb.Append("                JTSEC.GROSS_WEIGHT MANIFEST_WT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM MANIFEST_CBM,");
            sb.Append("                ");
            sb.Append("                JTSEC.PACK_COUNT LOADED_PKG,");
            sb.Append("                JTSEC.GROSS_WEIGHT LOADED_WT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM LOADED_CBM");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       JOB_TRN_SPL_REQ JTSESR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       OPERATOR_MST_TBL       OMT,");
            sb.Append("       VESSEL_VOYAGE_TBL      VVT,");
            sb.Append("       VESSEL_VOYAGE_TRN      VOY,");
            //sb.Append("       ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK,");
            //sb.Append("       --------")
            sb.Append("       JOB_TRN_FD    JTSEF,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("       CURRENCY_TYPE_MST_TBL    CURR");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.JOB_CARD_TRN_PK = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PFD_FK = PFD.PORT_MST_PK(+)");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPING_TERMS_MST_FK = STMST.SHIPPING_TERMS_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("   AND MBL.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = MBL.OPERATOR_MST_FK");
            sb.Append("   AND VOY.VOYAGE_TRN_PK(+)  = MBL.VOYAGE_TRN_FK");
            sb.Append("   AND VVT.VESSEL_VOYAGE_TBL_PK(+) = VOY.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MBL.CARGO_MOVE_FK");
            //sb.Append("   ---")
            sb.Append("   AND JTSEC.JOB_TRN_CONT_PK = JTSESR.JOB_TRN_CONT_FK(+)");
            sb.Append("   AND IPACK.PACK_TYPE_MST_PK(+)  = JTSESR.INNER_PACK_TYPE_MST_FK ");
            sb.Append("   AND OPACK.PACK_TYPE_MST_PK(+) = JTSESR.OUTER_PACK_TYPE_MST_FK");
            //sb.Append("   ---------")
            sb.Append("   AND JSE.JOB_CARD_TRN_PK  = JTSEF.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND FEMT.FREIGHT_ELEMENT_MST_PK(+) = JTSEF.FREIGHT_ELEMENT_MST_FK");
            sb.Append("   AND CURR.CURRENCY_MST_PK = JTSEF.CURRENCY_MST_FK");
            sb.Append("   ORDER BY TO_CHAR(MBL.MBL_DATE, DATEFORMAT) DESC ");
            sb.Append("");


            DataSet ds = new DataSet();
            ds = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in ds.Tables[0].Rows)
                {
                    foreach (DataColumn col in ds.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return ds;
        }
        public DataSet GetExportSeaCargoManifestMBLDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT MBL.MBL_EXP_TBL_PK ");
            sb.Append(" FROM MBL_EXP_TBL  MBL ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "MBL_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportSeaCargoManifestMBLHeader(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MBL.MBL_EXP_TBL_PK,'SEA' BIZ_TYPE,");
            sb.Append("                'CM' MANIFEST_TYPE,");
            //sb.Append("                ----AGENT--------")
            sb.Append("                AMT.AGENT_NAME POD_AGENT_NAME,");
            sb.Append("                ACD.ADM_ADDRESS_1 POD_AGENT_ADDRESS1,");
            sb.Append("                ACD.ADM_ADDRESS_2 POD_AGENT_ADDRESS2,");
            sb.Append("                ACD.ADM_ADDRESS_3 POD_AGENT_ADDRESS3,");
            sb.Append("                ACD.COR_CITY POD_CITY,");
            sb.Append("                ACD.ADM_ZIP_CODE POD_POST_CODE,");
            sb.Append("                ACMT.COUNTRY_NAME POD_COUNTRY_NAME,");
            //sb.Append("                -----AGENT------")
            sb.Append("                OMT.OPERATOR_ID CARRIER,");
            sb.Append("                VVT.VESSEL_NAME,");
            sb.Append("                VOY.VOYAGE,");
            sb.Append("                MBL.MBL_REF_NO,");
            sb.Append("                JSE.JOBCARD_REF_NO,");
            sb.Append("                DECODE(MBL.CARGO_TYPE,1,'FCL',2,'LCL',4,'BBC') CARGO_TYPE,");
            sb.Append("                POLMST.PORT_ID POL,");
            sb.Append("                PODMST.PORT_ID POD,");
            sb.Append("                PFD.PORT_NAME PFD,");
            sb.Append("                CMMT.CARGO_MOVE_CODE MOVE_CODE,");
            sb.Append("                TO_CHAR(MBL.MBL_DATE, DATEFORMAT) MBL_DATE,");
            sb.Append("                DECODE(MBL.PYMT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                HBL.HBL_REF_NO ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       OPERATOR_MST_TBL       OMT,");
            sb.Append("       VESSEL_VOYAGE_TBL      VVT,");
            sb.Append("       VESSEL_VOYAGE_TRN      VOY ");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PFD_FK = PFD.PORT_MST_PK(+)");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND MBL.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND OMT.OPERATOR_MST_PK = MBL.OPERATOR_MST_FK");
            sb.Append("   AND VOY.VOYAGE_TRN_PK(+)  = MBL.VOYAGE_TRN_FK");
            sb.Append("   AND VVT.VESSEL_VOYAGE_TBL_PK(+) = VOY.VESSEL_VOYAGE_TBL_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MBL.CARGO_MOVE_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "MBL_HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportSeaCargoManifestHBLDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT MBL.MBL_EXP_TBL_PK,HBL.HBL_EXP_TBL_PK,HBL.HBL_REF_NO");
            sb.Append(" FROM MBL_EXP_TBL  MBL,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HBL_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportSeaCargoManifestShipConsDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MBL.MBL_EXP_TBL_PK,HBL.HBL_EXP_TBL_PK,");
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            //sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,")
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX ");
            //sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,")
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT ");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK ");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "SHIPPER_CONSIGNEE_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportSeaCargoManifestContCargoDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MBL.MBL_EXP_TBL_PK,HBL.HBL_EXP_TBL_PK,");
            sb.Append("                JTSEC.CONTAINER_NUMBER,");
            sb.Append("                JTSEC.SEAL_NUMBER,");
            sb.Append("                JSE.MARKS_NUMBERS MARKS_NUMBER,");
            sb.Append("                PY.PACK_TYPE_DESC PACK_TYPE,");
            sb.Append("                JTSEC.PACK_COUNT COUNT,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM VOLUME,");
            sb.Append("                JSE.GOODS_DESCRIPTION GOODS_DESC,");
            sb.Append("                ");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                IPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("                OPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("                JTSESR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTSESR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTSESR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTSESR.MIN_TEMP,");
            sb.Append("                DECODE(JTSESR.MIN_TEMP_UOM,0,'C',1,'F') MINCF,");
            sb.Append("                JTSESR.MAX_TEMP,");
            sb.Append("                DECODE(JTSESR.MAX_TEMP_UOM,0,'C',1,'F') MAXCF,");
            sb.Append("                JTSESR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTSESR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTSESR.IS_PERSHIABLE_GOODS,1,'YES',0,'NO') ISPERISHABLE");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       JOB_TRN_SPL_REQ JTSESR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       USER_MST_TBL           UMT,");
            //sb.Append("       ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.JOB_CARD_TRN_PK = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK ");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            //sb.Append("   ---")
            sb.Append("   AND JTSEC.JOB_TRN_CONT_PK = JTSESR.JOB_TRN_CONT_FK(+)");
            sb.Append("   AND IPACK.PACK_TYPE_MST_PK(+)  = JTSESR.INNER_PACK_TYPE_MST_FK ");
            sb.Append("   AND OPACK.PACK_TYPE_MST_PK(+) = JTSESR.OUTER_PACK_TYPE_MST_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CONTAINER_CARGO_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportSeaCargoManifestFreightDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MBL.MBL_EXP_TBL_PK,HBL.HBL_EXP_TBL_PK,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_NAME,");
            sb.Append("                DECODE(JTSEF.FREIGHT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                JTSEF.FREIGHT_AMT,");
            sb.Append("                CURR.CURRENCY_ID CURRENCY ");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       HBL_EXP_TBL            HBL,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       JOB_TRN_FD    JTSEF,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("       CURRENCY_TYPE_MST_TBL    CURR ");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MBL.MBL_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HBL.HBL_EXP_TBL_PK ");
            sb.Append("   AND JSE.JOB_CARD_TRN_PK  = JTSEF.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND FEMT.FREIGHT_ELEMENT_MST_PK = JTSEF.FREIGHT_ELEMENT_MST_FK");
            sb.Append("   AND CURR.CURRENCY_MST_PK = JTSEF.CURRENCY_MST_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FREIGHT_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        #endregion

        #region " CARGO/FREIGHT MANIFEST AIR "
        public DataSet GetExportCargoManifestAirQuery(string Pks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT 'AIR' BIZ_TYPE,");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID,");
            //sb.Append("                ------LOCATION----")
            sb.Append("                'CM' MANIFEST_TYPE,");
            //sb.Append("                ----AGENT--------")
            sb.Append("                AMT.AGENT_NAME POD_AGENT_NAME,");
            sb.Append("                ACD.ADM_ADDRESS_1 POD_AGENT_ADDRESS1,");
            sb.Append("                ACD.ADM_ADDRESS_2 POD_AGENT_ADDRESS2,");
            sb.Append("                ACD.ADM_ADDRESS_3 POD_AGENT_ADDRESS3,");
            sb.Append("                ACD.COR_CITY POD_CITY,");
            sb.Append("                ACD.ADM_ZIP_CODE POD_POST_CODE,");
            //sb.Append("                ACD.ADM_ZIP_CODE,")
            sb.Append("                ACMT.COUNTRY_NAME POD_COUNTRY_NAME,");
            //sb.Append("                -----AGENT------")
            sb.Append("                AIRMT.AIRLINE_ID AIRLINE,");
            sb.Append("                AIRMT.AIRLINE_NAME,");
            sb.Append("                JSE.VOYAGE_FLIGHT_NO FLIGHT_NO,");
            sb.Append("                MAWB.MAWB_REF_NO,");
            sb.Append("                JSE.JOBCARD_REF_NO,");
            //sb.Append("                '' CARGO_TYPE,")
            sb.Append("                POLMST.PORT_ID AOO,");
            sb.Append("                PODMST.PORT_ID AOD,");
            sb.Append("                CMMT.CARGO_MOVE_CODE MOVE_CODE,");
            //sb.Append("                STMST.INCO_CODE TERMS,")
            sb.Append("                TO_CHAR(MAWB.MAWB_DATE, DATEFORMAT) MAWB_DATE,");
            sb.Append("                DECODE(MAWB.PYMT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                HAWB.HAWB_REF_NO,");
            //sb.Append("                -----SHIPPER CONSIGNEE---")
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            //sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,")
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX,");
            //sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,")
            //sb.Append("                ----")
            sb.Append("                DELPMST.PLACE_NAME PFD,");
            //sb.Append("                '' SEAL_NUMBER,")
            //sb.Append("                '' CONTAINER_NUMBER,")
            sb.Append("                JSE.MARKS_NUMBERS MARKS_NUMBER,");
            sb.Append("                PY.PACK_TYPE_DESC PACK_TYPE,");
            sb.Append("                JTSEC.PACK_COUNT COUNT,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM VOLUME,");
            sb.Append("                JSE.GOODS_DESCRIPTION GOODS_DESC,");
            sb.Append("                ");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                JTAHSR.HAZ_OUTERPACK_TYPE,");
            sb.Append("                JTAHSR.HAZ_INNERPACK_TYPE,");
            sb.Append("                JTAHSR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTAHSR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTAHSR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTARSR.MIN_TEMP,");
            sb.Append("                DECODE(JTARSR.MIN_TEMP_UOM, 0, 'C', 1, 'F') MINCF,");
            sb.Append("                JTARSR.MAX_TEMP,");
            sb.Append("                DECODE(JTARSR.MAX_TEMP_UOM, 0, 'C', 1, 'F') MAXCF,");
            sb.Append("                JTAHSR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTARSR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTARSR.IS_PERISHABLE_GOODS, 1, 'YES', 0, 'NO') ISPERISHABLE");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM  MAWB_EXP_TBL            MAWB,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HAWB_EXP_TBL            HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               OPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("               IPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("               JTAHSR.IMDG_CLASS_CODE,");
            sb.Append("               JTAHSR.UN_NO,");
            sb.Append("               JTAHSR.FLASH_PNT_TEMP,");
            sb.Append("               JTAHSR.EMS_NUMBER ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTAHSR,");
            sb.Append("             BOOKING_TRN BT,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("               PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("               PACK_TYPE_MST_TBL     OPACK");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'HAZARDOUS' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTAHSR.BOOKING_TRN_FK");
            sb.Append("           AND IPACK.PACK_TYPE_MST_PK(+) = JTAHSR.INNER_PACK_TYPE_MST_FK");
            sb.Append("           AND OPACK.PACK_TYPE_MST_PK(+) = JTAHSR.OUTER_PACK_TYPE_MST_FK) JTAHSR,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               JTARSR.MIN_TEMP,");
            sb.Append("               JTARSR.MAX_TEMP,");
            sb.Append("               JTARSR.MIN_TEMP_UOM,");
            sb.Append("               JTARSR.MAX_TEMP_UOM,");
            sb.Append("               JTARSR.HUMIDITY_FACTOR,");
            sb.Append("               JTARSR.IS_PERISHABLE_GOODS ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTARSR,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               BOOKING_TRN BT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT ");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'REEFER' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTARSR.BOOKING_TRN_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK) JTARSR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       PLACE_MST_TBL          DELPMST,");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       AIRLINE_MST_TBL       AIRMT, ");
            //sb.Append("        ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK ");
            //sb.Append("       --------")
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.Job_Card_Trn_Pk = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JTAHSR.BOOKING_MST_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JTARSR.BOOKING_MST_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPING_TERMS_MST_FK = STMST.SHIPPING_TERMS_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("   AND MAWB.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND AIRMT.AIRLINE_MST_PK = MAWB.AIRLINE_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MAWB.CARGO_MOVE_FK");
            //sb.Append("   ---")
            sb.Append("   AND BST.DEL_PLACE_MST_FK = DELPMST.PLACE_PK(+) ");
            //'sb.Append("   ---------")
            sb.Append("   ORDER BY TO_CHAR(MAWB.MAWB_DATE, DATEFORMAT) DESC ");
            sb.Append("");


            DataSet dsBkg = new DataSet();
            dsBkg = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in dsBkg.Tables[0].Rows)
                {
                    foreach (DataColumn col in dsBkg.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return dsBkg;
        }
        public DataSet GetExportFreightManifestAirQuery(string Pks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT ");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID,");
            //sb.Append("                ------LOCATION----")
            sb.Append("                'CM' MANIFEST_TYPE,");
            sb.Append("                AIRMT.AIRLINE_ID AIRLINE,");
            //sb.Append("                AIRMT.AIRLINE_NAME,")
            sb.Append("                JSE.VOYAGE_FLIGHT_NO FLIGHT_NO,");
            sb.Append("                POLMST.PORT_ID AOO,");
            sb.Append("                PODMST.PORT_ID AOD,");
            sb.Append("                TO_CHAR(MAWB.MAWB_DATE, DATEFORMAT) MAWB_DATE,");
            //--Consolidator
            //--DeConsolidator
            //--AWB Type
            //--AWBN
            sb.Append("                JTSEC.PACK_COUNT NO_OF_PIECES,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            //--No oF HBL's
            //sb.Append("                -----SHIPPER CONSIGNEE---")
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,");
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX,");
            sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,");
            //--Nature Of Goods
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                JTAHSR.HAZ_OUTERPACK_TYPE,");
            sb.Append("                JTAHSR.HAZ_INNERPACK_TYPE,");
            sb.Append("                JTAHSR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTAHSR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTAHSR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTARSR.MIN_TEMP,");
            sb.Append("                DECODE(JTARSR.MIN_TEMP_UOM, 0, 'C', 1, 'F') MINCF,");
            sb.Append("                JTARSR.MAX_TEMP,");
            sb.Append("                DECODE(JTARSR.MAX_TEMP_UOM, 0, 'C', 1, 'F') MAXCF,");
            sb.Append("                JTAHSR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTARSR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTARSR.IS_PERISHABLE_GOODS, 1, 'YES', 0, 'NO') ISPERISHABLE,");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                ");
            sb.Append("                FEMT.FREIGHT_ELEMENT_ID FREIGHT_TERMS,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_NAME FREIGHT_ELEMENT,");
            sb.Append("                DECODE(JTSEF.FREIGHT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                JTSEF.FREIGHT_AMT,");
            sb.Append("                CURR.CURRENCY_ID CURRENCY");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM  MAWB_EXP_TBL            MAWB,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HAWB_EXP_TBL            HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       SHIPPING_TERMS_MST_TBL STMST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               OPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("               IPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("               JTAHSR.IMDG_CLASS_CODE,");
            sb.Append("               JTAHSR.UN_NO,");
            sb.Append("               JTAHSR.FLASH_PNT_TEMP,");
            sb.Append("               JTAHSR.EMS_NUMBER ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTAHSR,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               BOOKING_TRN BT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("               PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("               PACK_TYPE_MST_TBL     OPACK");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'HAZARDOUS' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTAHSR.BOOKING_TRN_FK");
            sb.Append("           AND IPACK.PACK_TYPE_MST_PK(+) = JTAHSR.INNER_PACK_TYPE_MST_FK");
            sb.Append("           AND OPACK.PACK_TYPE_MST_PK(+) = JTAHSR.OUTER_PACK_TYPE_MST_FK) JTAHSR,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               JTARSR.MIN_TEMP,");
            sb.Append("               JTARSR.MAX_TEMP,");
            sb.Append("               JTARSR.MIN_TEMP_UOM,");
            sb.Append("               JTARSR.MAX_TEMP_UOM,");
            sb.Append("               JTARSR.HUMIDITY_FACTOR,");
            sb.Append("               JTARSR.IS_PERISHABLE_GOODS ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTARSR,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               BOOKING_TRN BT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT ");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'REEFER' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTARSR.BOOKING_TRN_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK) JTARSR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       PLACE_MST_TBL          DELPMST,");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       AIRLINE_MST_TBL       AIRMT, ");
            //sb.Append("        ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK,");
            //sb.Append("       --------")
            sb.Append("       JOB_TRN_FD    JTSEF,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("       CURRENCY_TYPE_MST_TBL    CURR");
            //sb.Append("       --------")
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.Job_Card_Trn_Pk = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JTAHSR.BOOKING_MST_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JTARSR.BOOKING_MST_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPING_TERMS_MST_FK = STMST.SHIPPING_TERMS_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("   AND MAWB.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND AIRMT.AIRLINE_MST_PK = MAWB.AIRLINE_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MAWB.CARGO_MOVE_FK");
            //sb.Append("   ---")
            sb.Append("   AND BST.DEL_PLACE_MST_FK = DELPMST.PLACE_PK(+) ");
            //sb.Append("   ---------")
            sb.Append("   AND JSE.Job_Card_Trn_Pk  = JTSEF.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND FEMT.FREIGHT_ELEMENT_MST_PK(+) = JTSEF.FREIGHT_ELEMENT_MST_FK");
            sb.Append("   AND CURR.CURRENCY_MST_PK = JTSEF.CURRENCY_MST_FK");
            //'sb.Append("   ---------")
            sb.Append("   ORDER BY TO_CHAR(MAWB.MAWB_DATE, DATEFORMAT) DESC ");
            sb.Append("");

            DataSet dsBkg = new DataSet();
            dsBkg = objWF.GetDataSet(sb.ToString());

            try
            {
                foreach (DataRow _row in dsBkg.Tables[0].Rows)
                {
                    foreach (DataColumn col in dsBkg.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return dsBkg;
        }
        public DataSet GetExportAirCargoManifestHeader()
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT ");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID ");
            sb.Append(" FROM  MAWB_EXP_TBL           MAWB,");
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY ");
            sb.Append("       ");
            //sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" & Pks & ")")
            sb.Append("   WHERE UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestMBLDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            ///'
            sb.Append("SELECT MAWB.MAWB_EXP_TBL_PK ");
            sb.Append(" FROM  MAWB_EXP_TBL MAWB ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("");
            ///'

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "MBL_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestMBLHeader(string Pks = "", string Currency = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MAWB.MAWB_EXP_TBL_PK,'AIR' BIZ_TYPE,");
            sb.Append("                'CM' MANIFEST_TYPE,");
            //sb.Append("                ----AGENT--------")
            sb.Append("                AMT.AGENT_NAME POD_AGENT_NAME,");
            sb.Append("                ACD.ADM_ADDRESS_1 POD_AGENT_ADDRESS1,");
            sb.Append("                ACD.ADM_ADDRESS_2 POD_AGENT_ADDRESS2,");
            sb.Append("                ACD.ADM_ADDRESS_3 POD_AGENT_ADDRESS3,");
            sb.Append("                ACD.COR_CITY POD_CITY,");
            sb.Append("                ACD.ADM_ZIP_CODE POD_POST_CODE,");
            sb.Append("                ACMT.COUNTRY_NAME POD_COUNTRY_NAME,");
            //sb.Append("                -----AGENT------")
            sb.Append("                AIRMT.AIRLINE_ID AIRLINE,");
            sb.Append("                AIRMT.AIRLINE_NAME,");
            sb.Append("                JSE.VOYAGE_FLIGHT_NO FLIGHT_NO,");
            sb.Append("                MAWB.MAWB_REF_NO,");
            sb.Append("                JSE.JOBCARD_REF_NO,");
            sb.Append("                POLMST.PORT_ID AOO,");
            sb.Append("                PODMST.PORT_ID AOD,");
            sb.Append("                DELPMST.PLACE_NAME PFD,");
            sb.Append("                CMMT.CARGO_MOVE_CODE MOVE_CODE,");
            sb.Append("                TO_CHAR(MAWB.MAWB_DATE, DATEFORMAT) MAWB_DATE,");
            sb.Append("                DECODE(MAWB.PYMT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                HAWB.HAWB_REF_NO ");
            sb.Append(" FROM  MAWB_EXP_TBL            MAWB,");
            sb.Append("       PORT_MST_TBL           POLMST,");
            sb.Append("       PORT_MST_TBL           PODMST,");
            sb.Append("       HAWB_EXP_TBL            HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       PORT_MST_TBL           PFD,");
            sb.Append("       CARGO_MOVE_MST_TBL     CMMT,");
            sb.Append("       PLACE_MST_TBL          DELPMST,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT,");
            //sb.Append("       ----")
            sb.Append("       AGENT_MST_TBL          AMT,");
            sb.Append("       AGENT_CONTACT_DTLS     ACD,");
            sb.Append("       COUNTRY_MST_TBL        ACMT,");
            //sb.Append("       -----")
            sb.Append("       AIRLINE_MST_TBL       AIRMT ");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND BST.PORT_MST_POL_FK = POLMST.PORT_MST_PK(+)");
            sb.Append("   AND BST.PORT_MST_POD_FK = PODMST.PORT_MST_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK(+)");
            sb.Append("   AND BST.DEL_PLACE_MST_FK = DELPMST.PLACE_PK(+) ");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND MAWB.AGENT_NAME = AMT.AGENT_NAME(+)");
            sb.Append("   AND AMT.AGENT_MST_PK = ACD.AGENT_MST_FK(+)");
            sb.Append("   AND ACMT.COUNTRY_MST_PK(+) = ACD.ADM_COUNTRY_MST_FK");
            sb.Append("   AND AIRMT.AIRLINE_MST_PK = MAWB.AIRLINE_MST_FK");
            sb.Append("   AND CMMT.CARGO_MOVE_PK(+) = MAWB.CARGO_MOVE_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "MBL_HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestHBLDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT MAWB.MAWB_EXP_TBL_PK,HAWB.HAWB_EXP_TBL_PK,HAWB.HAWB_REF_NO ");
            sb.Append(" FROM  MAWB_EXP_TBL           MAWB,");
            sb.Append("       HAWB_EXP_TBL           HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK ");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HBL_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestShipConsDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MAWB.MAWB_EXP_TBL_PK,HAWB.HAWB_EXP_TBL_PK,");
            sb.Append("                SHIPPER.CUSTOMER_NAME SHIPPER_NAME,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_1 SHIPPER_ADDRESS1,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_2 SHIPPER_ADDRESS2,");
            sb.Append("                SHIPPERDTLS.ADM_ADDRESS_3 SHIPPER_ADDRESS3,");
            sb.Append("                SHIPPERDTLS.ADM_CITY SHIPPER_CITY,");
            sb.Append("                SHIPPERDTLS.ADM_ZIP_CODE SHIPPER_POST_CODE,");
            sb.Append("                SHIPPERCNT.COUNTRY_NAME SHIPPER_COUNTRY,");
            sb.Append("                SHIPPERDTLS.ADM_PHONE_NO_1 SHIPPER_PHONE,");
            sb.Append("                SHIPPERDTLS.ADM_FAX_NO SHIPPER_FAX,");
            //sb.Append("                SHIPPERDTLS.ADM_EMAIL_ID SHIPPER_EMAIL,")
            sb.Append("                CONSIGNEE.CUSTOMER_NAME CONSIGNEE_NAME,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_1 CONSIGNEE_ADDRESS1,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_2 CONSIGNEE_ADDRESS2,");
            sb.Append("                CONSIGNEEDTLS.ADM_ADDRESS_3 CONSIGNEE_ADDRESS3,");
            sb.Append("                CONSIGNEEDTLS.ADM_CITY CONSIGNEE_CITY,");
            sb.Append("                CONSIGNEEDTLS.ADM_ZIP_CODE CONSIGNEE_POST_CODE,");
            sb.Append("                CONSIGNEECNT.COUNTRY_NAME CONSIGNEE_COUNTRY,");
            sb.Append("                CONSIGNEEDTLS.ADM_PHONE_NO_1 CONSIGNEE_PHONE,");
            sb.Append("                CONSIGNEEDTLS.ADM_FAX_NO CONSIGNEE_FAX ");
            //sb.Append("                CONSIGNEEDTLS.ADM_EMAIL_ID CONSIGNEE_EMAIL,")
            sb.Append(" FROM  MAWB_EXP_TBL            MAWB,");
            sb.Append("       HAWB_EXP_TBL            HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       CUSTOMER_MST_TBL       SHIPPER,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  SHIPPERDTLS,");
            sb.Append("       COUNTRY_MST_TBL        SHIPPERCNT,");
            sb.Append("       CUSTOMER_MST_TBL       CONSIGNEE,");
            sb.Append("       CUSTOMER_CONTACT_DTLS  CONSIGNEEDTLS,");
            sb.Append("       COUNTRY_MST_TBL        CONSIGNEECNT,");
            sb.Append("       ");
            //sb.Append("       ----")
            sb.Append("       USER_MST_TBL           UMT ");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK(+) ");
            sb.Append("   AND JSE.SHIPPER_CUST_MST_FK = SHIPPER.CUSTOMER_MST_PK(+)");
            sb.Append("   AND SHIPPER.CUSTOMER_MST_PK = SHIPPERDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND SHIPPERDTLS.ADM_COUNTRY_MST_FK = SHIPPERCNT.COUNTRY_MST_PK(+)");
            sb.Append("   AND JSE.CONSIGNEE_CUST_MST_FK = CONSIGNEE.CUSTOMER_MST_PK(+)");
            sb.Append("   AND CONSIGNEE.CUSTOMER_MST_PK = CONSIGNEEDTLS.CUSTOMER_MST_FK(+)");
            sb.Append("   AND CONSIGNEEDTLS.ADM_COUNTRY_MST_FK = CONSIGNEECNT.COUNTRY_MST_PK(+)");
            //sb.Append("   ------")
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "SHIPPER_CONSIGNEE_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestContCargoDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MAWB.MAWB_EXP_TBL_PK,HAWB.HAWB_EXP_TBL_PK,");
            sb.Append("                JSE.MARKS_NUMBERS MARKS_NUMBER,");
            sb.Append("                PY.PACK_TYPE_DESC PACK_TYPE,");
            sb.Append("                JTSEC.PACK_COUNT COUNT,");
            sb.Append("                JTSEC.GROSS_WEIGHT WEIGHT,");
            sb.Append("                JTSEC.VOLUME_IN_CBM VOLUME,");
            sb.Append("                JSE.GOODS_DESCRIPTION GOODS_DESC,");
            sb.Append("                ");
            //sb.Append("                ---SPECIAL REQU---")
            sb.Append("                JTAHSR.HAZ_OUTERPACK_TYPE,");
            sb.Append("                JTAHSR.HAZ_INNERPACK_TYPE,");
            sb.Append("                JTAHSR.IMDG_CLASS_CODE HAZ_IMDG_CLASS,");
            sb.Append("                JTAHSR.UN_NO HAZ_UN_NR,");
            sb.Append("                JTAHSR.FLASH_PNT_TEMP FLASH_POINT,");
            sb.Append("                JTARSR.MIN_TEMP,");
            sb.Append("                DECODE(JTARSR.MIN_TEMP_UOM, 0, 'C', 1, 'F') MINCF,");
            sb.Append("                JTARSR.MAX_TEMP,");
            sb.Append("                DECODE(JTARSR.MAX_TEMP_UOM, 0, 'C', 1, 'F') MAXCF,");
            sb.Append("                JTAHSR.EMS_NUMBER EMS_MFAG_NR,");
            sb.Append("                JTARSR.HUMIDITY_FACTOR,");
            sb.Append("                DECODE(JTARSR.IS_PERISHABLE_GOODS, 1, 'YES', 0, 'NO') ISPERISHABLE");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM  MAWB_EXP_TBL            MAWB,");
            sb.Append("       HAWB_EXP_TBL            HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       JOB_TRN_CONT   JTSEC,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               OPACK.PACK_TYPE_ID HAZ_OUTERPACK_TYPE,");
            sb.Append("               IPACK.PACK_TYPE_ID HAZ_INNERPACK_TYPE,");
            sb.Append("               JTAHSR.IMDG_CLASS_CODE,");
            sb.Append("               JTAHSR.UN_NO,");
            sb.Append("               JTAHSR.FLASH_PNT_TEMP,");
            sb.Append("               JTAHSR.EMS_NUMBER ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTAHSR,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               BOOKING_TRN BT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT,");
            sb.Append("               PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("               PACK_TYPE_MST_TBL     OPACK");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'HAZARDOUS' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTAHSR.BOOKING_TRN_FK");
            sb.Append("           AND IPACK.PACK_TYPE_MST_PK(+) = JTAHSR.INNER_PACK_TYPE_MST_FK");
            sb.Append("           AND OPACK.PACK_TYPE_MST_PK(+) = JTAHSR.OUTER_PACK_TYPE_MST_FK) JTAHSR,");
            sb.Append("       (SELECT BT.BOOKING_MST_FK,");
            sb.Append("               JTARSR.MIN_TEMP,");
            sb.Append("               JTARSR.MAX_TEMP,");
            sb.Append("               JTARSR.MIN_TEMP_UOM,");
            sb.Append("               JTARSR.MAX_TEMP_UOM,");
            sb.Append("               JTARSR.HUMIDITY_FACTOR,");
            sb.Append("               JTARSR.IS_PERISHABLE_GOODS ");
            sb.Append("          FROM BOOKING_TRN_SPL_REQ JTARSR,");
            sb.Append("               BOOKING_MST_TBL BAT,");
            sb.Append("               BOOKING_TRN BT,");
            sb.Append("               COMMODITY_GROUP_MST_TBL CGMT ");
            sb.Append("         WHERE CGMT.COMMODITY_GROUP_CODE = 'REEFER' ");
            sb.Append("           AND CGMT.COMMODITY_GROUP_PK(+) = BAT.COMMODITY_GROUP_FK");
            sb.Append("           AND BT.BOOKING_TRN_PK = JTARSR.BOOKING_TRN_FK");
            sb.Append("           AND BAT.BOOKING_MST_PK = BT.BOOKING_MST_FK) JTARSR,");
            sb.Append("       CONTAINER_TYPE_MST_TBL CTMST,");
            sb.Append("       PACK_TYPE_MST_TBL      PY,");
            sb.Append("       USER_MST_TBL           UMT,");
            //sb.Append("       ---sr--")
            sb.Append("       PACK_TYPE_MST_TBL     IPACK,");
            sb.Append("       PACK_TYPE_MST_TBL     OPACK");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.Job_Card_Trn_Pk = JTSEC.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK(+) ");
            sb.Append("   AND JTSEC.PACK_TYPE_MST_FK = PY.PACK_TYPE_MST_PK(+)");
            sb.Append("   AND JTSEC.CONTAINER_TYPE_MST_FK = CTMST.CONTAINER_TYPE_MST_PK(+)");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MAWB.CREATED_BY_FK = UMT.USER_MST_PK");
            //sb.Append("   ---")
            sb.Append("   AND BST.BOOKING_MST_PK = JTAHSR.BOOKING_MST_FK(+)");
            sb.Append("   AND BST.BOOKING_MST_PK = JTARSR.BOOKING_MST_FK(+)");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "CONTAINER_CARGO_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        public DataSet GetExportAirCargoManifestFreightDetail(string Pks = "")
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT MAWB.MAWB_EXP_TBL_PK,HAWB.HAWB_EXP_TBL_PK,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_ID,");
            sb.Append("                FEMT.FREIGHT_ELEMENT_NAME,");
            sb.Append("                DECODE(JTSEF.FREIGHT_TYPE,1,'Prepaid',2,'Collect', 3, 'Foreign') PAYMENT_TYPE,");
            sb.Append("                JTSEF.FREIGHT_AMT,");
            sb.Append("                CURR.CURRENCY_ID CURRENCY ");
            sb.Append("                ");
            sb.Append("                ");
            sb.Append(" FROM MAWB_EXP_TBL            MAWB,");
            sb.Append("       HAWB_EXP_TBL           HAWB,");
            sb.Append("       JOB_CARD_TRN   JSE,");
            sb.Append("       BOOKING_MST_TBL        BST,");
            sb.Append("       JOB_TRN_FD    JTSEF,");
            sb.Append("       FREIGHT_ELEMENT_MST_TBL  FEMT,");
            sb.Append("       CURRENCY_TYPE_MST_TBL    CURR");
            sb.Append("       ");
            sb.Append(" WHERE TO_CHAR(MAWB.MAWB_EXP_TBL_PK) IN (" + Pks + ")");
            sb.Append("   AND JSE.BOOKING_MST_FK = BST.BOOKING_MST_PK");
            sb.Append("   AND JSE.MBL_MAWB_FK = MAWB.MAWB_EXP_TBL_PK(+)");
            sb.Append("   AND JSE.HBL_HAWB_FK = HAWB.HAWB_EXP_TBL_PK ");
            sb.Append("   AND JSE.Job_Card_Trn_Pk  = JTSEF.JOB_CARD_TRN_FK(+)");
            sb.Append("   AND FEMT.FREIGHT_ELEMENT_MST_PK(+) = JTSEF.FREIGHT_ELEMENT_MST_FK");
            sb.Append("   AND CURR.CURRENCY_MST_PK = JTSEF.CURRENCY_MST_FK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "FREIGHT_DETAIL");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        #endregion
        public DataSet GetExportSeaCargoManifestHeader()
        {
            StringBuilder sb = new StringBuilder(5000);

            sb.Append("SELECT DISTINCT ");
            //sb.Append("               -------LOCATION---")
            sb.Append("                LMT.LOCATION_NAME,");
            sb.Append("                LMT.ADDRESS_LINE1,");
            sb.Append("                LMT.ADDRESS_LINE2,");
            sb.Append("                LMT.ADDRESS_LINE3,");
            sb.Append("                LMT.CITY,");
            sb.Append("                LMT.ZIP POST_CODE,");
            sb.Append("                COUNTRY.COUNTRY_NAME,");
            sb.Append("                LMT.TELE_PHONE_NO,");
            sb.Append("                LMT.FAX_NO,");
            sb.Append("                LMT.E_MAIL_ID ");
            sb.Append(" FROM MBL_EXP_TBL            MBL,");
            sb.Append("       USER_MST_TBL           UMT,");
            sb.Append("       LOCATION_MST_TBL       LMT,");
            sb.Append("       COUNTRY_MST_TBL        COUNTRY ");
            sb.Append("       ");
            //sb.Append(" WHERE TO_CHAR(MBL.MBL_EXP_TBL_PK) IN (" & Pks & ")")
            sb.Append("   WHERE UMT.DEFAULT_LOCATION_FK = " + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + " ");
            sb.Append("   AND MBL.CREATED_BY_FK = UMT.USER_MST_PK");
            sb.Append("   AND UMT.DEFAULT_LOCATION_FK = LMT.LOCATION_MST_PK");
            sb.Append("   AND LMT.COUNTRY_MST_FK = COUNTRY.COUNTRY_MST_PK");
            sb.Append("");

            DA = objWF.GetDataAdapter(sb.ToString());
            DA.Fill(MainDS, "HEADER");
            try
            {
                foreach (DataRow _row in MainDS.Tables[0].Rows)
                {
                    foreach (DataColumn col in MainDS.Tables[0].Columns)
                    {
                        if ((_row[col.ColumnName] == null) | string.IsNullOrEmpty(Convert.ToString(_row[col.ColumnName])))
                        {
                            try
                            {
                                _row[col.ColumnName] = " ";
                            }
                            catch (Exception ex)
                            {
                                _row[col.ColumnName] = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return MainDS;
        }
        #endregion

        #region "Fetch Summary Header"
        public DataSet FetchSummHeader()
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT ");
            sb.Append("       '' CurSum");
            sb.Append("       FROM DUAL WHERE 1 <> 1 ");
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Get Contract PK"
        public DataSet GetContractPK(string ContractNr, string BizType)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                if (Convert.ToInt32(BizType )== 2)
                {
                    sb.Append(" SELECT CMAIN.CONT_MAIN_SEA_PK,");
                    sb.Append("        CMAIN.CARGO_TYPE,");
                    sb.Append("        CMAIN.ACTIVE,");
                    sb.Append("        CMAIN.CONT_APPROVED");
                    sb.Append("  FROM CONT_MAIN_SEA_TBL CMAIN");
                    sb.Append("  WHERE CMAIN.CONTRACT_NO = '" + ContractNr + "' ");
                }
                else
                {
                    sb.Append(" SELECT CMAIN.CONT_MAIN_AIR_PK,");
                    sb.Append("        CMAIN.ACTIVE,");
                    sb.Append("        CMAIN.CONT_APPROVED");
                    sb.Append("  FROM CONT_MAIN_AIR_TBL CMAIN");
                    sb.Append("  WHERE CMAIN.CONTRACT_NO = '" + ContractNr + "' ");
                }

                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        public DataSet GetTranPK(string From, string ContractNr, string BizType)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            try
            {
                if (Convert.ToInt32(BizType) == 2)
                {
                    if (Convert.ToInt32(From )== 1)
                    {
                        sb.Append(" SELECT Q.QUOTATION_MST_PK, Q.CARGO_TYPE, NVL(Q.QUOTATION_TYPE, 0) + 1 QUOTATION_TYPE, DECODE(Q.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 'BBC') CARGO_TYPE_TXT, Q.PROCESS_TYPE, Q.BIZ_TYPE ");
                        sb.Append("  FROM QUOTATION_MST_TBL Q");
                        sb.Append("  WHERE  Q.QUOTATION_REF_NO = '" + ContractNr + "' ");
                        //Customer Contract
                    }
                    else if (Convert.ToInt32(From )== 3)
                    {
                        sb.Append(" SELECT CMAIN.CONT_CUST_SEA_PK, CMAIN.CUSTOMER_MST_FK,CMAIN.CARGO_TYPE");
                        sb.Append("  FROM CONT_CUST_SEA_TBL CMAIN");
                        sb.Append("  WHERE  CMAIN.CONT_REF_NO= '" + ContractNr + "' ");
                        //SRR
                    }
                    else if (Convert.ToInt32(From )== 5)
                    {
                        sb.Append(" SELECT CMAIN.SRR_SEA_PK, CMAIN.STATUS,CMAIN.CARGO_TYPE");
                        sb.Append("  FROM SRR_SEA_TBL CMAIN");
                        sb.Append("  WHERE  CMAIN.SRR_REF_NO= '" + ContractNr + "' ");
                    }
                }
                else
                {
                    if (Convert.ToInt32(From) == 1)
                    {
                        sb.Append(" SELECT Q.QUOTATION_MST_PK, Q.CARGO_TYPE, NVL(Q.QUOTATION_TYPE, 0) + 1 QUOTATION_TYPE, DECODE(Q.CARGO_TYPE, 1, 'FCL', 2, 'LCL', 'BBC') CARGO_TYPE_TXT, Q.PROCESS_TYPE, Q.BIZ_TYPE ");
                        sb.Append("  FROM QUOTATION_MST_TBL Q");
                        sb.Append("  WHERE  Q.QUOTATION_REF_NO = '" + ContractNr + "' ");
                    }
                    else if (Convert.ToInt32(From) == 3)
                    {
                        sb.Append(" SELECT CMAIN.CONT_CUST_AIR_PK, CMAIN.CUSTOMER_MST_FK, NULL CARGO_TYPE ");
                        sb.Append("  FROM CONT_CUST_AIR_TBL CMAIN");
                        sb.Append("  WHERE  CMAIN.CONT_REF_NO= '" + ContractNr + "' ");
                        //SRR
                    }
                    else if (Convert.ToInt32(From) == 5)
                    {
                        sb.Append(" SELECT CMAIN.SRR_AIR_PK, CMAIN.SRR_APPROVED, NULL CARGO_TYPE ");
                        sb.Append("  FROM SRR_AIR_TBL CMAIN");
                        sb.Append("  WHERE  CMAIN.SRR_REF_NO= '" + ContractNr + "' ");
                    }
                }
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region " FetchComm "
        public object FetchComm(long SeaBkgPK, int status)
        {
            string strSqlCDimension = "";
            WorkFlow objwf = new WorkFlow();
            try
            {
                if (status == 1)
                {
                    strSqlCDimension = " SELECT C1.COMMODITY_NAME,(SELECT BB.PACK_COUNT  FROM BOOKING_MST_TBL BB WHERE BB.BOOKING_MST_PK=" + SeaBkgPK + ") PACK_COUNT, " + " (SELECT PACK.PACK_TYPE_DESC FROM PACK_TYPE_MST_TBL PACK WHERE PACK.PACK_TYPE_MST_PK IN (SELECT BB.PACK_TYPE_MST_PK FROM BOOKING_MST_TBL BB WHERE BB.BOOKING_MST_PK=" + SeaBkgPK + ")) PACK_TYPE_DESC " + " FROM COMMODITY_MST_TBL C1 WHERE C1.COMMODITY_MST_PK IN ( " + " SELECT BB.COMMODITY_MST_FK FROM BOOKING_TRN BB WHERE BB.BOOKING_MST_FK=" + SeaBkgPK + ") ";
                }
                else
                {
                    strSqlCDimension = "SELECT DISTINCT(COMMODITY_NAME) ,"  + "BST.PACK_COUNT,"  + "PTMT.PACK_TYPE_DESC "  + "FROM COMMODITY_MST_TBL CST,"  + "JOB_CARD_TRN JCSE, "  + "JOB_TRN_CONT JTSE,BOOKING_MST_TBL BST, "  + "PACK_TYPE_MST_TBL PTMT"  + "WHERE JTSE.COMMODITY_MST_FK=CST.COMMODITY_MST_PK"  + "AND PTMT.PACK_TYPE_MST_PK=BST.PACK_TYPE_MST_FK "  + "AND JTSE.JOB_CARD_TRN_FK=JCSE.JOB_CARD_TRN_PK  "  + "AND BST.BOOKING_MST_PK=JCSE.BOOKING_MST_FK"  + "AND BOOKING_MST_PK= " + SeaBkgPK;
                }
                return objwf.GetDataSet(strSqlCDimension);
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
                //'Exception Handling Added by Gangadhar on 16/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " FillPackType "
        public DataSet FillPackType()
        {
            StringBuilder strQuery = new StringBuilder();

            strQuery.Append("SELECT -1 PACK_TYPE_MST_PK, ");
            strQuery.Append(" ' ' PACK_TYPE_ID, ");
            strQuery.Append(" ' ' PACK_TYPE_DESC  ");
            strQuery.Append("FROM DUAL UNION ");

            strQuery.Append("SELECT P.PACK_TYPE_MST_PK, ");
            strQuery.Append("P.PACK_TYPE_ID, ");
            strQuery.Append("P.PACK_TYPE_DESC  ");
            strQuery.Append("FROM PACK_TYPE_MST_TBL P ");
            strQuery.Append("WHERE P.ACTIVE_FLAG =1 ");
            strQuery.Append("ORDER BY PACK_TYPE_MST_PK ");

            try
            {
                return (new WorkFlow()).GetDataSet(strQuery.ToString());
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " FillCommodity "
        public DataSet FillCommodity()
        {
            string strSQL = null;

            strSQL = " SELECT -1 COMMODITY_MST_PK, ' ' COMMODITY_ID, ' ' COMMODITY_NAME FROM DUAL UNION ";
            strSQL = strSQL + " SELECT C.COMMODITY_MST_PK, C.COMMODITY_ID, C.COMMODITY_NAME FROM COMMODITY_MST_TBL C WHERE C.ACTIVE_FLAG = 1 ORDER BY COMMODITY_NAME ";
            try
            {
                return (new WorkFlow()).GetDataSet(strSQL);
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region " FillUOM "
        public DataSet FillUOM()
        {
            string strSQL = null;

            strSQL = "SELECT -1 DIMENTION_UNIT_MST_PK, ' ' DIMENTION_ID FROM DUAL UNION ";

            strSQL = strSQL + "SELECT UOM.DIMENTION_UNIT_MST_PK,UOM.DIMENTION_ID FROM DIMENTION_UNIT_MST_TBL UOM " + "WHERE UOM.ACTIVE = 1 AND UOM.CARGO_TYPE=1";
            try
            {
                return (new WorkFlow()).GetDataSet(strSQL);
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "FETCH TARIFF FOR VATOS"
        public string FetchAirLineTariff(Int32 AirlinePk, Int32 CommdityPk, string strCondition)
        {
            WorkFlow objWF = new WorkFlow();
            OracleCommand selectCommand = new OracleCommand();
            string strReturn = null;
            string ValidFrom = null;
            string ValidTo = null;
            try
            {
                objWF.OpenConnection();
                selectCommand.Connection = objWF.MyConnection;
                selectCommand.CommandType = CommandType.StoredProcedure;
                selectCommand.CommandText = objWF.MyUserName + ".JOB_CARD_TRN_PKG.GETAIRLINETARIFF_AIR_VATOS";
                var _with135 = selectCommand.Parameters;
                _with135.Add("AIRLINE_PK_IN", AirlinePk).Direction = ParameterDirection.Input;
                _with135.Add("COMMODITY_GROUP_PK_IN", CommdityPk).Direction = ParameterDirection.Input;
                _with135.Add("LOOKUP_VALUE_IN", "E").Direction = ParameterDirection.Input;
                _with135.Add("CONDITION_IN", strCondition).Direction = ParameterDirection.Input;
                _with135.Add("RETURN_VALUE", OracleDbType.NVarchar2, 5000, "RETURN_VALUE").Direction = ParameterDirection.Output;
                selectCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;
                selectCommand.ExecuteNonQuery();
                strReturn = Convert.ToString(selectCommand.Parameters["RETURN_VALUE"].Value);
                return strReturn;
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                return '~' + ex.Message;
            }
            finally
            {
                selectCommand.Connection.Close();
            }
        }
        public DataSet FetchAirlineTariffRates(Int64 TariffPK, string strCondition)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            sb.Append(" SELECT FRT.FREIGHT_ELEMENT_MST_PK,");
            sb.Append("        FRT.FREIGHT_ELEMENT_ID,");
            sb.Append("        CURR.CURRENCY_ID,");
            sb.Append("        NVL(TFT.MIN_AMOUNT, 0.00) AS APPROVED_RATE,");
            sb.Append("        CURR.CURRENCY_MST_PK,");
            sb.Append("        GET_EX_RATE(CURR.CURRENCY_MST_PK,  " + HttpContext.Current.Session["currency_mst_pk"] + ", SYSDATE) ROE,");
            sb.Append("       (NVL(TFT.MIN_AMOUNT, 0.00) *");
            sb.Append("        GET_EX_RATE(CURR.CURRENCY_MST_PK,  " + HttpContext.Current.Session["currency_mst_pk"] + ", SYSDATE)) FINAL_RATE");
            sb.Append("        FROM TARIFF_TRN_AIR_TBL  TRN,");
            sb.Append("        TARIFF_MAIN_AIR_TBL     TMT,");
            sb.Append("        TARIFF_TRN_AIR_FREIGHT_TBL TFT,");
            sb.Append("        CURRENCY_TYPE_MST_TBL   CURR,");
            sb.Append("        FREIGHT_ELEMENT_MST_TBL FRT");
            sb.Append("        WHERE TRN.TARIFF_MAIN_AIR_FK = " + TariffPK + "");
            sb.Append("        AND TMT.TARIFF_MAIN_AIR_PK = TRN.TARIFF_MAIN_AIR_FK");
            sb.Append("        AND TFT.CURRENCY_MST_FK= CURR.CURRENCY_MST_PK");
            sb.Append("        AND TRN.TARIFF_TRN_AIR_PK = TFT.TARIFF_TRN_AIR_FK");
            sb.Append("        AND TFT.FREIGHT_ELEMENT_MST_FK = FRT.FREIGHT_ELEMENT_MST_PK");
            sb.Append("        AND FRT.FREIGHT_ELEMENT_ID <> 'AFC'");
            sb.Append("        AND TFT.MIN_AMOUNT > 0");
            sb.Append("        AND TMT.STATUS = 1");
            sb.Append("        AND (TRN.PORT_MST_POL_FK, TRN.PORT_MST_POD_FK) IN");
            sb.Append("        (" + strCondition + " ) ");
            sb.Append("        ORDER BY FRT.PREFERENCE");
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region " FetchUOM "
        public string FetchUOM(string strUOM, int BizType)
        {
            StringBuilder sb = new StringBuilder(5000);
            WorkFlow objWF = new WorkFlow();
            DataSet DS = null;

            if (BizType == 1)
            {
                sb.Append(" SELECT DECODE('" + strUOM + "', ' ', 0, '%', 1, 'Flat rate', 2, 'Kgs', 3, 'Unit', 4) FROM DUAL");
            }
            else
            {
                sb.Append(" SELECT UOM.DIMENTION_UNIT_MST_PK FROM DIMENTION_UNIT_MST_TBL UOM WHERE UOM.DIMENTION_ID = '" + strUOM + "' ");
            }

            try
            {
                DS = objWF.GetDataSet(sb.ToString());

                if (DS.Tables[0].Rows.Count > 0)
                {
                    return DS.Tables[0].Rows[0][0] + "";
                }
                else
                {
                    return "0";
                }
            }
            catch (Exception exp)
            {
                return "0";
            }
        }
        #endregion

        #region "Fetch Commodity Group"
        public DataSet FetchCommGrp()
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            try
            {
                strSQL.Append( "SELECT -1 COMMODITY_GROUP_PK, ' ' COMMODITY_GROUP_CODE, ' ' COMMODITY_GROUP_DESC, -1 VERSION_NO");
                strSQL.Append( " FROM DUAL UNION ");

                strSQL.Append( "SELECT CG.COMMODITY_GROUP_PK,CG.COMMODITY_GROUP_CODE,CG.COMMODITY_GROUP_DESC,CG.VERSION_NO");
                strSQL.Append( " FROM COMMODITY_GROUP_MST_TBL CG");
                strSQL.Append( "WHERE CG.ACTIVE_FLAG=1");
                strSQL.Append( "    ORDER BY COMMODITY_GROUP_CODE");
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        public ArrayList UpdateATA(string JOB_CARD_ID, string Created_DT, OracleTransaction TRAN)
        {
            int JCCount = 0;
            int JCPK = 0;
            int Biz_Type = 0;
            int ProcessType = 0;
            JCCount = Convert.ToInt32(objWF.ExecuteScaler("select count (*) from job_card_trn jct where jct.jobcard_ref_no='" + JOB_CARD_ID + "' and jct.process_type=1"));
            if (JCCount > 0)
            {
                JCPK = Convert.ToInt32(objWF.ExecuteScaler("select jct.job_card_trn_pk from job_card_trn jct where jct.jobcard_ref_no='" + JOB_CARD_ID + "' and jct.process_type=1 and rownum=1"));
                Biz_Type = Convert.ToInt32(objWF.ExecuteScaler("select jct.business_type from job_card_trn jct where jct.jobcard_ref_no='" + JOB_CARD_ID + "' and jct.process_type=1 and rownum=1"));
                ProcessType = 1;
            }
            else
            {
                JCPK = Convert.ToInt32(objWF.ExecuteScaler("select jct.job_card_trn_pk from job_card_trn jct where jct.jobcard_ref_no='" + JOB_CARD_ID + "' and jct.process_type=2 and rownum=1"));
                Biz_Type = Convert.ToInt32(objWF.ExecuteScaler("select jct.business_type from job_card_trn jct where jct.jobcard_ref_no='" + JOB_CARD_ID + "' and jct.process_type=2 and rownum=1"));
                ProcessType = 2;
            }
            try
            {
                arrMessage.Clear();
                WorkFlow objWF = new WorkFlow();
                var _with136 = objWF.MyCommand;
                _with136.CommandType = CommandType.StoredProcedure;
                _with136.CommandText = objWF.MyUserName + ".TRACK_N_TRACE_PKG.TRACK_N_TRACE_INS_EXT";
                _with136.Connection = TRAN.Connection;
                _with136.Transaction = TRAN;
                _with136.Parameters.Clear();
                _with136.Parameters.Add("BIZ_TYPE_IN", Biz_Type).Direction = ParameterDirection.Input;
                _with136.Parameters.Add("PROCESS_IN", ProcessType).Direction = ParameterDirection.Input;
                _with136.Parameters.Add("KEY_FK_IN", JCPK).Direction = ParameterDirection.Input;
                _with136.Parameters.Add("LOCATION_FK_IN", HttpContext.Current.Session["LOGED_IN_LOC_FK"]).Direction = ParameterDirection.Input;
                _with136.Parameters.Add("STATUS_IN", "Arrival Date").Direction = ParameterDirection.Input;
                _with136.Parameters.Add("CREATEDUSER_IN", HttpContext.Current.Session["USER_PK"]).Direction = ParameterDirection.Input;
                _with136.Parameters.Add("DOC_REF_IN", DBNull.Value).Direction = ParameterDirection.Input;
                if ((Created_DT == null))
                {
                    _with136.Parameters.Add("CREATED_DT_IN", DBNull.Value).Direction = ParameterDirection.Input;
                }
                else
                {
                    _with136.Parameters.Add("CREATED_DT_IN", Convert.ToDateTime(Created_DT)).Direction = ParameterDirection.Input;
                }
                _with136.Parameters.Add("RETURN_VALUE", OracleDbType.Int32, 10).Direction = ParameterDirection.Output;
                _with136.ExecuteNonQuery();
                arrMessage.Add("All Data Saved Successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                throw oraexp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public object InterchangeActivity(int JobPK, OracleTransaction TRAN)
        {
            arrMessage.Clear();
            WorkFlow objWF = new WorkFlow();
            try
            {
                var _with137 = objWF.MyCommand;
                _with137.CommandType = CommandType.StoredProcedure;
                _with137.CommandText = objWF.MyUserName + ".TRACK_N_TRACE_PKG.TNT_INTERCHANGE_ACTIVITY";
                _with137.Connection = TRAN.Connection;
                _with137.Transaction = TRAN;
                _with137.Parameters.Clear();
                _with137.Parameters.Add("JC_FK_IN", JobPK).Direction = ParameterDirection.Input;
                _with137.Parameters.Add("RETURN_VALUE", OracleDbType.Varchar2, 500).Direction = ParameterDirection.Output;
                _with137.ExecuteNonQuery();
                arrMessage.Add("All Data Saved Successfully");
                return arrMessage;
            }
            catch (OracleException oraexp)
            {
                throw oraexp;
            }
            catch (Exception ex)
            {
                throw ex;

            }
        }
        #region "Fetch Third Party Location"
        public DataSet FetchThPartyLoc(long BookingFk = 0)
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder sb = new StringBuilder(5000);
            sb.Append(" SELECT  LOC.LOCATION_ID, CCD.ADM_LOCATION_MST_FK ");
            sb.Append("    FROM BOOKING_MST_TBL BK,CUSTOMER_MST_TBL THRD_PARTY,CUSTOMER_CONTACT_DTLS CCD ,LOCATION_MST_TBL LOC ");
            sb.Append("   WHERE  BK.THIRD_PARTY_FRTPAYER_FK = THRD_PARTY.CUSTOMER_MST_PK(+) ");
            sb.Append("   AND CCD.CUSTOMER_MST_FK(+)=THRD_PARTY.CUSTOMER_MST_PK ");
            sb.Append("   AND LOC.LOCATION_MST_PK=CCD.ADM_LOCATION_MST_FK  ");
            sb.Append("  AND BK.BOOKING_MST_PK =" + BookingFk);
            try
            {
                return objWF.GetDataSet(sb.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Fetch ProfitPercent"
        public decimal ProfitPercent()
        {
            WorkFlow objWF = new WorkFlow();
            StringBuilder SQL = new StringBuilder();
            SQL.Append(" SELECT L.PROFIT_PERCENT FROM LOCATION_MST_TBL L ");
            SQL.Append(" WHERE L.LOCATION_MST_PK IN (" + HttpContext.Current.Session["LOGED_IN_LOC_FK"] + ")");
            try
            {
                return Convert.ToInt64(objWF.ExecuteScaler(SQL.ToString()));
            }
            catch (OracleException sqlExp)
            {
                return 0;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                return 0;
            }
        }
        #endregion

        #region "Fetch Receipt Dtls for Container Deposit Form"
        public DataSet FetchContDeposit(string jobCardPK = "0", string MJCPK = "")
        {
            WorkFlow objWF = new WorkFlow();
            DataSet ds = new DataSet();

            try
            {
                objWF.OpenConnection();
                objWF.MyDataAdapter = new OracleDataAdapter();
                var _with138 = objWF.MyDataAdapter;
                _with138.SelectCommand = new OracleCommand();
                _with138.SelectCommand.Connection = objWF.MyConnection;
                _with138.SelectCommand.CommandText = objWF.MyUserName + ".CONTAINER_DEPOSIT_PKG.FETCH_JOB_CONT_DEPOSIT";
                _with138.SelectCommand.CommandType = CommandType.StoredProcedure;
                _with138.SelectCommand.Parameters.Add("JOB_CARD_TRN_PK_IN", jobCardPK).Direction = ParameterDirection.Input;
                _with138.SelectCommand.Parameters.Add("JOB_CONT_CUT", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with138.Fill(ds);

                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }
        public DataSet FetchRcptDeposit(string JobPk, int CurPK = 0)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet objDS = null;
            var _with139 = objWF.MyCommand.Parameters;
            _with139.Add("JOB_PK", JobPk).Direction = ParameterDirection.Input;
            _with139.Add("CUR_PK_IN", CurPK).Direction = ParameterDirection.Input;
            _with139.Add("JOB_CONT_CUT", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
            objDS = objWF.GetDataSet("CONTAINER_DEPOSIT_PKG", "FETCH_RCPT_DEPOSIT");
            return objDS;
        }
        #endregion

        #region "Save Container Deposit Details"
        public ArrayList SaveContainerDeposit(int JobPk, DataSet dsRcpt, DataSet dsCntr, int DepositCurPK)
        {
            WorkFlow objWK = new WorkFlow();
            OracleTransaction TRAN = null;
            OracleCommand insCommand = new OracleCommand();
            OracleCommand updCommand = new OracleCommand();
            OracleCommand delCommand = new OracleCommand();
            string DepositRefNr = null;
            string strQry = null;
            int RecExist = 0;
            int RecAfct = 0;
            int DepositPK = 0;
            bool DeleteFlag = false;
            double Amount = 0;
            string DelPks = "0";
            arrMessage.Clear();
            try
            {
                if ((dsRcpt != null))
                {
                    if (dsRcpt.Tables[0].Rows.Count > 0)
                    {
                        if (Conversion.Val(dsRcpt.Tables[0].Rows[0]["LOCAL_AMT"]) == 0)
                        {
                            DeleteFlag = true;
                        }
                    }
                    else
                    {
                        DeleteFlag = true;
                    }
                }
                else
                {
                    DeleteFlag = false;
                }

                RecExist = Convert.ToInt32(objWK.ExecuteScaler("select count(*) from CONTAINER_DEPOSIT_MST_TBL cdmt where cdmt.JOB_CARD_TRN_FK=" + JobPk));
                objWK.OpenConnection();
                TRAN = objWK.MyConnection.BeginTransaction();

                if (DeleteFlag == true)
                {
                    strQry = "DELETE FROM CONTAINER_DEPOSIT_DTL_TBL CDDT WHERE CDDT.CONTAINER_DEPOSIT_MST_FK IN ";
                    strQry += "(SELECT CDMT.CONTAINER_DEPOSIT_MST_PK FROM CONTAINER_DEPOSIT_MST_TBL CDMT WHERE CDMT.JOB_CARD_TRN_FK=" + JobPk + ")";
                    var _with140 = delCommand;
                    _with140.Connection = objWK.MyConnection;
                    _with140.Transaction = TRAN;
                    _with140.CommandType = CommandType.Text;
                    _with140.CommandText = strQry;
                    _with140.ExecuteNonQuery();

                    strQry = "DELETE FROM CONTAINER_DEPOSIT_MST_TBL CDMT";
                    strQry += " WHERE CDMT.JOB_CARD_TRN_FK=" + JobPk;

                    var _with141 = delCommand;
                    _with141.Connection = objWK.MyConnection;
                    _with141.Transaction = TRAN;
                    _with141.CommandType = CommandType.Text;
                    _with141.CommandText = strQry;
                    _with141.ExecuteNonQuery();
                    if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                    else
                    {
                        SaveCntrDepositAmt(TRAN, dsCntr, JobPk, DepositCurPK);
                        if (arrMessage.Count > 0)
                        {
                            TRAN.Rollback();
                            return arrMessage;
                        }
                        else
                        {
                            TRAN.Commit();
                            arrMessage.Add("All Data Saved Sucessfully");
                            return arrMessage;
                        }
                    }
                }
                if ((dsRcpt != null))
                {
                    if (RecExist == 0)
                    {
                        DepositRefNr = GenerateProtocolKey("DEPOSITNR", Convert.ToInt32(HttpContext.Current.Session["LOGED_IN_LOC_FK"]), Convert.ToInt32(HttpContext.Current.Session["EMP_PK"]), System.DateTime.Now, "", "", "", M_CREATED_BY_FK);
                        //'DepositRefNr = "DEP00" & Date.Today.Second
                        Amount = Convert.ToDouble(dsRcpt.Tables[0].Compute("Sum(LOCAL_AMT)", ""));
                        var _with142 = insCommand;
                        _with142.Connection = objWK.MyConnection;
                        _with142.CommandType = CommandType.StoredProcedure;
                        _with142.CommandText = objWK.MyUserName + ".CONTAINER_DEPOSIT_PKG.CONTAINER_DEPOSIT_MST_TBL_INS";
                        _with142.Parameters.Clear();
                        var _with143 = _with142.Parameters;
                        _with143.Add("JOB_CARD_TRN_FK_IN", JobPk).Direction = ParameterDirection.Input;
                        _with143.Add("DEPOSIT_REF_NR_IN", DepositRefNr).Direction = ParameterDirection.Input;
                        _with143.Add("DEPOSIT_DATE_IN", Convert.ToDateTime(System.DateTime.Today)).Direction = ParameterDirection.Input;
                        _with143.Add("DEPOSIT_CUR_FK_IN", DepositCurPK).Direction = ParameterDirection.Input;
                        _with143.Add("DEPOSIT_AMT_IN", (Amount > 0 ? Convert.ToInt32(Amount) : 0)).Direction = ParameterDirection.Input;
                        _with143.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                        _with143.Add("CONFIG_MST_FK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                        _with143.Add("RETURN_VALUE", OracleDbType.Int32, 10, "CONTAINER_DEPOSIT_MST_PK").Direction = ParameterDirection.Output;
                        insCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                        var _with144 = objWK.MyDataAdapter;
                        _with144.InsertCommand = insCommand;
                        _with144.InsertCommand.Transaction = TRAN;
                        RecAfct = _with144.InsertCommand.ExecuteNonQuery();
                        DepositPK = Convert.ToInt32(insCommand.Parameters["RETURN_VALUE"].Value);

                    }
                    else
                    {
                        var _with145 = updCommand;
                        _with145.Connection = objWK.MyConnection;
                        _with145.CommandType = CommandType.StoredProcedure;
                        _with145.CommandText = objWK.MyUserName + ".CONTAINER_DEPOSIT_PKG.CONTAINER_DEPOSIT_MST_TBL_UPD";
                        _with145.Parameters.Clear();
                        var _with146 = _with145.Parameters;
                        _with146.Add("CONTAINER_DEPOSIT_MST_PK_IN", dsRcpt.Tables[0].Rows[0]["DEPOSIT_MST_FK"]).Direction = ParameterDirection.Input;
                        _with146.Add("JOB_CARD_TRN_FK_IN", JobPk).Direction = ParameterDirection.Input;
                        _with146.Add("DEPOSIT_CUR_FK_IN", DepositCurPK).Direction = ParameterDirection.Input;
                        _with146.Add("DEPOSIT_AMT_IN", (Convert.ToInt32(dsRcpt.Tables[0].Rows[0]["LOCAL_AMT"]) > 0 ? Convert.ToInt32(dsRcpt.Tables[0].Rows[0]["LOCAL_AMT"]) : 0)).Direction = ParameterDirection.Input;
                        _with146.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                        _with146.Add("CONFIG_MST_FK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                        _with146.Add("RETURN_VALUE", OracleDbType.Varchar2, 100, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        updCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                        var _with147 = objWK.MyDataAdapter;
                        _with147.UpdateCommand = updCommand;
                        _with147.UpdateCommand.Transaction = TRAN;
                        RecAfct = _with147.UpdateCommand.ExecuteNonQuery();
                        DepositPK = Convert.ToInt32(updCommand.Parameters["RETURN_VALUE"].Value);
                    }

                    if (RecAfct > 0)
                    {
                        if (RecExist > 0)
                        {
                            for (int RowCnt = 0; RowCnt <= dsRcpt.Tables[0].Rows.Count - 1; RowCnt++)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"])))
                                {
                                    if (Conversion.Val(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"]) > 0)
                                    {
                                        DelPks = DelPks + "," + Conversion.Val(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"]);
                                    }
                                }
                            }
                            strQry = "DELETE FROM CONTAINER_DEPOSIT_DTL_TBL CDDT WHERE CDDT.CONTAINER_DEPOSIT_MST_FK IN ";
                            strQry += "(SELECT CDMT.CONTAINER_DEPOSIT_MST_PK FROM CONTAINER_DEPOSIT_MST_TBL CDMT WHERE CDMT.JOB_CARD_TRN_FK=" + JobPk + ")";
                            strQry += " AND CDDT.CONTAINER_DEPOSIT_DTL_PK NOT IN (" + DelPks + ")";

                            var _with148 = delCommand;
                            _with148.Connection = objWK.MyConnection;
                            _with148.Transaction = TRAN;
                            _with148.CommandType = CommandType.Text;
                            _with148.CommandText = strQry;
                            _with148.ExecuteNonQuery();
                        }
                        SaveCntrDepositAmt(TRAN, dsCntr, JobPk, DepositCurPK);
                        SaveRcptDtls(TRAN, dsRcpt, DepositPK);
                        //To delete the Freight Details which has been removed from the Grid.
                        if (arrMessage.Count > 0)
                        {
                            TRAN.Rollback();
                            return arrMessage;
                        }
                        else
                        {
                            TRAN.Commit();
                            arrMessage.Add("All Data Saved Successfully");
                            return arrMessage;
                        }
                    }
                    else
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                }
                else
                {
                    SaveCntrDepositAmt(TRAN, dsCntr, JobPk, DepositCurPK);
                    if (arrMessage.Count > 0)
                    {
                        TRAN.Rollback();
                        return arrMessage;
                    }
                    else
                    {
                        TRAN.Commit();
                        arrMessage.Add("All Data Saved Sucessfully");
                        return arrMessage;
                    }
                }
            }
            catch (OracleException oraexp)
            {
                TRAN.Rollback();
                arrMessage.Add(oraexp.Message);
            }
            catch (Exception ex)
            {
                TRAN.Rollback();
                arrMessage.Add(ex.Message);
            }
            finally
            {
                objWK.CloseConnection();
            }
            return new ArrayList();
        }

        public int SaveRcptDtls(OracleTransaction TRAN, DataSet dsRcpt, int DepositPK)
        {
            WorkFlow objWK = new WorkFlow();
            int RowCnt = 0;
            objWK.MyConnection = TRAN.Connection;

            OracleCommand insCommand = new OracleCommand();
            OracleCommand updCommand = new OracleCommand();
            OracleCommand delCommand = new OracleCommand();

            try
            {
                for (RowCnt = 0; RowCnt <= dsRcpt.Tables[0].Rows.Count - 1; RowCnt++)
                {
                    if (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"].ToString()))
                    {
                        dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"] = 0;
                    }
                    if (Convert.ToInt32(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"]) == 0)
                    {
                        var _with149 = insCommand;
                        _with149.Connection = objWK.MyConnection;
                        _with149.CommandType = CommandType.StoredProcedure;
                        _with149.CommandText = objWK.MyUserName + ".CONTAINER_DEPOSIT_PKG.CONTAINER_DEPOSIT_DTL_TBL_INS";
                        _with149.Parameters.Clear();
                        var _with150 = _with149.Parameters;
                        _with150.Add("CONTAINER_DEPOSIT_MST_FK_IN", DepositPK).Direction = ParameterDirection.Input;
                        _with150.Add("PAYMENT_MODE_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["MODE_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["MODE_PK"]))).Direction = ParameterDirection.Input;
                        _with150.Add("CHEQUE_NR_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_NR"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_NR"]))).Direction = ParameterDirection.Input;
                        if (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_DT"].ToString()))
                        {
                            _with150.Add("CHEQUE_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                        }
                        else
                        {
                            _with150.Add("CHEQUE_DATE_IN", Convert.ToDateTime(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_DT"])).Direction = ParameterDirection.Input;
                        }
                        _with150.Add("REFERENCE_BANK_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["REF_BANK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["REF_BANK"]))).Direction = ParameterDirection.Input;
                        _with150.Add("CURRENCY_MST_FK_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CUR_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["CUR_PK"]))).Direction = ParameterDirection.Input;
                        _with150.Add("AMOUNT_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["AMOUNT"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["AMOUNT"]))).Direction = ParameterDirection.Input;
                        _with150.Add("ROE_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["ROE"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["ROE"]))).Direction = ParameterDirection.Input;
                        _with150.Add("STATUS_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["STATUS_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["STATUS_PK"]))).Direction = ParameterDirection.Input;
                        _with150.Add("REMARKS_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["REMARKS"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["REMARKS"]))).Direction = ParameterDirection.Input;
                        _with150.Add("CREATED_BY_FK_IN", M_CREATED_BY_FK).Direction = ParameterDirection.Input;
                        _with150.Add("CONFIG_MST_FK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                        _with150.Add("RETURN_VALUE", OracleDbType.Int32, 10, "CONTAINER_DEPOSIT_DTL_PK").Direction = ParameterDirection.Output;
                        insCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                        var _with151 = objWK.MyDataAdapter;
                        _with151.InsertCommand = insCommand;
                        _with151.InsertCommand.Transaction = TRAN;
                        _with151.InsertCommand.ExecuteNonQuery();


                    }
                    else
                    {
                        var _with152 = updCommand;
                        _with152.Connection = objWK.MyConnection;
                        _with152.CommandType = CommandType.StoredProcedure;
                        _with152.CommandText = objWK.MyUserName + ".CONTAINER_DEPOSIT_PKG.CONTAINER_DEPOSIT_DTL_TBL_UPD";
                        _with152.Parameters.Clear();
                        var _with153 = _with152.Parameters;
                        _with153.Add("CONTAINER_DEPOSIT_DTL_PK_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["DEPOSIT_DTL_PK"]))).Direction = ParameterDirection.Input;
                        _with153.Add("CONTAINER_DEPOSIT_MST_FK_IN", DepositPK).Direction = ParameterDirection.Input;
                        _with153.Add("PAYMENT_MODE_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["MODE_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["MODE_PK"]))).Direction = ParameterDirection.Input;
                        _with153.Add("CHEQUE_NR_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_NR"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_NR"]))).Direction = ParameterDirection.Input;
                        if (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_DT"].ToString()))
                        {
                            _with153.Add("CHEQUE_DATE_IN", DBNull.Value).Direction = ParameterDirection.Input;
                        }
                        else
                        {
                            _with153.Add("CHEQUE_DATE_IN", Convert.ToDateTime(dsRcpt.Tables[0].Rows[RowCnt]["CHEQUE_DT"].ToString())).Direction = ParameterDirection.Input;
                        }
                        _with153.Add("REFERENCE_BANK_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["REF_BANK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["REF_BANK"]))).Direction = ParameterDirection.Input;
                        _with153.Add("CURRENCY_MST_FK_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["CUR_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["CUR_PK"]))).Direction = ParameterDirection.Input;
                        _with153.Add("AMOUNT_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["AMOUNT"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["AMOUNT"]))).Direction = ParameterDirection.Input;
                        _with153.Add("ROE_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["ROE"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["ROE"]))).Direction = ParameterDirection.Input;
                        _with153.Add("STATUS_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["STATUS_PK"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["STATUS_PK"]))).Direction = ParameterDirection.Input;
                        _with153.Add("REMARKS_IN", (string.IsNullOrEmpty(dsRcpt.Tables[0].Rows[RowCnt]["REMARKS"].ToString()) ? DBNull.Value : (dsRcpt.Tables[0].Rows[RowCnt]["REMARKS"]))).Direction = ParameterDirection.Input;
                        _with153.Add("LAST_MODIFIED_BY_FK_IN", M_LAST_MODIFIED_BY_FK).Direction = ParameterDirection.Input;
                        _with153.Add("CONFIG_MST_FK_IN", ConfigurationPK).Direction = ParameterDirection.Input;
                        _with153.Add("RETURN_VALUE", OracleDbType.Varchar2, 100, "RETURN_VALUE").Direction = ParameterDirection.Output;
                        updCommand.Parameters["RETURN_VALUE"].SourceVersion = DataRowVersion.Current;

                        var _with154 = objWK.MyDataAdapter;
                        _with154.UpdateCommand = updCommand;
                        _with154.UpdateCommand.Transaction = TRAN;
                        _with154.UpdateCommand.ExecuteNonQuery();
                    }
                }
                return 1;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
            }

            return 0;
        }
        #endregion

        #region "Save Deposit Amount in Container Table"
        public int SaveCntrDepositAmt(OracleTransaction TRAN, DataSet dsCntr, int JobPk, int DepositCurPK)
        {
            WorkFlow objWK = new WorkFlow();
            int RowCnt = 0;
            string strQry = null;
            objWK.MyConnection = TRAN.Connection;
            OracleCommand insCommand = new OracleCommand();
            try
            {
                strQry = "UPDATE JOB_TRN_CONT BCT SET BCT.DEPOSIT_AMT=NULL ";
                strQry += "WHERE BCT.JOB_CARD_TRN_FK=" + JobPk;
                var _with155 = insCommand;
                _with155.Connection = objWK.MyConnection;
                _with155.Transaction = TRAN;
                _with155.CommandType = CommandType.Text;
                _with155.CommandText = strQry;
                _with155.ExecuteNonQuery();
                if ((dsCntr != null))
                {
                    for (RowCnt = 0; RowCnt <= dsCntr.Tables[0].Rows.Count - 1; RowCnt++)
                    {
                        if (!string.IsNullOrEmpty(dsCntr.Tables[0].Rows[RowCnt]["CONTAINER_NUMBER"].ToString()))
                        {
                            if (Conversion.Val(dsCntr.Tables[0].Rows[RowCnt]["DEPOSIT_AMT"]) > 0)
                            {
                                strQry = "UPDATE JOB_TRN_CONT BCT SET BCT.DEPOSIT_AMT=" + Conversion.Val(dsCntr.Tables[0].Rows[RowCnt]["DEPOSIT_AMT"]);
                                strQry += "WHERE BCT.JOB_CARD_TRN_FK=" + JobPk + " AND BCT.CONTAINER_NUMBER='" + dsCntr.Tables[0].Rows[RowCnt]["CONTAINER_NUMBER"] + "'";

                                var _with156 = insCommand;
                                _with156.Connection = objWK.MyConnection;
                                _with156.Transaction = TRAN;
                                _with156.CommandType = CommandType.Text;
                                _with156.CommandText = strQry;
                                _with156.ExecuteNonQuery();
                            }
                        }
                    }
                }
                return 1;
            }
            catch (OracleException oraexp)
            {
                arrMessage.Add(oraexp.Message);
            }
            catch (Exception ex)
            {
                arrMessage.Add(ex.Message);
            }
            return 0;
        }
        #endregion
        #region "Fetch Receipt Dtls for Container Deposit Form"
        public DataSet FetchDepositTotal(int BLPK)
        {
            WorkFlow objWK = new WorkFlow();
            DataSet objDS = null;
            var _with157 = objWF.MyCommand.Parameters;
            _with157.Add("BL_PK_IN", BLPK).Direction = ParameterDirection.Input;
            _with157.Add("CNTR_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
            objDS = objWF.GetDataSet("CONTAINER_DEPOSIT_PKG", "FETCH_DEPOSIT");
            return objDS;
        }
        #endregion

        #region "Fetch Header Dtls for Container Deposit Form"
        public DataSet FetchCntrDepositHdr(int JobPk)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet ds = new DataSet();
            try
            {
                objWF.OpenConnection();
                objWF.MyDataAdapter = new OracleDataAdapter();
                var _with158 = objWF.MyDataAdapter;
                _with158.SelectCommand = new OracleCommand();
                _with158.SelectCommand.Connection = objWF.MyConnection;
                _with158.SelectCommand.CommandText = objWF.MyUserName + ".CONTAINER_DEPOSIT_PKG.FETCH_CNTR_HEADER";
                _with158.SelectCommand.CommandType = CommandType.StoredProcedure;
                _with158.SelectCommand.Parameters.Add("JOB_PK_IN", JobPk).Direction = ParameterDirection.Input;
                _with158.SelectCommand.Parameters.Add("HDR_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with158.Fill(ds);
                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }
        #endregion

        #region "Fetch Cntr Dtls for Container Deposit Form"
        public DataSet FetchCntrGrid(int JobPk)
        {
            WorkFlow objWF = new WorkFlow();
            DataSet ds = new DataSet();
            try
            {
                objWF.OpenConnection();
                objWF.MyDataAdapter = new OracleDataAdapter();
                var _with159 = objWF.MyDataAdapter;
                _with159.SelectCommand = new OracleCommand();
                _with159.SelectCommand.Connection = objWF.MyConnection;
                _with159.SelectCommand.CommandText = objWF.MyUserName + ".CONTAINER_DEPOSIT_PKG.FETCH_CNTR_GRID";
                _with159.SelectCommand.CommandType = CommandType.StoredProcedure;
                _with159.SelectCommand.Parameters.Add("JOB_PK_IN", JobPk).Direction = ParameterDirection.Input;
                _with159.SelectCommand.Parameters.Add("HDR_CUR", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                _with159.Fill(ds);
                return ds;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objWF.CloseConnection();
            }
        }
        #endregion


        #region "Shipping Instruction uplaod task"
        #region "Consingee Validation"
        public DataSet FetchConsingeeDS(string CONSNAME)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();
            strSQL.Append( " SELECT CMT.CUSTOMER_MST_PK,CMT.CUSTOMER_ID,CMT.CUSTOMER_NAME ");
            strSQL.Append( " FROM CUSTOMER_MST_TBL CMT ");
            strSQL.Append( " WHERE CMT.ACTIVE_FLAG = 1 ");
            strSQL.Append( " AND CMT.BUSINESS_TYPE IN (2, 3)");
            strSQL.Append( " AND CMT.CUSTOMER_NAME = '" + CONSNAME + "'  ");
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Shipping term Validation"
        public DataSet FillShippingTermsCombo(string TermsName)
        {
            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT 0 SHIPPING_TERMS_MST_PK, 'SELECT' INCO_CODE FROM SHIPPING_TERMS_MST_TBL S WHERE S.ACTIVE_FLAG = 1 UNION ");
            strSQL.Append(" SELECT SHIPPING_TERMS_MST_PK, INCO_CODE FROM (SELECT ROWNUM SLNR, Q.* FROM (SELECT S.SHIPPING_TERMS_MST_PK, ");
            strSQL.Append(" S.INCO_CODE FROM SHIPPING_TERMS_MST_TBL S WHERE S.ACTIVE_FLAG = 1 ORDER BY INCO_CODE) Q WHERE Q.INCO_CODE = '" + TermsName + "') ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }
        }
        #endregion

        #region "Shipping Move Code Valiadtion"
        public DataSet FillShippingMoveCodeCombo(string MoveCode)
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append(" SELECT 0 CARGO_MOVE_PK, 'SELECT' CARGO_MOVE_CODE FROM CARGO_MOVE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 UNION ");
            strSQL.Append(" SELECT CARGO_MOVE_PK, CARGO_MOVE_CODE FROM (SELECT ROWNUM SLNR, Q.* FROM (SELECT C.CARGO_MOVE_PK, ");
            strSQL.Append(" C.CARGO_MOVE_CODE FROM CARGO_MOVE_MST_TBL C WHERE C.ACTIVE_FLAG = 1 ORDER BY CARGO_MOVE_CODE) Q WHERE Q.CARGO_MOVE_CODE = '" + MoveCode + "') ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "ConatinerType"
        public DataSet FillContType(string ContType)
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append("SELECT C.CONTAINER_TYPE_MST_PK,C.ISO_NUMBER FROM CONTAINER_TYPE_MST_TBL C WHERE C.CONTAINER_TYPE_MST_ID = '" + ContType + "'  ");
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "ConatinerType"
        public DataSet FillCommodity(string CommID, string COMMGRROUPFK = "")
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append("SELECT C.COMMODITY_MST_PK,C.COMMODITY_NAME,C.UN_NO,C.IMDG_CLASS_CODE FROM COMMODITY_MST_TBL C WHERE C.COMMODITY_GROUP_FK = '" + COMMGRROUPFK + "' and C.COMMODITY_ID  = '" + CommID + "'  ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Commodity Group"
        public DataSet FillCommodityGroup(string CommID)
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append("SELECT C.COMMODITY_GROUP_PK FROM COMMODITY_GROUP_MST_TBL C WHERE  UPPER(C.COMMODITY_GROUP_CODE)   = '" + CommID + "'  ");
            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region "Commodity Group"
        public DataSet FillCommodityGrouppk(string CommID)
        {

            StringBuilder strSQL = new StringBuilder();
            WorkFlow objWF = new WorkFlow();

            strSQL.Append("SELECT COUNT(*) FROM COMMODITY_GROUP_MST_TBL C WHERE UPPER(C.COMMODITY_GROUP_CODE)   = '" + CommID + "'  ");

            try
            {
                return objWF.GetDataSet(strSQL.ToString());
            }
            catch (OracleException sqlExp)
            {
                ErrorMessage = sqlExp.Message;
                throw sqlExp;
            }
            catch (Exception exp)
            {
                ErrorMessage = exp.Message;
                throw exp;
            }

        }
        #endregion

        #region " FillPackType "
        public DataSet FillPackTypeValidation(string PackDesc)
        {
            StringBuilder strQuery = new StringBuilder();

            strQuery.Append("SELECT -1 PACK_TYPE_MST_PK, ");
            strQuery.Append(" ' ' PACK_TYPE_ID, ");
            strQuery.Append(" ' ' PACK_TYPE_DESC  ");
            strQuery.Append("FROM DUAL UNION ");

            strQuery.Append("SELECT P.PACK_TYPE_MST_PK, ");
            strQuery.Append("P.PACK_TYPE_ID, ");
            strQuery.Append("P.PACK_TYPE_DESC  ");
            strQuery.Append("FROM PACK_TYPE_MST_TBL P ");
            strQuery.Append("WHERE P.ACTIVE_FLAG =1 ");
            strQuery.Append(" AND P.PACK_TYPE_DESC='" + PackDesc + "'");
            strQuery.Append("ORDER BY PACK_TYPE_MST_PK ");
            try
            {
                return (new WorkFlow()).GetDataSet(strQuery.ToString());
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region "Conatiner Validation"
        private bool asciiChk(string str, int pos)
        {
            bool functionReturnValue = false;

            if ((Strings.Asc(str) >= 65) & (Strings.Asc(str) <= 90))
            {
                functionReturnValue = true;
                alpchk = alpchk + MatrixA[Strings.Asc(str), pos];
                //MsgBox MatrixA(Asc(str), pos)
            }
            else
            {
                functionReturnValue = false;

            }
            return functionReturnValue;
        }
        private void arrFilln()
        {
            int n = 0;
            for (n = 5; n <= 10; n++)
            {
                MatrixN[48, n] = 0;
            }
            MatrixN[49, 5] = 16;
            MatrixN[49, 6] = 32;
            MatrixN[49, 7] = 64;
            MatrixN[49, 8] = 128;
            MatrixN[49, 9] = 256;
            MatrixN[49, 10] = 512;

            MatrixN[50, 5] = 32;
            MatrixN[50, 6] = 64;
            MatrixN[50, 7] = 128;
            MatrixN[50, 8] = 256;
            MatrixN[50, 9] = 512;
            MatrixN[50, 10] = 1024;

            MatrixN[51, 5] = 48;
            MatrixN[51, 6] = 96;
            MatrixN[51, 7] = 192;
            MatrixN[51, 8] = 384;
            MatrixN[51, 9] = 768;
            MatrixN[51, 10] = 1536;

            MatrixN[52, 5] = 64;
            MatrixN[52, 6] = 128;
            MatrixN[52, 7] = 256;
            MatrixN[52, 8] = 512;
            MatrixN[52, 9] = 1024;
            MatrixN[52, 10] = 2048;

            MatrixN[53, 5] = 80;
            MatrixN[53, 6] = 160;
            MatrixN[53, 7] = 320;
            MatrixN[53, 8] = 640;
            MatrixN[53, 9] = 1280;
            MatrixN[53, 10] = 2560;

            MatrixN[54, 5] = 96;
            MatrixN[54, 6] = 192;
            MatrixN[54, 7] = 384;
            MatrixN[54, 8] = 768;
            MatrixN[54, 9] = 1536;
            MatrixN[54, 10] = 3072;

            MatrixN[55, 5] = 112;
            MatrixN[55, 6] = 224;
            MatrixN[55, 7] = 448;
            MatrixN[55, 8] = 896;
            MatrixN[55, 9] = 1792;
            MatrixN[55, 10] = 3584;

            MatrixN[56, 5] = 128;
            MatrixN[56, 6] = 256;
            MatrixN[56, 7] = 512;
            MatrixN[56, 8] = 1024;
            MatrixN[56, 9] = 2048;
            MatrixN[56, 10] = 4096;

            MatrixN[57, 5] = 144;
            MatrixN[57, 6] = 288;
            MatrixN[57, 7] = 576;
            MatrixN[57, 8] = 1152;
            MatrixN[57, 9] = 2304;
            MatrixN[57, 10] = 4608;


        }
        private void arrFill()
        {
            MatrixA[65, 1] = 10;
            MatrixA[65, 2] = 20;
            MatrixA[65, 3] = 40;
            MatrixA[65, 4] = 80;

            MatrixA[66, 1] = 12;
            MatrixA[66, 2] = 24;
            MatrixA[66, 3] = 48;
            MatrixA[66, 4] = 96;

            MatrixA[67, 1] = 13;
            MatrixA[67, 2] = 26;
            MatrixA[67, 3] = 52;
            MatrixA[67, 4] = 104;

            MatrixA[68, 1] = 14;
            MatrixA[68, 2] = 28;
            MatrixA[68, 3] = 56;
            MatrixA[68, 4] = 112;

            MatrixA[69, 1] = 15;
            MatrixA[69, 2] = 30;
            MatrixA[69, 3] = 60;
            MatrixA[69, 4] = 120;

            MatrixA[70, 1] = 16;
            MatrixA[70, 2] = 32;
            MatrixA[70, 3] = 64;
            MatrixA[70, 4] = 128;

            MatrixA[71, 1] = 17;
            MatrixA[71, 2] = 34;
            MatrixA[71, 3] = 68;
            MatrixA[71, 4] = 136;

            MatrixA[72, 1] = 18;
            MatrixA[72, 2] = 36;
            MatrixA[72, 3] = 72;
            MatrixA[72, 4] = 144;

            MatrixA[73, 1] = 19;
            MatrixA[73, 2] = 38;
            MatrixA[73, 3] = 76;
            MatrixA[73, 4] = 152;

            MatrixA[74, 1] = 20;
            MatrixA[74, 2] = 40;
            MatrixA[74, 3] = 80;
            MatrixA[74, 4] = 160;

            MatrixA[75, 1] = 21;
            MatrixA[75, 2] = 42;
            MatrixA[75, 3] = 84;
            MatrixA[75, 4] = 168;

            MatrixA[76, 1] = 23;
            MatrixA[76, 2] = 46;
            MatrixA[76, 3] = 92;
            MatrixA[76, 4] = 184;

            MatrixA[77, 1] = 24;
            MatrixA[77, 2] = 48;
            MatrixA[77, 3] = 96;
            MatrixA[77, 4] = 192;

            MatrixA[78, 1] = 25;
            MatrixA[78, 2] = 50;
            MatrixA[78, 3] = 100;
            MatrixA[78, 4] = 200;

            MatrixA[79, 1] = 26;
            MatrixA[79, 2] = 52;
            MatrixA[79, 3] = 104;
            MatrixA[79, 4] = 208;

            MatrixA[80, 1] = 27;
            MatrixA[80, 2] = 54;
            MatrixA[80, 3] = 108;
            MatrixA[80, 4] = 216;

            MatrixA[81, 1] = 28;
            MatrixA[81, 2] = 56;
            MatrixA[81, 3] = 112;
            MatrixA[81, 4] = 224;

            MatrixA[82, 1] = 29;
            MatrixA[82, 2] = 58;
            MatrixA[82, 3] = 116;
            MatrixA[82, 4] = 232;

            MatrixA[83, 1] = 30;
            MatrixA[83, 2] = 60;
            MatrixA[83, 3] = 120;
            MatrixA[83, 4] = 240;

            MatrixA[84, 1] = 31;
            MatrixA[84, 2] = 62;
            MatrixA[84, 3] = 124;
            MatrixA[84, 4] = 248;

            MatrixA[85, 1] = 32;
            MatrixA[85, 2] = 64;
            MatrixA[85, 3] = 128;
            MatrixA[85, 4] = 256;

            MatrixA[86, 1] = 34;
            MatrixA[86, 2] = 68;
            MatrixA[86, 3] = 136;
            MatrixA[86, 4] = 272;

            MatrixA[87, 1] = 35;
            MatrixA[87, 2] = 70;
            MatrixA[87, 3] = 140;
            MatrixA[87, 4] = 280;

            MatrixA[88, 1] = 36;
            MatrixA[88, 2] = 72;
            MatrixA[88, 3] = 144;
            MatrixA[88, 4] = 288;

            MatrixA[89, 1] = 37;
            MatrixA[89, 2] = 74;
            MatrixA[89, 3] = 148;
            MatrixA[89, 4] = 296;

            MatrixA[90, 1] = 38;
            MatrixA[90, 2] = 76;
            MatrixA[90, 3] = 152;
            MatrixA[90, 4] = 304;

        }
        public string chkValidContainerlast(string containercode)
        {
            try
            {
                arrFill();
                arrFilln();
                int i = 0;
                int finchk = 0;
                bool chkValidContainer10 = false;
                string contNo = null;
                string newcontNo = null;
                alpchk = 0;
                chkValidContainer10 = true;
                if (Strings.Len(Strings.Trim(containercode)) == 11)
                {
                    for (i = 1; i <= 4; i++)
                    {
                        if (asciiChk(Strings.Mid(containercode, i, 1), i) == false)
                        {
                            chkValidContainer10 = false;
                            alpchk = 0;
                            break; // TODO: might not be correct. Was : Exit For
                        }
                    }
                    if (chkValidContainer10)
                    {
                        for (i = 5; i <= 11; i++)
                        {
                            if (i < 11)
                            {
                                alpchk = alpchk + MatrixN[Strings.Asc(Strings.Mid(containercode, i, 1)), i];
                            }
                            if (!((Strings.Asc(Strings.Mid(containercode, i, 1)) >= 48) & (Strings.Asc(Strings.Mid(containercode, i, 1)) <= 57)))
                            {
                                chkValidContainer10 = false;
                                alpchk = 0;
                                break; // TODO: might not be correct. Was : Exit For
                            }
                        }
                        //If (chkValidContainer10 = True) Then
                        //    If alpchk Mod 11 = 10 Then
                        //        finchk = 0
                        //    Else
                        //        finchk = alpchk Mod 11
                        //    End If
                        //    If finchk = Val(Right(containercode, 1)) Then
                        //        chkValidContainer10 = True
                        //    Else
                        //        chkValidContainer10 = False
                        //    End If
                        //End If
                    }
                }
                else
                {
                    chkValidContainer10 = false;
                }
                //If chkValidContainer10 = False Then
                //    If finchk = Val(Right(containercode, 1)) Then
                //        contNo = containercode
                //    Else
                //        newcontNo = Left(containercode, 10)
                //        newcontNo = newcontNo & finchk
                //        contNo = newcontNo
                //    End If
                //Else
                //    contNo = containercode

                //End If
                return Convert.ToString(chkValidContainer10);
            }
            catch (Exception ex)
            {
                // chkValidContainer10 = False
            }
            return "";
        }
        #endregion

        #region "Update Shipper/Consignee/Notify"
        public void UpdateAddress(string ShipperAddress, string ConsigneeAddress, string NotifyAddress, string JobPk)
        {
            try
            {
                OracleCommand objCommand = new OracleCommand();
                OracleTransaction TRAN = null;
                int nRecAfct = 0;
                string strSQL = null;
                string strSQL1 = null;
                Int16 upd = default(Int16);
                if (string.IsNullOrEmpty(JobPk) | string.IsNullOrEmpty(JobPk))
                {
                    return;
                }
                ObjWkAdd.OpenConnection();
                TRAN = ObjWkAdd.MyConnection.BeginTransaction();
                var _with160 = objCommand;
                _with160.Connection = ObjWkAdd.MyConnection;
                _with160.CommandType = CommandType.Text;
                _with160.CommandText = strSQL;
                _with160.Transaction = TRAN;
                //nRecAfct = .ExecuteNonQuery() 
                strSQL1 = " UPDATE JOB_CARD_TRN J SET J.SHIPPER_ADDRESS = '" + ShipperAddress + "',J.CONSIGNEE_ADDRESS='" + ConsigneeAddress + "',J.NOTIFY_ADDRESS='" + NotifyAddress + "' ";
                strSQL1 += " WHERE J.JOB_CARD_TRN_PK = '" + JobPk + "'";
                _with160.CommandText = strSQL1;
                upd = Convert.ToInt16(_with160.ExecuteNonQuery());
                if (upd > 0)
                {
                    TRAN.Commit();
                }
                else
                {
                    TRAN.Rollback();
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ObjWkAdd.MyConnection.Close();
            }
        }
        #endregion

        #region "Reefer Max and Min Temp Updation"
        public void UpdateMaxMin(string MINTEMP, string MAXTEMP, string JobPk)
        {
            try
            {
                OracleCommand objCommand = new OracleCommand();
                OracleTransaction TRAN = null;
                int nRecAfct = 0;
                string strSQL = null;
                string strSQL1 = null;
                Int16 upd = default(Int16);
                if (string.IsNullOrEmpty(JobPk) | string.IsNullOrEmpty(JobPk))
                {
                    return;
                }
                ObjWkAdd.OpenConnection();
                TRAN = ObjWkAdd.MyConnection.BeginTransaction();
                var _with161 = objCommand;
                _with161.Connection = ObjWkAdd.MyConnection;
                _with161.CommandType = CommandType.Text;
                _with161.CommandText = strSQL;
                _with161.Transaction = TRAN;
                //nRecAfct = .ExecuteNonQuery() 
                strSQL1 = "   UPDATE JOB_TRN_SPL_REQ JR SET JR.MIN_TEMP = '" + MINTEMP + "', JR.MAX_TEMP ='" + MAXTEMP + "'";
                strSQL1 += "  WHERE JR.JOB_TRN_SPL_PK IN  (SELECT JR.JOB_TRN_SPL_PK FROM JOB_CARD_TRN J, JOB_TRN_CONT JC, JOB_TRN_SPL_REQ JR WHERE J.JOB_CARD_TRN_PK = JC.JOB_CARD_TRN_FK AND JC.JOB_TRN_CONT_PK = JR.JOB_TRN_CONT_FK AND J.JOB_CARD_TRN_PK = '" + JobPk + "') ";
                _with161.CommandText = strSQL1;
                upd = Convert.ToInt16(_with161.ExecuteNonQuery());
                if (upd > 0)
                {
                    TRAN.Commit();
                }
                else
                {
                    TRAN.Rollback();
                }
            }
            catch (OracleException Oraexp)
            {
                throw Oraexp;
                //'Exception Handling Added by Gangadhar on 23/09/2011, PTS ID: SEP-01
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ObjWkAdd.MyConnection.Close();
            }
        }
        #endregion

        #region " FillPackType "
        public int ContainerTypeCount(string JobPk, string ContTypeID)
        {
            StringBuilder strQuery = new StringBuilder();
            //J.CONTAINER_TYPE_MST_FK = '" & ContPk & "' AND 
            strQuery.Append(" SELECT COUNT(C.CONTAINER_TYPE_MST_ID)");
            strQuery.Append(" FROM JOB_TRN_CONT J,CONTAINER_TYPE_MST_TBL C ");
            strQuery.Append(" WHERE j.job_card_trn_fk= '" + JobPk + "' AND C.CONTAINER_TYPE_MST_ID = '" + ContTypeID + "' ");
            strQuery.Append(" AND J.CONTAINER_TYPE_MST_FK = C.CONTAINER_TYPE_MST_PK  GROUP BY C.CONTAINER_TYPE_MST_ID,J.CONTAINER_TYPE_MST_FK ");
            try
            {
                return Convert.ToInt32(objWF.ExecuteScaler(strQuery.ToString()));
            }
            catch (OracleException OraExp)
            {
                throw OraExp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion
    }
}